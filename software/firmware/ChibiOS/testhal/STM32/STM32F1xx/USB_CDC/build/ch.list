
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000239 	.word	0x08000239
 8000008:	0800023b 	.word	0x0800023b
 800000c:	0800023b 	.word	0x0800023b
 8000010:	0800023b 	.word	0x0800023b
 8000014:	0800023b 	.word	0x0800023b
 8000018:	0800023b 	.word	0x0800023b
 800001c:	0800023b 	.word	0x0800023b
 8000020:	0800023b 	.word	0x0800023b
 8000024:	0800023b 	.word	0x0800023b
 8000028:	0800023b 	.word	0x0800023b
 800002c:	08004db1 	.word	0x08004db1
 8000030:	0800023b 	.word	0x0800023b
 8000034:	0800023b 	.word	0x0800023b
 8000038:	0800023b 	.word	0x0800023b
 800003c:	0800023b 	.word	0x0800023b
 8000040:	0800023b 	.word	0x0800023b
 8000044:	0800023b 	.word	0x0800023b
 8000048:	0800023b 	.word	0x0800023b
 800004c:	0800023b 	.word	0x0800023b
 8000050:	0800023b 	.word	0x0800023b
 8000054:	0800023b 	.word	0x0800023b
 8000058:	0800023b 	.word	0x0800023b
 800005c:	0800023b 	.word	0x0800023b
 8000060:	0800023b 	.word	0x0800023b
 8000064:	0800023b 	.word	0x0800023b
 8000068:	0800023b 	.word	0x0800023b
 800006c:	0800023b 	.word	0x0800023b
 8000070:	0800023b 	.word	0x0800023b
 8000074:	0800023b 	.word	0x0800023b
 8000078:	0800023b 	.word	0x0800023b
 800007c:	0800023b 	.word	0x0800023b
 8000080:	0800023b 	.word	0x0800023b
 8000084:	0800023b 	.word	0x0800023b
 8000088:	0800023b 	.word	0x0800023b
 800008c:	0800023b 	.word	0x0800023b
 8000090:	080013e1 	.word	0x080013e1
 8000094:	0800023b 	.word	0x0800023b
 8000098:	0800023b 	.word	0x0800023b
 800009c:	0800023b 	.word	0x0800023b
 80000a0:	0800023b 	.word	0x0800023b
 80000a4:	0800023b 	.word	0x0800023b
 80000a8:	0800023b 	.word	0x0800023b
 80000ac:	0800023b 	.word	0x0800023b
 80000b0:	080010c1 	.word	0x080010c1
 80000b4:	0800023b 	.word	0x0800023b
 80000b8:	0800023b 	.word	0x0800023b
 80000bc:	0800023b 	.word	0x0800023b
 80000c0:	0800023b 	.word	0x0800023b
 80000c4:	0800023b 	.word	0x0800023b
 80000c8:	0800023b 	.word	0x0800023b
 80000cc:	0800023b 	.word	0x0800023b
 80000d0:	0800023b 	.word	0x0800023b
 80000d4:	0800023b 	.word	0x0800023b
 80000d8:	0800023b 	.word	0x0800023b
 80000dc:	0800023b 	.word	0x0800023b
 80000e0:	0800023b 	.word	0x0800023b
 80000e4:	0800023b 	.word	0x0800023b
 80000e8:	0800023b 	.word	0x0800023b
 80000ec:	0800023b 	.word	0x0800023b
 80000f0:	0800023b 	.word	0x0800023b
 80000f4:	0800023b 	.word	0x0800023b
 80000f8:	0800023b 	.word	0x0800023b
 80000fc:	0800023b 	.word	0x0800023b
 8000100:	0800023b 	.word	0x0800023b
 8000104:	0800023b 	.word	0x0800023b
 8000108:	0800023b 	.word	0x0800023b
 800010c:	0800023b 	.word	0x0800023b
 8000110:	0800023b 	.word	0x0800023b
 8000114:	0800023b 	.word	0x0800023b
 8000118:	0800023b 	.word	0x0800023b
 800011c:	0800023b 	.word	0x0800023b
 8000120:	0800023b 	.word	0x0800023b
 8000124:	0800023b 	.word	0x0800023b
 8000128:	0800023b 	.word	0x0800023b
 800012c:	0800023b 	.word	0x0800023b
 8000130:	0800023b 	.word	0x0800023b
 8000134:	0800023b 	.word	0x0800023b
 8000138:	0800023b 	.word	0x0800023b
 800013c:	0800023b 	.word	0x0800023b
 8000140:	0800023b 	.word	0x0800023b
 8000144:	0800023b 	.word	0x0800023b
 8000148:	0800023b 	.word	0x0800023b
 800014c:	0800023b 	.word	0x0800023b
 8000150:	0800023b 	.word	0x0800023b
 8000154:	0800023b 	.word	0x0800023b
 8000158:	0800023b 	.word	0x0800023b
 800015c:	0800023b 	.word	0x0800023b

Disassembly of section .text:

08000160 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 8000160:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000162:	4827      	ldr	r0, [pc, #156]	; (8000200 <endfiniloop+0x4>)
                msr     MSP, r0
 8000164:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000168:	4826      	ldr	r0, [pc, #152]	; (8000204 <endfiniloop+0x8>)
                msr     PSP, r0
 800016a:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 800016e:	4826      	ldr	r0, [pc, #152]	; (8000208 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 8000170:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 8000174:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 8000178:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 800017a:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 800017c:	f380 8814 	msr	CONTROL, r0
                isb
 8000180:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 8000184:	f000 fa64 	bl	8000650 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 8000188:	f000 fab2 	bl	80006f0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 800018c:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000190:	491e      	ldr	r1, [pc, #120]	; (800020c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 8000192:	4a1b      	ldr	r2, [pc, #108]	; (8000200 <endfiniloop+0x4>)

08000194 <msloop>:
msloop:
                cmp     r1, r2
 8000194:	4291      	cmp	r1, r2
                itt     lo
 8000196:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000198:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 800019c:	e7fa      	bcc.n	8000194 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 800019e:	491c      	ldr	r1, [pc, #112]	; (8000210 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001a0:	4a18      	ldr	r2, [pc, #96]	; (8000204 <endfiniloop+0x8>)

080001a2 <psloop>:
psloop:
                cmp     r1, r2
 80001a2:	4291      	cmp	r1, r2
                itt     lo
 80001a4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001a6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001aa:	e7fa      	bcc.n	80001a2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80001ac:	4919      	ldr	r1, [pc, #100]	; (8000214 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80001ae:	4a1a      	ldr	r2, [pc, #104]	; (8000218 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80001b0:	4b1a      	ldr	r3, [pc, #104]	; (800021c <endfiniloop+0x20>)

080001b2 <dloop>:
dloop:
                cmp     r2, r3
 80001b2:	429a      	cmp	r2, r3
                ittt    lo
 80001b4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001b6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001ba:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001be:	e7f8      	bcc.n	80001b2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 80001c0:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 80001c2:	4917      	ldr	r1, [pc, #92]	; (8000220 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 80001c4:	4a17      	ldr	r2, [pc, #92]	; (8000224 <endfiniloop+0x28>)

080001c6 <bloop>:
bloop:
                cmp     r1, r2
 80001c6:	4291      	cmp	r1, r2
                itt     lo
 80001c8:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001ca:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 80001ce:	e7fa      	bcc.n	80001c6 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 80001d0:	f000 fa56 	bl	8000680 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 80001d4:	f000 fa44 	bl	8000660 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 80001d8:	4c13      	ldr	r4, [pc, #76]	; (8000228 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 80001da:	4d14      	ldr	r5, [pc, #80]	; (800022c <endfiniloop+0x30>)

080001dc <initloop>:
initloop:
                cmp     r4, r5
 80001dc:	42ac      	cmp	r4, r5
                bge     endinitloop
 80001de:	da03      	bge.n	80001e8 <endinitloop>
                ldr     r1, [r4], #4
 80001e0:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001e4:	4788      	blx	r1
                b       initloop
 80001e6:	e7f9      	b.n	80001dc <initloop>

080001e8 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 80001e8:	f00d fb8a 	bl	800d900 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 80001ec:	4c10      	ldr	r4, [pc, #64]	; (8000230 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 80001ee:	4d11      	ldr	r5, [pc, #68]	; (8000234 <endfiniloop+0x38>)

080001f0 <finiloop>:
finiloop:
                cmp     r4, r5
 80001f0:	42ac      	cmp	r4, r5
                bge     endfiniloop
 80001f2:	da03      	bge.n	80001fc <endfiniloop>
                ldr     r1, [r4], #4
 80001f4:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 80001f8:	4788      	blx	r1
                b       finiloop
 80001fa:	e7f9      	b.n	80001f0 <finiloop>

080001fc <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 80001fc:	f000 ba38 	b.w	8000670 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000200:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000204:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000208:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800020c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000210:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000214:	08012430 	.word	0x08012430
                ldr     r2, =__data_base__
 8000218:	20000800 	.word	0x20000800
                ldr     r3, =__data_end__
 800021c:	20000ce8 	.word	0x20000ce8
                ldr     r1, =__bss_base__
 8000220:	20000ce8 	.word	0x20000ce8
                ldr     r2, =__bss_end__
 8000224:	20002c98 	.word	0x20002c98
                ldr     r4, =__init_array_base__
 8000228:	08000160 	.word	0x08000160
                ldr     r5, =__init_array_end__
 800022c:	08000160 	.word	0x08000160
                ldr     r4, =__fini_array_base__
 8000230:	08000160 	.word	0x08000160
                ldr     r5, =__fini_array_end__
 8000234:	08000160 	.word	0x08000160

08000238 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000238:	e792      	b.n	8000160 <_crt0_entry>

0800023a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800023a:	f000 f800 	bl	800023e <_unhandled_exception>

0800023e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800023e:	e7fe      	b.n	800023e <_unhandled_exception>

08000240 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000244:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000248:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800024a:	469d      	mov	sp, r3

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800024c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000250 <_port_thread_start>:
_port_thread_start:
#if CH_DBG_ENABLE_STACK_CHECK && PORT_ENABLE_GUARD_PAGES
                bl      _port_set_region
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000250:	f000 faf6 	bl	8000840 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000254:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000256:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800025a:	4628      	mov	r0, r5
                blx     r4
 800025c:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800025e:	2000      	movs	r0, #0
                bl      chThdExit
 8000260:	f002 feae 	bl	8002fc0 <chThdExit>

08000264 <_zombies>:
_zombies:       b       _zombies
 8000264:	e7fe      	b.n	8000264 <_zombies>

08000266 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 8000266:	f000 fadb 	bl	8000820 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 800026a:	f002 fcb9 	bl	8002be0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 800026e:	f000 fae7 	bl	8000840 <_dbg_check_unlock>

08000272 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000272:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000274:	e7fe      	b.n	8000274 <_port_exit_from_isr+0x2>

08000276 <strcmp>:
	.syntax unified
def_fn strcmp
	.cfi_sections .debug_frame
	.cfi_startproc
1:
	ldrb	r2, [r0], #1
 8000276:	f810 2b01 	ldrb.w	r2, [r0], #1
	ldrb	r3, [r1], #1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
	cmp	r2, #1
 800027e:	2a01      	cmp	r2, #1
	it	cs
 8000280:	bf28      	it	cs
	cmpcs	r2, r3
 8000282:	429a      	cmpcs	r2, r3
	beq	1b
 8000284:	d0f7      	beq.n	8000276 <strcmp>
2:
	subs	r0, r2, r3
 8000286:	1ad0      	subs	r0, r2, r3
	bx	lr
 8000288:	4770      	bx	lr
 800028a:	0000      	movs	r0, r0
 800028c:	0000      	movs	r0, r0
	...

08000290 <sduRequestsHook>:
 * @retval true         Message handled internally.
 * @retval false        Message not handled.
 */
bool sduRequestsHook(USBDriver *usbp) {

  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000290:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
 8000294:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000298:	2a20      	cmp	r2, #32
 800029a:	d001      	beq.n	80002a0 <sduRequestsHook+0x10>
      return true;
    default:
      return false;
    }
  }
  return false;
 800029c:	2000      	movs	r0, #0
}
 800029e:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80002a0:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
 80002a4:	4603      	mov	r3, r0
 80002a6:	2a21      	cmp	r2, #33	; 0x21
 80002a8:	d80b      	bhi.n	80002c2 <sduRequestsHook+0x32>
 80002aa:	2a1f      	cmp	r2, #31
 80002ac:	d9f6      	bls.n	800029c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002ae:	2107      	movs	r1, #7
 80002b0:	2200      	movs	r2, #0
bool sduRequestsHook(USBDriver *usbp) {
 80002b2:	b410      	push	{r4}
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002b4:	4c07      	ldr	r4, [pc, #28]	; (80002d4 <sduRequestsHook+0x44>)
      return true;
 80002b6:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 80002b8:	e9c3 411a 	strd	r4, r1, [r3, #104]	; 0x68
 80002bc:	671a      	str	r2, [r3, #112]	; 0x70
}
 80002be:	bc10      	pop	{r4}
 80002c0:	4770      	bx	lr
    switch (usbp->setup[1]) {
 80002c2:	2a22      	cmp	r2, #34	; 0x22
 80002c4:	d1ea      	bne.n	800029c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80002c6:	2200      	movs	r2, #0
      return true;
 80002c8:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80002ca:	e9c3 221a 	strd	r2, r2, [r3, #104]	; 0x68
 80002ce:	671a      	str	r2, [r3, #112]	; 0x70
      return true;
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	20000810 	.word	0x20000810
	...

080002e0 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
	...

080002f0 <set_address>:
 *
 * @param[in] usbp      pointer to the @p USBDriver object
 */
static void set_address(USBDriver *usbp) {

  usbp->address = usbp->setup[2];
 80002f0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
 *
 * @notapi
 */
void usb_lld_set_address(USBDriver *usbp) {

  STM32_USB->DADDR = (uint32_t)(usbp->address) | DADDR_EF;
 80002f4:	4a07      	ldr	r2, [pc, #28]	; (8000314 <set_address+0x24>)
 80002f6:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
 80002fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
static void set_address(USBDriver *usbp) {
 80002fe:	b510      	push	{r4, lr}
 8000300:	64d3      	str	r3, [r2, #76]	; 0x4c
  usb_lld_set_address(usbp);
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000302:	6843      	ldr	r3, [r0, #4]
static void set_address(USBDriver *usbp) {
 8000304:	4604      	mov	r4, r0
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	b10b      	cbz	r3, 800030e <set_address+0x1e>
 800030a:	2101      	movs	r1, #1
 800030c:	4798      	blx	r3
  usbp->state = USB_SELECTED;
 800030e:	2303      	movs	r3, #3
 8000310:	7023      	strb	r3, [r4, #0]
}
 8000312:	bd10      	pop	{r4, pc}
 8000314:	40005c00 	.word	0x40005c00
	...

08000320 <_idle_thread.lto_priv.0>:
__STATIC_FORCEINLINE void port_wait_for_interrupt(void) {

#if CORTEX_ENABLE_WFI_IDLE == TRUE
  __WFI();
#endif
}
 8000320:	e7fe      	b.n	8000320 <_idle_thread.lto_priv.0>
 8000322:	bf00      	nop
	...

08000330 <trace_next>:
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000330:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <trace_next+0x30>)
NOINLINE static void trace_next(void) {
 8000332:	b430      	push	{r4, r5}
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000334:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000338:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 800033a:	4c0a      	ldr	r4, [pc, #40]	; (8000364 <trace_next+0x34>)
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 800033c:	460a      	mov	r2, r1
 800033e:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8000340:	6808      	ldr	r0, [r1, #0]
 8000342:	6864      	ldr	r4, [r4, #4]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 8000344:	f503 6c04 	add.w	ip, r3, #2112	; 0x840
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000348:	f364 201f 	bfi	r0, r4, #8, #24
 800034c:	808d      	strh	r5, [r1, #4]
 800034e:	f842 0b10 	str.w	r0, [r2], #16
  if (++ch.dbg.trace_buffer.ptr >=
 8000352:	4562      	cmp	r2, ip
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000354:	bf28      	it	cs
 8000356:	f103 0240 	addcs.w	r2, r3, #64	; 0x40
 800035a:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 800035c:	bc30      	pop	{r4, r5}
 800035e:	4770      	bx	lr
 8000360:	20000d70 	.word	0x20000d70
 8000364:	e0001000 	.word	0xe0001000
	...

08000370 <__ch_delegate_fn0>:
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn0(va_list *argsp) {
  delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
 8000370:	6803      	ldr	r3, [r0, #0]
 8000372:	1d1a      	adds	r2, r3, #4
 8000374:	6002      	str	r2, [r0, #0]
  return fn0();
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4718      	bx	r3
 800037a:	bf00      	nop
 800037c:	0000      	movs	r0, r0
	...

08000380 <__ch_delegate_fn1>:
 * @brief   Veneer for functions with one parameter.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn1(va_list *argsp) {
 8000380:	4602      	mov	r2, r0
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 8000382:	6803      	ldr	r3, [r0, #0]
 8000384:	1d19      	adds	r1, r3, #4
 8000386:	6001      	str	r1, [r0, #0]
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  return fn1(p1);
 8000388:	6858      	ldr	r0, [r3, #4]
  delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
 800038a:	f853 1b08 	ldr.w	r1, [r3], #8
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 800038e:	6013      	str	r3, [r2, #0]
  return fn1(p1);
 8000390:	4708      	bx	r1
 8000392:	bf00      	nop
	...

080003a0 <__ch_delegate_fn2>:
 * @brief   Veneer for functions with two parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn2(va_list *argsp) {
 80003a0:	4603      	mov	r3, r0
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 80003a2:	6802      	ldr	r2, [r0, #0]
msg_t __ch_delegate_fn2(va_list *argsp) {
 80003a4:	b430      	push	{r4, r5}
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 80003a6:	1d11      	adds	r1, r2, #4
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 80003a8:	6850      	ldr	r0, [r2, #4]
  delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 80003aa:	6019      	str	r1, [r3, #0]
 80003ac:	6814      	ldr	r4, [r2, #0]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80003ae:	f102 050c 	add.w	r5, r2, #12
  return fn2(p1, p2);
 80003b2:	6891      	ldr	r1, [r2, #8]
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80003b4:	601d      	str	r5, [r3, #0]
  return fn2(p1, p2);
 80003b6:	4623      	mov	r3, r4
}
 80003b8:	bc30      	pop	{r4, r5}
  return fn2(p1, p2);
 80003ba:	4718      	bx	r3
 80003bc:	0000      	movs	r0, r0
	...

080003c0 <__ch_delegate_fn3>:
 * @brief   Veneer for functions with three parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn3(va_list *argsp) {
 80003c0:	4602      	mov	r2, r0
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80003c2:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn3(va_list *argsp) {
 80003c4:	b430      	push	{r4, r5}
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80003c6:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 80003ca:	1d1c      	adds	r4, r3, #4
 80003cc:	6014      	str	r4, [r2, #0]
 80003ce:	681c      	ldr	r4, [r3, #0]
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80003d0:	f103 0510 	add.w	r5, r3, #16
 80003d4:	6015      	str	r5, [r2, #0]
  return fn3(p1, p2, p3);
 80003d6:	68da      	ldr	r2, [r3, #12]
 80003d8:	4623      	mov	r3, r4
}
 80003da:	bc30      	pop	{r4, r5}
  return fn3(p1, p2, p3);
 80003dc:	4718      	bx	r3
 80003de:	bf00      	nop

080003e0 <__ch_delegate_fn4>:
 * @brief   Veneer for functions with four parameters.
 *
 * @param[in] argsp     the list of arguments
 * @return              The function return value.
 */
msg_t __ch_delegate_fn4(va_list *argsp) {
 80003e0:	4684      	mov	ip, r0
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80003e2:	6803      	ldr	r3, [r0, #0]
msg_t __ch_delegate_fn4(va_list *argsp) {
 80003e4:	b430      	push	{r4, r5}
  msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 80003e6:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80003ea:	1d1c      	adds	r4, r3, #4
  msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 80003ec:	68da      	ldr	r2, [r3, #12]
  delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 80003ee:	f8cc 4000 	str.w	r4, [ip]
 80003f2:	681c      	ldr	r4, [r3, #0]
  msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 80003f4:	f103 0514 	add.w	r5, r3, #20
 80003f8:	f8cc 5000 	str.w	r5, [ip]
  return fn4(p1, p2, p3, p4);
 80003fc:	691b      	ldr	r3, [r3, #16]
 80003fe:	46a4      	mov	ip, r4
}
 8000400:	bc30      	pop	{r4, r5}
  return fn4(p1, p2, p3, p4);
 8000402:	4760      	bx	ip
	...

08000410 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000410:	2320      	movs	r3, #32
 8000412:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000416:	4b0d      	ldr	r3, [pc, #52]	; (800044c <_port_irq_epilogue+0x3c>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800041e:	d102      	bne.n	8000426 <_port_irq_epilogue+0x16>
 8000420:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000424:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000426:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800042a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800042e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000430:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000432:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.pqueue);
 8000436:	4a06      	ldr	r2, [pc, #24]	; (8000450 <_port_irq_epilogue+0x40>)
 8000438:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->hdr.pqueue.prio;
 800043a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800043c:	6889      	ldr	r1, [r1, #8]
 800043e:	6892      	ldr	r2, [r2, #8]
 8000440:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000442:	bf8c      	ite	hi
 8000444:	4a03      	ldrhi	r2, [pc, #12]	; (8000454 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000446:	4a04      	ldrls	r2, [pc, #16]	; (8000458 <_port_irq_epilogue+0x48>)
 8000448:	619a      	str	r2, [r3, #24]
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00
 8000450:	20000d70 	.word	0x20000d70
 8000454:	08000267 	.word	0x08000267
 8000458:	08000272 	.word	0x08000272
 800045c:	00000000 	.word	0x00000000

08000460 <rt_test_003_001_execute>:

static void rt_test_003_001_execute(void) {

  /* [3.1.1] A System Tick Counter increment is expected, the test
     simply hangs if it does not happen.*/
  test_set_step(1);
 8000460:	2201      	movs	r2, #1
 8000462:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000466:	4b04      	ldr	r3, [pc, #16]	; (8000478 <rt_test_003_001_execute+0x18>)
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 800046c:	b292      	uxth	r2, r2
 800046e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
  {
    systime_t time = chVTGetSystemTimeX();
    while (time == chVTGetSystemTimeX()) {
 8000470:	b29b      	uxth	r3, r3
 8000472:	429a      	cmp	r2, r3
 8000474:	d0fb      	beq.n	800046e <rt_test_003_001_execute+0xe>
        _sim_check_for_interrupts();
#endif
    }
  }
  test_end_step(1);
}
 8000476:	4770      	bx	lr
 8000478:	20001d3c 	.word	0x20001d3c
 800047c:	00000000 	.word	0x00000000

08000480 <rt_test_003_002_execute>:
    test_assert(b == false, "in range");
  }
  test_end_step(2);

  /* [3.2.3] Checking boundaries for start > end.*/
  test_set_step(3);
 8000480:	2203      	movs	r2, #3
 8000482:	4b01      	ldr	r3, [pc, #4]	; (8000488 <rt_test_003_002_execute+0x8>)
 8000484:	601a      	str	r2, [r3, #0]
    test_assert(b == true, "not in range");
    b = chTimeIsInRangeX((systime_t)10, (systime_t)100, (systime_t)10);
    test_assert(b == false, "in range");
  }
  test_end_step(3);
}
 8000486:	4770      	bx	lr
 8000488:	20001d3c 	.word	0x20001d3c
 800048c:	00000000 	.word	0x00000000

08000490 <rt_test_005_001_setup>:
 *   the state of the reference are tested.
 * .
 */

static void rt_test_005_001_setup(void) {
  tr1 = NULL;
 8000490:	2200      	movs	r2, #0
 8000492:	4b01      	ldr	r3, [pc, #4]	; (8000498 <rt_test_005_001_setup+0x8>)
 8000494:	601a      	str	r2, [r3, #0]
}
 8000496:	4770      	bx	lr
 8000498:	20001d68 	.word	0x20001d68
 800049c:	00000000 	.word	0x00000000

080004a0 <tmo.lto_priv.0>:
#endif
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
static mutex_t mtx1;
#endif

static void tmo(void *param) {(void)param;}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
	...

080004b0 <ibnotify.lto_priv.0>:
  (void) sdu_start_receive(sdup);
 80004b0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80004b2:	f00e bd8d 	b.w	800efd0 <sdu_start_receive.isra.0>
 80004b6:	bf00      	nop
	...

080004c0 <parse_arguments>:

/*===========================================================================*/
/* Module local functions.                                                   */
/*===========================================================================*/

static char *parse_arguments(char *str, char **saveptr) {
 80004c0:	b538      	push	{r3, r4, r5, lr}
 80004c2:	460d      	mov	r5, r1
  char *p;

  if (str != NULL)
 80004c4:	b1b0      	cbz	r0, 80004f4 <parse_arguments+0x34>
 80004c6:	4604      	mov	r4, r0
    *saveptr = str;
 80004c8:	6028      	str	r0, [r5, #0]
  if (!p) {
    return NULL;
  }

  /* Skipping white space.*/
  p += strspn(p, " \t");
 80004ca:	4620      	mov	r0, r4
 80004cc:	4910      	ldr	r1, [pc, #64]	; (8000510 <parse_arguments+0x50>)
 80004ce:	f00e fe87 	bl	800f1e0 <strspn>

  if (*p == '"') {
 80004d2:	5c21      	ldrb	r1, [r4, r0]
  p += strspn(p, " \t");
 80004d4:	4404      	add	r4, r0
  if (*p == '"') {
 80004d6:	2922      	cmp	r1, #34	; 0x22
 80004d8:	d012      	beq.n	8000500 <parse_arguments+0x40>
    p++;
    *saveptr = strpbrk(p, "\"");
  }
  else {
    /* The delimiter is white space.*/
    *saveptr = strpbrk(p, " \t");
 80004da:	4620      	mov	r0, r4
 80004dc:	490c      	ldr	r1, [pc, #48]	; (8000510 <parse_arguments+0x50>)
 80004de:	f00e fe65 	bl	800f1ac <strpbrk>
  }

  /* Replacing the delimiter with a zero.*/
  if (*saveptr != NULL) {
 80004e2:	b198      	cbz	r0, 800050c <parse_arguments+0x4c>
    *(*saveptr)++ = '\0';
 80004e4:	2300      	movs	r3, #0
 80004e6:	1c42      	adds	r2, r0, #1
 80004e8:	602a      	str	r2, [r5, #0]
 80004ea:	7003      	strb	r3, [r0, #0]
  }

  return *p != '\0' ? p : NULL;
 80004ec:	7823      	ldrb	r3, [r4, #0]
 80004ee:	b123      	cbz	r3, 80004fa <parse_arguments+0x3a>
}
 80004f0:	4620      	mov	r0, r4
 80004f2:	bd38      	pop	{r3, r4, r5, pc}
  p = *saveptr;
 80004f4:	680c      	ldr	r4, [r1, #0]
  if (!p) {
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d1e7      	bne.n	80004ca <parse_arguments+0xa>
    return NULL;
 80004fa:	2400      	movs	r4, #0
}
 80004fc:	4620      	mov	r0, r4
 80004fe:	bd38      	pop	{r3, r4, r5, pc}
    p++;
 8000500:	3401      	adds	r4, #1
    *saveptr = strpbrk(p, "\"");
 8000502:	4620      	mov	r0, r4
 8000504:	f00e fe31 	bl	800f16a <strchr>
  if (*saveptr != NULL) {
 8000508:	2800      	cmp	r0, #0
 800050a:	d1eb      	bne.n	80004e4 <parse_arguments+0x24>
 800050c:	6028      	str	r0, [r5, #0]
 800050e:	e7ed      	b.n	80004ec <parse_arguments+0x2c>
 8000510:	0800f200 	.word	0x0800f200
	...

08000520 <rt_test_006_001_setup>:
void chSemObjectInit(semaphore_t *sp, cnt_t n) {

  chDbgCheck((sp != NULL) && (n >= (cnt_t)0));

  ch_queue_init(&sp->queue);
  sp->cnt = n;
 8000520:	2201      	movs	r2, #1
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
 8000522:	4b02      	ldr	r3, [pc, #8]	; (800052c <rt_test_006_001_setup+0xc>)
  qp->prev = qp;
 8000524:	e9c3 3300 	strd	r3, r3, [r3]
 8000528:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_001_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 800052a:	4770      	bx	lr
 800052c:	200016a8 	.word	0x200016a8

08000530 <rt_test_006_005_setup>:
 8000530:	2200      	movs	r2, #0
  qp->next = qp;
 8000532:	4b02      	ldr	r3, [pc, #8]	; (800053c <rt_test_006_005_setup+0xc>)
  qp->prev = qp;
 8000534:	e9c3 3300 	strd	r3, r3, [r3]
 8000538:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_006_005_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 800053a:	4770      	bx	lr
 800053c:	200016a8 	.word	0x200016a8

08000540 <rt_test_006_002_setup>:
 8000540:	2200      	movs	r2, #0
 8000542:	4b02      	ldr	r3, [pc, #8]	; (800054c <rt_test_006_002_setup+0xc>)
 8000544:	e9c3 3300 	strd	r3, r3, [r3]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	4770      	bx	lr
 800054c:	200016a8 	.word	0x200016a8

08000550 <rt_test_006_003_setup>:
 8000550:	2200      	movs	r2, #0
 8000552:	4b02      	ldr	r3, [pc, #8]	; (800055c <rt_test_006_003_setup+0xc>)
 8000554:	e9c3 3300 	strd	r3, r3, [r3]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	4770      	bx	lr
 800055c:	200016a8 	.word	0x200016a8

08000560 <rt_test_006_004_setup>:
 8000560:	2200      	movs	r2, #0
 8000562:	4b02      	ldr	r3, [pc, #8]	; (800056c <rt_test_006_004_setup+0xc>)
 8000564:	e9c3 3300 	strd	r3, r3, [r3]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	4770      	bx	lr
 800056c:	200016a8 	.word	0x200016a8

08000570 <rt_test_007_005_setup>:
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
 8000570:	2200      	movs	r2, #0
  qp->next = qp;
 8000572:	4b02      	ldr	r3, [pc, #8]	; (800057c <rt_test_007_005_setup+0xc>)
  qp->prev = qp;
 8000574:	e9c3 3300 	strd	r3, r3, [r3]
 8000578:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_007_005_setup(void) {
  chMtxObjectInit(&m1);
}
 800057a:	4770      	bx	lr
 800057c:	20000818 	.word	0x20000818

08000580 <rt_test_007_001_setup>:
 8000580:	2200      	movs	r2, #0
 8000582:	4b02      	ldr	r3, [pc, #8]	; (800058c <rt_test_007_001_setup+0xc>)
 8000584:	e9c3 3300 	strd	r3, r3, [r3]
 8000588:	609a      	str	r2, [r3, #8]
 800058a:	4770      	bx	lr
 800058c:	20000818 	.word	0x20000818

08000590 <rt_test_007_004_setup>:
 8000590:	2100      	movs	r1, #0
  qp->next = qp;
 8000592:	4a04      	ldr	r2, [pc, #16]	; (80005a4 <rt_test_007_004_setup+0x14>)
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <rt_test_007_004_setup+0x18>)
  qp->prev = qp;
 8000596:	e9c2 2200 	strd	r2, r2, [r2]
 800059a:	e9c3 3300 	strd	r3, r3, [r3]
 800059e:	6091      	str	r1, [r2, #8]
 80005a0:	6099      	str	r1, [r3, #8]
}
 80005a2:	4770      	bx	lr
 80005a4:	20000818 	.word	0x20000818
 80005a8:	20000828 	.word	0x20000828
 80005ac:	00000000 	.word	0x00000000

080005b0 <rt_test_007_008_setup>:
 80005b0:	2100      	movs	r1, #0
  qp->next = qp;
 80005b2:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <rt_test_007_008_setup+0x14>)
 80005b4:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <rt_test_007_008_setup+0x18>)
 80005b6:	e9c3 3101 	strd	r3, r1, [r3, #4]
  qp->prev = qp;
 80005ba:	e9c2 2200 	strd	r2, r2, [r2]
  qp->next = qp;
 80005be:	601b      	str	r3, [r3, #0]
 */

static void rt_test_007_008_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
}
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	20000818 	.word	0x20000818
 80005c8:	20000800 	.word	0x20000800
 80005cc:	00000000 	.word	0x00000000

080005d0 <rt_test_007_007_setup>:
 80005d0:	2100      	movs	r1, #0
 80005d2:	4b04      	ldr	r3, [pc, #16]	; (80005e4 <rt_test_007_007_setup+0x14>)
 80005d4:	4a04      	ldr	r2, [pc, #16]	; (80005e8 <rt_test_007_007_setup+0x18>)
 80005d6:	e9c3 3101 	strd	r3, r1, [r3, #4]
 80005da:	e9c2 2200 	strd	r2, r2, [r2]
 80005de:	601b      	str	r3, [r3, #0]
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000818 	.word	0x20000818
 80005e8:	20000800 	.word	0x20000800
 80005ec:	00000000 	.word	0x00000000

080005f0 <rt_test_007_009_setup>:
 80005f0:	2000      	movs	r0, #0
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <rt_test_007_009_setup+0x1c>)
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <rt_test_007_009_setup+0x20>)
 80005f6:	4907      	ldr	r1, [pc, #28]	; (8000614 <rt_test_007_009_setup+0x24>)
  qp->prev = qp;
 80005f8:	e9c3 3300 	strd	r3, r3, [r3]
 80005fc:	e9c1 1100 	strd	r1, r1, [r1]
  qp->next = qp;
 8000600:	6012      	str	r2, [r2, #0]
  qp->prev = qp;
 8000602:	6052      	str	r2, [r2, #4]
 8000604:	6090      	str	r0, [r2, #8]
 8000606:	6098      	str	r0, [r3, #8]

static void rt_test_007_009_setup(void) {
  chCondObjectInit(&c1);
  chMtxObjectInit(&m1);
  chMtxObjectInit(&m2);
}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000818 	.word	0x20000818
 8000610:	20000828 	.word	0x20000828
 8000614:	20000800 	.word	0x20000800
	...

08000620 <test_rt>:
#endif

#if (SHELL_CMD_TEST_ENABLED == TRUE) || defined(__DOXYGEN__)
static THD_FUNCTION(test_rt, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &rt_test_suite);
 8000620:	4901      	ldr	r1, [pc, #4]	; (8000628 <test_rt+0x8>)
 8000622:	f00e ba85 	b.w	800eb30 <test_execute.isra.0>
 8000626:	bf00      	nop
 8000628:	080117b8 	.word	0x080117b8
 800062c:	00000000 	.word	0x00000000

08000630 <test_oslib>:
}

static THD_FUNCTION(test_oslib, arg) {
  BaseSequentialStream *chp = (BaseSequentialStream *)arg;
  test_execute(chp, &oslib_test_suite);
 8000630:	4901      	ldr	r1, [pc, #4]	; (8000638 <test_oslib+0x8>)
 8000632:	f00e ba7d 	b.w	800eb30 <test_execute.isra.0>
 8000636:	bf00      	nop
 8000638:	080112d8 	.word	0x080112d8
 800063c:	00000000 	.word	0x00000000

08000640 <rt_test_006_001_teardown>:
 *
 * @api
 */
static inline void chSemReset(semaphore_t *sp, cnt_t n) {

  chSemResetWithMessage(sp, n, MSG_RESET);
 8000640:	2100      	movs	r1, #0
 8000642:	4801      	ldr	r0, [pc, #4]	; (8000648 <rt_test_006_001_teardown+0x8>)
 8000644:	f00c bd1c 	b.w	800d080 <chSemResetWithMessage.constprop.0>
 8000648:	200016a8 	.word	0x200016a8
 800064c:	00000000 	.word	0x00000000

08000650 <__core_init>:

#if CORTEX_MODEL == 7
  SCB_EnableICache();
  SCB_EnableDCache();
#endif
}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
	...

08000660 <__late_init>:
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
	...

08000670 <__default_exit>:
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
/*lint -restore*/

  while (true) {
 8000670:	e7fe      	b.n	8000670 <__default_exit>
 8000672:	bf00      	nop
	...

08000680 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8000680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000682:	4d15      	ldr	r5, [pc, #84]	; (80006d8 <__init_ram_areas+0x58>)
 8000684:	4f15      	ldr	r7, [pc, #84]	; (80006dc <__init_ram_areas+0x5c>)
 8000686:	4916      	ldr	r1, [pc, #88]	; (80006e0 <__init_ram_areas+0x60>)
 8000688:	4816      	ldr	r0, [pc, #88]	; (80006e4 <__init_ram_areas+0x64>)
 800068a:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <__init_ram_areas+0x68>)
 800068c:	f105 0470 	add.w	r4, r5, #112	; 0x70
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8000690:	4281      	cmp	r1, r0
 8000692:	d90d      	bls.n	80006b0 <__init_ram_areas+0x30>
 8000694:	4603      	mov	r3, r0
 8000696:	3a04      	subs	r2, #4
      *p = *tp;
 8000698:	f852 6f04 	ldr.w	r6, [r2, #4]!
 800069c:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->clear_area) {
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d8f9      	bhi.n	8000698 <__init_ram_areas+0x18>
      p++;
 80006a4:	1e4b      	subs	r3, r1, #1
 80006a6:	1a1b      	subs	r3, r3, r0
 80006a8:	f023 0303 	bic.w	r3, r3, #3
 80006ac:	3304      	adds	r3, #4
 80006ae:	4418      	add	r0, r3
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 80006b0:	4287      	cmp	r7, r0
 80006b2:	d907      	bls.n	80006c4 <__init_ram_areas+0x44>
      *p = 0;
 80006b4:	1e7a      	subs	r2, r7, #1
 80006b6:	1a12      	subs	r2, r2, r0
 80006b8:	f022 0203 	bic.w	r2, r2, #3
 80006bc:	2100      	movs	r1, #0
 80006be:	3204      	adds	r2, #4
 80006c0:	f00e fd4b 	bl	800f15a <memset>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 80006c4:	42a5      	cmp	r5, r4
 80006c6:	d005      	beq.n	80006d4 <__init_ram_areas+0x54>
    uint32_t *p = rap->init_area;
 80006c8:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    while (p < rap->no_init_area) {
 80006cc:	e9d5 1706 	ldrd	r1, r7, [r5, #24]
 80006d0:	3510      	adds	r5, #16
 80006d2:	e7dd      	b.n	8000690 <__init_ram_areas+0x10>
#endif
}
 80006d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006d6:	bf00      	nop
 80006d8:	08011308 	.word	0x08011308
 80006dc:	20002c98 	.word	0x20002c98
 80006e0:	20002c98 	.word	0x20002c98
 80006e4:	20002c98 	.word	0x20002c98
 80006e8:	08012918 	.word	0x08012918
 80006ec:	00000000 	.word	0x00000000

080006f0 <__early_init>:
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <__early_init+0x70>)
 80006f2:	6813      	ldr	r3, [r2, #0]
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 80006fa:	6813      	ldr	r3, [r2, #0]
 80006fc:	0798      	lsls	r0, r3, #30
 80006fe:	d5fc      	bpl.n	80006fa <__early_init+0xa>
    ;                                       /* Wait until HSI is stable.    */
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 8000700:	2000      	movs	r0, #0
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000702:	6813      	ldr	r3, [r2, #0]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000704:	4916      	ldr	r1, [pc, #88]	; (8000760 <__early_init+0x70>)
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8000706:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
 800070a:	6013      	str	r3, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800070c:	6050      	str	r0, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800070e:	684b      	ldr	r3, [r1, #4]
 8000710:	f013 0f0c 	tst.w	r3, #12
 8000714:	d1fb      	bne.n	800070e <__early_init+0x1e>
#if defined(STM32_HSE_BYPASS)
  /* HSE Bypass.*/
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
#endif
  /* HSE activation.*/
  RCC->CR |= RCC_CR_HSEON;
 8000716:	680b      	ldr	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8000718:	4a11      	ldr	r2, [pc, #68]	; (8000760 <__early_init+0x70>)
  RCC->CR |= RCC_CR_HSEON;
 800071a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800071e:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSERDY))
 8000720:	6813      	ldr	r3, [r2, #0]
 8000722:	0399      	lsls	r1, r3, #14
 8000724:	d5fc      	bpl.n	8000720 <__early_init+0x30>
    ;                                       /* Waits until LSI is stable.   */
#endif

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 8000726:	6853      	ldr	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000728:	490d      	ldr	r1, [pc, #52]	; (8000760 <__early_init+0x70>)
  RCC->CFGR |= STM32_PLLMUL | STM32_PLLXTPRE | STM32_PLLSRC;
 800072a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800072e:	6053      	str	r3, [r2, #4]
  RCC->CR   |= RCC_CR_PLLON;
 8000730:	6813      	ldr	r3, [r2, #0]
 8000732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000736:	6013      	str	r3, [r2, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 8000738:	680b      	ldr	r3, [r1, #0]
 800073a:	019b      	lsls	r3, r3, #6
 800073c:	d5fc      	bpl.n	8000738 <__early_init+0x48>
              STM32_PLLSRC | STM32_ADCPRE | STM32_PPRE2  | STM32_PPRE1    |
              STM32_HPRE;
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800073e:	2012      	movs	r0, #18
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8000740:	4a08      	ldr	r2, [pc, #32]	; (8000764 <__early_init+0x74>)
  FLASH->ACR = STM32_FLASHBITS;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <__early_init+0x78>)
  RCC->CFGR = STM32_MCOSEL | STM32_USBPRE | STM32_PLLMUL | STM32_PLLXTPRE |
 8000744:	604a      	str	r2, [r1, #4]
  FLASH->ACR = STM32_FLASHBITS;
 8000746:	6018      	str	r0, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 8000748:	684b      	ldr	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800074a:	4a05      	ldr	r2, [pc, #20]	; (8000760 <__early_init+0x70>)
  RCC->CFGR |= STM32_SW;
 800074c:	f043 0302 	orr.w	r3, r3, #2
 8000750:	604b      	str	r3, [r1, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 8000752:	6853      	ldr	r3, [r2, #4]
 8000754:	f003 030c 	and.w	r3, r3, #12
 8000758:	2b08      	cmp	r3, #8
 800075a:	d1fa      	bne.n	8000752 <__early_init+0x62>
 * any other initialization.
 */
void __early_init(void) {

  stm32_clock_init();
}
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	40021000 	.word	0x40021000
 8000764:	001d6400 	.word	0x001d6400
 8000768:	40022000 	.word	0x40022000
 800076c:	00000000 	.word	0x00000000

08000770 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8000770:	4604      	mov	r4, r0
 8000772:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8000774:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8000776:	4d06      	ldr	r5, [pc, #24]	; (8000790 <chSysHalt+0x20>)
 8000778:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 800077a:	075b      	lsls	r3, r3, #29
 800077c:	d501      	bpl.n	8000782 <chSysHalt+0x12>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 800077e:	62ec      	str	r4, [r5, #44]	; 0x2c

  /* Halt hook code, usually empty.*/
  CH_CFG_SYSTEM_HALT_HOOK(reason);

  /* Harmless infinite loop.*/
  while (true) {
 8000780:	e7fe      	b.n	8000780 <chSysHalt+0x10>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8000782:	2204      	movs	r2, #4
 8000784:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8000786:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8000788:	701a      	strb	r2, [r3, #0]
    trace_next();
 800078a:	f7ff fdd1 	bl	8000330 <trace_next>
 800078e:	e7f6      	b.n	800077e <chSysHalt+0xe>
 8000790:	20000d70 	.word	0x20000d70
	...

080007a0 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 80007a0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <chDbgCheckClassS+0x18>)
 80007a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007a6:	b91a      	cbnz	r2, 80007b0 <chDbgCheckClassS+0x10>
 80007a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	dd00      	ble.n	80007b0 <chDbgCheckClassS+0x10>
    chSysHalt("SV#11");
  }
}
 80007ae:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 80007b0:	4802      	ldr	r0, [pc, #8]	; (80007bc <chDbgCheckClassS+0x1c>)
 80007b2:	f7ff ffdd 	bl	8000770 <chSysHalt>
 80007b6:	bf00      	nop
 80007b8:	20000d70 	.word	0x20000d70
 80007bc:	0800f204 	.word	0x0800f204

080007c0 <ibqReleaseEmptyBufferS>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80007c0:	4b12      	ldr	r3, [pc, #72]	; (800080c <ibqReleaseEmptyBufferS+0x4c>)
   *
   * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
   *
   * @sclass
   */
  void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 80007c2:	b510      	push	{r4, lr}
 80007c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007c6:	b9ca      	cbnz	r2, 80007fc <ibqReleaseEmptyBufferS+0x3c>
 80007c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	dd16      	ble.n	80007fc <ibqReleaseEmptyBufferS+0x3c>

  osalDbgCheckClassS();
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 80007ce:	68c3      	ldr	r3, [r0, #12]
 80007d0:	b1c3      	cbz	r3, 8000804 <ibqReleaseEmptyBufferS+0x44>

  /* Freeing a buffer slot in the queue.*/
  ibqp->bcounter--;
  ibqp->brdptr += ibqp->bsize;
  if (ibqp->brdptr >= ibqp->btop) {
 80007d2:	e9d0 3105 	ldrd	r3, r1, [r0, #20]
  ibqp->bcounter--;
 80007d6:	68c2      	ldr	r2, [r0, #12]
  ibqp->brdptr += ibqp->bsize;
 80007d8:	f8d0 c01c 	ldr.w	ip, [r0, #28]
  ibqp->bcounter--;
 80007dc:	3a01      	subs	r2, #1
 80007de:	60c2      	str	r2, [r0, #12]
    ibqp->brdptr = ibqp->buffers;
  }

  /* No "current" buffer.*/
  ibqp->ptr = NULL;
 80007e0:	2200      	movs	r2, #0
  ibqp->brdptr += ibqp->bsize;
 80007e2:	4463      	add	r3, ip
  if (ibqp->brdptr >= ibqp->btop) {
 80007e4:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 80007e6:	6143      	str	r3, [r0, #20]
    ibqp->brdptr = ibqp->buffers;
 80007e8:	bf28      	it	cs
 80007ea:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  ibqp->ptr = NULL;
 80007ec:	6282      	str	r2, [r0, #40]	; 0x28
    ibqp->brdptr = ibqp->buffers;
 80007ee:	bf28      	it	cs
 80007f0:	6143      	strcs	r3, [r0, #20]

  /* Notifying the buffer release.*/
  if (ibqp->notify != NULL) {
 80007f2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80007f4:	b12b      	cbz	r3, 8000802 <ibqReleaseEmptyBufferS+0x42>
    ibqp->notify(ibqp);
  }
}
 80007f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ibqp->notify(ibqp);
 80007fa:	4718      	bx	r3
    chSysHalt("SV#11");
 80007fc:	4804      	ldr	r0, [pc, #16]	; (8000810 <ibqReleaseEmptyBufferS+0x50>)
 80007fe:	f7ff ffb7 	bl	8000770 <chSysHalt>
}
 8000802:	bd10      	pop	{r4, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 8000804:	4803      	ldr	r0, [pc, #12]	; (8000814 <ibqReleaseEmptyBufferS+0x54>)
 8000806:	f7ff ffb3 	bl	8000770 <chSysHalt>
 800080a:	bf00      	nop
 800080c:	20000d70 	.word	0x20000d70
 8000810:	0800f204 	.word	0x0800f204
 8000814:	08010fa8 	.word	0x08010fa8
	...

08000820 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 8000820:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <_dbg_check_lock+0x18>)
 8000824:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8000828:	430a      	orrs	r2, r1
 800082a:	d002      	beq.n	8000832 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <_dbg_check_lock+0x1c>)
 800082e:	f7ff ff9f 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 8000832:	2201      	movs	r2, #1
 8000834:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000836:	bd08      	pop	{r3, pc}
 8000838:	20000d70 	.word	0x20000d70
 800083c:	0800f20c 	.word	0x0800f20c

08000840 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 8000840:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <_dbg_check_unlock+0x18>)
 8000844:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000846:	b922      	cbnz	r2, 8000852 <_dbg_check_unlock+0x12>
 8000848:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800084a:	2900      	cmp	r1, #0
 800084c:	dd01      	ble.n	8000852 <_dbg_check_unlock+0x12>
  _dbg_leave_lock();
 800084e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000850:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8000852:	4802      	ldr	r0, [pc, #8]	; (800085c <_dbg_check_unlock+0x1c>)
 8000854:	f7ff ff8c 	bl	8000770 <chSysHalt>
 8000858:	20000d70 	.word	0x20000d70
 800085c:	0800f214 	.word	0x0800f214

08000860 <obqPostFullBufferS>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <obqPostFullBufferS+0x54>)
 * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 * @param[in] size      used size of the buffer, cannot be zero
 *
 * @sclass
 */
void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 8000862:	b510      	push	{r4, lr}
 8000864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000866:	b9f2      	cbnz	r2, 80008a6 <obqPostFullBufferS+0x46>
 8000868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800086a:	2b00      	cmp	r3, #0
 800086c:	dd1b      	ble.n	80008a6 <obqPostFullBufferS+0x46>

  osalDbgCheckClassS();
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 800086e:	b1e9      	cbz	r1, 80008ac <obqPostFullBufferS+0x4c>
 8000870:	69c3      	ldr	r3, [r0, #28]
 8000872:	3b04      	subs	r3, #4
 8000874:	428b      	cmp	r3, r1
 8000876:	d319      	bcc.n	80008ac <obqPostFullBufferS+0x4c>
  osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 8000878:	68c3      	ldr	r3, [r0, #12]
 800087a:	b1bb      	cbz	r3, 80008ac <obqPostFullBufferS+0x4c>

  /* Writing size field in the buffer.*/
  *((size_t *)obqp->bwrptr) = size;
 800087c:	6903      	ldr	r3, [r0, #16]

  /* Posting the buffer in the queue.*/
  obqp->bcounter--;
  obqp->bwrptr += obqp->bsize;
  if (obqp->bwrptr >= obqp->btop) {
 800087e:	6984      	ldr	r4, [r0, #24]
  *((size_t *)obqp->bwrptr) = size;
 8000880:	6019      	str	r1, [r3, #0]
  obqp->bcounter--;
 8000882:	68c2      	ldr	r2, [r0, #12]
  obqp->bwrptr += obqp->bsize;
 8000884:	69c1      	ldr	r1, [r0, #28]
  obqp->bcounter--;
 8000886:	3a01      	subs	r2, #1
 8000888:	60c2      	str	r2, [r0, #12]
    obqp->bwrptr = obqp->buffers;
  }

  /* No "current" buffer.*/
  obqp->ptr = NULL;
 800088a:	2200      	movs	r2, #0
  obqp->bwrptr += obqp->bsize;
 800088c:	440b      	add	r3, r1
  if (obqp->bwrptr >= obqp->btop) {
 800088e:	42a3      	cmp	r3, r4
  obqp->bwrptr += obqp->bsize;
 8000890:	6103      	str	r3, [r0, #16]
    obqp->bwrptr = obqp->buffers;
 8000892:	bf28      	it	cs
 8000894:	6a43      	ldrcs	r3, [r0, #36]	; 0x24
  obqp->ptr = NULL;
 8000896:	6282      	str	r2, [r0, #40]	; 0x28
    obqp->bwrptr = obqp->buffers;
 8000898:	bf28      	it	cs
 800089a:	6103      	strcs	r3, [r0, #16]

  /* Notifying the buffer release.*/
  if (obqp->notify != NULL) {
 800089c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800089e:	b143      	cbz	r3, 80008b2 <obqPostFullBufferS+0x52>
    obqp->notify(obqp);
  }
}
 80008a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    obqp->notify(obqp);
 80008a4:	4718      	bx	r3
    chSysHalt("SV#11");
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <obqPostFullBufferS+0x58>)
 80008a8:	f7ff ff62 	bl	8000770 <chSysHalt>
  osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 80008ac:	4803      	ldr	r0, [pc, #12]	; (80008bc <obqPostFullBufferS+0x5c>)
 80008ae:	f7ff ff5f 	bl	8000770 <chSysHalt>
}
 80008b2:	bd10      	pop	{r4, pc}
 80008b4:	20000d70 	.word	0x20000d70
 80008b8:	0800f204 	.word	0x0800f204
 80008bc:	08010c94 	.word	0x08010c94

080008c0 <_ctl.lto_priv.0>:
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 80008c0:	b508      	push	{r3, lr}
  osalDbgCheck(sdup != NULL);
 80008c2:	b130      	cbz	r0, 80008d2 <_ctl.lto_priv.0+0x12>
  switch (operation) {
 80008c4:	b129      	cbz	r1, 80008d2 <_ctl.lto_priv.0+0x12>
 80008c6:	2901      	cmp	r1, #1
 80008c8:	d001      	beq.n	80008ce <_ctl.lto_priv.0+0xe>
}
 80008ca:	2000      	movs	r0, #0
 80008cc:	bd08      	pop	{r3, pc}
    osalDbgCheck(arg == NULL);
 80008ce:	2a00      	cmp	r2, #0
 80008d0:	d0fb      	beq.n	80008ca <_ctl.lto_priv.0+0xa>
    osalDbgAssert(false, "invalid CTL operation");
 80008d2:	4801      	ldr	r0, [pc, #4]	; (80008d8 <_ctl.lto_priv.0+0x18>)
 80008d4:	f7ff ff4c 	bl	8000770 <chSysHalt>
 80008d8:	08010f18 	.word	0x08010f18
 80008dc:	00000000 	.word	0x00000000

080008e0 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 80008e0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80008e2:	4b06      	ldr	r3, [pc, #24]	; (80008fc <_dbg_check_lock_from_isr+0x1c>)
 80008e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008e6:	2a00      	cmp	r2, #0
 80008e8:	dd01      	ble.n	80008ee <_dbg_check_lock_from_isr+0xe>
 80008ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008ec:	b112      	cbz	r2, 80008f4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 80008ee:	4804      	ldr	r0, [pc, #16]	; (8000900 <_dbg_check_lock_from_isr+0x20>)
 80008f0:	f7ff ff3e 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 80008f4:	2201      	movs	r2, #1
 80008f6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80008f8:	bd08      	pop	{r3, pc}
 80008fa:	bf00      	nop
 80008fc:	20000d70 	.word	0x20000d70
 8000900:	0800f21c 	.word	0x0800f21c
	...

08000910 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 8000910:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <_dbg_check_unlock_from_isr+0x1c>)
 8000914:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000916:	2a00      	cmp	r2, #0
 8000918:	dd05      	ble.n	8000926 <_dbg_check_unlock_from_isr+0x16>
 800091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091c:	2a00      	cmp	r2, #0
 800091e:	dd02      	ble.n	8000926 <_dbg_check_unlock_from_isr+0x16>
  _dbg_leave_lock();
 8000920:	2200      	movs	r2, #0
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000924:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 8000926:	4802      	ldr	r0, [pc, #8]	; (8000930 <_dbg_check_unlock_from_isr+0x20>)
 8000928:	f7ff ff22 	bl	8000770 <chSysHalt>
 800092c:	20000d70 	.word	0x20000d70
 8000930:	0800f224 	.word	0x0800f224
	...

08000940 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8000940:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <chDbgCheckClassI+0x18>)
 8000944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000946:	2a00      	cmp	r2, #0
 8000948:	db03      	blt.n	8000952 <chDbgCheckClassI+0x12>
 800094a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800094c:	2b00      	cmp	r3, #0
 800094e:	dd00      	ble.n	8000952 <chDbgCheckClassI+0x12>
}
 8000950:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8000952:	4802      	ldr	r0, [pc, #8]	; (800095c <chDbgCheckClassI+0x1c>)
 8000954:	f7ff ff0c 	bl	8000770 <chSysHalt>
 8000958:	20000d70 	.word	0x20000d70
 800095c:	0800f22c 	.word	0x0800f22c

08000960 <usbStartReceiveI>:
 *                      the packet size because the excess is discarded.
 *
 * @iclass
 */
void usbStartReceiveI(USBDriver *usbp, usbep_t ep,
                      uint8_t *buf, size_t n) {
 8000960:	b538      	push	{r3, r4, r5, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8000962:	4c1f      	ldr	r4, [pc, #124]	; (80009e0 <usbStartReceiveI+0x80>)
 8000964:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8000966:	2d00      	cmp	r5, #0
 8000968:	db34      	blt.n	80009d4 <usbStartReceiveI+0x74>
 800096a:	6b64      	ldr	r4, [r4, #52]	; 0x34
 800096c:	2c00      	cmp	r4, #0
 800096e:	dd31      	ble.n	80009d4 <usbStartReceiveI+0x74>
  USBOutEndpointState *osp;

  osalDbgCheckClassI();
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8000970:	b398      	cbz	r0, 80009da <usbStartReceiveI+0x7a>
 8000972:	2907      	cmp	r1, #7
 8000974:	d831      	bhi.n	80009da <usbStartReceiveI+0x7a>
  osalDbgAssert(!usbGetReceiveStatusI(usbp, ep), "already receiving");
 8000976:	f04f 0e01 	mov.w	lr, #1
 800097a:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800097e:	fa0e f401 	lsl.w	r4, lr, r1
 8000982:	b2a5      	uxth	r5, r4
 8000984:	ea14 040c 	ands.w	r4, r4, ip
 8000988:	d127      	bne.n	80009da <usbStartReceiveI+0x7a>

  /* Marking the endpoint as active.*/
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800098a:	ea4c 0c05 	orr.w	ip, ip, r5
 800098e:	f8a0 c00a 	strh.w	ip, [r0, #10]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  osp = usbp->epc[ep]->out_state;
 8000992:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8000996:	68c5      	ldr	r5, [r0, #12]
 8000998:	69a8      	ldr	r0, [r5, #24]
  /*lint -restore*/
  osp->rxbuf  = buf;
  osp->rxsize = n;
  osp->rxcnt  = 0;
 800099a:	e9c0 4201 	strd	r4, r2, [r0, #4]
  osp->rxsize = n;
 800099e:	6003      	str	r3, [r0, #0]
 */
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;

  /* Transfer initialization.*/
  if (osp->rxsize == 0)         /* Special case for zero sized packets.*/
 80009a0:	b133      	cbz	r3, 80009b0 <usbStartReceiveI+0x50>
    osp->rxpkts = 1;
  else
    osp->rxpkts = (uint16_t)((osp->rxsize + usbp->epc[ep]->out_maxsize - 1) /
 80009a2:	8a6a      	ldrh	r2, [r5, #18]
 80009a4:	3b01      	subs	r3, #1
 80009a6:	4413      	add	r3, r2
 80009a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80009ac:	fa1f fe83 	uxth.w	lr, r3
                             usbp->epc[ep]->out_maxsize);

  EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80009b0:	4a0c      	ldr	r2, [pc, #48]	; (80009e4 <usbStartReceiveI+0x84>)
 80009b2:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80009b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80009ba:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80009be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009c2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80009c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ce:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  osp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_out(usbp, ep);
}
 80009d2:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#10");
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <usbStartReceiveI+0x88>)
 80009d6:	f7ff fecb 	bl	8000770 <chSysHalt>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <usbStartReceiveI+0x8c>)
 80009dc:	f7ff fec8 	bl	8000770 <chSysHalt>
 80009e0:	20000d70 	.word	0x20000d70
 80009e4:	40005c00 	.word	0x40005c00
 80009e8:	0800f22c 	.word	0x0800f22c
 80009ec:	08010f7c 	.word	0x08010f7c

080009f0 <usbStartTransmitI>:
 * @param[in] n         transaction size
 *
 * @iclass
 */
void usbStartTransmitI(USBDriver *usbp, usbep_t ep,
                       const uint8_t *buf, size_t n) {
 80009f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009f2:	4606      	mov	r6, r0
 80009f4:	460d      	mov	r5, r1
 80009f6:	4614      	mov	r4, r2
 80009f8:	461f      	mov	r7, r3
  USBInEndpointState *isp;

  osalDbgCheckClassI();
 80009fa:	f7ff ffa1 	bl	8000940 <chDbgCheckClassI>
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d042      	beq.n	8000a88 <usbStartTransmitI+0x98>
 8000a02:	2d07      	cmp	r5, #7
 8000a04:	d840      	bhi.n	8000a88 <usbStartTransmitI+0x98>
  osalDbgAssert(!usbGetTransmitStatusI(usbp, ep), "already transmitting");
 8000a06:	2301      	movs	r3, #1
 8000a08:	8932      	ldrh	r2, [r6, #8]
 8000a0a:	40ab      	lsls	r3, r5
 8000a0c:	b299      	uxth	r1, r3
 8000a0e:	4013      	ands	r3, r2
 8000a10:	d13a      	bne.n	8000a88 <usbStartTransmitI+0x98>

  /* Marking the endpoint as active.*/
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000a12:	430a      	orrs	r2, r1
 8000a14:	8132      	strh	r2, [r6, #8]

  /* Setting up the transfer.*/
  /*lint -save -e661 [18.1] pclint is confused by the check on ep.*/
  isp = usbp->epc[ep]->in_state;
 8000a16:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 8000a1a:	68f2      	ldr	r2, [r6, #12]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000a1c:	491c      	ldr	r1, [pc, #112]	; (8000a90 <usbStartTransmitI+0xa0>)
  size_t n;
  USBInEndpointState *isp = usbp->epc[ep]->in_state;

  /* Transfer initialization.*/
  n = isp->txsize;
  if (n > (size_t)usbp->epc[ep]->in_maxsize)
 8000a1e:	8a10      	ldrh	r0, [r2, #16]
 8000a20:	6952      	ldr	r2, [r2, #20]
  /*lint -restore*/
  isp->txbuf  = buf;
 8000a22:	42b8      	cmp	r0, r7
 8000a24:	bf28      	it	cs
 8000a26:	4638      	movcs	r0, r7
    n = (size_t)usbp->epc[ep]->in_maxsize;

  isp->txlast = n;
 8000a28:	e9c2 4002 	strd	r4, r0, [r2, #8]
  isp->txsize = n;
  isp->txcnt  = 0;
 8000a2c:	6053      	str	r3, [r2, #4]
  isp->txsize = n;
 8000a2e:	6017      	str	r7, [r2, #0]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000a30:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8000a32:	012a      	lsls	r2, r5, #4
 8000a34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a38:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000a3c:	58d2      	ldr	r2, [r2, r3]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8000a3e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000a42:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
 8000a46:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 8000a4a:	6058      	str	r0, [r3, #4]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8000a4c:	0052      	lsls	r2, r2, #1
  while (i > 0) {
 8000a4e:	b158      	cbz	r0, 8000a68 <usbStartTransmitI+0x78>
 8000a50:	3801      	subs	r0, #1
 8000a52:	f020 0001 	bic.w	r0, r0, #1
 8000a56:	3002      	adds	r0, #2
 8000a58:	4420      	add	r0, r4
    w |= *buf++ << 8;
 8000a5a:	f834 1b02 	ldrh.w	r1, [r4], #2
    *pmap++ = (stm32_usb_pma_t)w;
 8000a5e:	3204      	adds	r2, #4
  while (i > 0) {
 8000a60:	42a0      	cmp	r0, r4
    *pmap++ = (stm32_usb_pma_t)w;
 8000a62:	f842 1c04 	str.w	r1, [r2, #-4]
  while (i > 0) {
 8000a66:	d1f8      	bne.n	8000a5a <usbStartTransmitI+0x6a>
  usb_packet_write_from_buffer(ep, isp->txbuf, n);

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8000a68:	4a09      	ldr	r2, [pc, #36]	; (8000a90 <usbStartTransmitI+0xa0>)
 8000a6a:	f852 3025 	ldr.w	r3, [r2, r5, lsl #2]
 8000a6e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000a72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a76:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8000a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a82:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
  isp->thread = NULL;
#endif

  /* Starting transfer.*/
  usb_lld_start_in(usbp, ep);
}
 8000a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheck((usbp != NULL) && (ep <= (usbep_t)USB_MAX_ENDPOINTS));
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <usbStartTransmitI+0xa4>)
 8000a8a:	f7ff fe71 	bl	8000770 <chSysHalt>
 8000a8e:	bf00      	nop
 8000a90:	40005c00 	.word	0x40005c00
 8000a94:	08010f20 	.word	0x08010f20
	...

08000aa0 <obnotify.lto_priv.0>:
static void obnotify(io_buffers_queue_t *bqp) {
 8000aa0:	b570      	push	{r4, r5, r6, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8000aa2:	6b44      	ldr	r4, [r0, #52]	; 0x34
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000aa4:	f8d4 348c 	ldr.w	r3, [r4, #1164]	; 0x48c
 8000aa8:	681d      	ldr	r5, [r3, #0]
 8000aaa:	782a      	ldrb	r2, [r5, #0]
 8000aac:	2a04      	cmp	r2, #4
 8000aae:	d102      	bne.n	8000ab6 <obnotify.lto_priv.0+0x16>
 8000ab0:	7a22      	ldrb	r2, [r4, #8]
 8000ab2:	2a02      	cmp	r2, #2
 8000ab4:	d000      	beq.n	8000ab8 <obnotify.lto_priv.0+0x18>
}
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000ab8:	2201      	movs	r2, #1
 8000aba:	791e      	ldrb	r6, [r3, #4]
 8000abc:	8929      	ldrh	r1, [r5, #8]
 8000abe:	fa02 f306 	lsl.w	r3, r2, r6
 8000ac2:	420b      	tst	r3, r1
 8000ac4:	d1f7      	bne.n	8000ab6 <obnotify.lto_priv.0+0x16>
  osalDbgCheckClassI();
 8000ac6:	f7ff ff3b 	bl	8000940 <chDbgCheckClassI>
  if (obqIsEmptyI(obqp)) {
 8000aca:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	d007      	beq.n	8000ae2 <obnotify.lto_priv.0+0x42>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000ad2:	4631      	mov	r1, r6
 8000ad4:	4628      	mov	r0, r5
}
 8000ad6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8000ada:	f852 3b04 	ldr.w	r3, [r2], #4
 8000ade:	f7ff bf87 	b.w	80009f0 <usbStartTransmitI>
 8000ae2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d0f4      	beq.n	8000ad2 <obnotify.lto_priv.0+0x32>
    osalDbgAssert(buf != NULL, "buffer not found");
 8000ae8:	4801      	ldr	r0, [pc, #4]	; (8000af0 <obnotify.lto_priv.0+0x50>)
 8000aea:	f7ff fe41 	bl	8000770 <chSysHalt>
 8000aee:	bf00      	nop
 8000af0:	08010f70 	.word	0x08010f70
	...

08000b00 <_usb_ep0setup>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000b00:	b570      	push	{r4, r5, r6, lr}
  size_t max;

  /* Is the EP0 state machine in the correct state for handling setup
     packets?*/
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8000b02:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8000b06:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8000b08:	b113      	cbz	r3, 8000b10 <_usb_ep0setup+0x10>
    /* This is unexpected could require handling with a warning event.*/
    /* CHTODO: handling here.*/

    /* Resetting the EP0 state machine and going ahead.*/
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64
  udp = USB_GET_DESCRIPTOR(ep);
 8000b10:	4bb5      	ldr	r3, [pc, #724]	; (8000de8 <_usb_ep0setup+0x2e8>)
  }

  /* Reading the setup data into the driver buffer.*/
  usbReadSetup(usbp, ep, usbp->setup);
 8000b12:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8000b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000b1c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8000b20:	eb03 1301 	add.w	r3, r3, r1, lsl #4
  pmap = USB_ADDR2PTR(udp->RXADDR0);
 8000b24:	689b      	ldr	r3, [r3, #8]
 8000b26:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000b2a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	f103 0010 	add.w	r0, r3, #16
 8000b34:	4619      	mov	r1, r3
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000b36:	3304      	adds	r3, #4
 8000b38:	6809      	ldr	r1, [r1, #0]
  for (n = 0; n < 4; n++) {
 8000b3a:	4283      	cmp	r3, r0
    *(uint16_t *)buf = (uint16_t)*pmap++;
 8000b3c:	f822 1b02 	strh.w	r1, [r2], #2
  for (n = 0; n < 4; n++) {
 8000b40:	d1f8      	bne.n	8000b34 <_usb_ep0setup+0x34>

  /* First verify if the application has an handler installed for this
     request.*/
  /*lint -save -e9007 [13.5] No side effects, it is intentional.*/
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000b42:	6863      	ldr	r3, [r4, #4]
 8000b44:	689b      	ldr	r3, [r3, #8]
 8000b46:	b32b      	cbz	r3, 8000b94 <_usb_ep0setup+0x94>
      !(usbp->config->requests_hook_cb(usbp))) {
 8000b48:	4620      	mov	r0, r4
 8000b4a:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8000b4c:	b310      	cbz	r0, 8000b94 <_usb_ep0setup+0x94>
  /* Transfer preparation. The request handler must have populated
     correctly the fields ep0next, ep0n and ep0endcb using the macro
     usbSetupTransfer().*/
  max = (size_t)get_hword(&usbp->setup[6]);
  /* The transfer size cannot exceed the specified amount.*/
  if (usbp->ep0n > max) {
 8000b4e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    usbp->ep0n = max;
  }
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000b50:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
  max = (size_t)get_hword(&usbp->setup[6]);
 8000b54:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
  if (usbp->ep0n > max) {
 8000b58:	429a      	cmp	r2, r3
    usbp->ep0n = max;
 8000b5a:	bf3c      	itt	cc
 8000b5c:	4613      	movcc	r3, r2
 8000b5e:	66e2      	strcc	r2, [r4, #108]	; 0x6c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000b60:	060a      	lsls	r2, r1, #24
 8000b62:	f100 80e1 	bmi.w	8000d28 <_usb_ep0setup+0x228>
#endif
    }
  }
  else {
    /* OUT phase.*/
    if (usbp->ep0n != 0U) {
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	f000 8095 	beq.w	8000c96 <_usb_ep0setup+0x196>
      /* Starts the receive phase.*/
      usbp->ep0state = USB_EP0_OUT_RX;
 8000b6c:	2215      	movs	r2, #21
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000b6e:	2320      	movs	r3, #32
 8000b70:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000b74:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000b78:	f7ff feb2 	bl	80008e0 <_dbg_check_lock_from_isr>
      osalSysLockFromISR();
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8000b7c:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8000b80:	2100      	movs	r1, #0
 8000b82:	4620      	mov	r0, r4
 8000b84:	f7ff feec 	bl	8000960 <usbStartReceiveI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000b88:	f7ff fec2 	bl	8000910 <_dbg_check_unlock_from_isr>
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	f383 8811 	msr	BASEPRI, r3
#else
      usb_lld_end_setup(usbp, ep);
#endif
    }
  }
}
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8000b94:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
 8000b98:	f011 0660 	ands.w	r6, r1, #96	; 0x60
 8000b9c:	d11c      	bne.n	8000bd8 <_usb_ep0setup+0xd8>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8000b9e:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000ba2:	f001 037f 	and.w	r3, r1, #127	; 0x7f
                                        USB_RTYPE_TYPE_MASK)) |
 8000ba6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000baa:	f240 3202 	movw	r2, #770	; 0x302
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f000 8150 	beq.w	8000e54 <_usb_ep0setup+0x354>
 8000bb4:	d84e      	bhi.n	8000c54 <_usb_ep0setup+0x154>
 8000bb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bba:	f000 8106 	beq.w	8000dca <_usb_ep0setup+0x2ca>
 8000bbe:	d92a      	bls.n	8000c16 <_usb_ep0setup+0x116>
 8000bc0:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8000bc4:	f000 811a 	beq.w	8000dfc <_usb_ep0setup+0x2fc>
 8000bc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000bcc:	d104      	bne.n	8000bd8 <_usb_ep0setup+0xd8>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000bce:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	f000 80e1 	beq.w	8000d9a <_usb_ep0setup+0x29a>
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  (void)usbp;

  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000bd8:	f248 0080 	movw	r0, #32896	; 0x8080
 8000bdc:	4982      	ldr	r1, [pc, #520]	; (8000de8 <_usb_ep0setup+0x2e8>)
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000bde:	6863      	ldr	r3, [r4, #4]
 8000be0:	680a      	ldr	r2, [r1, #0]
 8000be2:	681d      	ldr	r5, [r3, #0]
 8000be4:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bec:	f082 0210 	eor.w	r2, r2, #16
 8000bf0:	4302      	orrs	r2, r0
 8000bf2:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000bf4:	680b      	ldr	r3, [r1, #0]
 8000bf6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000bfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000c02:	4303      	orrs	r3, r0
 8000c04:	600b      	str	r3, [r1, #0]
 8000c06:	b115      	cbz	r5, 8000c0e <_usb_ep0setup+0x10e>
 8000c08:	2106      	movs	r1, #6
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8000c0e:	2306      	movs	r3, #6
 8000c10:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000c14:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d060      	beq.n	8000cdc <_usb_ep0setup+0x1dc>
 8000c1a:	2b02      	cmp	r3, #2
 8000c1c:	d14f      	bne.n	8000cbe <_usb_ep0setup+0x1be>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8000c1e:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000c22:	f002 000f 	and.w	r0, r2, #15
 8000c26:	f012 0f80 	tst.w	r2, #128	; 0x80
 8000c2a:	4a6f      	ldr	r2, [pc, #444]	; (8000de8 <_usb_ep0setup+0x2e8>)
 8000c2c:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8000c30:	f040 80a3 	bne.w	8000d7a <_usb_ep0setup+0x27a>
  switch (STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) {
 8000c34:	f412 5240 	ands.w	r2, r2, #12288	; 0x3000
 8000c38:	d0ce      	beq.n	8000bd8 <_usb_ep0setup+0xd8>
 8000c3a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000c3e:	f04f 0002 	mov.w	r0, #2
 8000c42:	f04f 0200 	mov.w	r2, #0
 8000c46:	f000 80a3 	beq.w	8000d90 <_usb_ep0setup+0x290>
 8000c4a:	4d68      	ldr	r5, [pc, #416]	; (8000dec <_usb_ep0setup+0x2ec>)
 8000c4c:	6722      	str	r2, [r4, #112]	; 0x70
 8000c4e:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
        return true;
 8000c52:	e77f      	b.n	8000b54 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000c54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c58:	f000 8119 	beq.w	8000e8e <_usb_ep0setup+0x38e>
 8000c5c:	d946      	bls.n	8000cec <_usb_ep0setup+0x1ec>
 8000c5e:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8000c62:	d136      	bne.n	8000cd2 <_usb_ep0setup+0x1d2>
      if (usbp->state == USB_ACTIVE) {
 8000c64:	7823      	ldrb	r3, [r4, #0]
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	f000 80a1 	beq.w	8000dae <_usb_ep0setup+0x2ae>
      if (usbp->setup[2] != 0U) {
 8000c6c:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000c70:	b14b      	cbz	r3, 8000c86 <_usb_ep0setup+0x186>
        usbp->state = USB_ACTIVE;
 8000c72:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000c74:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8000c76:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_ACTIVE;
 8000c7a:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8000c7c:	6813      	ldr	r3, [r2, #0]
 8000c7e:	b113      	cbz	r3, 8000c86 <_usb_ep0setup+0x186>
 8000c80:	2102      	movs	r1, #2
 8000c82:	4620      	mov	r0, r4
 8000c84:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000c8c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000c90:	6723      	str	r3, [r4, #112]	; 0x70
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000c92:	060b      	lsls	r3, r1, #24
 8000c94:	d45d      	bmi.n	8000d52 <_usb_ep0setup+0x252>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000c96:	220b      	movs	r2, #11
 8000c98:	2320      	movs	r3, #32
 8000c9a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000c9e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000ca2:	f7ff fe1d 	bl	80008e0 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	4620      	mov	r0, r4
 8000caa:	461a      	mov	r2, r3
 8000cac:	4619      	mov	r1, r3
 8000cae:	f7ff fe9f 	bl	80009f0 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8000cb2:	f7ff fe2d 	bl	8000910 <_dbg_check_unlock_from_isr>
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f383 8811 	msr	BASEPRI, r3
}
 8000cbc:	bd70      	pop	{r4, r5, r6, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d18a      	bne.n	8000bd8 <_usb_ep0setup+0xd8>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	f104 007c 	add.w	r0, r4, #124	; 0x7c
 8000cc8:	6723      	str	r3, [r4, #112]	; 0x70
 8000cca:	66a0      	str	r0, [r4, #104]	; 0x68
 8000ccc:	4613      	mov	r3, r2
 8000cce:	66e2      	str	r2, [r4, #108]	; 0x6c
    return true;
 8000cd0:	e740      	b.n	8000b54 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000cd2:	f640 4202 	movw	r2, #3074	; 0xc02
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	f47f af7e 	bne.w	8000bd8 <_usb_ep0setup+0xd8>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8000cdc:	2202      	movs	r2, #2
 8000cde:	2000      	movs	r0, #0
 8000ce0:	4b43      	ldr	r3, [pc, #268]	; (8000df0 <_usb_ep0setup+0x2f0>)
 8000ce2:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
 8000ce6:	66a3      	str	r3, [r4, #104]	; 0x68
 8000ce8:	4613      	mov	r3, r2
 8000cea:	e733      	b.n	8000b54 <_usb_ep0setup+0x54>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8000cec:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000cf0:	f000 80ab 	beq.w	8000e4a <_usb_ep0setup+0x34a>
 8000cf4:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8000cf8:	2b01      	cmp	r3, #1
 8000cfa:	f63f af6d 	bhi.w	8000bd8 <_usb_ep0setup+0xd8>
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8000cfe:	6862      	ldr	r2, [r4, #4]
 8000d00:	4620      	mov	r0, r4
 8000d02:	6855      	ldr	r5, [r2, #4]
 8000d04:	f8b4 3078 	ldrh.w	r3, [r4, #120]	; 0x78
 8000d08:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 8000d0c:	f894 1077 	ldrb.w	r1, [r4, #119]	; 0x77
 8000d10:	47a8      	blx	r5
    if (dp == NULL) {
 8000d12:	2800      	cmp	r0, #0
 8000d14:	f43f af60 	beq.w	8000bd8 <_usb_ep0setup+0xd8>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000d18:	e9d0 3200 	ldrd	r3, r2, [r0]
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8000d1c:	f894 1074 	ldrb.w	r1, [r4, #116]	; 0x74
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 8000d20:	e9c4 231a 	strd	r2, r3, [r4, #104]	; 0x68
 8000d24:	6726      	str	r6, [r4, #112]	; 0x70
    return true;
 8000d26:	e715      	b.n	8000b54 <_usb_ep0setup+0x54>
    if (usbp->ep0n != 0U) {
 8000d28:	b19b      	cbz	r3, 8000d52 <_usb_ep0setup+0x252>
      usbp->ep0state = USB_EP0_IN_TX;
 8000d2a:	2209      	movs	r2, #9
 8000d2c:	2320      	movs	r3, #32
 8000d2e:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000d32:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000d36:	f7ff fdd3 	bl	80008e0 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8000d3a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	; 0x68
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4620      	mov	r0, r4
 8000d42:	f7ff fe55 	bl	80009f0 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8000d46:	f7ff fde3 	bl	8000910 <_dbg_check_unlock_from_isr>
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f383 8811 	msr	BASEPRI, r3
}
 8000d50:	bd70      	pop	{r4, r5, r6, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8000d52:	2214      	movs	r2, #20
 8000d54:	2320      	movs	r3, #32
 8000d56:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000d5a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000d5e:	f7ff fdbf 	bl	80008e0 <_dbg_check_lock_from_isr>
      usbStartReceiveI(usbp, 0, NULL, 0);
 8000d62:	2300      	movs	r3, #0
 8000d64:	4620      	mov	r0, r4
 8000d66:	461a      	mov	r2, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f7ff fdf9 	bl	8000960 <usbStartReceiveI>
  _dbg_check_unlock_from_isr();
 8000d6e:	f7ff fdcf 	bl	8000910 <_dbg_check_unlock_from_isr>
 8000d72:	2300      	movs	r3, #0
 8000d74:	f383 8811 	msr	BASEPRI, r3
}
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
  switch (STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) {
 8000d7a:	f012 0230 	ands.w	r2, r2, #48	; 0x30
 8000d7e:	f43f af2b 	beq.w	8000bd8 <_usb_ep0setup+0xd8>
 8000d82:	2a10      	cmp	r2, #16
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8000d84:	f04f 0002 	mov.w	r0, #2
 8000d88:	f04f 0200 	mov.w	r2, #0
 8000d8c:	f47f af5d 	bne.w	8000c4a <_usb_ep0setup+0x14a>
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8000d90:	4d18      	ldr	r5, [pc, #96]	; (8000df4 <_usb_ep0setup+0x2f4>)
 8000d92:	6722      	str	r2, [r4, #112]	; 0x70
 8000d94:	e9c4 501a 	strd	r5, r0, [r4, #104]	; 0x68
        return true;
 8000d98:	e6dc      	b.n	8000b54 <_usb_ep0setup+0x54>
      usbp->status |= 2U;
 8000d9a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000d9e:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
      usbp->status |= 2U;
 8000da2:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000da6:	66a6      	str	r6, [r4, #104]	; 0x68
      usbp->status |= 2U;
 8000da8:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8000dac:	e771      	b.n	8000c92 <_usb_ep0setup+0x192>
 8000dae:	2320      	movs	r3, #32
 8000db0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000db4:	f7ff fd94 	bl	80008e0 <_dbg_check_lock_from_isr>
  osalDbgCheckClassI();
 8000db8:	f7ff fdc2 	bl	8000940 <chDbgCheckClassI>
  osalDbgAssert(usbp->state == USB_ACTIVE, "invalid state");
 8000dbc:	7823      	ldrb	r3, [r4, #0]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	f000 808b 	beq.w	8000eda <_usb_ep0setup+0x3da>
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <_usb_ep0setup+0x2f8>)
 8000dc6:	f7ff fcd3 	bl	8000770 <chSysHalt>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8000dca:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	f47f af02 	bne.w	8000bd8 <_usb_ep0setup+0xd8>
      usbp->status &= ~2U;
 8000dd4:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000dd8:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
      usbp->status &= ~2U;
 8000ddc:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000de0:	66a6      	str	r6, [r4, #104]	; 0x68
      usbp->status &= ~2U;
 8000de2:	f8a4 307c 	strh.w	r3, [r4, #124]	; 0x7c
      return true;
 8000de6:	e754      	b.n	8000c92 <_usb_ep0setup+0x192>
 8000de8:	40005c00 	.word	0x40005c00
 8000dec:	0801107c 	.word	0x0801107c
 8000df0:	08011884 	.word	0x08011884
 8000df4:	080110b0 	.word	0x080110b0
 8000df8:	08010fc0 	.word	0x08010fc0
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000dfc:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f47f aee9 	bne.w	8000bd8 <_usb_ep0setup+0xd8>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000e06:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 8000e0a:	f012 030f 	ands.w	r3, r2, #15
 8000e0e:	d017      	beq.n	8000e40 <_usb_ep0setup+0x340>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000e16:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000e1a:	f012 0f80 	tst.w	r2, #128	; 0x80

  (void)usbp;

  /* Makes sure to not put to NAK an endpoint that is already
     transferring.*/
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	d14a      	bne.n	8000eb8 <_usb_ep0setup+0x3b8>
  if ((STM32_USB->EPR[ep] & EPR_STAT_RX_MASK) != EPR_STAT_RX_VALID)
 8000e22:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000e26:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8000e2a:	d009      	beq.n	8000e40 <_usb_ep0setup+0x340>
    EPR_SET_STAT_TX(ep, EPR_STAT_RX_NAK);
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000e32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e36:	f442 4220 	orr.w	r2, r2, #40960	; 0xa000
 8000e3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e3e:	601a      	str	r2, [r3, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e40:	2300      	movs	r3, #0
 8000e42:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
 8000e46:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8000e48:	e723      	b.n	8000c92 <_usb_ep0setup+0x192>
    usbSetupTransfer(usbp, NULL, 0, set_address);
 8000e4a:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <_usb_ep0setup+0x438>)
 8000e4c:	e9c4 661a 	strd	r6, r6, [r4, #104]	; 0x68
 8000e50:	6723      	str	r3, [r4, #112]	; 0x70
    return true;
 8000e52:	e71e      	b.n	8000c92 <_usb_ep0setup+0x192>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8000e54:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	f47f aebd 	bne.w	8000bd8 <_usb_ep0setup+0xd8>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8000e5e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8000e62:	f013 020f 	ands.w	r2, r3, #15
 8000e66:	d0eb      	beq.n	8000e40 <_usb_ep0setup+0x340>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000e68:	4834      	ldr	r0, [pc, #208]	; (8000f3c <_usb_ep0setup+0x43c>)
      if ((usbp->setup[4] & 0x80U) != 0U) {
 8000e6a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8000e6e:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8000e72:	d114      	bne.n	8000e9e <_usb_ep0setup+0x39e>
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000e74:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000e78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e88:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000e8c:	e7d8      	b.n	8000e40 <_usb_ep0setup+0x340>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8000e94:	66a3      	str	r3, [r4, #104]	; 0x68
 8000e96:	6726      	str	r6, [r4, #112]	; 0x70
 8000e98:	4613      	mov	r3, r2
 8000e9a:	66e2      	str	r2, [r4, #108]	; 0x6c
    return true;
 8000e9c:	e65a      	b.n	8000b54 <_usb_ep0setup+0x54>
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000e9e:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8000ea2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000ea6:	f083 0310 	eor.w	r3, r3, #16
 8000eaa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8000eb6:	e7c3      	b.n	8000e40 <_usb_ep0setup+0x340>
  if ((STM32_USB->EPR[ep] & EPR_STAT_TX_MASK) != EPR_STAT_TX_VALID)
 8000eb8:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000ebc:	2a30      	cmp	r2, #48	; 0x30
 8000ebe:	d0bf      	beq.n	8000e40 <_usb_ep0setup+0x340>
    EPR_SET_STAT_TX(ep, EPR_STAT_TX_NAK);
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000ec6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000eca:	f082 0220 	eor.w	r2, r2, #32
 8000ece:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	e7b2      	b.n	8000e40 <_usb_ep0setup+0x340>
  usbp->pmnext = 64;
 8000eda:	2140      	movs	r1, #64	; 0x40
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8000edc:	2201      	movs	r2, #1
    EPR_TOGGLE(i, 0);
 8000ede:	f248 0080 	movw	r0, #32896	; 0x8080
  usbp->transmitting &= 1U;
 8000ee2:	68a3      	ldr	r3, [r4, #8]
    usbp->epc[i] = NULL;
 8000ee4:	e9c4 6605 	strd	r6, r6, [r4, #20]
 8000ee8:	e9c4 6607 	strd	r6, r6, [r4, #28]
 8000eec:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
  usbp->transmitting &= 1U;
 8000ef0:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    usbp->epc[i] = NULL;
 8000ef4:	6126      	str	r6, [r4, #16]
  usbp->transmitting &= 1U;
 8000ef6:	60a3      	str	r3, [r4, #8]
  usbp->pmnext = 64;
 8000ef8:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
    EPR_TOGGLE(i, 0);
 8000efc:	0093      	lsls	r3, r2, #2
 8000efe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f02:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000f06:	6819      	ldr	r1, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8000f08:	3201      	adds	r2, #1
    EPR_TOGGLE(i, 0);
 8000f0a:	4301      	orrs	r1, r0
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8000f0c:	2a08      	cmp	r2, #8
    EPR_TOGGLE(i, 0);
 8000f0e:	6019      	str	r1, [r3, #0]
    EPR_SET(i, 0);
 8000f10:	6018      	str	r0, [r3, #0]
  for (i = 1; i <= USB_ENDOPOINTS_NUMBER; i++) {
 8000f12:	d1f3      	bne.n	8000efc <_usb_ep0setup+0x3fc>
  _dbg_check_unlock_from_isr();
 8000f14:	f7ff fcfc 	bl	8000910 <_dbg_check_unlock_from_isr>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 8000f1e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8000f20:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 8000f22:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
        usbp->state = USB_SELECTED;
 8000f26:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8000f28:	6813      	ldr	r3, [r2, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	f43f ae9e 	beq.w	8000c6c <_usb_ep0setup+0x16c>
 8000f30:	4620      	mov	r0, r4
 8000f32:	4798      	blx	r3
 8000f34:	e69a      	b.n	8000c6c <_usb_ep0setup+0x16c>
 8000f36:	bf00      	nop
 8000f38:	080002f1 	.word	0x080002f1
 8000f3c:	40005c00 	.word	0x40005c00

08000f40 <_usb_ep0in>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000f40:	b538      	push	{r3, r4, r5, lr}
 8000f42:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
 8000f46:	4604      	mov	r4, r0
 8000f48:	3b06      	subs	r3, #6
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	d804      	bhi.n	8000f58 <_usb_ep0in+0x18>
 8000f4e:	e8df f003 	tbb	[pc, r3]
 8000f52:	032e      	.short	0x032e
 8000f54:	27130603 	.word	0x27130603
    return;
  case USB_EP0_STP_WAITING:
  case USB_EP0_OUT_WAITING_STS:
  case USB_EP0_OUT_RX:
    /* All the above are invalid states in the IN phase.*/
    osalDbgAssert(false, "EP0 state machine error");
 8000f58:	482e      	ldr	r0, [pc, #184]	; (8001014 <_usb_ep0in+0xd4>)
 8000f5a:	f7ff fc09 	bl	8000770 <chSysHalt>
    if ((usbp->ep0n < max) &&
 8000f5e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    max = (size_t)get_hword(&usbp->setup[6]);
 8000f60:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
    if ((usbp->ep0n < max) &&
 8000f64:	4293      	cmp	r3, r2
 8000f66:	d207      	bcs.n	8000f78 <_usb_ep0in+0x38>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000f68:	68c2      	ldr	r2, [r0, #12]
 8000f6a:	8a15      	ldrh	r5, [r2, #16]
 8000f6c:	fbb3 f2f5 	udiv	r2, r3, r5
 8000f70:	fb05 3512 	mls	r5, r5, r2, r3
    if ((usbp->ep0n < max) &&
 8000f74:	2d00      	cmp	r5, #0
 8000f76:	d039      	beq.n	8000fec <_usb_ep0in+0xac>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8000f78:	2214      	movs	r2, #20
 8000f7a:	2320      	movs	r3, #32
 8000f7c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
 8000f80:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000f84:	f7ff fcac 	bl	80008e0 <_dbg_check_lock_from_isr>
    usbStartReceiveI(usbp, 0, NULL, 0);
 8000f88:	2300      	movs	r3, #0
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fce6 	bl	8000960 <usbStartReceiveI>
  _dbg_check_unlock_from_isr();
 8000f94:	f7ff fcbc 	bl	8000910 <_dbg_check_unlock_from_isr>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f383 8811 	msr	BASEPRI, r3
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8000f9e:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8000fa0:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8000fa2:	b103      	cbz	r3, 8000fa6 <_usb_ep0in+0x66>
      usbp->ep0endcb(usbp);
 8000fa4:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000fac:	bd38      	pop	{r3, r4, r5, pc}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8000fae:	f248 0080 	movw	r0, #32896	; 0x8080
 8000fb2:	4919      	ldr	r1, [pc, #100]	; (8001018 <_usb_ep0in+0xd8>)
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000fb4:	6863      	ldr	r3, [r4, #4]
 8000fb6:	680a      	ldr	r2, [r1, #0]
 8000fb8:	681d      	ldr	r5, [r3, #0]
 8000fba:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
 8000fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc2:	f082 0210 	eor.w	r2, r2, #16
 8000fc6:	4302      	orrs	r2, r0
 8000fc8:	600a      	str	r2, [r1, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 8000fca:	680b      	ldr	r3, [r1, #0]
 8000fcc:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8000fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fd4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8000fd8:	4303      	orrs	r3, r0
 8000fda:	600b      	str	r3, [r1, #0]
 8000fdc:	b115      	cbz	r5, 8000fe4 <_usb_ep0in+0xa4>
 8000fde:	2106      	movs	r1, #6
 8000fe0:	4620      	mov	r0, r4
 8000fe2:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000fe4:	2306      	movs	r3, #6
 8000fe6:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8000fea:	bd38      	pop	{r3, r4, r5, pc}
 8000fec:	2320      	movs	r3, #32
 8000fee:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8000ff2:	f7ff fc75 	bl	80008e0 <_dbg_check_lock_from_isr>
      usbStartTransmitI(usbp, 0, NULL, 0);
 8000ff6:	462b      	mov	r3, r5
 8000ff8:	462a      	mov	r2, r5
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	4620      	mov	r0, r4
 8000ffe:	f7ff fcf7 	bl	80009f0 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8001002:	f7ff fc85 	bl	8000910 <_dbg_check_unlock_from_isr>
 8001006:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 800100a:	230a      	movs	r3, #10
 800100c:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 8001010:	bd38      	pop	{r3, r4, r5, pc}
 8001012:	bf00      	nop
 8001014:	08010d34 	.word	0x08010d34
 8001018:	40005c00 	.word	0x40005c00
 800101c:	00000000 	.word	0x00000000

08001020 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001020:	b570      	push	{r4, r5, r6, lr}

  (void)ep;
  switch (usbp->ep0state) {
 8001022:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8001026:	4604      	mov	r4, r0
  switch (usbp->ep0state) {
 8001028:	2914      	cmp	r1, #20
 800102a:	d006      	beq.n	800103a <_usb_ep0out+0x1a>
 800102c:	2915      	cmp	r1, #21
 800102e:	d02e      	beq.n	800108e <_usb_ep0out+0x6e>
 8001030:	2906      	cmp	r1, #6
 8001032:	d00d      	beq.n	8001050 <_usb_ep0out+0x30>
  case USB_EP0_STP_WAITING:
  case USB_EP0_IN_TX:
  case USB_EP0_IN_WAITING_TX0:
  case USB_EP0_IN_SENDING_STS:
    /* All the above are invalid states in the IN phase.*/
    osalDbgAssert(false, "EP0 state machine error");
 8001034:	4820      	ldr	r0, [pc, #128]	; (80010b8 <_usb_ep0out+0x98>)
 8001036:	f7ff fb9b 	bl	8000770 <chSysHalt>
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 800103a:	68c3      	ldr	r3, [r0, #12]
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	b92b      	cbnz	r3, 800104e <_usb_ep0out+0x2e>
    if (usbp->ep0endcb != NULL) {
 8001042:	6f03      	ldr	r3, [r0, #112]	; 0x70
 8001044:	b103      	cbz	r3, 8001048 <_usb_ep0out+0x28>
      usbp->ep0endcb(usbp);
 8001046:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001048:	2300      	movs	r3, #0
 800104a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 800104e:	bd70      	pop	{r4, r5, r6, pc}
  EPR_SET_STAT_TX(ep, EPR_STAT_TX_STALL);
 8001050:	f248 0c80 	movw	ip, #32896	; 0x8080
 8001054:	4d19      	ldr	r5, [pc, #100]	; (80010bc <_usb_ep0out+0x9c>)
 8001056:	682b      	ldr	r3, [r5, #0]
 8001058:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 800105c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001060:	f083 0210 	eor.w	r2, r3, #16
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001064:	6843      	ldr	r3, [r0, #4]
 8001066:	ea42 020c 	orr.w	r2, r2, ip
 800106a:	681e      	ldr	r6, [r3, #0]
 800106c:	602a      	str	r2, [r5, #0]
  EPR_SET_STAT_RX(ep, EPR_STAT_RX_STALL);
 800106e:	682b      	ldr	r3, [r5, #0]
 8001070:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001078:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800107c:	ea43 030c 	orr.w	r3, r3, ip
 8001080:	602b      	str	r3, [r5, #0]
 8001082:	b106      	cbz	r6, 8001086 <_usb_ep0out+0x66>
 8001084:	47b0      	blx	r6
    usbp->ep0state = USB_EP0_ERROR;
 8001086:	2306      	movs	r3, #6
 8001088:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
}
 800108c:	bd70      	pop	{r4, r5, r6, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 800108e:	220b      	movs	r2, #11
 8001090:	2320      	movs	r3, #32
 8001092:	f880 2064 	strb.w	r2, [r0, #100]	; 0x64
 8001096:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800109a:	f7ff fc21 	bl	80008e0 <_dbg_check_lock_from_isr>
    usbStartTransmitI(usbp, 0, NULL, 0);
 800109e:	2300      	movs	r3, #0
 80010a0:	4620      	mov	r0, r4
 80010a2:	461a      	mov	r2, r3
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fca3 	bl	80009f0 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 80010aa:	f7ff fc31 	bl	8000910 <_dbg_check_unlock_from_isr>
 80010ae:	2300      	movs	r3, #0
 80010b0:	f383 8811 	msr	BASEPRI, r3
}
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
 80010b6:	bf00      	nop
 80010b8:	08010b54 	.word	0x08010b54
 80010bc:	40005c00 	.word	0x40005c00

080010c0 <VectorB0>:
/**
 * @brief   Interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 80010c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80010c4:	4c61      	ldr	r4, [pc, #388]	; (800124c <VectorB0+0x18c>)
 80010c6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80010c8:	f013 0502 	ands.w	r5, r3, #2
 80010cc:	d02d      	beq.n	800112a <VectorB0+0x6a>
 80010ce:	2220      	movs	r2, #32
 80010d0:	f382 8811 	msr	BASEPRI, r2
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80010d4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	db24      	blt.n	8001124 <VectorB0+0x64>
 80010da:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80010dc:	bb15      	cbnz	r5, 8001124 <VectorB0+0x64>
  ch.dbg.isr_cnt++;
 80010de:	3301      	adds	r3, #1
 80010e0:	6323      	str	r3, [r4, #48]	; 0x30
 80010e2:	f385 8811 	msr	BASEPRI, r5
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 80010e6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
 80010ea:	6933      	ldr	r3, [r6, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80010ec:	68f1      	ldr	r1, [r6, #12]
 80010ee:	400b      	ands	r3, r1
 80010f0:	b2d9      	uxtb	r1, r3
  timp->SR = ~sr;
 80010f2:	43c9      	mvns	r1, r1
 80010f4:	6131      	str	r1, [r6, #16]

  if ((sr & TIM_SR_CC1IF) != 0U)
 80010f6:	0799      	lsls	r1, r3, #30
 80010f8:	d427      	bmi.n	800114a <VectorB0+0x8a>
 80010fa:	2220      	movs	r2, #32
 80010fc:	f382 8811 	msr	BASEPRI, r2
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001100:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001102:	2b00      	cmp	r3, #0
 8001104:	dd1e      	ble.n	8001144 <VectorB0+0x84>
 8001106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001108:	b9e1      	cbnz	r1, 8001144 <VectorB0+0x84>
  ch.dbg.isr_cnt--;
 800110a:	3b01      	subs	r3, #1
 800110c:	6323      	str	r3, [r4, #48]	; 0x30
 800110e:	f381 8811 	msr	BASEPRI, r1
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8001112:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8001114:	f013 0502 	ands.w	r5, r3, #2
 8001118:	f000 8083 	beq.w	8001222 <VectorB0+0x162>
}
 800111c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8001120:	f7ff b976 	b.w	8000410 <_port_irq_epilogue>
    chSysHalt("SV#8");
 8001124:	484a      	ldr	r0, [pc, #296]	; (8001250 <VectorB0+0x190>)
 8001126:	f7ff fb23 	bl	8000770 <chSysHalt>
 800112a:	2320      	movs	r3, #32
 800112c:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8001130:	2202      	movs	r2, #2
 8001132:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8001134:	4947      	ldr	r1, [pc, #284]	; (8001254 <VectorB0+0x194>)
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8001136:	701a      	strb	r2, [r3, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8001138:	6099      	str	r1, [r3, #8]
    trace_next();
 800113a:	f7ff f8f9 	bl	8000330 <trace_next>
 800113e:	f385 8811 	msr	BASEPRI, r5
 8001142:	e7c4      	b.n	80010ce <VectorB0+0xe>
    chSysHalt("SV#9");
 8001144:	4844      	ldr	r0, [pc, #272]	; (8001258 <VectorB0+0x198>)
 8001146:	f7ff fb13 	bl	8000770 <chSysHalt>
 800114a:	f382 8811 	msr	BASEPRI, r2
  _dbg_check_lock_from_isr();
 800114e:	f7ff fbc7 	bl	80008e0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8001152:	f7ff fbf5 	bl	8000940 <chDbgCheckClassI>
 * @iclass
 */
void chVTDoTickI(void) {
  virtual_timers_list_t *vtlp = &ch.vtlist;

  chDbgCheckClassI();
 8001156:	f7ff fbf3 	bl	8000940 <chDbgCheckClassI>
 800115a:	6a71      	ldr	r1, [r6, #36]	; 0x24
  delta_list_t *dlp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  dlp = vtlp->dlist.next;
 800115c:	69e3      	ldr	r3, [r4, #28]
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 800115e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001160:	b289      	uxth	r1, r1

    /* The list scan is limited by the timers header having
       "vtlp->dlist.delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < dlp->delta) {
 8001162:	f8d3 8008 	ldr.w	r8, [r3, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001166:	1a8f      	subs	r7, r1, r2
 8001168:	b2bf      	uxth	r7, r7
 800116a:	45b8      	cmp	r8, r7
 800116c:	d865      	bhi.n	800123a <VectorB0+0x17a>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800116e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001170:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800125c <VectorB0+0x19c>
 8001174:	f04f 0a20 	mov.w	sl, #32
    do {
      vtfunc_t fn;
      virtual_timer_t *vtp = (virtual_timer_t *)dlp;

      /* The "last time" becomes this timer's expiration time.*/
      vtlp->lasttime += dlp->delta;
 8001178:	4442      	add	r2, r8
 800117a:	8522      	strh	r2, [r4, #40]	; 0x28
      nowdelta -= dlp->delta;

      /* Removing the timer from the list.*/
      dlp->next->prev = &vtlp->dlist;
 800117c:	681a      	ldr	r2, [r3, #0]
      vtlp->dlist.next = dlp->next;

      /* Calling the associated function and then marking the timer as
         non active.*/
      fn = vtp->func;
 800117e:	68d9      	ldr	r1, [r3, #12]
      vtp->func = NULL;

      /* If the list becomes empty then the timer is stopped.*/
      if (is_vtlist_empty(&vtlp->dlist)) {
 8001180:	454a      	cmp	r2, r9
      dlp->next->prev = &vtlp->dlist;
 8001182:	f8c2 9004 	str.w	r9, [r2, #4]
      vtlp->dlist.next = dlp->next;
 8001186:	61e2      	str	r2, [r4, #28]
      vtp->func = NULL;
 8001188:	60dd      	str	r5, [r3, #12]
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

#if ST_LLD_NUM_ALARMS == 1
  STM32_ST_TIM->DIER = 0U;
 800118a:	bf08      	it	eq
 800118c:	60f5      	streq	r5, [r6, #12]
 800118e:	2800      	cmp	r0, #0
 8001190:	dd41      	ble.n	8001216 <VectorB0+0x156>
 8001192:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8001194:	2a00      	cmp	r2, #0
 8001196:	dd3e      	ble.n	8001216 <VectorB0+0x156>
  _dbg_leave_lock();
 8001198:	6365      	str	r5, [r4, #52]	; 0x34
 800119a:	f385 8811 	msr	BASEPRI, r5
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800119e:	6918      	ldr	r0, [r3, #16]
 80011a0:	4788      	blx	r1
 80011a2:	f38a 8811 	msr	BASEPRI, sl
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80011a6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80011a8:	2800      	cmp	r0, #0
 80011aa:	dd37      	ble.n	800121c <VectorB0+0x15c>
 80011ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d134      	bne.n	800121c <VectorB0+0x15c>
  _dbg_enter_lock();
 80011b2:	2301      	movs	r3, #1
 80011b4:	6363      	str	r3, [r4, #52]	; 0x34
      chSysLockFromISR();

      /* Next element in the list.*/
      dlp = vtlp->dlist.next;
 80011b6:	69e3      	ldr	r3, [r4, #28]
      nowdelta -= dlp->delta;
 80011b8:	eba7 0708 	sub.w	r7, r7, r8
    }
    while (dlp->delta <= nowdelta);
 80011bc:	f8d3 8008 	ldr.w	r8, [r3, #8]
    nowdelta = chTimeDiffX(vtlp->lasttime, now);
 80011c0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (dlp->delta <= nowdelta);
 80011c2:	4547      	cmp	r7, r8
 80011c4:	d2d8      	bcs.n	8001178 <VectorB0+0xb8>
  return (systime_t)STM32_ST_TIM->CNT;
 80011c6:	6a71      	ldr	r1, [r6, #36]	; 0x24
 80011c8:	b289      	uxth	r1, r1
 80011ca:	1a8f      	subs	r7, r1, r2
 80011cc:	b2bf      	uxth	r7, r7
    if (nowdelta < dlp->delta) {
 80011ce:	4547      	cmp	r7, r8
 80011d0:	d2d0      	bcs.n	8001174 <VectorB0+0xb4>
  }

  /* If the list is empty, nothing else to do.*/
  if (is_vtlist_empty(&vtlp->dlist)) {
 80011d2:	454b      	cmp	r3, r9
 80011d4:	d019      	beq.n	800120a <VectorB0+0x14a>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  vtlp->lasttime += nowdelta;
  vtlp->dlist.next->delta -= nowdelta;
 80011d6:	689a      	ldr	r2, [r3, #8]
  vtlp->lasttime += nowdelta;
 80011d8:	8521      	strh	r1, [r4, #40]	; 0x28
  vtlp->dlist.next->delta -= nowdelta;
 80011da:	1bd7      	subs	r7, r2, r7
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80011dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011e0:	609f      	str	r7, [r3, #8]
 80011e2:	68d3      	ldr	r3, [r2, #12]
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80011e4:	079b      	lsls	r3, r3, #30
 80011e6:	d52b      	bpl.n	8001240 <VectorB0+0x180>
  return systime + (systime_t)interval;
 80011e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ec:	429f      	cmp	r7, r3
 80011ee:	bf28      	it	cs
 80011f0:	461f      	movcs	r7, r3
 80011f2:	2f02      	cmp	r7, #2
 80011f4:	bf38      	it	cc
 80011f6:	2702      	movcc	r7, #2
 80011f8:	b2bf      	uxth	r7, r7
 80011fa:	187b      	adds	r3, r7, r1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	6353      	str	r3, [r2, #52]	; 0x34
  return (systime_t)STM32_ST_TIM->CNT;
 8001200:	6a53      	ldr	r3, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001202:	1a5b      	subs	r3, r3, r1
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX()) <=
 8001204:	b29b      	uxth	r3, r3
 8001206:	429f      	cmp	r7, r3
 8001208:	d31d      	bcc.n	8001246 <VectorB0+0x186>
  _dbg_check_unlock_from_isr();
 800120a:	f7ff fb81 	bl	8000910 <_dbg_check_unlock_from_isr>
 800120e:	2300      	movs	r3, #0
 8001210:	f383 8811 	msr	BASEPRI, r3
 8001214:	e771      	b.n	80010fa <VectorB0+0x3a>
    chSysHalt("SV#7");
 8001216:	4812      	ldr	r0, [pc, #72]	; (8001260 <VectorB0+0x1a0>)
 8001218:	f7ff faaa 	bl	8000770 <chSysHalt>
    chSysHalt("SV#6");
 800121c:	4811      	ldr	r0, [pc, #68]	; (8001264 <VectorB0+0x1a4>)
 800121e:	f7ff faa7 	bl	8000770 <chSysHalt>
 8001222:	f382 8811 	msr	BASEPRI, r2
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8001226:	2203      	movs	r2, #3
 8001228:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 800122a:	490a      	ldr	r1, [pc, #40]	; (8001254 <VectorB0+0x194>)
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800122c:	701a      	strb	r2, [r3, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 800122e:	6099      	str	r1, [r3, #8]
    trace_next();
 8001230:	f7ff f87e 	bl	8000330 <trace_next>
 8001234:	f385 8811 	msr	BASEPRI, r5
 8001238:	e770      	b.n	800111c <VectorB0+0x5c>
 800123a:	f8df 9020 	ldr.w	r9, [pc, #32]	; 800125c <VectorB0+0x19c>
 800123e:	e7c8      	b.n	80011d2 <VectorB0+0x112>
 8001240:	4809      	ldr	r0, [pc, #36]	; (8001268 <VectorB0+0x1a8>)
 8001242:	f7ff fa95 	bl	8000770 <chSysHalt>
 8001246:	4809      	ldr	r0, [pc, #36]	; (800126c <VectorB0+0x1ac>)
 8001248:	f7ff fa92 	bl	8000770 <chSysHalt>
 800124c:	20000d70 	.word	0x20000d70
 8001250:	0800f234 	.word	0x0800f234
 8001254:	08010bec 	.word	0x08010bec
 8001258:	0800f23c 	.word	0x0800f23c
 800125c:	20000d8c 	.word	0x20000d8c
 8001260:	0800f224 	.word	0x0800f224
 8001264:	0800f21c 	.word	0x0800f21c
 8001268:	08010c88 	.word	0x08010c88
 800126c:	08010c38 	.word	0x08010c38

08001270 <usb_lld_init_endpoint>:
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8001270:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_init_endpoint(USBDriver *usbp, usbep_t ep) {
 8001274:	b570      	push	{r4, r5, r6, lr}
  const USBEndpointConfig *epcp = usbp->epc[ep];
 8001276:	68dc      	ldr	r4, [r3, #12]
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8001278:	6823      	ldr	r3, [r4, #0]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d06a      	beq.n	8001358 <usb_lld_init_endpoint+0xe8>
 8001282:	2b03      	cmp	r3, #3
 8001284:	d062      	beq.n	800134c <usb_lld_init_endpoint+0xdc>
 8001286:	2b01      	cmp	r3, #1
 8001288:	d068      	beq.n	800135c <usb_lld_init_endpoint+0xec>
    epr = EPR_EP_TYPE_CONTROL;
 800128a:	f44f 7300 	mov.w	r3, #512	; 0x200
  dp = USB_GET_DESCRIPTOR(ep);
 800128e:	4a38      	ldr	r2, [pc, #224]	; (8001370 <usb_lld_init_endpoint+0x100>)
  if (epcp->in_state != NULL) {
 8001290:	6965      	ldr	r5, [r4, #20]
  dp = USB_GET_DESCRIPTOR(ep);
 8001292:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001294:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8001298:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800129c:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 80012a0:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
  if (epcp->in_state != NULL) {
 80012a4:	b195      	cbz	r5, 80012cc <usb_lld_init_endpoint+0x5c>
    dp->TXCOUNT0 = 0;
 80012a6:	2500      	movs	r5, #0
 80012a8:	f8cc 5004 	str.w	r5, [ip, #4]
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80012ac:	8a25      	ldrh	r5, [r4, #16]
  next = usbp->pmnext;
 80012ae:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 80012b2:	3501      	adds	r5, #1
 80012b4:	f025 0501 	bic.w	r5, r5, #1
 80012b8:	4435      	add	r5, r6
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 80012ba:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 80012be:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 80012c2:	d846      	bhi.n	8001352 <usb_lld_init_endpoint+0xe2>
    dp->TXADDR0  = usb_pm_alloc(usbp, epcp->in_maxsize);
 80012c4:	f84e 6002 	str.w	r6, [lr, r2]
    epr |= EPR_STAT_TX_NAK;
 80012c8:	f043 0320 	orr.w	r3, r3, #32
  if (epcp->out_state != NULL) {
 80012cc:	69a2      	ldr	r2, [r4, #24]
 80012ce:	b1ea      	cbz	r2, 800130c <usb_lld_init_endpoint+0x9c>
    if (epcp->out_maxsize > 62)
 80012d0:	8a62      	ldrh	r2, [r4, #18]
 80012d2:	2a3e      	cmp	r2, #62	; 0x3e
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80012d4:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
    if (epcp->out_maxsize > 62)
 80012d8:	d943      	bls.n	8001362 <usb_lld_init_endpoint+0xf2>
      nblocks = (((((epcp->out_maxsize - 1) | 0x1f) + 1) / 32) << 10) |
 80012da:	f044 041f 	orr.w	r4, r4, #31
 80012de:	4d25      	ldr	r5, [pc, #148]	; (8001374 <usb_lld_init_endpoint+0x104>)
 80012e0:	3401      	adds	r4, #1
 80012e2:	1164      	asrs	r4, r4, #5
 80012e4:	ea45 2484 	orr.w	r4, r5, r4, lsl #10
 80012e8:	b2a4      	uxth	r4, r4
    dp->RXCOUNT0 = nblocks;
 80012ea:	f8cc 400c 	str.w	r4, [ip, #12]
  usbp->pmnext += (size + 1) & ~1;
 80012ee:	3201      	adds	r2, #1
  next = usbp->pmnext;
 80012f0:	f8d0 4084 	ldr.w	r4, [r0, #132]	; 0x84
  usbp->pmnext += (size + 1) & ~1;
 80012f4:	f022 0201 	bic.w	r2, r2, #1
 80012f8:	4422      	add	r2, r4
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 80012fa:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  usbp->pmnext += (size + 1) & ~1;
 80012fe:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8001302:	d826      	bhi.n	8001352 <usb_lld_init_endpoint+0xe2>
    dp->RXADDR0  = usb_pm_alloc(usbp, epcp->out_maxsize);
 8001304:	f8cc 4008 	str.w	r4, [ip, #8]
    epr |= EPR_STAT_RX_NAK;
 8001308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    epr |= EPR_DTOG_RX;
 800130c:	008a      	lsls	r2, r1, #2
 800130e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001312:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  if (STM32_USB->EPR[ep] & EPR_DTOG_RX) {
 8001316:	6810      	ldr	r0, [r2, #0]
 8001318:	0444      	lsls	r4, r0, #17
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 800131a:	6810      	ldr	r0, [r2, #0]
    epr |= EPR_DTOG_RX;
 800131c:	bf48      	it	mi
 800131e:	f443 4380 	orrmi.w	r3, r3, #16384	; 0x4000
  if (STM32_USB->EPR[ep] & EPR_DTOG_TX) {
 8001322:	0640      	lsls	r0, r0, #25
  EPR_SET(ep, epr | ep);
 8001324:	f248 0080 	movw	r0, #32896	; 0x8080
  EPR_TOGGLE(ep, epr);
 8001328:	f647 0470 	movw	r4, #30832	; 0x7870
    epr |= EPR_DTOG_TX;
 800132c:	bf48      	it	mi
 800132e:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
  EPR_SET(ep, epr | ep);
 8001332:	4319      	orrs	r1, r3
 8001334:	f421 4178 	bic.w	r1, r1, #63488	; 0xf800
 8001338:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 800133c:	4301      	orrs	r1, r0
 800133e:	6011      	str	r1, [r2, #0]
  EPR_TOGGLE(ep, epr);
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	4023      	ands	r3, r4
 8001344:	404b      	eors	r3, r1
 8001346:	4303      	orrs	r3, r0
 8001348:	6013      	str	r3, [r2, #0]
}
 800134a:	bd70      	pop	{r4, r5, r6, pc}
    epr = EPR_EP_TYPE_INTERRUPT;
 800134c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001350:	e79d      	b.n	800128e <usb_lld_init_endpoint+0x1e>
  osalDbgAssert(usbp->pmnext <= STM32_USB_PMA_SIZE, "PMA overflow");
 8001352:	4809      	ldr	r0, [pc, #36]	; (8001378 <usb_lld_init_endpoint+0x108>)
 8001354:	f7ff fa0c 	bl	8000770 <chSysHalt>
  switch (epcp->ep_mode & USB_EP_MODE_TYPE) {
 8001358:	2300      	movs	r3, #0
 800135a:	e798      	b.n	800128e <usb_lld_init_endpoint+0x1e>
    osalDbgAssert(false, "isochronous support disabled");
 800135c:	4807      	ldr	r0, [pc, #28]	; (800137c <usb_lld_init_endpoint+0x10c>)
 800135e:	f7ff fa07 	bl	8000770 <chSysHalt>
      nblocks = ((((epcp->out_maxsize - 1) | 1) + 1) / 2) << 10;
 8001362:	f044 0401 	orr.w	r4, r4, #1
 8001366:	3401      	adds	r4, #1
 8001368:	0264      	lsls	r4, r4, #9
 800136a:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 800136e:	e7bc      	b.n	80012ea <usb_lld_init_endpoint+0x7a>
 8001370:	40005c00 	.word	0x40005c00
 8001374:	ffff8000 	.word	0xffff8000
 8001378:	08010c1c 	.word	0x08010c1c
 800137c:	08010d64 	.word	0x08010d64

08001380 <usbInitEndpointI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <usbInitEndpointI+0x54>)
                      const USBEndpointConfig *epcp) {
 8001382:	b510      	push	{r4, lr}
 8001384:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001386:	2c00      	cmp	r4, #0
 8001388:	db1e      	blt.n	80013c8 <usbInitEndpointI+0x48>
 800138a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800138c:	2b00      	cmp	r3, #0
 800138e:	dd1b      	ble.n	80013c8 <usbInitEndpointI+0x48>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 8001390:	b1e8      	cbz	r0, 80013ce <usbInitEndpointI+0x4e>
  osalDbgAssert(usbp->state == USB_ACTIVE,
 8001392:	7803      	ldrb	r3, [r0, #0]
 8001394:	2b04      	cmp	r3, #4
 8001396:	d11a      	bne.n	80013ce <usbInitEndpointI+0x4e>
  osalDbgAssert(usbp->epc[ep] == NULL, "already initialized");
 8001398:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
 800139c:	f8dc 300c 	ldr.w	r3, [ip, #12]
 80013a0:	b9ab      	cbnz	r3, 80013ce <usbInitEndpointI+0x4e>
  if (epcp->in_state != NULL) {
 80013a2:	6954      	ldr	r4, [r2, #20]
  usbp->epc[ep] = epcp;
 80013a4:	f8cc 200c 	str.w	r2, [ip, #12]
  if (epcp->in_state != NULL) {
 80013a8:	b11c      	cbz	r4, 80013b2 <usbInitEndpointI+0x32>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80013aa:	6023      	str	r3, [r4, #0]
 80013ac:	6063      	str	r3, [r4, #4]
 80013ae:	60a3      	str	r3, [r4, #8]
 80013b0:	60e3      	str	r3, [r4, #12]
  if (epcp->out_state != NULL) {
 80013b2:	6993      	ldr	r3, [r2, #24]
 80013b4:	b123      	cbz	r3, 80013c0 <usbInitEndpointI+0x40>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
}
 80013c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  usb_lld_init_endpoint(usbp, ep);
 80013c4:	f7ff bf54 	b.w	8001270 <usb_lld_init_endpoint>
    chSysHalt("SV#10");
 80013c8:	4803      	ldr	r0, [pc, #12]	; (80013d8 <usbInitEndpointI+0x58>)
 80013ca:	f7ff f9d1 	bl	8000770 <chSysHalt>
  osalDbgCheck((usbp != NULL) && (epcp != NULL));
 80013ce:	4803      	ldr	r0, [pc, #12]	; (80013dc <usbInitEndpointI+0x5c>)
 80013d0:	f7ff f9ce 	bl	8000770 <chSysHalt>
 80013d4:	20000d70 	.word	0x20000d70
 80013d8:	0800f22c 	.word	0x0800f22c
 80013dc:	08011008 	.word	0x08011008

080013e0 <Vector90>:
OSAL_IRQ_HANDLER(STM32_USB1_LP_HANDLER) {
 80013e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80013e4:	f8df a2fc 	ldr.w	sl, [pc, #764]	; 80016e4 <Vector90+0x304>
 80013e8:	b085      	sub	sp, #20
 80013ea:	f8ba 3038 	ldrh.w	r3, [sl, #56]	; 0x38
 80013ee:	f013 0402 	ands.w	r4, r3, #2
 80013f2:	f000 814e 	beq.w	8001692 <Vector90+0x2b2>
 80013f6:	2220      	movs	r2, #32
 80013f8:	f382 8811 	msr	BASEPRI, r2
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80013fc:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8001400:	2b00      	cmp	r3, #0
 8001402:	f2c0 80ab 	blt.w	800155c <Vector90+0x17c>
 8001406:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
 800140a:	2d00      	cmp	r5, #0
 800140c:	f040 80a6 	bne.w	800155c <Vector90+0x17c>
  ch.dbg.isr_cnt++;
 8001410:	3301      	adds	r3, #1
 8001412:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8001416:	f385 8811 	msr	BASEPRI, r5
  istr = STM32_USB->ISTR;
 800141a:	4eb3      	ldr	r6, [pc, #716]	; (80016e8 <Vector90+0x308>)
 800141c:	6c74      	ldr	r4, [r6, #68]	; 0x44
  if (istr & ISTR_RESET) {
 800141e:	0567      	lsls	r7, r4, #21
 8001420:	f100 8188 	bmi.w	8001734 <Vector90+0x354>
  if (istr & ISTR_SUSP) {
 8001424:	0526      	lsls	r6, r4, #20
 8001426:	f100 8169 	bmi.w	80016fc <Vector90+0x31c>
  if (istr & ISTR_WKUP) {
 800142a:	04e5      	lsls	r5, r4, #19
 800142c:	d508      	bpl.n	8001440 <Vector90+0x60>
    uint32_t fnr = STM32_USB->FNR;
 800142e:	4bae      	ldr	r3, [pc, #696]	; (80016e8 <Vector90+0x308>)
 8001430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    if (!(fnr & FNR_RXDP)) {
 8001432:	0410      	lsls	r0, r2, #16
 8001434:	f140 81b3 	bpl.w	800179e <Vector90+0x3be>
    STM32_USB->ISTR = ~ISTR_WKUP;
 8001438:	f46f 5280 	mvn.w	r2, #4096	; 0x1000
 800143c:	4baa      	ldr	r3, [pc, #680]	; (80016e8 <Vector90+0x308>)
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
  if (istr & ISTR_SOF) {
 8001440:	05a1      	lsls	r1, r4, #22
 8001442:	f100 8134 	bmi.w	80016ae <Vector90+0x2ce>
  while (istr & ISTR_CTR) {
 8001446:	0422      	lsls	r2, r4, #16
 8001448:	f140 8106 	bpl.w	8001658 <Vector90+0x278>
 800144c:	f8df 929c 	ldr.w	r9, [pc, #668]	; 80016ec <Vector90+0x30c>
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001450:	f8df b294 	ldr.w	fp, [pc, #660]	; 80016e8 <Vector90+0x308>
 8001454:	e026      	b.n	80014a4 <Vector90+0xc4>
      _usb_isr_invoke_in_cb(usbp, ep);
 8001456:	2101      	movs	r1, #1
 8001458:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 800145c:	68ba      	ldr	r2, [r7, #8]
 800145e:	40a1      	lsls	r1, r4
 8001460:	ea23 0301 	bic.w	r3, r3, r1
 8001464:	f8a9 3008 	strh.w	r3, [r9, #8]
 8001468:	b112      	cbz	r2, 8001470 <Vector90+0x90>
 800146a:	4621      	mov	r1, r4
 800146c:	489f      	ldr	r0, [pc, #636]	; (80016ec <Vector90+0x30c>)
 800146e:	4790      	blx	r2
  if (epr & EPR_CTR_RX) {
 8001470:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8001474:	d011      	beq.n	800149a <Vector90+0xba>
    EPR_CLEAR_CTR_RX(ep);
 8001476:	682b      	ldr	r3, [r5, #0]
    if (epr & EPR_SETUP) {
 8001478:	f418 6f00 	tst.w	r8, #2048	; 0x800
    EPR_CLEAR_CTR_RX(ep);
 800147c:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 8001480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001488:	602b      	str	r3, [r5, #0]
      _usb_isr_invoke_in_cb(usbp, ep);
 800148a:	b2e1      	uxtb	r1, r4
    if (epr & EPR_SETUP) {
 800148c:	d069      	beq.n	8001562 <Vector90+0x182>
      _usb_isr_invoke_setup_cb(usbp, ep);
 800148e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8001492:	6873      	ldr	r3, [r6, #4]
 8001494:	4895      	ldr	r0, [pc, #596]	; (80016ec <Vector90+0x30c>)
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	4798      	blx	r3
    istr = STM32_USB->ISTR;
 800149a:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
  while (istr & ISTR_CTR) {
 800149e:	0423      	lsls	r3, r4, #16
 80014a0:	f140 80da 	bpl.w	8001658 <Vector90+0x278>
    usb_serve_endpoints(usbp, istr & ISTR_EP_ID_MASK);
 80014a4:	f004 040f 	and.w	r4, r4, #15
static void usb_serve_endpoints(USBDriver *usbp, uint32_t ep) {
 80014a8:	00a5      	lsls	r5, r4, #2
 80014aa:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 80014ae:	f505 45b8 	add.w	r5, r5, #23552	; 0x5c00
  uint32_t epr = STM32_USB->EPR[ep];
 80014b2:	f8d5 8000 	ldr.w	r8, [r5]
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80014b6:	1ca6      	adds	r6, r4, #2
 80014b8:	eb09 0386 	add.w	r3, r9, r6, lsl #2
  if (epr & EPR_CTR_TX) {
 80014bc:	f018 0f80 	tst.w	r8, #128	; 0x80
  const USBEndpointConfig *epcp = usbp->epc[ep];
 80014c0:	685f      	ldr	r7, [r3, #4]
  if (epr & EPR_CTR_TX) {
 80014c2:	d0d5      	beq.n	8001470 <Vector90+0x90>
    EPR_CLEAR_CTR_TX(ep);
 80014c4:	682b      	ldr	r3, [r5, #0]
    USBInEndpointState *isp = epcp->in_state;
 80014c6:	f8d7 c014 	ldr.w	ip, [r7, #20]
    EPR_CLEAR_CTR_TX(ep);
 80014ca:	f423 4378 	bic.w	r3, r3, #63488	; 0xf800
 80014ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    isp->txcnt += isp->txlast;
 80014d6:	f8dc 1004 	ldr.w	r1, [ip, #4]
    EPR_CLEAR_CTR_TX(ep);
 80014da:	602b      	str	r3, [r5, #0]
    isp->txcnt += isp->txlast;
 80014dc:	f8dc 300c 	ldr.w	r3, [ip, #12]
    n = isp->txsize - isp->txcnt;
 80014e0:	f8dc 2000 	ldr.w	r2, [ip]
    isp->txcnt += isp->txlast;
 80014e4:	4419      	add	r1, r3
    if (n > 0) {
 80014e6:	1a52      	subs	r2, r2, r1
    isp->txcnt += isp->txlast;
 80014e8:	f8cc 1004 	str.w	r1, [ip, #4]
    if (n > 0) {
 80014ec:	d0b3      	beq.n	8001456 <Vector90+0x76>
      if (n > epcp->in_maxsize)
 80014ee:	8a39      	ldrh	r1, [r7, #16]
      isp->txbuf += isp->txlast;
 80014f0:	f8dc 0008 	ldr.w	r0, [ip, #8]
 80014f4:	428a      	cmp	r2, r1
 80014f6:	bf28      	it	cs
 80014f8:	460a      	movcs	r2, r1
 80014fa:	4418      	add	r0, r3
      isp->txlast = n;
 80014fc:	e9cc 0202 	strd	r0, r2, [ip, #8]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001500:	f8db 3050 	ldr.w	r3, [fp, #80]	; 0x50
 8001504:	0121      	lsls	r1, r4, #4
 8001506:	f103 4c80 	add.w	ip, r3, #1073741824	; 0x40000000
 800150a:	f50c 4cc0 	add.w	ip, ip, #24576	; 0x6000
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 800150e:	f85c 3001 	ldr.w	r3, [ip, r1]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001512:	eb0c 1c04 	add.w	ip, ip, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001516:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800151a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
  udp->TXCOUNT0 = (stm32_usb_pma_t)n;
 800151e:	f8cc 2004 	str.w	r2, [ip, #4]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->TXADDR0);
 8001522:	005b      	lsls	r3, r3, #1
  while (i > 0) {
 8001524:	b16a      	cbz	r2, 8001542 <Vector90+0x162>
 8001526:	1e51      	subs	r1, r2, #1
 8001528:	0849      	lsrs	r1, r1, #1
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8001530:	468c      	mov	ip, r1
 8001532:	e000      	b.n	8001536 <Vector90+0x156>
 8001534:	3204      	adds	r2, #4
    w |= *buf++ << 8;
 8001536:	f830 1b02 	ldrh.w	r1, [r0], #2
  while (i > 0) {
 800153a:	4594      	cmp	ip, r2
    *pmap++ = (stm32_usb_pma_t)w;
 800153c:	6019      	str	r1, [r3, #0]
 800153e:	4613      	mov	r3, r2
  while (i > 0) {
 8001540:	d1f8      	bne.n	8001534 <Vector90+0x154>
      EPR_SET_STAT_TX(ep, EPR_STAT_TX_VALID);
 8001542:	682b      	ldr	r3, [r5, #0]
 8001544:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
 8001548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800154c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8001550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001558:	602b      	str	r3, [r5, #0]
 800155a:	e789      	b.n	8001470 <Vector90+0x90>
    chSysHalt("SV#8");
 800155c:	4864      	ldr	r0, [pc, #400]	; (80016f0 <Vector90+0x310>)
 800155e:	f7ff f907 	bl	8000770 <chSysHalt>
  while (i >= 2) {
 8001562:	f240 33fe 	movw	r3, #1022	; 0x3fe
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 8001566:	f8db 2050 	ldr.w	r2, [fp, #80]	; 0x50
      USBOutEndpointState *osp = epcp->out_state;
 800156a:	f8d7 e018 	ldr.w	lr, [r7, #24]
  stm32_usb_descriptor_t *udp = USB_GET_DESCRIPTOR(ep);
 800156e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001572:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
 8001576:	eb02 1204 	add.w	r2, r2, r4, lsl #4
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800157a:	6890      	ldr	r0, [r2, #8]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 800157c:	f8d2 c00c 	ldr.w	ip, [r2, #12]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001580:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8001584:	f502 5240 	add.w	r2, r2, #12288	; 0x3000
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 8001588:	f8de 0008 	ldr.w	r0, [lr, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 800158c:	0052      	lsls	r2, r2, #1
  while (i >= 2) {
 800158e:	ea1c 0f03 	tst.w	ip, r3
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8001592:	f8cd c008 	str.w	ip, [sp, #8]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 8001596:	9201      	str	r2, [sp, #4]
  n = (size_t)udp->RXCOUNT0 & RXCOUNT_COUNT_MASK;
 8001598:	f3cc 0809 	ubfx	r8, ip, #0, #10
      n = usb_packet_read_to_buffer(ep, osp->rxbuf);
 800159c:	9000      	str	r0, [sp, #0]
  while (i >= 2) {
 800159e:	f000 8112 	beq.w	80017c6 <Vector90+0x3e6>
 80015a2:	f1a8 0302 	sub.w	r3, r8, #2
 80015a6:	085b      	lsrs	r3, r3, #1
 80015a8:	f102 0c04 	add.w	ip, r2, #4
 80015ac:	9303      	str	r3, [sp, #12]
 80015ae:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 80015b2:	9b00      	ldr	r3, [sp, #0]
  stm32_usb_pma_t *pmap = USB_ADDR2PTR(udp->RXADDR0);
 80015b4:	4610      	mov	r0, r2
 80015b6:	1c9a      	adds	r2, r3, #2
    uint32_t w = *pmap++;
 80015b8:	4603      	mov	r3, r0
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	3004      	adds	r0, #4
    *buf++ = (uint8_t)w;
 80015be:	f802 3c02 	strb.w	r3, [r2, #-2]
  while (i >= 2) {
 80015c2:	4560      	cmp	r0, ip
    *buf++ = (uint8_t)(w >> 8);
 80015c4:	ea4f 2313 	mov.w	r3, r3, lsr #8
  while (i >= 2) {
 80015c8:	f102 0202 	add.w	r2, r2, #2
    *buf++ = (uint8_t)(w >> 8);
 80015cc:	f802 3c03 	strb.w	r3, [r2, #-3]
  while (i >= 2) {
 80015d0:	d1f2      	bne.n	80015b8 <Vector90+0x1d8>
 80015d2:	9b03      	ldr	r3, [sp, #12]
    uint32_t w = *pmap++;
 80015d4:	9a01      	ldr	r2, [sp, #4]
 80015d6:	3301      	adds	r3, #1
 80015d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80015dc:	9201      	str	r2, [sp, #4]
    *buf++ = (uint8_t)(w >> 8);
 80015de:	9a00      	ldr	r2, [sp, #0]
 80015e0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80015e4:	9300      	str	r3, [sp, #0]
    i -= 2;
 80015e6:	9b02      	ldr	r3, [sp, #8]
 80015e8:	f003 0301 	and.w	r3, r3, #1
  if (i >= 1) {
 80015ec:	b11b      	cbz	r3, 80015f6 <Vector90+0x216>
    *buf = (uint8_t)*pmap;
 80015ee:	9b01      	ldr	r3, [sp, #4]
 80015f0:	9a00      	ldr	r2, [sp, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	7013      	strb	r3, [r2, #0]
      osp->rxbuf += n;
 80015f6:	f8de 3008 	ldr.w	r3, [lr, #8]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 80015fa:	8a78      	ldrh	r0, [r7, #18]
      osp->rxbuf += n;
 80015fc:	4443      	add	r3, r8
 80015fe:	f8ce 3008 	str.w	r3, [lr, #8]
      osp->rxcnt  += n;
 8001602:	f8de 3004 	ldr.w	r3, [lr, #4]
      osp->rxpkts -= 1;
 8001606:	f8be 200c 	ldrh.w	r2, [lr, #12]
      osp->rxcnt  += n;
 800160a:	4443      	add	r3, r8
 800160c:	f8ce 3004 	str.w	r3, [lr, #4]
      osp->rxsize -= n;
 8001610:	f8de 3000 	ldr.w	r3, [lr]
      osp->rxpkts -= 1;
 8001614:	3a01      	subs	r2, #1
 8001616:	b292      	uxth	r2, r2
      osp->rxsize -= n;
 8001618:	eba3 0308 	sub.w	r3, r3, r8
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 800161c:	4540      	cmp	r0, r8
      osp->rxpkts -= 1;
 800161e:	f8ae 200c 	strh.w	r2, [lr, #12]
      osp->rxsize -= n;
 8001622:	f8ce 3000 	str.w	r3, [lr]
      if ((n < epcp->out_maxsize) || (osp->rxpkts == 0)) {
 8001626:	d801      	bhi.n	800162c <Vector90+0x24c>
 8001628:	2a00      	cmp	r2, #0
 800162a:	d14d      	bne.n	80016c8 <Vector90+0x2e8>
        _usb_isr_invoke_out_cb(usbp, ep);
 800162c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8001630:	6873      	ldr	r3, [r6, #4]
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	2301      	movs	r3, #1
 8001636:	40a3      	lsls	r3, r4
 8001638:	f8b9 400a 	ldrh.w	r4, [r9, #10]
 800163c:	ea24 0403 	bic.w	r4, r4, r3
 8001640:	f8a9 400a 	strh.w	r4, [r9, #10]
 8001644:	2a00      	cmp	r2, #0
 8001646:	f43f af28 	beq.w	800149a <Vector90+0xba>
 800164a:	4828      	ldr	r0, [pc, #160]	; (80016ec <Vector90+0x30c>)
 800164c:	4790      	blx	r2
    istr = STM32_USB->ISTR;
 800164e:	f8db 4044 	ldr.w	r4, [fp, #68]	; 0x44
  while (istr & ISTR_CTR) {
 8001652:	0423      	lsls	r3, r4, #16
 8001654:	f53f af26 	bmi.w	80014a4 <Vector90+0xc4>
 8001658:	2220      	movs	r2, #32
 800165a:	f382 8811 	msr	BASEPRI, r2
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800165e:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8001662:	2b00      	cmp	r3, #0
 8001664:	dd12      	ble.n	800168c <Vector90+0x2ac>
 8001666:	f8da 1034 	ldr.w	r1, [sl, #52]	; 0x34
 800166a:	b979      	cbnz	r1, 800168c <Vector90+0x2ac>
  ch.dbg.isr_cnt--;
 800166c:	3b01      	subs	r3, #1
 800166e:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
 8001672:	f381 8811 	msr	BASEPRI, r1
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8001676:	f8ba 3038 	ldrh.w	r3, [sl, #56]	; 0x38
 800167a:	f013 0402 	ands.w	r4, r3, #2
 800167e:	f000 80a4 	beq.w	80017ca <Vector90+0x3ea>
}
 8001682:	b005      	add	sp, #20
 8001684:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8001688:	f7fe bec2 	b.w	8000410 <_port_irq_epilogue>
    chSysHalt("SV#9");
 800168c:	4819      	ldr	r0, [pc, #100]	; (80016f4 <Vector90+0x314>)
 800168e:	f7ff f86f 	bl	8000770 <chSysHalt>
 8001692:	2320      	movs	r3, #32
 8001694:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8001698:	2202      	movs	r2, #2
 800169a:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 800169e:	4916      	ldr	r1, [pc, #88]	; (80016f8 <Vector90+0x318>)
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80016a0:	701a      	strb	r2, [r3, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80016a2:	6099      	str	r1, [r3, #8]
    trace_next();
 80016a4:	f7fe fe44 	bl	8000330 <trace_next>
 80016a8:	f384 8811 	msr	BASEPRI, r4
 80016ac:	e6a3      	b.n	80013f6 <Vector90+0x16>
    _usb_isr_invoke_sof_cb(usbp);
 80016ae:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80016ec <Vector90+0x30c>
 80016b2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	b10b      	cbz	r3, 80016be <Vector90+0x2de>
 80016ba:	4648      	mov	r0, r9
 80016bc:	4798      	blx	r3
    STM32_USB->ISTR = ~ISTR_SOF;
 80016be:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80016c2:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <Vector90+0x308>)
 80016c4:	645a      	str	r2, [r3, #68]	; 0x44
 80016c6:	e6be      	b.n	8001446 <Vector90+0x66>
        EPR_SET_STAT_RX(ep, EPR_STAT_RX_VALID);
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80016ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016d2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80016d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016de:	602b      	str	r3, [r5, #0]
 80016e0:	e6db      	b.n	800149a <Vector90+0xba>
 80016e2:	bf00      	nop
 80016e4:	20000d70 	.word	0x20000d70
 80016e8:	40005c00 	.word	0x40005c00
 80016ec:	20000ce8 	.word	0x20000ce8
 80016f0:	0800f234 	.word	0x0800f234
 80016f4:	0800f23c 	.word	0x0800f23c
 80016f8:	08010e4c 	.word	0x08010e4c
    STM32_USB->ISTR = ~ISTR_SUSP;
 80016fc:	f46f 6000 	mvn.w	r0, #2048	; 0x800
  usbp->state       = USB_SUSPENDED;
 8001700:	2105      	movs	r1, #5
    STM32_USB->CNTR |= CNTR_FSUSP;
 8001702:	4b38      	ldr	r3, [pc, #224]	; (80017e4 <Vector90+0x404>)
  usbp->saved_state = usbp->state;
 8001704:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 80017e8 <Vector90+0x408>
 8001708:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170a:	f042 0208 	orr.w	r2, r2, #8
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
    STM32_USB->ISTR = ~ISTR_SUSP;
 8001710:	6458      	str	r0, [r3, #68]	; 0x44
 8001712:	f899 2000 	ldrb.w	r2, [r9]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001716:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->state       = USB_SUSPENDED;
 800171a:	f889 1000 	strb.w	r1, [r9]
  usbp->saved_state = usbp->state;
 800171e:	f889 2080 	strb.w	r2, [r9, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	b113      	cbz	r3, 800172c <Vector90+0x34c>
 8001726:	2104      	movs	r1, #4
 8001728:	4648      	mov	r0, r9
 800172a:	4798      	blx	r3
  usbp->transmitting  = 0;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c9 3008 	str.w	r3, [r9, #8]
 8001732:	e67a      	b.n	800142a <Vector90+0x4a>
    STM32_USB->ISTR = ~ISTR_RESET;
 8001734:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001738:	6473      	str	r3, [r6, #68]	; 0x44
  usbp->state         = USB_READY;
 800173a:	2302      	movs	r3, #2
 800173c:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80017e8 <Vector90+0x408>
    usbp->epc[i] = NULL;
 8001740:	4629      	mov	r1, r5
 8001742:	f109 000c 	add.w	r0, r9, #12
  usbp->state         = USB_READY;
 8001746:	f889 3000 	strb.w	r3, [r9]
  usbp->status        = 0;
 800174a:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
  usbp->transmitting  = 0;
 800174e:	f8c9 5008 	str.w	r5, [r9, #8]
    usbp->epc[i] = NULL;
 8001752:	f00d fd02 	bl	800f15a <memset>
  if (usbp->config->sof_cb != NULL)
 8001756:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->ep0state = USB_EP0_STP_WAITING;
 800175a:	f889 5064 	strb.w	r5, [r9, #100]	; 0x64
 800175e:	68db      	ldr	r3, [r3, #12]
  STM32_USB->DADDR  = DADDR_EF;
 8001760:	2280      	movs	r2, #128	; 0x80
    cntr |= CNTR_SOFM;
 8001762:	2b00      	cmp	r3, #0
 8001764:	bf0c      	ite	eq
 8001766:	f44f 431c 	moveq.w	r3, #39936	; 0x9c00
 800176a:	f44f 431e 	movne.w	r3, #40448	; 0x9e00
  STM32_USB->BTABLE = BTABLE_ADDR;
 800176e:	6535      	str	r5, [r6, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 8001770:	6475      	str	r5, [r6, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 8001772:	64f2      	str	r2, [r6, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 8001774:	6433      	str	r3, [r6, #64]	; 0x40
  usbp->pmnext = 64;
 8001776:	2340      	movs	r3, #64	; 0x40
  usbp->epc[0] = &ep0config;
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <Vector90+0x40c>)
  usb_lld_init_endpoint(usbp, 0);
 800177a:	4629      	mov	r1, r5
 800177c:	4648      	mov	r0, r9
  usbp->pmnext = 64;
 800177e:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84
  usbp->epc[0] = &ep0config;
 8001782:	f8c9 200c 	str.w	r2, [r9, #12]
  usb_lld_init_endpoint(usbp, 0);
 8001786:	f7ff fd73 	bl	8001270 <usb_lld_init_endpoint>
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800178a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	f43f ae47 	beq.w	8001424 <Vector90+0x44>
 8001796:	4629      	mov	r1, r5
 8001798:	4648      	mov	r0, r9
 800179a:	4798      	blx	r3
 800179c:	e642      	b.n	8001424 <Vector90+0x44>
      STM32_USB->CNTR &= ~CNTR_FSUSP;
 800179e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  usbp->state = usbp->saved_state;
 80017a0:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80017e8 <Vector90+0x408>
 80017a4:	f022 0208 	bic.w	r2, r2, #8
 80017a8:	641a      	str	r2, [r3, #64]	; 0x40
 80017aa:	f899 2080 	ldrb.w	r2, [r9, #128]	; 0x80
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80017ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
  usbp->state = usbp->saved_state;
 80017b2:	f889 2000 	strb.w	r2, [r9]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f43f ae3d 	beq.w	8001438 <Vector90+0x58>
 80017be:	2105      	movs	r1, #5
 80017c0:	4648      	mov	r0, r9
 80017c2:	4798      	blx	r3
 80017c4:	e638      	b.n	8001438 <Vector90+0x58>
  i = n;
 80017c6:	4643      	mov	r3, r8
 80017c8:	e710      	b.n	80015ec <Vector90+0x20c>
 80017ca:	f382 8811 	msr	BASEPRI, r2
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80017ce:	2203      	movs	r2, #3
 80017d0:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80017d4:	4906      	ldr	r1, [pc, #24]	; (80017f0 <Vector90+0x410>)
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80017d6:	701a      	strb	r2, [r3, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80017d8:	6099      	str	r1, [r3, #8]
    trace_next();
 80017da:	f7fe fda9 	bl	8000330 <trace_next>
 80017de:	f384 8811 	msr	BASEPRI, r4
 80017e2:	e74e      	b.n	8001682 <Vector90+0x2a2>
 80017e4:	40005c00 	.word	0x40005c00
 80017e8:	20000ce8 	.word	0x20000ce8
 80017ec:	08011080 	.word	0x08011080
 80017f0:	08010e4c 	.word	0x08010e4c
	...

08001800 <chSchReadyAheadI>:
thread_t *chSchReadyAheadI(thread_t *tp) {
 8001800:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001802:	4b10      	ldr	r3, [pc, #64]	; (8001844 <chSchReadyAheadI+0x44>)
 8001804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001806:	2a00      	cmp	r2, #0
 8001808:	db16      	blt.n	8001838 <chSchReadyAheadI+0x38>
 800180a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180c:	2a00      	cmp	r2, #0
 800180e:	dd13      	ble.n	8001838 <chSchReadyAheadI+0x38>
  chDbgCheck(tp != NULL);
 8001810:	b1a8      	cbz	r0, 800183e <chSchReadyAheadI+0x3e>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8001812:	f890 2020 	ldrb.w	r2, [r0, #32]
 8001816:	b192      	cbz	r2, 800183e <chSchReadyAheadI+0x3e>
 8001818:	2a0f      	cmp	r2, #15
 800181a:	d010      	beq.n	800183e <chSchReadyAheadI+0x3e>
  tp->state = CH_STATE_READY;
 800181c:	2200      	movs	r2, #0
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue.*/
  do {
    pqp = pqp->next;
  } while (pqp->prio > p->prio);
 800181e:	6881      	ldr	r1, [r0, #8]
 8001820:	f880 2020 	strb.w	r2, [r0, #32]
    pqp = pqp->next;
 8001824:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio > p->prio);
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	428a      	cmp	r2, r1
 800182a:	d8fb      	bhi.n	8001824 <chSchReadyAheadI+0x24>

  /* Insertion on prev.*/
  p->next       = pqp;
  p->prev       = pqp->prev;
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8001832:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8001834:	6058      	str	r0, [r3, #4]
}
 8001836:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8001838:	4803      	ldr	r0, [pc, #12]	; (8001848 <chSchReadyAheadI+0x48>)
 800183a:	f7fe ff99 	bl	8000770 <chSysHalt>
  chDbgCheck(tp != NULL);
 800183e:	4803      	ldr	r0, [pc, #12]	; (800184c <chSchReadyAheadI+0x4c>)
 8001840:	f7fe ff96 	bl	8000770 <chSysHalt>
 8001844:	20000d70 	.word	0x20000d70
 8001848:	0800f22c 	.word	0x0800f22c
 800184c:	08010d8c 	.word	0x08010d8c

08001850 <chSysUnlock.lto_priv.7>:
static inline void chSysUnlock(void) {
 8001850:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <chSysUnlock.lto_priv.7+0x34>)
 8001854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001856:	b97a      	cbnz	r2, 8001878 <chSysUnlock.lto_priv.7+0x28>
 8001858:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800185a:	2900      	cmp	r1, #0
 800185c:	dd0c      	ble.n	8001878 <chSysUnlock.lto_priv.7+0x28>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800185e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 8001860:	635a      	str	r2, [r3, #52]	; 0x34
 8001862:	4299      	cmp	r1, r3
 8001864:	d004      	beq.n	8001870 <chSysUnlock.lto_priv.7+0x20>
 8001866:	699a      	ldr	r2, [r3, #24]
 8001868:	688b      	ldr	r3, [r1, #8]
 800186a:	6892      	ldr	r2, [r2, #8]
 800186c:	429a      	cmp	r2, r3
 800186e:	d306      	bcc.n	800187e <chSysUnlock.lto_priv.7+0x2e>
 8001870:	2300      	movs	r3, #0
 8001872:	f383 8811 	msr	BASEPRI, r3
}
 8001876:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <chSysUnlock.lto_priv.7+0x38>)
 800187a:	f7fe ff79 	bl	8000770 <chSysHalt>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800187e:	4803      	ldr	r0, [pc, #12]	; (800188c <chSysUnlock.lto_priv.7+0x3c>)
 8001880:	f7fe ff76 	bl	8000770 <chSysHalt>
 8001884:	20000d70 	.word	0x20000d70
 8001888:	0800f214 	.word	0x0800f214
 800188c:	08010f9c 	.word	0x08010f9c

08001890 <chEvtUnregister>:
 * @param[in] esp       pointer to the  @p event_source_t structure
 * @param[in] elp       pointer to the @p event_listener_t structure
 *
 * @api
 */
void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 8001890:	b508      	push	{r3, lr}
 8001892:	2320      	movs	r3, #32
 8001894:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <chEvtUnregister+0x54>)
 800189a:	e9d2 c30c 	ldrd	ip, r3, [r2, #48]	; 0x30
 800189e:	ea5c 0303 	orrs.w	r3, ip, r3
 80018a2:	d002      	beq.n	80018aa <chEvtUnregister+0x1a>
    chSysHalt("SV#4");
 80018a4:	4810      	ldr	r0, [pc, #64]	; (80018e8 <chEvtUnregister+0x58>)
 80018a6:	f7fe ff63 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80018aa:	4603      	mov	r3, r0
 80018ac:	e001      	b.n	80018b2 <chEvtUnregister+0x22>
  /*lint -restore*/
  chSysLock();
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (p->next != (event_listener_t *)esp) {
  /*lint -restore*/
    if (p->next == elp) {
 80018ae:	428b      	cmp	r3, r1
 80018b0:	d011      	beq.n	80018d6 <chEvtUnregister+0x46>
  while (p->next != (event_listener_t *)esp) {
 80018b2:	469c      	mov	ip, r3
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4283      	cmp	r3, r0
 80018b8:	d1f9      	bne.n	80018ae <chEvtUnregister+0x1e>
  _dbg_leave_lock();
 80018ba:	2100      	movs	r1, #0
 80018bc:	6813      	ldr	r3, [r2, #0]
 80018be:	6351      	str	r1, [r2, #52]	; 0x34
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d004      	beq.n	80018ce <chEvtUnregister+0x3e>
 80018c4:	6992      	ldr	r2, [r2, #24]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	6892      	ldr	r2, [r2, #8]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d307      	bcc.n	80018de <chEvtUnregister+0x4e>
 80018ce:	2300      	movs	r3, #0
 80018d0:	f383 8811 	msr	BASEPRI, r3
      break;
    }
    p = p->next;
  }
  chSysUnlock();
}
 80018d4:	bd08      	pop	{r3, pc}
      p->next = elp->next;
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8cc 3000 	str.w	r3, [ip]
      break;
 80018dc:	e7ed      	b.n	80018ba <chEvtUnregister+0x2a>
 80018de:	4803      	ldr	r0, [pc, #12]	; (80018ec <chEvtUnregister+0x5c>)
 80018e0:	f7fe ff46 	bl	8000770 <chSysHalt>
 80018e4:	20000d70 	.word	0x20000d70
 80018e8:	0800f20c 	.word	0x0800f20c
 80018ec:	08010f9c 	.word	0x08010f9c

080018f0 <chCoreAllocFromTop>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 80018f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018f2:	2320      	movs	r3, #32
 80018f4:	4605      	mov	r5, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	4617      	mov	r7, r2
 80018fa:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80018fe:	4e19      	ldr	r6, [pc, #100]	; (8001964 <chCoreAllocFromTop+0x74>)
  _dbg_check_lock();
 8001900:	f7fe ff8e 	bl	8000820 <_dbg_check_lock>
 8001904:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001906:	2b00      	cmp	r3, #0
 8001908:	db21      	blt.n	800194e <chCoreAllocFromTop+0x5e>
 800190a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800190c:	2b00      	cmp	r3, #0
 800190e:	dd1e      	ble.n	800194e <chCoreAllocFromTop+0x5e>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001910:	b304      	cbz	r4, 8001954 <chCoreAllocFromTop+0x64>
 8001912:	1e63      	subs	r3, r4, #1
 8001914:	4023      	ands	r3, r4
 8001916:	d11d      	bne.n	8001954 <chCoreAllocFromTop+0x64>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001918:	4913      	ldr	r1, [pc, #76]	; (8001968 <chCoreAllocFromTop+0x78>)
 800191a:	4264      	negs	r4, r4
 800191c:	6848      	ldr	r0, [r1, #4]
 800191e:	1b45      	subs	r5, r0, r5
 8001920:	402c      	ands	r4, r5
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001922:	680d      	ldr	r5, [r1, #0]
  prev = p - offset;
 8001924:	1be7      	subs	r7, r4, r7
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001926:	42af      	cmp	r7, r5
 8001928:	d317      	bcc.n	800195a <chCoreAllocFromTop+0x6a>
 800192a:	42b8      	cmp	r0, r7
 800192c:	d315      	bcc.n	800195a <chCoreAllocFromTop+0x6a>
  ch_memcore.topmem = prev;
 800192e:	604f      	str	r7, [r1, #4]
  _dbg_check_unlock();
 8001930:	f7fe ff86 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001934:	6833      	ldr	r3, [r6, #0]
 8001936:	42b3      	cmp	r3, r6
 8001938:	d004      	beq.n	8001944 <chCoreAllocFromTop+0x54>
 800193a:	69b2      	ldr	r2, [r6, #24]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	6892      	ldr	r2, [r2, #8]
 8001940:	429a      	cmp	r2, r3
 8001942:	d30c      	bcc.n	800195e <chCoreAllocFromTop+0x6e>
 8001944:	2300      	movs	r3, #0
 8001946:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 800194a:	4620      	mov	r0, r4
 800194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#10");
 800194e:	4807      	ldr	r0, [pc, #28]	; (800196c <chCoreAllocFromTop+0x7c>)
 8001950:	f7fe ff0e 	bl	8000770 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001954:	4806      	ldr	r0, [pc, #24]	; (8001970 <chCoreAllocFromTop+0x80>)
 8001956:	f7fe ff0b 	bl	8000770 <chSysHalt>
    return NULL;
 800195a:	461c      	mov	r4, r3
 800195c:	e7e8      	b.n	8001930 <chCoreAllocFromTop+0x40>
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <chCoreAllocFromTop+0x84>)
 8001960:	f7fe ff06 	bl	8000770 <chSysHalt>
 8001964:	20000d70 	.word	0x20000d70
 8001968:	20001640 	.word	0x20001640
 800196c:	0800f22c 	.word	0x0800f22c
 8001970:	08010cd0 	.word	0x08010cd0
 8001974:	08010b80 	.word	0x08010b80
	...

08001980 <chPoolFree>:
 * @param[in] mp        pointer to a @p memory_pool_t structure
 * @param[in] objp      the pointer to the object to be released
 *
 * @api
 */
void chPoolFree(memory_pool_t *mp, void *objp) {
 8001980:	b538      	push	{r3, r4, r5, lr}
 8001982:	2320      	movs	r3, #32
 8001984:	4604      	mov	r4, r0
 8001986:	460d      	mov	r5, r1
 8001988:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800198c:	f7fe ff48 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001990:	4b14      	ldr	r3, [pc, #80]	; (80019e4 <chPoolFree+0x64>)
 8001992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001994:	2a00      	cmp	r2, #0
 8001996:	db19      	blt.n	80019cc <chPoolFree+0x4c>
 8001998:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800199a:	2900      	cmp	r1, #0
 800199c:	dd16      	ble.n	80019cc <chPoolFree+0x4c>
  chDbgCheck((mp != NULL) &&
 800199e:	b1c4      	cbz	r4, 80019d2 <chPoolFree+0x52>
 80019a0:	b1bd      	cbz	r5, 80019d2 <chPoolFree+0x52>
 80019a2:	68a1      	ldr	r1, [r4, #8]
 80019a4:	3901      	subs	r1, #1
 80019a6:	420d      	tst	r5, r1
 80019a8:	d113      	bne.n	80019d2 <chPoolFree+0x52>
  php->next = mp->next;
 80019aa:	6821      	ldr	r1, [r4, #0]
 80019ac:	6029      	str	r1, [r5, #0]
  mp->next = php;
 80019ae:	6025      	str	r5, [r4, #0]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80019b0:	b992      	cbnz	r2, 80019d8 <chPoolFree+0x58>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80019b2:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
 80019b6:	4299      	cmp	r1, r3
 80019b8:	d004      	beq.n	80019c4 <chPoolFree+0x44>
 80019ba:	699a      	ldr	r2, [r3, #24]
 80019bc:	688b      	ldr	r3, [r1, #8]
 80019be:	6892      	ldr	r2, [r2, #8]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d30c      	bcc.n	80019de <chPoolFree+0x5e>
 80019c4:	2300      	movs	r3, #0
 80019c6:	f383 8811 	msr	BASEPRI, r3

  chSysLock();
  chPoolFreeI(mp, objp);
  chSysUnlock();
}
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#10");
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <chPoolFree+0x68>)
 80019ce:	f7fe fecf 	bl	8000770 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 80019d2:	4806      	ldr	r0, [pc, #24]	; (80019ec <chPoolFree+0x6c>)
 80019d4:	f7fe fecc 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 80019d8:	4805      	ldr	r0, [pc, #20]	; (80019f0 <chPoolFree+0x70>)
 80019da:	f7fe fec9 	bl	8000770 <chSysHalt>
 80019de:	4805      	ldr	r0, [pc, #20]	; (80019f4 <chPoolFree+0x74>)
 80019e0:	f7fe fec6 	bl	8000770 <chSysHalt>
 80019e4:	20000d70 	.word	0x20000d70
 80019e8:	0800f22c 	.word	0x0800f22c
 80019ec:	08010cf8 	.word	0x08010cf8
 80019f0:	0800f214 	.word	0x0800f214
 80019f4:	08010e40 	.word	0x08010e40
	...

08001a00 <chCoreAllocAlignedI.lto_priv.0>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <chCoreAllocAlignedI.lto_priv.0+0x40>)
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8001a02:	b510      	push	{r4, lr}
 8001a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a06:	2a00      	cmp	r2, #0
 8001a08:	db12      	blt.n	8001a30 <chCoreAllocAlignedI.lto_priv.0+0x30>
 8001a0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	dd0f      	ble.n	8001a30 <chCoreAllocAlignedI.lto_priv.0+0x30>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001a10:	b189      	cbz	r1, 8001a36 <chCoreAllocAlignedI.lto_priv.0+0x36>
 8001a12:	1e4b      	subs	r3, r1, #1
 8001a14:	400b      	ands	r3, r1
 8001a16:	d10e      	bne.n	8001a36 <chCoreAllocAlignedI.lto_priv.0+0x36>
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8001a18:	4a0a      	ldr	r2, [pc, #40]	; (8001a44 <chCoreAllocAlignedI.lto_priv.0+0x44>)
 8001a1a:	4249      	negs	r1, r1
 8001a1c:	6854      	ldr	r4, [r2, #4]
 8001a1e:	1a20      	subs	r0, r4, r0
 8001a20:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8001a22:	6811      	ldr	r1, [r2, #0]
 8001a24:	4288      	cmp	r0, r1
 8001a26:	d309      	bcc.n	8001a3c <chCoreAllocAlignedI.lto_priv.0+0x3c>
 8001a28:	4284      	cmp	r4, r0
 8001a2a:	d307      	bcc.n	8001a3c <chCoreAllocAlignedI.lto_priv.0+0x3c>
  ch_memcore.topmem = prev;
 8001a2c:	6050      	str	r0, [r2, #4]

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8001a2e:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 8001a30:	4805      	ldr	r0, [pc, #20]	; (8001a48 <chCoreAllocAlignedI.lto_priv.0+0x48>)
 8001a32:	f7fe fe9d 	bl	8000770 <chSysHalt>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <chCoreAllocAlignedI.lto_priv.0+0x4c>)
 8001a38:	f7fe fe9a 	bl	8000770 <chSysHalt>
    return NULL;
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	bd10      	pop	{r4, pc}
 8001a40:	20000d70 	.word	0x20000d70
 8001a44:	20001640 	.word	0x20001640
 8001a48:	0800f22c 	.word	0x0800f22c
 8001a4c:	08010cd0 	.word	0x08010cd0

08001a50 <rt_test_002_003_execute>:

static void rt_test_002_003_execute(void) {

  /* [2.3.1] Testing chSysSuspend(), chSysDisable() and
     chSysEnable().*/
  test_set_step(1);
 8001a50:	2101      	movs	r1, #1
static void rt_test_002_003_execute(void) {
 8001a52:	b508      	push	{r3, lr}
  test_set_step(1);
 8001a54:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <rt_test_002_003_execute+0x48>)
 8001a56:	2220      	movs	r2, #32
 8001a58:	6019      	str	r1, [r3, #0]
 8001a5a:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5e:	b662      	cpsie	i
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001a60:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <rt_test_002_003_execute+0x4c>)
 8001a62:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a66:	4301      	orrs	r1, r0
 8001a68:	d10f      	bne.n	8001a8a <rt_test_002_003_execute+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6a:	b672      	cpsid	i
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001a6c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001a70:	4301      	orrs	r1, r0
 8001a72:	d10d      	bne.n	8001a90 <rt_test_002_003_execute+0x40>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001a74:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 8001a78:	b662      	cpsie	i
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001a7a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	d103      	bne.n	8001a8a <rt_test_002_003_execute+0x3a>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001a82:	f382 8811 	msr	BASEPRI, r2
  __ASM volatile ("cpsie i" : : : "memory");
 8001a86:	b662      	cpsie	i
    chSysDisable();
    chSysSuspend();
    chSysEnable();
  }
  test_end_step(1);
}
 8001a88:	bd08      	pop	{r3, pc}
    chSysHalt("SV#2");
 8001a8a:	4805      	ldr	r0, [pc, #20]	; (8001aa0 <rt_test_002_003_execute+0x50>)
 8001a8c:	f7fe fe70 	bl	8000770 <chSysHalt>
    chSysHalt("SV#1");
 8001a90:	4804      	ldr	r0, [pc, #16]	; (8001aa4 <rt_test_002_003_execute+0x54>)
 8001a92:	f7fe fe6d 	bl	8000770 <chSysHalt>
 8001a96:	bf00      	nop
 8001a98:	20001d3c 	.word	0x20001d3c
 8001a9c:	20000d70 	.word	0x20000d70
 8001aa0:	0800f244 	.word	0x0800f244
 8001aa4:	0800f24c 	.word	0x0800f24c
	...

08001ab0 <chSysUnlock.lto_priv.19>:
static inline void chSysUnlock(void) {
 8001ab0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8001ab2:	4b0c      	ldr	r3, [pc, #48]	; (8001ae4 <chSysUnlock.lto_priv.19+0x34>)
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	b97a      	cbnz	r2, 8001ad8 <chSysUnlock.lto_priv.19+0x28>
 8001ab8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001aba:	2900      	cmp	r1, #0
 8001abc:	dd0c      	ble.n	8001ad8 <chSysUnlock.lto_priv.19+0x28>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001abe:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 8001ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ac2:	4299      	cmp	r1, r3
 8001ac4:	d004      	beq.n	8001ad0 <chSysUnlock.lto_priv.19+0x20>
 8001ac6:	699a      	ldr	r2, [r3, #24]
 8001ac8:	688b      	ldr	r3, [r1, #8]
 8001aca:	6892      	ldr	r2, [r2, #8]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d306      	bcc.n	8001ade <chSysUnlock.lto_priv.19+0x2e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f383 8811 	msr	BASEPRI, r3
}
 8001ad6:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <chSysUnlock.lto_priv.19+0x38>)
 8001ada:	f7fe fe49 	bl	8000770 <chSysHalt>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <chSysUnlock.lto_priv.19+0x3c>)
 8001ae0:	f7fe fe46 	bl	8000770 <chSysHalt>
 8001ae4:	20000d70 	.word	0x20000d70
 8001ae8:	0800f214 	.word	0x0800f214
 8001aec:	08010d40 	.word	0x08010d40

08001af0 <rt_test_009_001_execute>:
  }
  test_end_step(1);

  /* [9.1.2] Two Event Listeners are registered on the Event Source,
     the Event Source is tested to have listeners.*/
  test_set_step(2);
 8001af0:	2202      	movs	r2, #2
static void rt_test_009_001_execute(void) {
 8001af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001af6:	4c6e      	ldr	r4, [pc, #440]	; (8001cb0 <rt_test_009_001_execute+0x1c0>)
  test_set_step(2);
 8001af8:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8001cb4 <rt_test_009_001_execute+0x1c4>
 8001afc:	2320      	movs	r3, #32
static void rt_test_009_001_execute(void) {
 8001afe:	b08a      	sub	sp, #40	; 0x28
 8001b00:	6024      	str	r4, [r4, #0]
  test_set_step(2);
 8001b02:	f8c8 2000 	str.w	r2, [r8]
 8001b06:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001b0a:	f7fe fe89 	bl	8000820 <_dbg_check_lock>
  elp->events   = events;
 8001b0e:	2301      	movs	r3, #1
  elp->flags    = (eventflags_t)0;
 8001b10:	2200      	movs	r2, #0
  elp->events   = events;
 8001b12:	9307      	str	r3, [sp, #28]
  elp->wflags   = wflags;
 8001b14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->listener = currp;
 8001b18:	4d67      	ldr	r5, [pc, #412]	; (8001cb8 <rt_test_009_001_execute+0x1c8>)
  elp->next     = esp->next;
 8001b1a:	6821      	ldr	r1, [r4, #0]
  elp->flags    = (eventflags_t)0;
 8001b1c:	9208      	str	r2, [sp, #32]
  elp->listener = currp;
 8001b1e:	69aa      	ldr	r2, [r5, #24]
  esp->next     = elp;
 8001b20:	ae05      	add	r6, sp, #20
  elp->wflags   = wflags;
 8001b22:	9309      	str	r3, [sp, #36]	; 0x24
  elp->next     = esp->next;
 8001b24:	9105      	str	r1, [sp, #20]
  elp->listener = currp;
 8001b26:	9206      	str	r2, [sp, #24]
  esp->next     = elp;
 8001b28:	6026      	str	r6, [r4, #0]
  _dbg_check_unlock();
 8001b2a:	f7fe fe89 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	42ab      	cmp	r3, r5
 8001b32:	d005      	beq.n	8001b40 <rt_test_009_001_execute+0x50>
 8001b34:	69aa      	ldr	r2, [r5, #24]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	6892      	ldr	r2, [r2, #8]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	f0c0 8093 	bcc.w	8001c66 <rt_test_009_001_execute+0x176>
 8001b40:	2700      	movs	r7, #0
 8001b42:	f387 8811 	msr	BASEPRI, r7
 8001b46:	2320      	movs	r3, #32
 8001b48:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001b4c:	f7fe fe68 	bl	8000820 <_dbg_check_lock>
  elp->events   = events;
 8001b50:	2302      	movs	r3, #2
  elp->wflags   = wflags;
 8001b52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  elp->flags    = (eventflags_t)0;
 8001b56:	9703      	str	r7, [sp, #12]
  esp->next     = elp;
 8001b58:	466f      	mov	r7, sp
  elp->events   = events;
 8001b5a:	9302      	str	r3, [sp, #8]
  elp->next     = esp->next;
 8001b5c:	6823      	ldr	r3, [r4, #0]
  elp->wflags   = wflags;
 8001b5e:	9204      	str	r2, [sp, #16]
  elp->next     = esp->next;
 8001b60:	9300      	str	r3, [sp, #0]
  elp->listener = currp;
 8001b62:	69ab      	ldr	r3, [r5, #24]
  esp->next     = elp;
 8001b64:	6027      	str	r7, [r4, #0]
  elp->listener = currp;
 8001b66:	9301      	str	r3, [sp, #4]
  _dbg_check_unlock();
 8001b68:	f7fe fe6a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001b6c:	682b      	ldr	r3, [r5, #0]
 8001b6e:	42ab      	cmp	r3, r5
 8001b70:	d004      	beq.n	8001b7c <rt_test_009_001_execute+0x8c>
 8001b72:	69aa      	ldr	r2, [r5, #24]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	6892      	ldr	r2, [r2, #8]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d374      	bcc.n	8001c66 <rt_test_009_001_execute+0x176>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f383 8811 	msr	BASEPRI, r3
 8001b82:	2320      	movs	r3, #32
 8001b84:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001b88:	f7fe fe4a 	bl	8000820 <_dbg_check_lock>
  return true;
}

bool _test_assert(bool condition, const char *msg) {

  if (!condition)
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	42a3      	cmp	r3, r4
 8001b90:	d06c      	beq.n	8001c6c <rt_test_009_001_execute+0x17c>
  _dbg_check_unlock();
 8001b92:	f7fe fe55 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001b96:	682b      	ldr	r3, [r5, #0]
 8001b98:	42ab      	cmp	r3, r5
 8001b9a:	d004      	beq.n	8001ba6 <rt_test_009_001_execute+0xb6>
 8001b9c:	69aa      	ldr	r2, [r5, #24]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	6892      	ldr	r2, [r2, #8]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d37a      	bcc.n	8001c9c <rt_test_009_001_execute+0x1ac>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(2);

  /* [9.1.3] An Event Listener is unregistered, the Event Source must
     still have listeners.*/
  test_set_step(3);
 8001bac:	2303      	movs	r3, #3
 8001bae:	f8c8 3000 	str.w	r3, [r8]
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001bb8:	f7fe fe32 	bl	8000820 <_dbg_check_lock>
  p = (event_listener_t *)esp;
 8001bbc:	4b3c      	ldr	r3, [pc, #240]	; (8001cb0 <rt_test_009_001_execute+0x1c0>)
 8001bbe:	e001      	b.n	8001bc4 <rt_test_009_001_execute+0xd4>
    if (p->next == elp) {
 8001bc0:	42b3      	cmp	r3, r6
 8001bc2:	d06e      	beq.n	8001ca2 <rt_test_009_001_execute+0x1b2>
 8001bc4:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	42a3      	cmp	r3, r4
 8001bca:	d1f9      	bne.n	8001bc0 <rt_test_009_001_execute+0xd0>
  _dbg_check_unlock();
 8001bcc:	f7fe fe38 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001bd0:	682b      	ldr	r3, [r5, #0]
 8001bd2:	42ab      	cmp	r3, r5
 8001bd4:	d004      	beq.n	8001be0 <rt_test_009_001_execute+0xf0>
 8001bd6:	69aa      	ldr	r2, [r5, #24]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	6892      	ldr	r2, [r2, #8]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d342      	bcc.n	8001c66 <rt_test_009_001_execute+0x176>
 8001be0:	2300      	movs	r3, #0
 8001be2:	f383 8811 	msr	BASEPRI, r3
 8001be6:	2320      	movs	r3, #32
 8001be8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001bec:	f7fe fe18 	bl	8000820 <_dbg_check_lock>
 8001bf0:	6823      	ldr	r3, [r4, #0]
 8001bf2:	42a3      	cmp	r3, r4
 8001bf4:	d03a      	beq.n	8001c6c <rt_test_009_001_execute+0x17c>
  _dbg_check_unlock();
 8001bf6:	f7fe fe23 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001bfa:	682b      	ldr	r3, [r5, #0]
 8001bfc:	42ab      	cmp	r3, r5
 8001bfe:	d004      	beq.n	8001c0a <rt_test_009_001_execute+0x11a>
 8001c00:	69aa      	ldr	r2, [r5, #24]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	6892      	ldr	r2, [r2, #8]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d348      	bcc.n	8001c9c <rt_test_009_001_execute+0x1ac>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	f383 8811 	msr	BASEPRI, r3
  }
  test_end_step(3);

  /* [9.1.4] An Event Listener is unregistered, the Event Source must
     not have listeners.*/
  test_set_step(4);
 8001c10:	2204      	movs	r2, #4
 8001c12:	2320      	movs	r3, #32
 8001c14:	f8c8 2000 	str.w	r2, [r8]
 8001c18:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001c1c:	f7fe fe00 	bl	8000820 <_dbg_check_lock>
  p = (event_listener_t *)esp;
 8001c20:	4b23      	ldr	r3, [pc, #140]	; (8001cb0 <rt_test_009_001_execute+0x1c0>)
 8001c22:	e001      	b.n	8001c28 <rt_test_009_001_execute+0x138>
    if (p->next == elp) {
 8001c24:	42bb      	cmp	r3, r7
 8001c26:	d03f      	beq.n	8001ca8 <rt_test_009_001_execute+0x1b8>
 8001c28:	461a      	mov	r2, r3
  while (p->next != (event_listener_t *)esp) {
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	42a3      	cmp	r3, r4
 8001c2e:	d1f9      	bne.n	8001c24 <rt_test_009_001_execute+0x134>
  _dbg_check_unlock();
 8001c30:	f7fe fe06 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001c34:	682b      	ldr	r3, [r5, #0]
 8001c36:	42ab      	cmp	r3, r5
 8001c38:	d004      	beq.n	8001c44 <rt_test_009_001_execute+0x154>
 8001c3a:	69aa      	ldr	r2, [r5, #24]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	6892      	ldr	r2, [r2, #8]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d310      	bcc.n	8001c66 <rt_test_009_001_execute+0x176>
 8001c44:	2300      	movs	r3, #0
 8001c46:	f383 8811 	msr	BASEPRI, r3
 8001c4a:	2320      	movs	r3, #32
 8001c4c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8001c50:	f7fe fde6 	bl	8000820 <_dbg_check_lock>
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	42a3      	cmp	r3, r4
 8001c58:	d010      	beq.n	8001c7c <rt_test_009_001_execute+0x18c>
  test_local_fail      = true;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	4917      	ldr	r1, [pc, #92]	; (8001cbc <rt_test_009_001_execute+0x1cc>)
  test_global_fail     = true;
 8001c5e:	4a18      	ldr	r2, [pc, #96]	; (8001cc0 <rt_test_009_001_execute+0x1d0>)
  test_failure_message = msg;
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <rt_test_009_001_execute+0x1d4>)
 8001c62:	4c19      	ldr	r4, [pc, #100]	; (8001cc8 <rt_test_009_001_execute+0x1d8>)
 8001c64:	e007      	b.n	8001c76 <rt_test_009_001_execute+0x186>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001c66:	4819      	ldr	r0, [pc, #100]	; (8001ccc <rt_test_009_001_execute+0x1dc>)
 8001c68:	f7fe fd82 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	4913      	ldr	r1, [pc, #76]	; (8001cbc <rt_test_009_001_execute+0x1cc>)
  test_global_fail     = true;
 8001c70:	4a13      	ldr	r2, [pc, #76]	; (8001cc0 <rt_test_009_001_execute+0x1d0>)
  test_failure_message = msg;
 8001c72:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <rt_test_009_001_execute+0x1d4>)
 8001c74:	4c16      	ldr	r4, [pc, #88]	; (8001cd0 <rt_test_009_001_execute+0x1e0>)
 8001c76:	6004      	str	r4, [r0, #0]
  test_local_fail      = true;
 8001c78:	700b      	strb	r3, [r1, #0]
  test_global_fail     = true;
 8001c7a:	7013      	strb	r3, [r2, #0]
  _dbg_check_unlock();
 8001c7c:	f7fe fde0 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8001c80:	682b      	ldr	r3, [r5, #0]
 8001c82:	42ab      	cmp	r3, r5
 8001c84:	d004      	beq.n	8001c90 <rt_test_009_001_execute+0x1a0>
 8001c86:	69aa      	ldr	r2, [r5, #24]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	6892      	ldr	r2, [r2, #8]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d305      	bcc.n	8001c9c <rt_test_009_001_execute+0x1ac>
 8001c90:	2300      	movs	r3, #0
 8001c92:	f383 8811 	msr	BASEPRI, r3
  {
    chEvtUnregister(&es1, &el2);
    test_assert_lock(!chEvtIsListeningI(&es1), "stuck listener");
  }
  test_end_step(4);
}
 8001c96:	b00a      	add	sp, #40	; 0x28
 8001c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c9c:	480d      	ldr	r0, [pc, #52]	; (8001cd4 <rt_test_009_001_execute+0x1e4>)
 8001c9e:	f7fe fd67 	bl	8000770 <chSysHalt>
      p->next = elp->next;
 8001ca2:	9b05      	ldr	r3, [sp, #20]
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e791      	b.n	8001bcc <rt_test_009_001_execute+0xdc>
 8001ca8:	9b00      	ldr	r3, [sp, #0]
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e7c0      	b.n	8001c30 <rt_test_009_001_execute+0x140>
 8001cae:	bf00      	nop
 8001cb0:	20000808 	.word	0x20000808
 8001cb4:	20001d3c 	.word	0x20001d3c
 8001cb8:	20000d70 	.word	0x20000d70
 8001cbc:	20001d39 	.word	0x20001d39
 8001cc0:	20001d38 	.word	0x20001d38
 8001cc4:	20001d34 	.word	0x20001d34
 8001cc8:	0800f260 	.word	0x0800f260
 8001ccc:	08010f9c 	.word	0x08010f9c
 8001cd0:	0800f254 	.word	0x0800f254
 8001cd4:	08010c04 	.word	0x08010c04
	...

08001ce0 <rt_test_009_002_setup>:
 8001ce0:	b508      	push	{r3, lr}
 8001ce2:	2320      	movs	r3, #32
 8001ce4:	f383 8811 	msr	BASEPRI, r3
 8001ce8:	4a0c      	ldr	r2, [pc, #48]	; (8001d1c <rt_test_009_002_setup+0x3c>)
 8001cea:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 8001cee:	430b      	orrs	r3, r1
 8001cf0:	d10d      	bne.n	8001d0e <rt_test_009_002_setup+0x2e>
 8001cf2:	6811      	ldr	r1, [r2, #0]
 8001cf4:	6990      	ldr	r0, [r2, #24]
 8001cf6:	4291      	cmp	r1, r2
 8001cf8:	6343      	str	r3, [r0, #52]	; 0x34
 8001cfa:	6353      	str	r3, [r2, #52]	; 0x34
 8001cfc:	d003      	beq.n	8001d06 <rt_test_009_002_setup+0x26>
 8001cfe:	6882      	ldr	r2, [r0, #8]
 8001d00:	688b      	ldr	r3, [r1, #8]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d306      	bcc.n	8001d14 <rt_test_009_002_setup+0x34>
 8001d06:	2300      	movs	r3, #0
 8001d08:	f383 8811 	msr	BASEPRI, r3
 8001d0c:	bd08      	pop	{r3, pc}
 8001d0e:	4804      	ldr	r0, [pc, #16]	; (8001d20 <rt_test_009_002_setup+0x40>)
 8001d10:	f7fe fd2e 	bl	8000770 <chSysHalt>
 8001d14:	4803      	ldr	r0, [pc, #12]	; (8001d24 <rt_test_009_002_setup+0x44>)
 8001d16:	f7fe fd2b 	bl	8000770 <chSysHalt>
 8001d1a:	bf00      	nop
 8001d1c:	20000d70 	.word	0x20000d70
 8001d20:	0800f20c 	.word	0x0800f20c
 8001d24:	08010f9c 	.word	0x08010f9c
	...

08001d30 <rt_test_009_003_setup>:
 8001d30:	b508      	push	{r3, lr}
 8001d32:	2320      	movs	r3, #32
 8001d34:	f383 8811 	msr	BASEPRI, r3
 8001d38:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <rt_test_009_003_setup+0x3c>)
 8001d3a:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 8001d3e:	430b      	orrs	r3, r1
 8001d40:	d10d      	bne.n	8001d5e <rt_test_009_003_setup+0x2e>
 8001d42:	6811      	ldr	r1, [r2, #0]
 8001d44:	6990      	ldr	r0, [r2, #24]
 8001d46:	4291      	cmp	r1, r2
 8001d48:	6343      	str	r3, [r0, #52]	; 0x34
 8001d4a:	6353      	str	r3, [r2, #52]	; 0x34
 8001d4c:	d003      	beq.n	8001d56 <rt_test_009_003_setup+0x26>
 8001d4e:	6882      	ldr	r2, [r0, #8]
 8001d50:	688b      	ldr	r3, [r1, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d306      	bcc.n	8001d64 <rt_test_009_003_setup+0x34>
 8001d56:	2300      	movs	r3, #0
 8001d58:	f383 8811 	msr	BASEPRI, r3
 8001d5c:	bd08      	pop	{r3, pc}
 8001d5e:	4804      	ldr	r0, [pc, #16]	; (8001d70 <rt_test_009_003_setup+0x40>)
 8001d60:	f7fe fd06 	bl	8000770 <chSysHalt>
 8001d64:	4803      	ldr	r0, [pc, #12]	; (8001d74 <rt_test_009_003_setup+0x44>)
 8001d66:	f7fe fd03 	bl	8000770 <chSysHalt>
 8001d6a:	bf00      	nop
 8001d6c:	20000d70 	.word	0x20000d70
 8001d70:	0800f20c 	.word	0x0800f20c
 8001d74:	08010f9c 	.word	0x08010f9c
	...

08001d80 <rt_test_009_004_setup>:
 8001d80:	b508      	push	{r3, lr}
 8001d82:	2320      	movs	r3, #32
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <rt_test_009_004_setup+0x3c>)
 8001d8a:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 8001d8e:	430b      	orrs	r3, r1
 8001d90:	d10d      	bne.n	8001dae <rt_test_009_004_setup+0x2e>
 8001d92:	6811      	ldr	r1, [r2, #0]
 8001d94:	6990      	ldr	r0, [r2, #24]
 8001d96:	4291      	cmp	r1, r2
 8001d98:	6343      	str	r3, [r0, #52]	; 0x34
 8001d9a:	6353      	str	r3, [r2, #52]	; 0x34
 8001d9c:	d003      	beq.n	8001da6 <rt_test_009_004_setup+0x26>
 8001d9e:	6882      	ldr	r2, [r0, #8]
 8001da0:	688b      	ldr	r3, [r1, #8]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d306      	bcc.n	8001db4 <rt_test_009_004_setup+0x34>
 8001da6:	2300      	movs	r3, #0
 8001da8:	f383 8811 	msr	BASEPRI, r3
 8001dac:	bd08      	pop	{r3, pc}
 8001dae:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <rt_test_009_004_setup+0x40>)
 8001db0:	f7fe fcde 	bl	8000770 <chSysHalt>
 8001db4:	4803      	ldr	r0, [pc, #12]	; (8001dc4 <rt_test_009_004_setup+0x44>)
 8001db6:	f7fe fcdb 	bl	8000770 <chSysHalt>
 8001dba:	bf00      	nop
 8001dbc:	20000d70 	.word	0x20000d70
 8001dc0:	0800f20c 	.word	0x0800f20c
 8001dc4:	08010f9c 	.word	0x08010f9c
	...

08001dd0 <rt_test_009_005_setup>:
 8001dd0:	b508      	push	{r3, lr}
 8001dd2:	2320      	movs	r3, #32
 8001dd4:	f383 8811 	msr	BASEPRI, r3
 8001dd8:	4a0c      	ldr	r2, [pc, #48]	; (8001e0c <rt_test_009_005_setup+0x3c>)
 8001dda:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 8001dde:	430b      	orrs	r3, r1
 8001de0:	d10d      	bne.n	8001dfe <rt_test_009_005_setup+0x2e>
 8001de2:	6811      	ldr	r1, [r2, #0]
 8001de4:	6990      	ldr	r0, [r2, #24]
 8001de6:	4291      	cmp	r1, r2
 8001de8:	6343      	str	r3, [r0, #52]	; 0x34
 8001dea:	6353      	str	r3, [r2, #52]	; 0x34
 8001dec:	d003      	beq.n	8001df6 <rt_test_009_005_setup+0x26>
 8001dee:	6882      	ldr	r2, [r0, #8]
 8001df0:	688b      	ldr	r3, [r1, #8]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d306      	bcc.n	8001e04 <rt_test_009_005_setup+0x34>
 8001df6:	2300      	movs	r3, #0
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	bd08      	pop	{r3, pc}
 8001dfe:	4804      	ldr	r0, [pc, #16]	; (8001e10 <rt_test_009_005_setup+0x40>)
 8001e00:	f7fe fcb6 	bl	8000770 <chSysHalt>
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <rt_test_009_005_setup+0x44>)
 8001e06:	f7fe fcb3 	bl	8000770 <chSysHalt>
 8001e0a:	bf00      	nop
 8001e0c:	20000d70 	.word	0x20000d70
 8001e10:	0800f20c 	.word	0x0800f20c
 8001e14:	08010f9c 	.word	0x08010f9c
	...

08001e20 <rt_test_009_006_setup>:
 * - [9.6.2] The functions are invoked first with a 50mS timeout, the
 *   timeout condition is tested.
 * .
 */

static void rt_test_009_006_setup(void) {
 8001e20:	b508      	push	{r3, lr}
 8001e22:	2320      	movs	r3, #32
 8001e24:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <rt_test_009_006_setup+0x3c>)
 8001e2a:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 8001e2e:	430b      	orrs	r3, r1
 8001e30:	d10d      	bne.n	8001e4e <rt_test_009_006_setup+0x2e>
 8001e32:	6811      	ldr	r1, [r2, #0]
 * @iclass
 */
eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
  eventmask_t m;

  m = currp->epending & events;
 8001e34:	6990      	ldr	r0, [r2, #24]
 8001e36:	4291      	cmp	r1, r2
  currp->epending &= ~events;
 8001e38:	6343      	str	r3, [r0, #52]	; 0x34
  _dbg_leave_lock();
 8001e3a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e3c:	d003      	beq.n	8001e46 <rt_test_009_006_setup+0x26>
 8001e3e:	6882      	ldr	r2, [r0, #8]
 8001e40:	688b      	ldr	r3, [r1, #8]
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d306      	bcc.n	8001e54 <rt_test_009_006_setup+0x34>
 8001e46:	2300      	movs	r3, #0
 8001e48:	f383 8811 	msr	BASEPRI, r3
  chEvtGetAndClearEvents(ALL_EVENTS);
}
 8001e4c:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8001e4e:	4804      	ldr	r0, [pc, #16]	; (8001e60 <rt_test_009_006_setup+0x40>)
 8001e50:	f7fe fc8e 	bl	8000770 <chSysHalt>
 8001e54:	4803      	ldr	r0, [pc, #12]	; (8001e64 <rt_test_009_006_setup+0x44>)
 8001e56:	f7fe fc8b 	bl	8000770 <chSysHalt>
 8001e5a:	bf00      	nop
 8001e5c:	20000d70 	.word	0x20000d70
 8001e60:	0800f20c 	.word	0x0800f20c
 8001e64:	08010f9c 	.word	0x08010f9c
	...

08001e70 <rt_test_009_007_setup>:
 *   has been emptied.
 * - [9.7.4] Unregistering from the Event Sources.
 * .
 */

static void rt_test_009_007_setup(void) {
 8001e70:	b508      	push	{r3, lr}
 8001e72:	2320      	movs	r3, #32
 8001e74:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001e78:	4a0e      	ldr	r2, [pc, #56]	; (8001eb4 <rt_test_009_007_setup+0x44>)
 8001e7a:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 8001e7e:	430b      	orrs	r3, r1
 8001e80:	d111      	bne.n	8001ea6 <rt_test_009_007_setup+0x36>
 8001e82:	6811      	ldr	r1, [r2, #0]
  m = currp->epending & events;
 8001e84:	6990      	ldr	r0, [r2, #24]
 8001e86:	4291      	cmp	r1, r2
  currp->epending &= ~events;
 8001e88:	6343      	str	r3, [r0, #52]	; 0x34
  _dbg_leave_lock();
 8001e8a:	6353      	str	r3, [r2, #52]	; 0x34
 8001e8c:	d003      	beq.n	8001e96 <rt_test_009_007_setup+0x26>
 8001e8e:	6882      	ldr	r2, [r0, #8]
 8001e90:	688b      	ldr	r3, [r1, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d30a      	bcc.n	8001eac <rt_test_009_007_setup+0x3c>
 8001e96:	2300      	movs	r3, #0
 8001e98:	f383 8811 	msr	BASEPRI, r3
 8001e9c:	4a06      	ldr	r2, [pc, #24]	; (8001eb8 <rt_test_009_007_setup+0x48>)
 8001e9e:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <rt_test_009_007_setup+0x4c>)
 8001ea0:	6012      	str	r2, [r2, #0]
 8001ea2:	601b      	str	r3, [r3, #0]
  chEvtGetAndClearEvents(ALL_EVENTS);
  chEvtObjectInit(&es1);
  chEvtObjectInit(&es2);
}
 8001ea4:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8001ea6:	4806      	ldr	r0, [pc, #24]	; (8001ec0 <rt_test_009_007_setup+0x50>)
 8001ea8:	f7fe fc62 	bl	8000770 <chSysHalt>
 8001eac:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <rt_test_009_007_setup+0x54>)
 8001eae:	f7fe fc5f 	bl	8000770 <chSysHalt>
 8001eb2:	bf00      	nop
 8001eb4:	20000d70 	.word	0x20000d70
 8001eb8:	20000808 	.word	0x20000808
 8001ebc:	2000080c 	.word	0x2000080c
 8001ec0:	0800f20c 	.word	0x0800f20c
 8001ec4:	08010f9c 	.word	0x08010f9c
	...

08001ed0 <rt_test_010_001_setup>:
  /*lint -save -e9033 [10.8] Required cast operations.*/
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
  /*lint restore*/

  /* Initializing the heap header.*/
  heapp->provider = NULL;
 8001ed0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <rt_test_010_001_setup+0x2c>)
  heapp->provider = NULL;
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <rt_test_010_001_setup+0x30>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8001ed6:	1dd9      	adds	r1, r3, #7
 8001ed8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8001edc:	1acb      	subs	r3, r1, r3
  H_NEXT(&heapp->header) = hp;
  H_PAGES(&heapp->header) = 0;
  H_NEXT(hp) = NULL;
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001ede:	f5c3 63cc 	rsb	r3, r3, #1632	; 0x660
 8001ee2:	08db      	lsrs	r3, r3, #3
  H_NEXT(&heapp->header) = hp;
 8001ee4:	6051      	str	r1, [r2, #4]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8001ee6:	604b      	str	r3, [r1, #4]
  qp->next = qp;
 8001ee8:	f102 030c 	add.w	r3, r2, #12
  qp->prev = qp;
 8001eec:	e9c2 3303 	strd	r3, r3, [r2, #12]
  heapp->provider = NULL;
 8001ef0:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8001ef2:	6090      	str	r0, [r2, #8]
  H_NEXT(hp) = NULL;
 8001ef4:	6008      	str	r0, [r1, #0]
 8001ef6:	6150      	str	r0, [r2, #20]
 * .
 */

static void rt_test_010_001_setup(void) {
  chHeapObjectInit(&heap1, test_buffer, sizeof test_buffer);
}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	200016c8 	.word	0x200016c8
 8001f00:	2000167c 	.word	0x2000167c
	...

08001f10 <rt_test_010_002_setup>:
  mp->next = NULL;
 8001f10:	2200      	movs	r2, #0
  mp->object_size = size;
 8001f12:	f44f 70a4 	mov.w	r0, #328	; 0x148
  mp->align = align;
 8001f16:	2104      	movs	r1, #4
  mp->next = NULL;
 8001f18:	4b02      	ldr	r3, [pc, #8]	; (8001f24 <rt_test_010_002_setup+0x14>)
  mp->object_size = size;
 8001f1a:	e9c3 2000 	strd	r2, r0, [r3]
  mp->provider = provider;
 8001f1e:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void rt_test_010_002_setup(void) {
  chPoolObjectInit(&mp1, THD_WORKING_AREA_SIZE(THREADS_STACK_SIZE), NULL);
}
 8001f22:	4770      	bx	lr
 8001f24:	20001698 	.word	0x20001698
	...

08001f30 <chVTDoSetI>:
                vtfunc_t vtfunc, void *par) {
 8001f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f34:	460c      	mov	r4, r1
 8001f36:	4605      	mov	r5, r0
 8001f38:	4616      	mov	r6, r2
 8001f3a:	461f      	mov	r7, r3
  chDbgCheckClassI();
 8001f3c:	f7fe fd00 	bl	8000940 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001f40:	b33c      	cbz	r4, 8001f92 <chVTDoSetI+0x62>
  return (bool)(dlhp == dlhp->next);
 8001f42:	f8df c108 	ldr.w	ip, [pc, #264]	; 800204c <chVTDoSetI+0x11c>
  vtp->func = vtfunc;
 8001f46:	e9c5 6703 	strd	r6, r7, [r5, #12]
  return (bool)(dlhp == dlhp->next);
 8001f4a:	4667      	mov	r7, ip
 8001f4c:	f04f 4e80 	mov.w	lr, #1073741824	; 0x40000000
 8001f50:	f857 2f1c 	ldr.w	r2, [r7, #28]!
 8001f54:	2c02      	cmp	r4, #2
 8001f56:	f8de 0024 	ldr.w	r0, [lr, #36]	; 0x24
 8001f5a:	bf38      	it	cc
 8001f5c:	2402      	movcc	r4, #2
    if (is_vtlist_empty(&vtlp->dlist)) {
 8001f5e:	42ba      	cmp	r2, r7
 8001f60:	b280      	uxth	r0, r0
 8001f62:	d04e      	beq.n	8002002 <chVTDoSetI+0xd2>
    deltanow = chTimeDiffX(vtlp->lasttime, now);
 8001f64:	f8bc 8028 	ldrh.w	r8, [ip, #40]	; 0x28
  while (dlp->delta < deltanow) {
 8001f68:	6893      	ldr	r3, [r2, #8]
 8001f6a:	eba0 0608 	sub.w	r6, r0, r8
 8001f6e:	b2b1      	uxth	r1, r6
    delta    = deltanow + delay;
 8001f70:	1866      	adds	r6, r4, r1
 8001f72:	46b1      	mov	r9, r6
    if (delta < deltanow) {
 8001f74:	d210      	bcs.n	8001f98 <chVTDoSetI+0x68>
    else if (delta < vtlp->dlist.next->delta) {
 8001f76:	429e      	cmp	r6, r3
 8001f78:	d333      	bcc.n	8001fe2 <chVTDoSetI+0xb2>
  while (dlp->delta < delta) {
 8001f7a:	454b      	cmp	r3, r9
 8001f7c:	d220      	bcs.n	8001fc0 <chVTDoSetI+0x90>
    chDbgAssert(dlp != &vtp->dlist, "timer already armed");
 8001f7e:	42aa      	cmp	r2, r5
 8001f80:	d007      	beq.n	8001f92 <chVTDoSetI+0x62>
    dlp = dlp->next;
 8001f82:	6812      	ldr	r2, [r2, #0]
    delta -= dlp->delta;
 8001f84:	eba9 0903 	sub.w	r9, r9, r3
  while (dlp->delta < delta) {
 8001f88:	6893      	ldr	r3, [r2, #8]
 8001f8a:	454b      	cmp	r3, r9
 8001f8c:	d218      	bcs.n	8001fc0 <chVTDoSetI+0x90>
    chDbgAssert(dlp != &vtp->dlist, "timer already armed");
 8001f8e:	4295      	cmp	r5, r2
 8001f90:	d1f7      	bne.n	8001f82 <chVTDoSetI+0x52>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8001f92:	482f      	ldr	r0, [pc, #188]	; (8002050 <chVTDoSetI+0x120>)
 8001f94:	f7fe fbec 	bl	8000770 <chSysHalt>
  while (dlp->delta < deltanow) {
 8001f98:	4299      	cmp	r1, r3
 8001f9a:	d950      	bls.n	800203e <chVTDoSetI+0x10e>
 8001f9c:	4610      	mov	r0, r2
    dlp->delta = (sysinterval_t)0;
 8001f9e:	2600      	movs	r6, #0
 8001fa0:	6086      	str	r6, [r0, #8]
    dlp        = dlp->next;
 8001fa2:	6800      	ldr	r0, [r0, #0]
    deltanow  -= dlp->delta;
 8001fa4:	1ac9      	subs	r1, r1, r3
  while (dlp->delta < deltanow) {
 8001fa6:	6883      	ldr	r3, [r0, #8]
 8001fa8:	428b      	cmp	r3, r1
 8001faa:	d3f9      	bcc.n	8001fa0 <chVTDoSetI+0x70>
  vtlp->lasttime = vtlp->lasttime + deltanow;
 8001fac:	4488      	add	r8, r1
  if (is_timer(&vtlp->dlist, dlp)) {
 8001fae:	42b8      	cmp	r0, r7
  vtlp->lasttime = vtlp->lasttime + deltanow;
 8001fb0:	f8ac 8028 	strh.w	r8, [ip, #40]	; 0x28
  if (is_timer(&vtlp->dlist, dlp)) {
 8001fb4:	d001      	beq.n	8001fba <chVTDoSetI+0x8a>
    dlp->delta -= deltanow;
 8001fb6:	1a5b      	subs	r3, r3, r1
 8001fb8:	6083      	str	r3, [r0, #8]
      delta -= deltanow;
 8001fba:	46a1      	mov	r9, r4
  while (dlp->delta < delta) {
 8001fbc:	6893      	ldr	r3, [r2, #8]
 8001fbe:	e7dc      	b.n	8001f7a <chVTDoSetI+0x4a>
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  vtp->dlist.prev       = vtp->dlist.next->prev;
 8001fc4:	6853      	ldr	r3, [r2, #4]
 8001fc6:	e9c5 2300 	strd	r2, r3, [r5]
  vtp->dlist.prev->next = &vtp->dlist;
 8001fca:	601d      	str	r5, [r3, #0]
  dlp->prev             = &vtp->dlist;
 8001fcc:	6055      	str	r5, [r2, #4]
  vtp->dlist.delta      = delta;
 8001fce:	f8c5 9008 	str.w	r9, [r5, #8]
  dlp->delta -= delta;
 8001fd2:	6893      	ldr	r3, [r2, #8]
 8001fd4:	eba3 0309 	sub.w	r3, r3, r9
 8001fd8:	6093      	str	r3, [r2, #8]
  vtlp->dlist.delta = (sysinterval_t)-1;
 8001fda:	f8cc 1024 	str.w	r1, [ip, #36]	; 0x24
}
 8001fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8001fe2:	f8de 100c 	ldr.w	r1, [lr, #12]
 8001fe6:	0789      	lsls	r1, r1, #30
 8001fe8:	d526      	bpl.n	8002038 <chVTDoSetI+0x108>
  return systime + (systime_t)interval;
 8001fea:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001fee:	4286      	cmp	r6, r0
 8001ff0:	bf94      	ite	ls
 8001ff2:	eb08 0106 	addls.w	r1, r8, r6
 8001ff6:	eb08 0100 	addhi.w	r1, r8, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001ffa:	b289      	uxth	r1, r1
 8001ffc:	f8ce 1034 	str.w	r1, [lr, #52]	; 0x34
 8002000:	e7bb      	b.n	8001f7a <chVTDoSetI+0x4a>
      vtlp->dlist.prev = &vtp->dlist;
 8002002:	e9cc 5507 	strd	r5, r5, [ip, #28]
      vtlp->lasttime = now;
 8002006:	f8ac 0028 	strh.w	r0, [ip, #40]	; 0x28
      vtp->dlist.delta = delay;
 800200a:	60ac      	str	r4, [r5, #8]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 800200c:	f8de 300c 	ldr.w	r3, [lr, #12]
      vtp->dlist.prev = &vtlp->dlist;
 8002010:	e9c5 2200 	strd	r2, r2, [r5]
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8002014:	f013 0302 	ands.w	r3, r3, #2
 8002018:	d115      	bne.n	8002046 <chVTDoSetI+0x116>
 800201a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800201e:	428c      	cmp	r4, r1
 8002020:	bf94      	ite	ls
 8002022:	1900      	addls	r0, r0, r4
 8002024:	1840      	addhi	r0, r0, r1
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002026:	2202      	movs	r2, #2
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8002028:	b280      	uxth	r0, r0
 800202a:	f8ce 0034 	str.w	r0, [lr, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800202e:	f8ce 3010 	str.w	r3, [lr, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002032:	f8ce 200c 	str.w	r2, [lr, #12]
 8002036:	e7d2      	b.n	8001fde <chVTDoSetI+0xae>
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8002038:	4806      	ldr	r0, [pc, #24]	; (8002054 <chVTDoSetI+0x124>)
 800203a:	f7fe fb99 	bl	8000770 <chSysHalt>
  vtlp->lasttime = vtlp->lasttime + deltanow;
 800203e:	f8ac 0028 	strh.w	r0, [ip, #40]	; 0x28
 8002042:	4610      	mov	r0, r2
 8002044:	e7b7      	b.n	8001fb6 <chVTDoSetI+0x86>
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8002046:	4804      	ldr	r0, [pc, #16]	; (8002058 <chVTDoSetI+0x128>)
 8002048:	f7fe fb92 	bl	8000770 <chSysHalt>
 800204c:	20000d70 	.word	0x20000d70
 8002050:	08010eb4 	.word	0x08010eb4
 8002054:	08010c88 	.word	0x08010c88
 8002058:	08010e08 	.word	0x08010e08
 800205c:	00000000 	.word	0x00000000

08002060 <chVTDoResetI>:
void chVTDoResetI(virtual_timer_t *vtp) {
 8002060:	b510      	push	{r4, lr}
 8002062:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8002064:	f7fe fc6c 	bl	8000940 <chDbgCheckClassI>
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 8002068:	68e3      	ldr	r3, [r4, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d037      	beq.n	80020de <chVTDoResetI+0x7e>
  return (bool)(dlhp->next == dlp);
 800206e:	4b24      	ldr	r3, [pc, #144]	; (8002100 <chVTDoResetI+0xa0>)
    vtp->dlist.prev->next = vtp->dlist.next;
 8002070:	6822      	ldr	r2, [r4, #0]
  if (!is_first_timer(&vtlp->dlist, &vtp->dlist)) {
 8002072:	69d9      	ldr	r1, [r3, #28]
 8002074:	428c      	cmp	r4, r1
 8002076:	d00c      	beq.n	8002092 <chVTDoResetI+0x32>
    vtp->func = NULL;
 8002078:	2000      	movs	r0, #0
    vtp->dlist.prev->next = vtp->dlist.next;
 800207a:	6861      	ldr	r1, [r4, #4]
    if (is_timer(&vtlp->dlist, vtp->dlist.next))
 800207c:	331c      	adds	r3, #28
 800207e:	429a      	cmp	r2, r3
    vtp->dlist.prev->next = vtp->dlist.next;
 8002080:	600a      	str	r2, [r1, #0]
    vtp->dlist.next->prev = vtp->dlist.prev;
 8002082:	6051      	str	r1, [r2, #4]
    vtp->func = NULL;
 8002084:	60e0      	str	r0, [r4, #12]
    if (is_timer(&vtlp->dlist, vtp->dlist.next))
 8002086:	d003      	beq.n	8002090 <chVTDoResetI+0x30>
      vtp->dlist.next->delta += vtp->dlist.delta;
 8002088:	6893      	ldr	r3, [r2, #8]
 800208a:	68a1      	ldr	r1, [r4, #8]
 800208c:	440b      	add	r3, r1
 800208e:	6093      	str	r3, [r2, #8]
}
 8002090:	bd10      	pop	{r4, pc}
  vtlp->dlist.next = vtp->dlist.next;
 8002092:	4619      	mov	r1, r3
  vtp->func = NULL;
 8002094:	2000      	movs	r0, #0
  vtlp->dlist.next = vtp->dlist.next;
 8002096:	f841 2f1c 	str.w	r2, [r1, #28]!
  if (is_vtlist_empty(&vtlp->dlist)) {
 800209a:	428a      	cmp	r2, r1
  vtlp->dlist.next->prev = &vtlp->dlist;
 800209c:	6051      	str	r1, [r2, #4]
  vtp->func = NULL;
 800209e:	60e0      	str	r0, [r4, #12]
  if (is_vtlist_empty(&vtlp->dlist)) {
 80020a0:	d027      	beq.n	80020f2 <chVTDoResetI+0x92>
  return (systime_t)STM32_ST_TIM->CNT;
 80020a2:	f04f 4c80 	mov.w	ip, #1073741824	; 0x40000000
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80020a6:	6891      	ldr	r1, [r2, #8]
 80020a8:	68a4      	ldr	r4, [r4, #8]
  nowdelta = chTimeDiffX(vtlp->lasttime, chVTGetSystemTimeX());
 80020aa:	8d18      	ldrh	r0, [r3, #40]	; 0x28
  vtlp->dlist.next->delta += vtp->dlist.delta;
 80020ac:	190b      	adds	r3, r1, r4
 80020ae:	6093      	str	r3, [r2, #8]
 80020b0:	f8dc 2024 	ldr.w	r2, [ip, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 80020b4:	1a12      	subs	r2, r2, r0
 80020b6:	b292      	uxth	r2, r2
  if (nowdelta >= vtlp->dlist.next->delta) {
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d9e9      	bls.n	8002090 <chVTDoResetI+0x30>
  delta = vtlp->dlist.next->delta - nowdelta;
 80020bc:	1a99      	subs	r1, r3, r2
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80020be:	2901      	cmp	r1, #1
 80020c0:	d910      	bls.n	80020e4 <chVTDoResetI+0x84>
    if (delta > (sysinterval_t)TIME_MAX_SYSTIME) {
 80020c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020c6:	4293      	cmp	r3, r2
 80020c8:	bf28      	it	cs
 80020ca:	4613      	movcs	r3, r2
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80020cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80020d0:	68d1      	ldr	r1, [r2, #12]
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 80020d2:	0789      	lsls	r1, r1, #30
 80020d4:	d511      	bpl.n	80020fa <chVTDoResetI+0x9a>
  return systime + (systime_t)interval;
 80020d6:	4403      	add	r3, r0
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 80020d8:	b29b      	uxth	r3, r3
 80020da:	6353      	str	r3, [r2, #52]	; 0x34
}
 80020dc:	bd10      	pop	{r4, pc}
  chDbgAssert(vtp->func != NULL, "timer not set or already triggered");
 80020de:	4809      	ldr	r0, [pc, #36]	; (8002104 <chVTDoResetI+0xa4>)
 80020e0:	f7fe fb46 	bl	8000770 <chSysHalt>
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80020e4:	1c93      	adds	r3, r2, #2
  chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 80020e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ea:	d3ef      	bcc.n	80020cc <chVTDoResetI+0x6c>
 80020ec:	4806      	ldr	r0, [pc, #24]	; (8002108 <chVTDoResetI+0xa8>)
 80020ee:	f7fe fb3f 	bl	8000770 <chSysHalt>
  STM32_ST_TIM->DIER = 0U;
 80020f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80020f6:	60d8      	str	r0, [r3, #12]
}
 80020f8:	bd10      	pop	{r4, pc}
 80020fa:	4804      	ldr	r0, [pc, #16]	; (800210c <chVTDoResetI+0xac>)
 80020fc:	f7fe fb38 	bl	8000770 <chSysHalt>
 8002100:	20000d70 	.word	0x20000d70
 8002104:	08010d7c 	.word	0x08010d7c
 8002108:	08010e58 	.word	0x08010e58
 800210c:	08010c88 	.word	0x08010c88

08002110 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8002110:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002112:	4b10      	ldr	r3, [pc, #64]	; (8002154 <chSchReadyI+0x44>)
 8002114:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002116:	2a00      	cmp	r2, #0
 8002118:	db16      	blt.n	8002148 <chSchReadyI+0x38>
 800211a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800211c:	2a00      	cmp	r2, #0
 800211e:	dd13      	ble.n	8002148 <chSchReadyI+0x38>
  chDbgCheck(tp != NULL);
 8002120:	b1a8      	cbz	r0, 800214e <chSchReadyI+0x3e>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8002122:	f890 2020 	ldrb.w	r2, [r0, #32]
 8002126:	b192      	cbz	r2, 800214e <chSchReadyI+0x3e>
 8002128:	2a0f      	cmp	r2, #15
 800212a:	d010      	beq.n	800214e <chSchReadyI+0x3e>
  tp->state = CH_STATE_READY;
 800212c:	2200      	movs	r2, #0
  } while (pqp->prio >= p->prio);
 800212e:	6881      	ldr	r1, [r0, #8]
 8002130:	f880 2020 	strb.w	r2, [r0, #32]
    pqp = pqp->next;
 8002134:	681b      	ldr	r3, [r3, #0]
  } while (pqp->prio >= p->prio);
 8002136:	689a      	ldr	r2, [r3, #8]
 8002138:	428a      	cmp	r2, r1
 800213a:	d2fb      	bcs.n	8002134 <chSchReadyI+0x24>
  p->prev       = pqp->prev;
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	e9c0 3200 	strd	r3, r2, [r0]
  p->prev->next = p;
 8002142:	6010      	str	r0, [r2, #0]
  pqp->prev     = p;
 8002144:	6058      	str	r0, [r3, #4]
}
 8002146:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8002148:	4803      	ldr	r0, [pc, #12]	; (8002158 <chSchReadyI+0x48>)
 800214a:	f7fe fb11 	bl	8000770 <chSysHalt>
  chDbgCheck(tp != NULL);
 800214e:	4803      	ldr	r0, [pc, #12]	; (800215c <chSchReadyI+0x4c>)
 8002150:	f7fe fb0e 	bl	8000770 <chSysHalt>
 8002154:	20000d70 	.word	0x20000d70
 8002158:	0800f22c 	.word	0x0800f22c
 800215c:	08010e64 	.word	0x08010e64

08002160 <wakeup.lto_priv.0>:
static void wakeup(void *p) {
 8002160:	b530      	push	{r4, r5, lr}
 8002162:	2320      	movs	r3, #32
 8002164:	b083      	sub	sp, #12
 8002166:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800216a:	4c1f      	ldr	r4, [pc, #124]	; (80021e8 <wakeup.lto_priv.0+0x88>)
 800216c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800216e:	2b00      	cmp	r3, #0
 8002170:	dd01      	ble.n	8002176 <wakeup.lto_priv.0+0x16>
 8002172:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002174:	b113      	cbz	r3, 800217c <wakeup.lto_priv.0+0x1c>
    chSysHalt("SV#6");
 8002176:	481d      	ldr	r0, [pc, #116]	; (80021ec <wakeup.lto_priv.0+0x8c>)
 8002178:	f7fe fafa 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 800217c:	2301      	movs	r3, #1
 800217e:	6363      	str	r3, [r4, #52]	; 0x34
  switch (tp->state) {
 8002180:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002184:	2b07      	cmp	r3, #7
 8002186:	d811      	bhi.n	80021ac <wakeup.lto_priv.0+0x4c>
 8002188:	e8df f003 	tbb	[pc, r3]
 800218c:	24101028 	.word	0x24101028
 8002190:	0c10040c 	.word	0x0c10040c
    chSemFastSignalI(tp->u.wtsemp);
 8002194:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002196:	9001      	str	r0, [sp, #4]
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8002198:	f7fe fbd2 	bl	8000940 <chDbgCheckClassI>

  sp->cnt++;
 800219c:	68ab      	ldr	r3, [r5, #8]
 800219e:	9801      	ldr	r0, [sp, #4]
 80021a0:	3301      	adds	r3, #1
 80021a2:	60ab      	str	r3, [r5, #8]
  p->prev->next = p->next;
 80021a4:	e9d0 3200 	ldrd	r3, r2, [r0]
 80021a8:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 80021aa:	605a      	str	r2, [r3, #4]
  tp->u.rdymsg = MSG_TIMEOUT;
 80021ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021b0:	6243      	str	r3, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80021b2:	f7ff ffad 	bl	8002110 <chSchReadyI>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80021b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	dd08      	ble.n	80021ce <wakeup.lto_priv.0+0x6e>
 80021bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80021be:	2b00      	cmp	r3, #0
 80021c0:	dd05      	ble.n	80021ce <wakeup.lto_priv.0+0x6e>
  _dbg_leave_lock();
 80021c2:	2300      	movs	r3, #0
 80021c4:	6363      	str	r3, [r4, #52]	; 0x34
 80021c6:	f383 8811 	msr	BASEPRI, r3
}
 80021ca:	b003      	add	sp, #12
 80021cc:	bd30      	pop	{r4, r5, pc}
    chSysHalt("SV#7");
 80021ce:	4808      	ldr	r0, [pc, #32]	; (80021f0 <wakeup.lto_priv.0+0x90>)
 80021d0:	f7fe face 	bl	8000770 <chSysHalt>
    *tp->u.wttrp = NULL;
 80021d4:	2200      	movs	r2, #0
 80021d6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021d8:	601a      	str	r2, [r3, #0]
    break;
 80021da:	e7e7      	b.n	80021ac <wakeup.lto_priv.0+0x4c>
  _dbg_check_unlock_from_isr();
 80021dc:	f7fe fb98 	bl	8000910 <_dbg_check_unlock_from_isr>
 80021e0:	2300      	movs	r3, #0
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	e7f0      	b.n	80021ca <wakeup.lto_priv.0+0x6a>
 80021e8:	20000d70 	.word	0x20000d70
 80021ec:	0800f21c 	.word	0x0800f21c
 80021f0:	0800f224 	.word	0x0800f224
	...

08002200 <chMtxUnlockS>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002200:	4b1b      	ldr	r3, [pc, #108]	; (8002270 <chMtxUnlockS+0x70>)
 *
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxUnlockS(mutex_t *mp) {
 8002202:	b510      	push	{r4, lr}
 8002204:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002206:	b96a      	cbnz	r2, 8002224 <chMtxUnlockS+0x24>
 8002208:	4601      	mov	r1, r0
 800220a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800220c:	2800      	cmp	r0, #0
 800220e:	dd09      	ble.n	8002224 <chMtxUnlockS+0x24>
  thread_t *currtp = chThdGetSelfX();
  mutex_t *lmp;

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);
 8002210:	b129      	cbz	r1, 800221e <chMtxUnlockS+0x1e>
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8002212:	6998      	ldr	r0, [r3, #24]

  chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 8002214:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002216:	b113      	cbz	r3, 800221e <chMtxUnlockS+0x1e>
  chDbgAssert(currtp->mtxlist->owner == currtp, "ownership failure");
 8002218:	689c      	ldr	r4, [r3, #8]
 800221a:	4284      	cmp	r4, r0
 800221c:	d005      	beq.n	800222a <chMtxUnlockS+0x2a>
  chDbgCheck(mp != NULL);
 800221e:	4815      	ldr	r0, [pc, #84]	; (8002274 <chMtxUnlockS+0x74>)
 8002220:	f7fe faa6 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8002224:	4814      	ldr	r0, [pc, #80]	; (8002278 <chMtxUnlockS+0x78>)
 8002226:	f7fe faa3 	bl	8000770 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(currtp->mtxlist == mp, "not next in list");
 800222a:	428b      	cmp	r3, r1
 800222c:	d1f7      	bne.n	800221e <chMtxUnlockS+0x1e>
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    currtp->mtxlist = mp->next;

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800222e:	f8d1 c000 	ldr.w	ip, [r1]
    currtp->mtxlist = mp->next;
 8002232:	68cc      	ldr	r4, [r1, #12]
    if (chMtxQueueNotEmptyS(mp)) {
 8002234:	4561      	cmp	r1, ip
    currtp->mtxlist = mp->next;
 8002236:	6384      	str	r4, [r0, #56]	; 0x38
    if (chMtxQueueNotEmptyS(mp)) {
 8002238:	d018      	beq.n	800226c <chMtxUnlockS+0x6c>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = currtp->realprio;
 800223a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
      lmp = currtp->mtxlist;
      while (lmp != NULL) {
 800223c:	b14c      	cbz	r4, 8002252 <chMtxUnlockS+0x52>
  return (bool)(qp->next != qp);
 800223e:	6822      	ldr	r2, [r4, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8002240:	4294      	cmp	r4, r2
 8002242:	d003      	beq.n	800224c <chMtxUnlockS+0x4c>
 8002244:	6892      	ldr	r2, [r2, #8]
 8002246:	4293      	cmp	r3, r2
 8002248:	bf38      	it	cc
 800224a:	4613      	movcc	r3, r2
            (((thread_t *)lmp->queue.next)->hdr.pqueue.prio > newprio)) {
          newprio = ((thread_t *)lmp->queue.next)->hdr.pqueue.prio;
        }
        lmp = lmp->next;
 800224c:	68e4      	ldr	r4, [r4, #12]
      while (lmp != NULL) {
 800224e:	2c00      	cmp	r4, #0
 8002250:	d1f5      	bne.n	800223e <chMtxUnlockS+0x3e>
      mp->owner = NULL;
    }
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  }
#endif
}
 8002252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      currtp->hdr.pqueue.prio = newprio;
 8002256:	6083      	str	r3, [r0, #8]
  ch_queue_t *p = qp->next;
 8002258:	6808      	ldr	r0, [r1, #0]
      mp->next = tp->mtxlist;
 800225a:	6b82      	ldr	r2, [r0, #56]	; 0x38
  qp->next       = p->next;
 800225c:	6803      	ldr	r3, [r0, #0]
 800225e:	600b      	str	r3, [r1, #0]
  qp->next->prev = qp;
 8002260:	6059      	str	r1, [r3, #4]
 8002262:	e9c1 0202 	strd	r0, r2, [r1, #8]
      tp->mtxlist = mp;
 8002266:	6381      	str	r1, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8002268:	f7ff bf52 	b.w	8002110 <chSchReadyI>
      mp->owner = NULL;
 800226c:	609a      	str	r2, [r3, #8]
}
 800226e:	bd10      	pop	{r4, pc}
 8002270:	20000d70 	.word	0x20000d70
 8002274:	08010c64 	.word	0x08010c64
 8002278:	0800f204 	.word	0x0800f204
 800227c:	00000000 	.word	0x00000000

08002280 <chEvtSignalI>:
 * @param[in] tp        the thread to be signaled
 * @param[in] events    the events set to be ORed
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {
 8002280:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <chEvtSignalI+0x4c>)
 8002284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002286:	2a00      	cmp	r2, #0
 8002288:	db0d      	blt.n	80022a6 <chEvtSignalI+0x26>
 800228a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800228c:	2b00      	cmp	r3, #0
 800228e:	dd0a      	ble.n	80022a6 <chEvtSignalI+0x26>

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8002290:	b1c8      	cbz	r0, 80022c6 <chEvtSignalI+0x46>

  tp->epending |= events;
 8002292:	6b42      	ldr	r2, [r0, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8002294:	f890 3020 	ldrb.w	r3, [r0, #32]
  tp->epending |= events;
 8002298:	4311      	orrs	r1, r2
  if (((tp->state == CH_STATE_WTOREVT) &&
 800229a:	2b0a      	cmp	r3, #10
  tp->epending |= events;
 800229c:	6341      	str	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 800229e:	d00e      	beq.n	80022be <chEvtSignalI+0x3e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80022a0:	2b0b      	cmp	r3, #11
 80022a2:	d003      	beq.n	80022ac <chEvtSignalI+0x2c>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 80022a4:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 80022a6:	480a      	ldr	r0, [pc, #40]	; (80022d0 <chEvtSignalI+0x50>)
 80022a8:	f7fe fa62 	bl	8000770 <chSysHalt>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80022ac:	6a43      	ldr	r3, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 80022ae:	438b      	bics	r3, r1
 80022b0:	d1f8      	bne.n	80022a4 <chEvtSignalI+0x24>
    tp->u.rdymsg = MSG_OK;
 80022b2:	2300      	movs	r3, #0
 80022b4:	6243      	str	r3, [r0, #36]	; 0x24
}
 80022b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void) chSchReadyI(tp);
 80022ba:	f7ff bf29 	b.w	8002110 <chSchReadyI>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80022be:	6a43      	ldr	r3, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 80022c0:	4219      	tst	r1, r3
 80022c2:	d1f6      	bne.n	80022b2 <chEvtSignalI+0x32>
 80022c4:	e7ee      	b.n	80022a4 <chEvtSignalI+0x24>
  chDbgCheck(tp != NULL);
 80022c6:	4803      	ldr	r0, [pc, #12]	; (80022d4 <chEvtSignalI+0x54>)
 80022c8:	f7fe fa52 	bl	8000770 <chSysHalt>
 80022cc:	20000d70 	.word	0x20000d70
 80022d0:	0800f22c 	.word	0x0800f22c
 80022d4:	08010ca8 	.word	0x08010ca8
	...

080022e0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80022e0:	b538      	push	{r3, r4, r5, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80022e2:	4c1c      	ldr	r4, [pc, #112]	; (8002354 <chSchGoSleepS+0x74>)
 80022e4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022e6:	b9e3      	cbnz	r3, 8002322 <chSchGoSleepS+0x42>
 80022e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	dd19      	ble.n	8002322 <chSchGoSleepS+0x42>
  currp->state = CH_STATE_CURRENT;
 80022ee:	2101      	movs	r1, #1
  thread_t *otp = currp;
 80022f0:	69a5      	ldr	r5, [r4, #24]
  ch_priority_queue_t *p = pqp->next;
 80022f2:	6823      	ldr	r3, [r4, #0]
  otp->state = newstate;
 80022f4:	f885 0020 	strb.w	r0, [r5, #32]
  pqp->next       = p->next;
 80022f8:	681a      	ldr	r2, [r3, #0]
  pqp->next->prev = pqp;
 80022fa:	6054      	str	r4, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 80022fc:	f883 1020 	strb.w	r1, [r3, #32]
  pqp->next       = p->next;
 8002300:	6022      	str	r2, [r4, #0]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8002302:	8f22      	ldrh	r2, [r4, #56]	; 0x38
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8002304:	61a3      	str	r3, [r4, #24]
 8002306:	07d2      	lsls	r2, r2, #31
 8002308:	d50e      	bpl.n	8002328 <chSchGoSleepS+0x48>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800230a:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 800230e:	69ea      	ldr	r2, [r5, #28]
 8002310:	3b24      	subs	r3, #36	; 0x24
 8002312:	429a      	cmp	r2, r3
 8002314:	d81a      	bhi.n	800234c <chSchGoSleepS+0x6c>
 8002316:	4629      	mov	r1, r5
 8002318:	69a0      	ldr	r0, [r4, #24]
}
 800231a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 800231e:	f7fd bf8f 	b.w	8000240 <_port_switch>
    chSysHalt("SV#11");
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <chSchGoSleepS+0x78>)
 8002324:	f7fe fa24 	bl	8000770 <chSysHalt>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002328:	f895 2020 	ldrb.w	r2, [r5, #32]
 800232c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800232e:	6a68      	ldr	r0, [r5, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8002330:	608b      	str	r3, [r1, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002332:	00d3      	lsls	r3, r2, #3
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	700b      	strb	r3, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 800233a:	60c8      	str	r0, [r1, #12]
    trace_next();
 800233c:	f7fd fff8 	bl	8000330 <trace_next>
 8002340:	f3ef 8309 	mrs	r3, PSP
 8002344:	69ea      	ldr	r2, [r5, #28]
 8002346:	3b24      	subs	r3, #36	; 0x24
 8002348:	429a      	cmp	r2, r3
 800234a:	d9e4      	bls.n	8002316 <chSchGoSleepS+0x36>
 800234c:	4803      	ldr	r0, [pc, #12]	; (800235c <chSchGoSleepS+0x7c>)
 800234e:	f7fe fa0f 	bl	8000770 <chSysHalt>
 8002352:	bf00      	nop
 8002354:	20000d70 	.word	0x20000d70
 8002358:	0800f204 	.word	0x0800f204
 800235c:	0800f270 	.word	0x0800f270

08002360 <chMsgSend>:
 * @param[in] msg       the message
 * @return              The answer message from @p chMsgRelease().
 *
 * @api
 */
msg_t chMsgSend(thread_t *tp, msg_t msg) {
 8002360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *ctp = currp;
 8002362:	4e1c      	ldr	r6, [pc, #112]	; (80023d4 <chMsgSend+0x74>)
 8002364:	69b5      	ldr	r5, [r6, #24]

  chDbgCheck(tp != NULL);
 8002366:	b370      	cbz	r0, 80023c6 <chMsgSend+0x66>
 8002368:	4604      	mov	r4, r0
 800236a:	460f      	mov	r7, r1
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800236c:	2320      	movs	r3, #32
 800236e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002372:	f7fe fa55 	bl	8000820 <_dbg_check_lock>
  p->prev       = qp->prev;
 8002376:	6b23      	ldr	r3, [r4, #48]	; 0x30

  chSysLock();
  ctp->u.sentmsg = msg;
  msg_insert(ctp, &tp->msgqueue);
 8002378:	f104 022c 	add.w	r2, r4, #44	; 0x2c
  p->next       = qp;
 800237c:	602a      	str	r2, [r5, #0]
  ctp->u.sentmsg = msg;
 800237e:	626f      	str	r7, [r5, #36]	; 0x24
  p->prev       = qp->prev;
 8002380:	606b      	str	r3, [r5, #4]
  p->prev->next = p;
 8002382:	601d      	str	r5, [r3, #0]
  if (tp->state == CH_STATE_WTMSG) {
 8002384:	f894 3020 	ldrb.w	r3, [r4, #32]
  qp->prev      = p;
 8002388:	6325      	str	r5, [r4, #48]	; 0x30
 800238a:	2b0e      	cmp	r3, #14
 800238c:	d01e      	beq.n	80023cc <chMsgSend+0x6c>
    (void) chSchReadyI(tp);
  }
  chSchGoSleepS(CH_STATE_SNDMSGQ);
 800238e:	200c      	movs	r0, #12
 8002390:	f7ff ffa6 	bl	80022e0 <chSchGoSleepS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002394:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8002396:	b983      	cbnz	r3, 80023ba <chMsgSend+0x5a>
 8002398:	6b72      	ldr	r2, [r6, #52]	; 0x34
 800239a:	2a00      	cmp	r2, #0
 800239c:	dd0d      	ble.n	80023ba <chMsgSend+0x5a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800239e:	6832      	ldr	r2, [r6, #0]
  msg = ctp->u.rdymsg;
 80023a0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80023a2:	42b2      	cmp	r2, r6
  _dbg_leave_lock();
 80023a4:	6373      	str	r3, [r6, #52]	; 0x34
 80023a6:	d004      	beq.n	80023b2 <chMsgSend+0x52>
 80023a8:	69b1      	ldr	r1, [r6, #24]
 80023aa:	6893      	ldr	r3, [r2, #8]
 80023ac:	688a      	ldr	r2, [r1, #8]
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d306      	bcc.n	80023c0 <chMsgSend+0x60>
 80023b2:	2300      	movs	r3, #0
 80023b4:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return msg;
}
 80023b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 80023ba:	4807      	ldr	r0, [pc, #28]	; (80023d8 <chMsgSend+0x78>)
 80023bc:	f7fe f9d8 	bl	8000770 <chSysHalt>
 80023c0:	4806      	ldr	r0, [pc, #24]	; (80023dc <chMsgSend+0x7c>)
 80023c2:	f7fe f9d5 	bl	8000770 <chSysHalt>
  chDbgCheck(tp != NULL);
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <chMsgSend+0x80>)
 80023c8:	f7fe f9d2 	bl	8000770 <chSysHalt>
    (void) chSchReadyI(tp);
 80023cc:	4620      	mov	r0, r4
 80023ce:	f7ff fe9f 	bl	8002110 <chSchReadyI>
 80023d2:	e7dc      	b.n	800238e <chMsgSend+0x2e>
 80023d4:	20000d70 	.word	0x20000d70
 80023d8:	0800f214 	.word	0x0800f214
 80023dc:	08010cb8 	.word	0x08010cb8
 80023e0:	08010e34 	.word	0x08010e34
	...

080023f0 <msg_thread1>:

/****************************************************************************
 * Shared code.
 ****************************************************************************/

static THD_FUNCTION(msg_thread1, p) {
 80023f0:	b510      	push	{r4, lr}
 80023f2:	4604      	mov	r4, r0

  chMsgSend(p, 'A');
 80023f4:	2141      	movs	r1, #65	; 0x41
 80023f6:	f7ff ffb3 	bl	8002360 <chMsgSend>
  chMsgSend(p, 'B');
 80023fa:	2142      	movs	r1, #66	; 0x42
 80023fc:	4620      	mov	r0, r4
 80023fe:	f7ff ffaf 	bl	8002360 <chMsgSend>
  chMsgSend(p, 'C');
 8002402:	2143      	movs	r1, #67	; 0x43
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff ffab 	bl	8002360 <chMsgSend>
  chMsgSend(p, 'D');
 800240a:	4620      	mov	r0, r4
}
 800240c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMsgSend(p, 'D');
 8002410:	2144      	movs	r1, #68	; 0x44
 8002412:	f7ff bfa5 	b.w	8002360 <chMsgSend>
 8002416:	bf00      	nop
	...

08002420 <bmk_thread4.lto_priv.0>:
static THD_FUNCTION(bmk_thread3, p) {

  chThdExit((msg_t)p);
}

static THD_FUNCTION(bmk_thread4, p) {
 8002420:	b538      	push	{r3, r4, r5, lr}
 8002422:	4c16      	ldr	r4, [pc, #88]	; (800247c <bmk_thread4.lto_priv.0+0x5c>)
 8002424:	2320      	movs	r3, #32
 8002426:	69a5      	ldr	r5, [r4, #24]
 8002428:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800242c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8002430:	4313      	orrs	r3, r2
 8002432:	d119      	bne.n	8002468 <bmk_thread4.lto_priv.0+0x48>
  _dbg_enter_lock();
 8002434:	2301      	movs	r3, #1
 8002436:	6363      	str	r3, [r4, #52]	; 0x34
  thread_t *self = chThdGetSelfX();

  (void)p;
  chSysLock();
  do {
    chSchGoSleepS(CH_STATE_SUSPENDED);
 8002438:	2003      	movs	r0, #3
 800243a:	f7ff ff51 	bl	80022e0 <chSchGoSleepS>
    msg = self->u.rdymsg;
  } while (msg == MSG_OK);
 800243e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002440:	2b00      	cmp	r3, #0
 8002442:	d0f9      	beq.n	8002438 <bmk_thread4.lto_priv.0+0x18>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002444:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002446:	b993      	cbnz	r3, 800246e <bmk_thread4.lto_priv.0+0x4e>
 8002448:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800244a:	2a00      	cmp	r2, #0
 800244c:	dd0f      	ble.n	800246e <bmk_thread4.lto_priv.0+0x4e>
 800244e:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8002450:	6363      	str	r3, [r4, #52]	; 0x34
 8002452:	42a2      	cmp	r2, r4
 8002454:	d004      	beq.n	8002460 <bmk_thread4.lto_priv.0+0x40>
 8002456:	69a1      	ldr	r1, [r4, #24]
 8002458:	6893      	ldr	r3, [r2, #8]
 800245a:	688a      	ldr	r2, [r1, #8]
 800245c:	429a      	cmp	r2, r3
 800245e:	d309      	bcc.n	8002474 <bmk_thread4.lto_priv.0+0x54>
 8002460:	2300      	movs	r3, #0
 8002462:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();
}
 8002466:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 8002468:	4805      	ldr	r0, [pc, #20]	; (8002480 <bmk_thread4.lto_priv.0+0x60>)
 800246a:	f7fe f981 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800246e:	4805      	ldr	r0, [pc, #20]	; (8002484 <bmk_thread4.lto_priv.0+0x64>)
 8002470:	f7fe f97e 	bl	8000770 <chSysHalt>
 8002474:	4804      	ldr	r0, [pc, #16]	; (8002488 <bmk_thread4.lto_priv.0+0x68>)
 8002476:	f7fe f97b 	bl	8000770 <chSysHalt>
 800247a:	bf00      	nop
 800247c:	20000d70 	.word	0x20000d70
 8002480:	0800f20c 	.word	0x0800f20c
 8002484:	0800f214 	.word	0x0800f214
 8002488:	08010d58 	.word	0x08010d58
 800248c:	00000000 	.word	0x00000000

08002490 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002490:	b530      	push	{r4, r5, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002492:	4c13      	ldr	r4, [pc, #76]	; (80024e0 <chSchGoSleepTimeoutS+0x50>)
 8002494:	b087      	sub	sp, #28
 8002496:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002498:	b9ca      	cbnz	r2, 80024ce <chSchGoSleepTimeoutS+0x3e>
 800249a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800249c:	2a00      	cmp	r2, #0
 800249e:	dd16      	ble.n	80024ce <chSchGoSleepTimeoutS+0x3e>
 80024a0:	460b      	mov	r3, r1
  if (TIME_INFINITE != timeout) {
 80024a2:	3301      	adds	r3, #1
 80024a4:	d016      	beq.n	80024d4 <chSchGoSleepTimeoutS+0x44>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80024a6:	4605      	mov	r5, r0
 80024a8:	69a3      	ldr	r3, [r4, #24]
 80024aa:	4a0e      	ldr	r2, [pc, #56]	; (80024e4 <chSchGoSleepTimeoutS+0x54>)
 80024ac:	a801      	add	r0, sp, #4
 80024ae:	f7ff fd3f 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80024b2:	4628      	mov	r0, r5
 80024b4:	f7ff ff14 	bl	80022e0 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80024b8:	f7fe fa42 	bl	8000940 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 80024bc:	9b04      	ldr	r3, [sp, #16]
 80024be:	b113      	cbz	r3, 80024c6 <chSchGoSleepTimeoutS+0x36>
      chVTDoResetI(&vt);
 80024c0:	a801      	add	r0, sp, #4
 80024c2:	f7ff fdcd 	bl	8002060 <chVTDoResetI>
  return currp->u.rdymsg;
 80024c6:	69a3      	ldr	r3, [r4, #24]
}
 80024c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024ca:	b007      	add	sp, #28
 80024cc:	bd30      	pop	{r4, r5, pc}
    chSysHalt("SV#11");
 80024ce:	4806      	ldr	r0, [pc, #24]	; (80024e8 <chSchGoSleepTimeoutS+0x58>)
 80024d0:	f7fe f94e 	bl	8000770 <chSysHalt>
    chSchGoSleepS(newstate);
 80024d4:	f7ff ff04 	bl	80022e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 80024d8:	69a3      	ldr	r3, [r4, #24]
}
 80024da:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80024dc:	b007      	add	sp, #28
 80024de:	bd30      	pop	{r4, r5, pc}
 80024e0:	20000d70 	.word	0x20000d70
 80024e4:	08002161 	.word	0x08002161
 80024e8:	0800f204 	.word	0x0800f204
 80024ec:	00000000 	.word	0x00000000

080024f0 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 80024f0:	b570      	push	{r4, r5, r6, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80024f2:	4e18      	ldr	r6, [pc, #96]	; (8002554 <ibqGetFullBufferTimeoutS+0x64>)
 80024f4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80024f6:	b923      	cbnz	r3, 8002502 <ibqGetFullBufferTimeoutS+0x12>
 80024f8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80024fa:	4604      	mov	r4, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	460d      	mov	r5, r1
 8002500:	dc11      	bgt.n	8002526 <ibqGetFullBufferTimeoutS+0x36>
    chSysHalt("SV#11");
 8002502:	4815      	ldr	r0, [pc, #84]	; (8002558 <ibqGetFullBufferTimeoutS+0x68>)
 8002504:	f7fe f934 	bl	8000770 <chSysHalt>
    if (ibqp->suspended) {
 8002508:	7a23      	ldrb	r3, [r4, #8]
 800250a:	b9cb      	cbnz	r3, 8002540 <ibqGetFullBufferTimeoutS+0x50>
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 800250c:	b1dd      	cbz	r5, 8002546 <ibqGetFullBufferTimeoutS+0x56>
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 800250e:	69b3      	ldr	r3, [r6, #24]
  p->prev       = qp->prev;
 8002510:	6862      	ldr	r2, [r4, #4]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8002512:	4629      	mov	r1, r5
 8002514:	e9c3 4200 	strd	r4, r2, [r3]
 8002518:	2004      	movs	r0, #4
  p->prev->next = p;
 800251a:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 800251c:	6063      	str	r3, [r4, #4]
 800251e:	f7ff ffb7 	bl	8002490 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 8002522:	2800      	cmp	r0, #0
 8002524:	db0b      	blt.n	800253e <ibqGetFullBufferTimeoutS+0x4e>
  while (ibqIsEmptyI(ibqp)) {
 8002526:	68e3      	ldr	r3, [r4, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d0ed      	beq.n	8002508 <ibqGetFullBufferTimeoutS+0x18>
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 800252c:	68e3      	ldr	r3, [r4, #12]
 800252e:	b16b      	cbz	r3, 800254c <ibqGetFullBufferTimeoutS+0x5c>
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002530:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002532:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002534:	681a      	ldr	r2, [r3, #0]
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 8002536:	3304      	adds	r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 8002538:	441a      	add	r2, r3
 800253a:	e9c4 320a 	strd	r3, r2, [r4, #40]	; 0x28
}
 800253e:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
 8002540:	f06f 0001 	mvn.w	r0, #1
}
 8002544:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 8002546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800254a:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <ibqGetFullBufferTimeoutS+0x6c>)
 800254e:	f7fe f90f 	bl	8000770 <chSysHalt>
 8002552:	bf00      	nop
 8002554:	20000d70 	.word	0x20000d70
 8002558:	0800f204 	.word	0x0800f204
 800255c:	08010fec 	.word	0x08010fec

08002560 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 8002560:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  osalDbgCheck(n > 0U);
 8002564:	2a00      	cmp	r2, #0
 8002566:	d06f      	beq.n	8002648 <ibqReadTimeout+0xe8>
 8002568:	4604      	mov	r4, r0
 800256a:	460d      	mov	r5, r1
 800256c:	4616      	mov	r6, r2
 800256e:	4698      	mov	r8, r3
 8002570:	f04f 0920 	mov.w	r9, #32
 8002574:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 8002578:	f7fe f952 	bl	8000820 <_dbg_check_lock>
  size_t r = 0;
 800257c:	2700      	movs	r7, #0
 800257e:	f8df a110 	ldr.w	sl, [pc, #272]	; 8002690 <ibqReadTimeout+0x130>
    if (ibqp->ptr == NULL) {
 8002582:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002584:	2900      	cmp	r1, #0
 8002586:	d069      	beq.n	800265c <ibqReadTimeout+0xfc>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002588:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if (size > (n - r)) {
 800258a:	eba6 0b07 	sub.w	fp, r6, r7
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 800258e:	1a52      	subs	r2, r2, r1
    if (size > (n - r)) {
 8002590:	4593      	cmp	fp, r2
 8002592:	bf28      	it	cs
 8002594:	4693      	movcs	fp, r2
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002596:	f1bb 0f40 	cmp.w	fp, #64	; 0x40
 800259a:	d82d      	bhi.n	80025f8 <ibqReadTimeout+0x98>
      memcpy(bp, ibqp->ptr, size);
 800259c:	4628      	mov	r0, r5
 800259e:	465a      	mov	r2, fp
 80025a0:	f00c fdce 	bl	800f140 <memcpy>
      ibqp->ptr += size;
 80025a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 80025a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ibqp->ptr += size;
 80025a8:	445a      	add	r2, fp
    if (ibqp->ptr >= ibqp->top) {
 80025aa:	4293      	cmp	r3, r2
      r         += size;
 80025ac:	445f      	add	r7, fp
      bp        += size;
 80025ae:	445d      	add	r5, fp
      ibqp->ptr += size;
 80025b0:	62a2      	str	r2, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 80025b2:	d93f      	bls.n	8002634 <ibqReadTimeout+0xd4>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80025b4:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d142      	bne.n	8002642 <ibqReadTimeout+0xe2>
 80025bc:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 80025c0:	2a00      	cmp	r2, #0
 80025c2:	dd3e      	ble.n	8002642 <ibqReadTimeout+0xe2>
  _dbg_leave_lock();
 80025c4:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80025c8:	f8da 3000 	ldr.w	r3, [sl]
 80025cc:	4553      	cmp	r3, sl
 80025ce:	d005      	beq.n	80025dc <ibqReadTimeout+0x7c>
 80025d0:	f8da 2018 	ldr.w	r2, [sl, #24]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	6892      	ldr	r2, [r2, #8]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d33c      	bcc.n	8002656 <ibqReadTimeout+0xf6>
 80025dc:	2300      	movs	r3, #0
 80025de:	f383 8811 	msr	BASEPRI, r3
    if (r >= n) {
 80025e2:	42b7      	cmp	r7, r6
 80025e4:	d250      	bcs.n	8002688 <ibqReadTimeout+0x128>
 80025e6:	f389 8811 	msr	BASEPRI, r9
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80025ea:	e9da 230c 	ldrd	r2, r3, [sl, #48]	; 0x30
 80025ee:	4313      	orrs	r3, r2
 80025f0:	d02d      	beq.n	800264e <ibqReadTimeout+0xee>
    chSysHalt("SV#4");
 80025f2:	4828      	ldr	r0, [pc, #160]	; (8002694 <ibqReadTimeout+0x134>)
 80025f4:	f7fe f8bc 	bl	8000770 <chSysHalt>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80025f8:	462b      	mov	r3, r5
 80025fa:	f101 0b40 	add.w	fp, r1, #64	; 0x40
 80025fe:	f8d1 e000 	ldr.w	lr, [r1]
 8002602:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002606:	6888      	ldr	r0, [r1, #8]
 8002608:	68ca      	ldr	r2, [r1, #12]
 800260a:	3110      	adds	r1, #16
 800260c:	4559      	cmp	r1, fp
 800260e:	f8c3 e000 	str.w	lr, [r3]
 8002612:	f8c3 c004 	str.w	ip, [r3, #4]
 8002616:	6098      	str	r0, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	f103 0310 	add.w	r3, r3, #16
 800261e:	d1ee      	bne.n	80025fe <ibqReadTimeout+0x9e>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002620:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002622:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002624:	3240      	adds	r2, #64	; 0x40
    if (ibqp->ptr >= ibqp->top) {
 8002626:	4293      	cmp	r3, r2
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8002628:	f105 0540 	add.w	r5, r5, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 800262c:	f107 0740 	add.w	r7, r7, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002630:	62a2      	str	r2, [r4, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 8002632:	d8bf      	bhi.n	80025b4 <ibqReadTimeout+0x54>
      ibqReleaseEmptyBufferS(ibqp);
 8002634:	4620      	mov	r0, r4
 8002636:	f7fe f8c3 	bl	80007c0 <ibqReleaseEmptyBufferS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800263a:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0bc      	beq.n	80025bc <ibqReadTimeout+0x5c>
    chSysHalt("SV#5");
 8002642:	4815      	ldr	r0, [pc, #84]	; (8002698 <ibqReadTimeout+0x138>)
 8002644:	f7fe f894 	bl	8000770 <chSysHalt>
  osalDbgCheck(n > 0U);
 8002648:	4814      	ldr	r0, [pc, #80]	; (800269c <ibqReadTimeout+0x13c>)
 800264a:	f7fe f891 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 800264e:	2301      	movs	r3, #1
 8002650:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 8002654:	e795      	b.n	8002582 <ibqReadTimeout+0x22>
 8002656:	4812      	ldr	r0, [pc, #72]	; (80026a0 <ibqReadTimeout+0x140>)
 8002658:	f7fe f88a 	bl	8000770 <chSysHalt>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800265c:	4641      	mov	r1, r8
 800265e:	4620      	mov	r0, r4
 8002660:	f7ff ff46 	bl	80024f0 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8002664:	b908      	cbnz	r0, 800266a <ibqReadTimeout+0x10a>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 8002666:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002668:	e78e      	b.n	8002588 <ibqReadTimeout+0x28>
  _dbg_check_unlock();
 800266a:	f7fe f8e9 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800266e:	f8da 3000 	ldr.w	r3, [sl]
 8002672:	4553      	cmp	r3, sl
 8002674:	d005      	beq.n	8002682 <ibqReadTimeout+0x122>
 8002676:	f8da 2018 	ldr.w	r2, [sl, #24]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	6892      	ldr	r2, [r2, #8]
 800267e:	429a      	cmp	r2, r3
 8002680:	d3e9      	bcc.n	8002656 <ibqReadTimeout+0xf6>
 8002682:	2300      	movs	r3, #0
 8002684:	f383 8811 	msr	BASEPRI, r3
}
 8002688:	4638      	mov	r0, r7
 800268a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268e:	bf00      	nop
 8002690:	20000d70 	.word	0x20000d70
 8002694:	0800f20c 	.word	0x0800f20c
 8002698:	0800f214 	.word	0x0800f214
 800269c:	08010f60 	.word	0x08010f60
 80026a0:	08011040 	.word	0x08011040
	...

080026b0 <_read.lto_priv.0>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80026b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026b4:	300c      	adds	r0, #12
 80026b6:	f7ff bf53 	b.w	8002560 <ibqReadTimeout>
 80026ba:	bf00      	nop
 80026bc:	0000      	movs	r0, r0
	...

080026c0 <_readt.lto_priv.0>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 80026c0:	300c      	adds	r0, #12
 80026c2:	f7ff bf4d 	b.w	8002560 <ibqReadTimeout>
 80026c6:	bf00      	nop
	...

080026d0 <_get.lto_priv.0>:
static msg_t _get(void *ip) {
 80026d0:	b570      	push	{r4, r5, r6, lr}
 80026d2:	2320      	movs	r3, #32
 80026d4:	4604      	mov	r4, r0
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 80026d6:	f100 060c 	add.w	r6, r0, #12
 80026da:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80026de:	f7fe f89f 	bl	8000820 <_dbg_check_lock>
  if (ibqp->ptr == NULL) {
 80026e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80026e4:	b1e3      	cbz	r3, 8002720 <_get.lto_priv.0+0x50>
  msg = (msg_t)*ibqp->ptr;
 80026e6:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 80026ea:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  ibqp->ptr++;
 80026ec:	6363      	str	r3, [r4, #52]	; 0x34
  if (ibqp->ptr >= ibqp->top) {
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d212      	bcs.n	8002718 <_get.lto_priv.0+0x48>
  _dbg_check_unlock();
 80026f2:	f7fe f8a5 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80026f6:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <_get.lto_priv.0+0x64>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d004      	beq.n	8002708 <_get.lto_priv.0+0x38>
 80026fe:	6999      	ldr	r1, [r3, #24]
 8002700:	6893      	ldr	r3, [r2, #8]
 8002702:	688a      	ldr	r2, [r1, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	d304      	bcc.n	8002712 <_get.lto_priv.0+0x42>
 8002708:	2300      	movs	r3, #0
 800270a:	f383 8811 	msr	BASEPRI, r3
}
 800270e:	4628      	mov	r0, r5
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	4809      	ldr	r0, [pc, #36]	; (8002738 <_get.lto_priv.0+0x68>)
 8002714:	f7fe f82c 	bl	8000770 <chSysHalt>
    ibqReleaseEmptyBufferS(ibqp);
 8002718:	4630      	mov	r0, r6
 800271a:	f7fe f851 	bl	80007c0 <ibqReleaseEmptyBufferS>
  _dbg_check_unlock();
 800271e:	e7e8      	b.n	80026f2 <_get.lto_priv.0+0x22>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002720:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002724:	4630      	mov	r0, r6
 8002726:	f7ff fee3 	bl	80024f0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800272a:	4605      	mov	r5, r0
 800272c:	2800      	cmp	r0, #0
 800272e:	d1e0      	bne.n	80026f2 <_get.lto_priv.0+0x22>
  msg = (msg_t)*ibqp->ptr;
 8002730:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002732:	e7d8      	b.n	80026e6 <_get.lto_priv.0+0x16>
 8002734:	20000d70 	.word	0x20000d70
 8002738:	08011040 	.word	0x08011040
 800273c:	00000000 	.word	0x00000000

08002740 <_gett.lto_priv.0>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 8002740:	b570      	push	{r4, r5, r6, lr}
 8002742:	2320      	movs	r3, #32
 8002744:	4604      	mov	r4, r0
 8002746:	460d      	mov	r5, r1
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8002748:	f100 060c 	add.w	r6, r0, #12
 800274c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002750:	f7fe f866 	bl	8000820 <_dbg_check_lock>
  if (ibqp->ptr == NULL) {
 8002754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002756:	b1e3      	cbz	r3, 8002792 <_gett.lto_priv.0+0x52>
  msg = (msg_t)*ibqp->ptr;
 8002758:	f813 5b01 	ldrb.w	r5, [r3], #1
  if (ibqp->ptr >= ibqp->top) {
 800275c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  ibqp->ptr++;
 800275e:	6363      	str	r3, [r4, #52]	; 0x34
  if (ibqp->ptr >= ibqp->top) {
 8002760:	4293      	cmp	r3, r2
 8002762:	d212      	bcs.n	800278a <_gett.lto_priv.0+0x4a>
  _dbg_check_unlock();
 8002764:	f7fe f86c 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <_gett.lto_priv.0+0x64>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d004      	beq.n	800277a <_gett.lto_priv.0+0x3a>
 8002770:	6999      	ldr	r1, [r3, #24]
 8002772:	6893      	ldr	r3, [r2, #8]
 8002774:	688a      	ldr	r2, [r1, #8]
 8002776:	429a      	cmp	r2, r3
 8002778:	d304      	bcc.n	8002784 <_gett.lto_priv.0+0x44>
 800277a:	2300      	movs	r3, #0
 800277c:	f383 8811 	msr	BASEPRI, r3
}
 8002780:	4628      	mov	r0, r5
 8002782:	bd70      	pop	{r4, r5, r6, pc}
 8002784:	4808      	ldr	r0, [pc, #32]	; (80027a8 <_gett.lto_priv.0+0x68>)
 8002786:	f7fd fff3 	bl	8000770 <chSysHalt>
    ibqReleaseEmptyBufferS(ibqp);
 800278a:	4630      	mov	r0, r6
 800278c:	f7fe f818 	bl	80007c0 <ibqReleaseEmptyBufferS>
  _dbg_check_unlock();
 8002790:	e7e8      	b.n	8002764 <_gett.lto_priv.0+0x24>
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8002792:	4629      	mov	r1, r5
 8002794:	4630      	mov	r0, r6
 8002796:	f7ff feab 	bl	80024f0 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800279a:	4605      	mov	r5, r0
 800279c:	2800      	cmp	r0, #0
 800279e:	d1e1      	bne.n	8002764 <_gett.lto_priv.0+0x24>
  msg = (msg_t)*ibqp->ptr;
 80027a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80027a2:	e7d9      	b.n	8002758 <_gett.lto_priv.0+0x18>
 80027a4:	20000d70 	.word	0x20000d70
 80027a8:	08011040 	.word	0x08011040
 80027ac:	00000000 	.word	0x00000000

080027b0 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 80027b0:	b570      	push	{r4, r5, r6, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80027b2:	4e18      	ldr	r6, [pc, #96]	; (8002814 <obqGetEmptyBufferTimeoutS+0x64>)
 80027b4:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80027b6:	b923      	cbnz	r3, 80027c2 <obqGetEmptyBufferTimeoutS+0x12>
 80027b8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80027ba:	4604      	mov	r4, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	460d      	mov	r5, r1
 80027c0:	dc11      	bgt.n	80027e6 <obqGetEmptyBufferTimeoutS+0x36>
    chSysHalt("SV#11");
 80027c2:	4815      	ldr	r0, [pc, #84]	; (8002818 <obqGetEmptyBufferTimeoutS+0x68>)
 80027c4:	f7fd ffd4 	bl	8000770 <chSysHalt>
    if (obqp->suspended) {
 80027c8:	7a23      	ldrb	r3, [r4, #8]
 80027ca:	b9cb      	cbnz	r3, 8002800 <obqGetEmptyBufferTimeoutS+0x50>
  if (TIME_IMMEDIATE == timeout) {
 80027cc:	b1dd      	cbz	r5, 8002806 <obqGetEmptyBufferTimeoutS+0x56>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 80027ce:	69b3      	ldr	r3, [r6, #24]
  p->prev       = qp->prev;
 80027d0:	6862      	ldr	r2, [r4, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80027d2:	4629      	mov	r1, r5
 80027d4:	e9c3 4200 	strd	r4, r2, [r3]
 80027d8:	2004      	movs	r0, #4
  p->prev->next = p;
 80027da:	6013      	str	r3, [r2, #0]
  qp->prev      = p;
 80027dc:	6063      	str	r3, [r4, #4]
 80027de:	f7ff fe57 	bl	8002490 <chSchGoSleepTimeoutS>
    if (msg < MSG_OK) {
 80027e2:	2800      	cmp	r0, #0
 80027e4:	db0b      	blt.n	80027fe <obqGetEmptyBufferTimeoutS+0x4e>
  while (obqIsFullI(obqp)) {
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0ed      	beq.n	80027c8 <obqGetEmptyBufferTimeoutS+0x18>
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 80027ec:	68e3      	ldr	r3, [r4, #12]
 80027ee:	b16b      	cbz	r3, 800280c <obqGetEmptyBufferTimeoutS+0x5c>
  obqp->top = obqp->bwrptr + obqp->bsize;
 80027f0:	2000      	movs	r0, #0
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80027f2:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 80027f4:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80027f6:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80027f8:	440b      	add	r3, r1
 80027fa:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
}
 80027fe:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
 8002800:	f06f 0001 	mvn.w	r0, #1
}
 8002804:	bd70      	pop	{r4, r5, r6, pc}
    return MSG_TIMEOUT;
 8002806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800280a:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(!obqIsFullI(obqp), "still full");
 800280c:	4803      	ldr	r0, [pc, #12]	; (800281c <obqGetEmptyBufferTimeoutS+0x6c>)
 800280e:	f7fd ffaf 	bl	8000770 <chSysHalt>
 8002812:	bf00      	nop
 8002814:	20000d70 	.word	0x20000d70
 8002818:	0800f204 	.word	0x0800f204
 800281c:	08010e18 	.word	0x08010e18

08002820 <obqWriteTimeout>:
 * @retval 0            if a timeout occurred.
 *
 * @api
 */
size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
                       size_t n, sysinterval_t timeout) {
 8002820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002824:	b083      	sub	sp, #12
  size_t w = 0;

  osalDbgCheck(n > 0U);
 8002826:	2a00      	cmp	r2, #0
 8002828:	d06f      	beq.n	800290a <obqWriteTimeout+0xea>
 800282a:	4604      	mov	r4, r0
 800282c:	468b      	mov	fp, r1
 800282e:	4615      	mov	r5, r2
 8002830:	461f      	mov	r7, r3
 8002832:	f04f 0820 	mov.w	r8, #32
 8002836:	f388 8811 	msr	BASEPRI, r8
  size_t w = 0;
 800283a:	2600      	movs	r6, #0
  _dbg_check_lock();
 800283c:	f7fd fff0 	bl	8000820 <_dbg_check_lock>
 8002840:	46b1      	mov	r9, r6
 8002842:	f8df a110 	ldr.w	sl, [pc, #272]	; 8002954 <obqWriteTimeout+0x134>

  while (true) {
    size_t size;

    /* This condition indicates that a new buffer must be acquired.*/
    if (obqp->ptr == NULL) {
 8002846:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002848:	2800      	cmp	r0, #0
 800284a:	d068      	beq.n	800291e <obqWriteTimeout+0xfe>
        return w;
      }
    }

    /* Size of the space available in the current buffer.*/
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 800284c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    if (size > (n - w)) {
 800284e:	1bab      	subs	r3, r5, r6
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8002850:	1a12      	subs	r2, r2, r0
    if (size > (n - w)) {
 8002852:	429a      	cmp	r2, r3
 8002854:	bf28      	it	cs
 8002856:	461a      	movcs	r2, r3
      size = n - w;
    }

    /* Smaller chunks in order to not make the critical zone too long,
       this impacts throughput however.*/
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 8002858:	2a40      	cmp	r2, #64	; 0x40
 800285a:	d82d      	bhi.n	80028b8 <obqWriteTimeout+0x98>
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
    }
    else {
      memcpy(obqp->ptr, bp, size);
 800285c:	4659      	mov	r1, fp
      bp        += size;
      obqp->ptr += size;
      w         += size;
 800285e:	4416      	add	r6, r2
      bp        += size;
 8002860:	4493      	add	fp, r2
      memcpy(obqp->ptr, bp, size);
 8002862:	9201      	str	r2, [sp, #4]
 8002864:	f00c fc6c 	bl	800f140 <memcpy>
      obqp->ptr += size;
 8002868:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800286a:	9a01      	ldr	r2, [sp, #4]
 800286c:	441a      	add	r2, r3
    }

    /* Has the current data buffer been finished? if so then release it.*/
    if (obqp->ptr >= obqp->top) {
 800286e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      obqp->ptr += size;
 8002870:	62a2      	str	r2, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 8002872:	4293      	cmp	r3, r2
 8002874:	d93d      	bls.n	80028f2 <obqWriteTimeout+0xd2>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002876:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800287a:	2b00      	cmp	r3, #0
 800287c:	d142      	bne.n	8002904 <obqWriteTimeout+0xe4>
 800287e:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 8002882:	2a00      	cmp	r2, #0
 8002884:	dd3e      	ble.n	8002904 <obqWriteTimeout+0xe4>
  _dbg_leave_lock();
 8002886:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800288a:	f8da 3000 	ldr.w	r3, [sl]
 800288e:	4553      	cmp	r3, sl
 8002890:	d005      	beq.n	800289e <obqWriteTimeout+0x7e>
 8002892:	f8da 2018 	ldr.w	r2, [sl, #24]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	6892      	ldr	r2, [r2, #8]
 800289a:	429a      	cmp	r2, r3
 800289c:	d33c      	bcc.n	8002918 <obqWriteTimeout+0xf8>
 800289e:	f389 8811 	msr	BASEPRI, r9
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
    }

    /* Giving a preemption chance.*/
    osalSysUnlock();
    if (w >= n) {
 80028a2:	42ae      	cmp	r6, r5
 80028a4:	d251      	bcs.n	800294a <obqWriteTimeout+0x12a>
 80028a6:	f388 8811 	msr	BASEPRI, r8
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80028aa:	e9da 230c 	ldrd	r2, r3, [sl, #48]	; 0x30
 80028ae:	4313      	orrs	r3, r2
 80028b0:	d02e      	beq.n	8002910 <obqWriteTimeout+0xf0>
    chSysHalt("SV#4");
 80028b2:	4829      	ldr	r0, [pc, #164]	; (8002958 <obqWriteTimeout+0x138>)
 80028b4:	f7fd ff5c 	bl	8000770 <chSysHalt>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 80028b8:	f10b 0e40 	add.w	lr, fp, #64	; 0x40
 80028bc:	f8db c000 	ldr.w	ip, [fp]
 80028c0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80028c4:	f8db 2008 	ldr.w	r2, [fp, #8]
 80028c8:	f8db 300c 	ldr.w	r3, [fp, #12]
 80028cc:	f10b 0b10 	add.w	fp, fp, #16
 80028d0:	45f3      	cmp	fp, lr
 80028d2:	f8c0 c000 	str.w	ip, [r0]
 80028d6:	6041      	str	r1, [r0, #4]
 80028d8:	6082      	str	r2, [r0, #8]
 80028da:	60c3      	str	r3, [r0, #12]
 80028dc:	f100 0010 	add.w	r0, r0, #16
 80028e0:	d1ec      	bne.n	80028bc <obqWriteTimeout+0x9c>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80028e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80028e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80028e6:	3240      	adds	r2, #64	; 0x40
    if (obqp->ptr >= obqp->top) {
 80028e8:	4293      	cmp	r3, r2
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 80028ea:	f106 0640 	add.w	r6, r6, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 80028ee:	62a2      	str	r2, [r4, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 80028f0:	d8c1      	bhi.n	8002876 <obqWriteTimeout+0x56>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80028f2:	69e1      	ldr	r1, [r4, #28]
 80028f4:	4620      	mov	r0, r4
 80028f6:	3904      	subs	r1, #4
 80028f8:	f7fd ffb2 	bl	8000860 <obqPostFullBufferS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80028fc:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8002900:	2b00      	cmp	r3, #0
 8002902:	d0bc      	beq.n	800287e <obqWriteTimeout+0x5e>
    chSysHalt("SV#5");
 8002904:	4815      	ldr	r0, [pc, #84]	; (800295c <obqWriteTimeout+0x13c>)
 8002906:	f7fd ff33 	bl	8000770 <chSysHalt>
  osalDbgCheck(n > 0U);
 800290a:	4815      	ldr	r0, [pc, #84]	; (8002960 <obqWriteTimeout+0x140>)
 800290c:	f7fd ff30 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 8002910:	2301      	movs	r3, #1
 8002912:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 8002916:	e796      	b.n	8002846 <obqWriteTimeout+0x26>
 8002918:	4812      	ldr	r0, [pc, #72]	; (8002964 <obqWriteTimeout+0x144>)
 800291a:	f7fd ff29 	bl	8000770 <chSysHalt>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800291e:	4639      	mov	r1, r7
 8002920:	4620      	mov	r0, r4
 8002922:	f7ff ff45 	bl	80027b0 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8002926:	b908      	cbnz	r0, 800292c <obqWriteTimeout+0x10c>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 8002928:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800292a:	e78f      	b.n	800284c <obqWriteTimeout+0x2c>
  _dbg_check_unlock();
 800292c:	f7fd ff88 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002930:	f8da 3000 	ldr.w	r3, [sl]
 8002934:	4553      	cmp	r3, sl
 8002936:	d005      	beq.n	8002944 <obqWriteTimeout+0x124>
 8002938:	f8da 2018 	ldr.w	r2, [sl, #24]
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	429a      	cmp	r2, r3
 8002942:	d3e9      	bcc.n	8002918 <obqWriteTimeout+0xf8>
 8002944:	2300      	movs	r3, #0
 8002946:	f383 8811 	msr	BASEPRI, r3
      return w;
    }
    osalSysLock();
  }
}
 800294a:	4630      	mov	r0, r6
 800294c:	b003      	add	sp, #12
 800294e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002952:	bf00      	nop
 8002954:	20000d70 	.word	0x20000d70
 8002958:	0800f20c 	.word	0x0800f20c
 800295c:	0800f214 	.word	0x0800f214
 8002960:	08010b44 	.word	0x08010b44
 8002964:	08011040 	.word	0x08011040
	...

08002970 <_write.lto_priv.0>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 8002970:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002974:	3044      	adds	r0, #68	; 0x44
 8002976:	f7ff bf53 	b.w	8002820 <obqWriteTimeout>
 800297a:	bf00      	nop
 800297c:	0000      	movs	r0, r0
	...

08002980 <_writet.lto_priv.0>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8002980:	3044      	adds	r0, #68	; 0x44
 8002982:	f7ff bf4d 	b.w	8002820 <obqWriteTimeout>
 8002986:	bf00      	nop
	...

08002990 <_putt.lto_priv.0>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 8002990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002992:	2320      	movs	r3, #32
 8002994:	4604      	mov	r4, r0
 8002996:	460d      	mov	r5, r1
 8002998:	4616      	mov	r6, r2
 800299a:	b083      	sub	sp, #12
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 800299c:	f100 0744 	add.w	r7, r0, #68	; 0x44
 80029a0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80029a4:	f7fd ff3c 	bl	8000820 <_dbg_check_lock>
  if (obqp->ptr == NULL) {
 80029a8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80029aa:	b1fb      	cbz	r3, 80029ec <_putt.lto_priv.0+0x5c>
  *obqp->ptr = b;
 80029ac:	701d      	strb	r5, [r3, #0]
  if (obqp->ptr >= obqp->top) {
 80029ae:	e9d4 321b 	ldrd	r3, r2, [r4, #108]	; 0x6c
  obqp->ptr++;
 80029b2:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 80029b4:	4293      	cmp	r3, r2
  obqp->ptr++;
 80029b6:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (obqp->ptr >= obqp->top) {
 80029b8:	d212      	bcs.n	80029e0 <_putt.lto_priv.0+0x50>
  _dbg_check_unlock();
 80029ba:	f7fd ff41 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80029be:	4b17      	ldr	r3, [pc, #92]	; (8002a1c <_putt.lto_priv.0+0x8c>)
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d004      	beq.n	80029d0 <_putt.lto_priv.0+0x40>
 80029c6:	6999      	ldr	r1, [r3, #24]
 80029c8:	6893      	ldr	r3, [r2, #8]
 80029ca:	688a      	ldr	r2, [r1, #8]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d304      	bcc.n	80029da <_putt.lto_priv.0+0x4a>
 80029d0:	2000      	movs	r0, #0
 80029d2:	f380 8811 	msr	BASEPRI, r0
}
 80029d6:	b003      	add	sp, #12
 80029d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029da:	4811      	ldr	r0, [pc, #68]	; (8002a20 <_putt.lto_priv.0+0x90>)
 80029dc:	f7fd fec8 	bl	8000770 <chSysHalt>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 80029e0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80029e2:	4638      	mov	r0, r7
 80029e4:	3904      	subs	r1, #4
 80029e6:	f7fd ff3b 	bl	8000860 <obqPostFullBufferS>
 80029ea:	e7e6      	b.n	80029ba <_putt.lto_priv.0+0x2a>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 80029ec:	4631      	mov	r1, r6
 80029ee:	4638      	mov	r0, r7
 80029f0:	f7ff fede 	bl	80027b0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 80029f4:	b908      	cbnz	r0, 80029fa <_putt.lto_priv.0+0x6a>
  *obqp->ptr = b;
 80029f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80029f8:	e7d8      	b.n	80029ac <_putt.lto_priv.0+0x1c>
 80029fa:	9001      	str	r0, [sp, #4]
  _dbg_check_unlock();
 80029fc:	f7fd ff20 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002a00:	4b06      	ldr	r3, [pc, #24]	; (8002a1c <_putt.lto_priv.0+0x8c>)
 8002a02:	9801      	ldr	r0, [sp, #4]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d004      	beq.n	8002a14 <_putt.lto_priv.0+0x84>
 8002a0a:	6999      	ldr	r1, [r3, #24]
 8002a0c:	6893      	ldr	r3, [r2, #8]
 8002a0e:	688a      	ldr	r2, [r1, #8]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d3e2      	bcc.n	80029da <_putt.lto_priv.0+0x4a>
 8002a14:	2300      	movs	r3, #0
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	e7dc      	b.n	80029d6 <_putt.lto_priv.0+0x46>
 8002a1c:	20000d70 	.word	0x20000d70
 8002a20:	08011040 	.word	0x08011040
	...

08002a30 <_put.lto_priv.0>:
static msg_t _put(void *ip, uint8_t b) {
 8002a30:	b570      	push	{r4, r5, r6, lr}
 8002a32:	2320      	movs	r3, #32
 8002a34:	4604      	mov	r4, r0
 8002a36:	460d      	mov	r5, r1
 8002a38:	b082      	sub	sp, #8
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8002a3a:	f100 0644 	add.w	r6, r0, #68	; 0x44
 8002a3e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002a42:	f7fd feed 	bl	8000820 <_dbg_check_lock>
  if (obqp->ptr == NULL) {
 8002a46:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002a48:	b1fb      	cbz	r3, 8002a8a <_put.lto_priv.0+0x5a>
  *obqp->ptr = b;
 8002a4a:	701d      	strb	r5, [r3, #0]
  if (obqp->ptr >= obqp->top) {
 8002a4c:	e9d4 321b 	ldrd	r3, r2, [r4, #108]	; 0x6c
  obqp->ptr++;
 8002a50:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8002a52:	4293      	cmp	r3, r2
  obqp->ptr++;
 8002a54:	66e3      	str	r3, [r4, #108]	; 0x6c
  if (obqp->ptr >= obqp->top) {
 8002a56:	d212      	bcs.n	8002a7e <_put.lto_priv.0+0x4e>
  _dbg_check_unlock();
 8002a58:	f7fd fef2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002a5c:	4b17      	ldr	r3, [pc, #92]	; (8002abc <_put.lto_priv.0+0x8c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d004      	beq.n	8002a6e <_put.lto_priv.0+0x3e>
 8002a64:	6999      	ldr	r1, [r3, #24]
 8002a66:	6893      	ldr	r3, [r2, #8]
 8002a68:	688a      	ldr	r2, [r1, #8]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d304      	bcc.n	8002a78 <_put.lto_priv.0+0x48>
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f380 8811 	msr	BASEPRI, r0
}
 8002a74:	b002      	add	sp, #8
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <_put.lto_priv.0+0x90>)
 8002a7a:	f7fd fe79 	bl	8000770 <chSysHalt>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002a7e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8002a80:	4630      	mov	r0, r6
 8002a82:	3904      	subs	r1, #4
 8002a84:	f7fd feec 	bl	8000860 <obqPostFullBufferS>
 8002a88:	e7e6      	b.n	8002a58 <_put.lto_priv.0+0x28>
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8002a8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a8e:	4630      	mov	r0, r6
 8002a90:	f7ff fe8e 	bl	80027b0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8002a94:	b908      	cbnz	r0, 8002a9a <_put.lto_priv.0+0x6a>
  *obqp->ptr = b;
 8002a96:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002a98:	e7d7      	b.n	8002a4a <_put.lto_priv.0+0x1a>
 8002a9a:	9001      	str	r0, [sp, #4]
  _dbg_check_unlock();
 8002a9c:	f7fd fed0 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <_put.lto_priv.0+0x8c>)
 8002aa2:	9801      	ldr	r0, [sp, #4]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d004      	beq.n	8002ab4 <_put.lto_priv.0+0x84>
 8002aaa:	6999      	ldr	r1, [r3, #24]
 8002aac:	6893      	ldr	r3, [r2, #8]
 8002aae:	688a      	ldr	r2, [r1, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d3e1      	bcc.n	8002a78 <_put.lto_priv.0+0x48>
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	f383 8811 	msr	BASEPRI, r3
 8002aba:	e7db      	b.n	8002a74 <_put.lto_priv.0+0x44>
 8002abc:	20000d70 	.word	0x20000d70
 8002ac0:	08011040 	.word	0x08011040
	...

08002ad0 <chSemWaitTimeoutS>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002ad0:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <chSemWaitTimeoutS+0x60>)
 * @retval MSG_TIMEOUT  if the semaphore has not been signaled or reset within
 *                      the specified timeout.
 *
 * @sclass
 */
msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout) {
 8002ad2:	b538      	push	{r3, r4, r5, lr}
 8002ad4:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002ad6:	b984      	cbnz	r4, 8002afa <chSemWaitTimeoutS+0x2a>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	6b50      	ldr	r0, [r2, #52]	; 0x34
 8002adc:	2800      	cmp	r0, #0
 8002ade:	dd0c      	ble.n	8002afa <chSemWaitTimeoutS+0x2a>

  chDbgCheckClassS();
  chDbgCheck(sp != NULL);
 8002ae0:	b173      	cbz	r3, 8002b00 <chSemWaitTimeoutS+0x30>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8002ae2:	6898      	ldr	r0, [r3, #8]
  return (bool)(qp->next == qp);
 8002ae4:	681d      	ldr	r5, [r3, #0]
 8002ae6:	2800      	cmp	r0, #0
 8002ae8:	db0d      	blt.n	8002b06 <chSemWaitTimeoutS+0x36>
 8002aea:	42ab      	cmp	r3, r5
 8002aec:	d108      	bne.n	8002b00 <chSemWaitTimeoutS+0x30>
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (--sp->cnt < (cnt_t)0) {
 8002aee:	1e45      	subs	r5, r0, #1
 8002af0:	609d      	str	r5, [r3, #8]
 8002af2:	3501      	adds	r5, #1
 8002af4:	d00b      	beq.n	8002b0e <chSemWaitTimeoutS+0x3e>

    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
  }

  return MSG_OK;
}
 8002af6:	4620      	mov	r0, r4
 8002af8:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#11");
 8002afa:	480e      	ldr	r0, [pc, #56]	; (8002b34 <chSemWaitTimeoutS+0x64>)
 8002afc:	f7fd fe38 	bl	8000770 <chSysHalt>
  chDbgCheck(sp != NULL);
 8002b00:	480d      	ldr	r0, [pc, #52]	; (8002b38 <chSemWaitTimeoutS+0x68>)
 8002b02:	f7fd fe35 	bl	8000770 <chSysHalt>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8002b06:	42ab      	cmp	r3, r5
 8002b08:	d0fa      	beq.n	8002b00 <chSemWaitTimeoutS+0x30>
  if (--sp->cnt < (cnt_t)0) {
 8002b0a:	1e44      	subs	r4, r0, #1
 8002b0c:	609c      	str	r4, [r3, #8]
    if (TIME_IMMEDIATE == timeout) {
 8002b0e:	b159      	cbz	r1, 8002b28 <chSemWaitTimeoutS+0x58>
  p->prev       = qp->prev;
 8002b10:	6858      	ldr	r0, [r3, #4]
    currp->u.wtsemp = sp;
 8002b12:	6992      	ldr	r2, [r2, #24]
 8002b14:	e9c2 3000 	strd	r3, r0, [r2]
 8002b18:	6253      	str	r3, [r2, #36]	; 0x24
  p->prev->next = p;
 8002b1a:	6002      	str	r2, [r0, #0]
  qp->prev      = p;
 8002b1c:	605a      	str	r2, [r3, #4]
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002b1e:	2005      	movs	r0, #5
}
 8002b20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return chSchGoSleepTimeoutS(CH_STATE_WTSEM, timeout);
 8002b24:	f7ff bcb4 	b.w	8002490 <chSchGoSleepTimeoutS>
      return MSG_TIMEOUT;
 8002b28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
      sp->cnt++;
 8002b2c:	6098      	str	r0, [r3, #8]
      return MSG_TIMEOUT;
 8002b2e:	e7e2      	b.n	8002af6 <chSemWaitTimeoutS+0x26>
 8002b30:	20000d70 	.word	0x20000d70
 8002b34:	0800f204 	.word	0x0800f204
 8002b38:	08010f34 	.word	0x08010f34
 8002b3c:	00000000 	.word	0x00000000

08002b40 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8002b40:	b570      	push	{r4, r5, r6, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002b42:	4d22      	ldr	r5, [pc, #136]	; (8002bcc <chSchWakeupS+0x8c>)
 8002b44:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002b46:	bb2b      	cbnz	r3, 8002b94 <chSchWakeupS+0x54>
 8002b48:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	dd22      	ble.n	8002b94 <chSchWakeupS+0x54>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002b4e:	682b      	ldr	r3, [r5, #0]
 8002b50:	4604      	mov	r4, r0
  thread_t *otp = currp;
 8002b52:	69a8      	ldr	r0, [r5, #24]
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002b54:	42ab      	cmp	r3, r5
 8002b56:	6882      	ldr	r2, [r0, #8]
 8002b58:	d002      	beq.n	8002b60 <chSchWakeupS+0x20>
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d821      	bhi.n	8002ba4 <chSchWakeupS+0x64>
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8002b60:	68a3      	ldr	r3, [r4, #8]
  ntp->u.rdymsg = msg;
 8002b62:	6261      	str	r1, [r4, #36]	; 0x24
  if (ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio) {
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d918      	bls.n	8002b9a <chSchWakeupS+0x5a>
    otp = chSchReadyAheadI(otp);
 8002b68:	f7fe fe4a 	bl	8001800 <chSchReadyAheadI>
    ntp->state = CH_STATE_CURRENT;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f884 3020 	strb.w	r3, [r4, #32]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8002b72:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    otp = chSchReadyAheadI(otp);
 8002b74:	4606      	mov	r6, r0
 8002b76:	07db      	lsls	r3, r3, #31
    currp = ntp;
 8002b78:	61ac      	str	r4, [r5, #24]
 8002b7a:	d519      	bpl.n	8002bb0 <chSchWakeupS+0x70>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002b7c:	f3ef 8309 	mrs	r3, PSP
    chSysSwitch(ntp, otp);
 8002b80:	69f2      	ldr	r2, [r6, #28]
 8002b82:	3b24      	subs	r3, #36	; 0x24
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d810      	bhi.n	8002baa <chSchWakeupS+0x6a>
 8002b88:	4631      	mov	r1, r6
 8002b8a:	4620      	mov	r0, r4
}
 8002b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    chSysSwitch(ntp, otp);
 8002b90:	f7fd bb56 	b.w	8000240 <_port_switch>
    chSysHalt("SV#11");
 8002b94:	480e      	ldr	r0, [pc, #56]	; (8002bd0 <chSchWakeupS+0x90>)
 8002b96:	f7fd fdeb 	bl	8000770 <chSysHalt>
    (void) chSchReadyI(ntp);
 8002b9a:	4620      	mov	r0, r4
}
 8002b9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void) chSchReadyI(ntp);
 8002ba0:	f7ff bab6 	b.w	8002110 <chSchReadyI>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002ba4:	480b      	ldr	r0, [pc, #44]	; (8002bd4 <chSchWakeupS+0x94>)
 8002ba6:	f7fd fde3 	bl	8000770 <chSysHalt>
    chSysSwitch(ntp, otp);
 8002baa:	480b      	ldr	r0, [pc, #44]	; (8002bd8 <chSchWakeupS+0x98>)
 8002bac:	f7fd fde0 	bl	8000770 <chSysHalt>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002bb0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8002bb4:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002bb6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	f043 0301 	orr.w	r3, r3, #1
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8002bbe:	e9c2 4102 	strd	r4, r1, [r2, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002bc2:	7013      	strb	r3, [r2, #0]
    trace_next();
 8002bc4:	f7fd fbb4 	bl	8000330 <trace_next>
 8002bc8:	e7d8      	b.n	8002b7c <chSchWakeupS+0x3c>
 8002bca:	bf00      	nop
 8002bcc:	20000d70 	.word	0x20000d70
 8002bd0:	0800f204 	.word	0x0800f204
 8002bd4:	08010c44 	.word	0x08010c44
 8002bd8:	0800f270 	.word	0x0800f270
 8002bdc:	00000000 	.word	0x00000000

08002be0 <chSchDoReschedule>:
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
  currp->state = CH_STATE_CURRENT;
 8002be0:	2101      	movs	r1, #1
void chSchDoRescheduleAhead(void) {
 8002be2:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8002be4:	4c18      	ldr	r4, [pc, #96]	; (8002c48 <chSchDoReschedule+0x68>)
  ch_priority_queue_t *p = pqp->next;
 8002be6:	6823      	ldr	r3, [r4, #0]
 8002be8:	69a0      	ldr	r0, [r4, #24]
  pqp->next       = p->next;
 8002bea:	681a      	ldr	r2, [r3, #0]
  pqp->next->prev = pqp;
 8002bec:	6054      	str	r4, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 8002bee:	f883 1020 	strb.w	r1, [r3, #32]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8002bf2:	61a3      	str	r3, [r4, #24]
  pqp->next       = p->next;
 8002bf4:	6022      	str	r2, [r4, #0]
  if (otp->hdr.pqueue.prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8002bf6:	f7fe fe03 	bl	8001800 <chSchReadyAheadI>
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8002bfa:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002bfc:	4605      	mov	r5, r0
 8002bfe:	07db      	lsls	r3, r3, #31
 8002c00:	d50b      	bpl.n	8002c1a <chSchDoReschedule+0x3a>
 8002c02:	f3ef 8309 	mrs	r3, PSP

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002c06:	69ea      	ldr	r2, [r5, #28]
 8002c08:	3b24      	subs	r3, #36	; 0x24
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d818      	bhi.n	8002c40 <chSchDoReschedule+0x60>
 8002c0e:	4629      	mov	r1, r5
 8002c10:	69a0      	ldr	r0, [r4, #24]
}
 8002c12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8002c16:	f7fd bb13 	b.w	8000240 <_port_switch>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002c1a:	f895 3020 	ldrb.w	r3, [r5, #32]
 8002c1e:	69a0      	ldr	r0, [r4, #24]
 8002c20:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8002c22:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8002c24:	00db      	lsls	r3, r3, #3
 8002c26:	f043 0301 	orr.w	r3, r3, #1
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8002c2a:	6090      	str	r0, [r2, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002c2c:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8002c2e:	60d1      	str	r1, [r2, #12]
    trace_next();
 8002c30:	f7fd fb7e 	bl	8000330 <trace_next>
 8002c34:	f3ef 8309 	mrs	r3, PSP
 8002c38:	69ea      	ldr	r2, [r5, #28]
 8002c3a:	3b24      	subs	r3, #36	; 0x24
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d9e6      	bls.n	8002c0e <chSchDoReschedule+0x2e>
 8002c40:	4802      	ldr	r0, [pc, #8]	; (8002c4c <chSchDoReschedule+0x6c>)
 8002c42:	f7fd fd95 	bl	8000770 <chSysHalt>
 8002c46:	bf00      	nop
 8002c48:	20000d70 	.word	0x20000d70
 8002c4c:	0800f270 	.word	0x0800f270

08002c50 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 8002c50:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002c52:	4b0a      	ldr	r3, [pc, #40]	; (8002c7c <chSchRescheduleS+0x2c>)
 8002c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c56:	b94a      	cbnz	r2, 8002c6c <chSchRescheduleS+0x1c>
 8002c58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c5a:	2a00      	cmp	r2, #0
 8002c5c:	dd06      	ble.n	8002c6c <chSchRescheduleS+0x1c>
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
  if (chSchIsRescRequiredI()) {
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d803      	bhi.n	8002c72 <chSchRescheduleS+0x22>
}
 8002c6a:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8002c6c:	4804      	ldr	r0, [pc, #16]	; (8002c80 <chSchRescheduleS+0x30>)
 8002c6e:	f7fd fd7f 	bl	8000770 <chSysHalt>
 8002c72:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chSchDoRescheduleAhead();
 8002c76:	f7ff bfb3 	b.w	8002be0 <chSchDoReschedule>
 8002c7a:	bf00      	nop
 8002c7c:	20000d70 	.word	0x20000d70
 8002c80:	0800f204 	.word	0x0800f204
	...

08002c90 <chSysRestoreStatusX.part.0>:
 *
 * @param[in] sts       the system status to be restored.
 *
 * @xclass
 */
void chSysRestoreStatusX(syssts_t sts) {
 8002c90:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c92:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 8002c96:	f3c3 0308 	ubfx	r3, r3, #0, #9

  if (port_irq_enabled(sts)) {
    if (port_is_isr_context()) {
 8002c9a:	b15b      	cbz	r3, 8002cb4 <chSysRestoreStatusX.part.0+0x24>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002c9c:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <chSysRestoreStatusX.part.0+0x54>)
 8002c9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ca0:	2a00      	cmp	r2, #0
 8002ca2:	dd18      	ble.n	8002cd6 <chSysRestoreStatusX.part.0+0x46>
 8002ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ca6:	2a00      	cmp	r2, #0
 8002ca8:	dd15      	ble.n	8002cd6 <chSysRestoreStatusX.part.0+0x46>
  _dbg_leave_lock();
 8002caa:	2200      	movs	r2, #0
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002cae:	f382 8811 	msr	BASEPRI, r2
    else {
      chSchRescheduleS();
      chSysUnlock();
    }
  }
}
 8002cb2:	bd08      	pop	{r3, pc}
      chSchRescheduleS();
 8002cb4:	f7ff ffcc 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 8002cb8:	f7fd fdc2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002cbc:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <chSysRestoreStatusX.part.0+0x54>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d004      	beq.n	8002cce <chSysRestoreStatusX.part.0+0x3e>
 8002cc4:	6999      	ldr	r1, [r3, #24]
 8002cc6:	6893      	ldr	r3, [r2, #8]
 8002cc8:	688a      	ldr	r2, [r1, #8]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d306      	bcc.n	8002cdc <chSysRestoreStatusX.part.0+0x4c>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f383 8811 	msr	BASEPRI, r3
}
 8002cd4:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 8002cd6:	4804      	ldr	r0, [pc, #16]	; (8002ce8 <chSysRestoreStatusX.part.0+0x58>)
 8002cd8:	f7fd fd4a 	bl	8000770 <chSysHalt>
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <chSysRestoreStatusX.part.0+0x5c>)
 8002cde:	f7fd fd47 	bl	8000770 <chSysHalt>
 8002ce2:	bf00      	nop
 8002ce4:	20000d70 	.word	0x20000d70
 8002ce8:	0800f224 	.word	0x0800f224
 8002cec:	08010c2c 	.word	0x08010c2c

08002cf0 <vtcb>:
 8002cf0:	2320      	movs	r3, #32
static void vtcb(void *p) {
 8002cf2:	b510      	push	{r4, lr}
 8002cf4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002cf8:	4c1a      	ldr	r4, [pc, #104]	; (8002d64 <vtcb+0x74>)
 8002cfa:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002cfc:	2a00      	cmp	r2, #0
 8002cfe:	dd0a      	ble.n	8002d16 <vtcb+0x26>
 8002d00:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d02:	b942      	cbnz	r2, 8002d16 <vtcb+0x26>
 8002d04:	f382 8811 	msr	BASEPRI, r2
 8002d08:	f383 8811 	msr	BASEPRI, r3
 8002d0c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d0e:	2a00      	cmp	r2, #0
 8002d10:	dd01      	ble.n	8002d16 <vtcb+0x26>
 8002d12:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002d14:	b112      	cbz	r2, 8002d1c <vtcb+0x2c>
    chSysHalt("SV#6");
 8002d16:	4814      	ldr	r0, [pc, #80]	; (8002d68 <vtcb+0x78>)
 8002d18:	f7fd fd2a 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	6362      	str	r2, [r4, #52]	; 0x34
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002d20:	f3ef 8211 	mrs	r2, BASEPRI
  if (port_irq_enabled(sts)) {
 8002d24:	b99a      	cbnz	r2, 8002d4e <vtcb+0x5e>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d26:	f3ef 8205 	mrs	r2, IPSR
 8002d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
    if (port_is_isr_context()) {
 8002d2e:	b19a      	cbz	r2, 8002d58 <vtcb+0x68>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002d30:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8002d34:	f7fd fdd4 	bl	80008e0 <_dbg_check_lock_from_isr>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 8002d38:	f7ff ffaa 	bl	8002c90 <chSysRestoreStatusX.part.0>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002d3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	dd02      	ble.n	8002d48 <vtcb+0x58>
 8002d42:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	dc02      	bgt.n	8002d4e <vtcb+0x5e>
    chSysHalt("SV#7");
 8002d48:	4808      	ldr	r0, [pc, #32]	; (8002d6c <vtcb+0x7c>)
 8002d4a:	f7fd fd11 	bl	8000770 <chSysHalt>
  _dbg_leave_lock();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	6363      	str	r3, [r4, #52]	; 0x34
 8002d52:	f383 8811 	msr	BASEPRI, r3
}
 8002d56:	bd10      	pop	{r4, pc}
 8002d58:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002d5c:	f7fd fd60 	bl	8000820 <_dbg_check_lock>
 8002d60:	e7ea      	b.n	8002d38 <vtcb+0x48>
 8002d62:	bf00      	nop
 8002d64:	20000d70 	.word	0x20000d70
 8002d68:	0800f21c 	.word	0x0800f21c
 8002d6c:	0800f224 	.word	0x0800f224

08002d70 <evt_thread3>:
static THD_FUNCTION(evt_thread3, p) {
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	2320      	movs	r3, #32
 8002d74:	4605      	mov	r5, r0
 8002d76:	b087      	sub	sp, #28
 8002d78:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002d7c:	4c26      	ldr	r4, [pc, #152]	; (8002e18 <evt_thread3+0xa8>)
 8002d7e:	f7fd fd4f 	bl	8000820 <_dbg_check_lock>
 8002d82:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d13b      	bne.n	8002e00 <evt_thread3+0x90>
 8002d88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	dd38      	ble.n	8002e00 <evt_thread3+0x90>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002d8e:	69a3      	ldr	r3, [r4, #24]
 8002d90:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <evt_thread3+0xac>)
 8002d96:	a801      	add	r0, sp, #4
 8002d98:	f7ff f8ca 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8002d9c:	2008      	movs	r0, #8
 8002d9e:	f7ff fa9f 	bl	80022e0 <chSchGoSleepS>
 8002da2:	f7fd fdcd 	bl	8000940 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8002da6:	9b04      	ldr	r3, [sp, #16]
 8002da8:	b113      	cbz	r3, 8002db0 <evt_thread3+0x40>
      chVTDoResetI(&vt);
 8002daa:	a801      	add	r0, sp, #4
 8002dac:	f7ff f958 	bl	8002060 <chVTDoResetI>
  _dbg_check_unlock();
 8002db0:	f7fd fd46 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	42a3      	cmp	r3, r4
 8002db8:	d004      	beq.n	8002dc4 <evt_thread3+0x54>
 8002dba:	69a2      	ldr	r2, [r4, #24]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	6892      	ldr	r2, [r2, #8]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d320      	bcc.n	8002e06 <evt_thread3+0x96>
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	f383 8811 	msr	BASEPRI, r3
  chDbgCheck(tp != NULL);
 8002dca:	b315      	cbz	r5, 8002e12 <evt_thread3+0xa2>
 8002dcc:	2320      	movs	r3, #32
 8002dce:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8002dd2:	f7fd fd25 	bl	8000820 <_dbg_check_lock>
  chEvtSignalI(tp, events);
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f7ff fa51 	bl	8002280 <chEvtSignalI>
  chSchRescheduleS();
 8002dde:	f7ff ff37 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 8002de2:	f7fd fd2d 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	42a3      	cmp	r3, r4
 8002dea:	d004      	beq.n	8002df6 <evt_thread3+0x86>
 8002dec:	69a2      	ldr	r2, [r4, #24]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	6892      	ldr	r2, [r2, #8]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d30a      	bcc.n	8002e0c <evt_thread3+0x9c>
 8002df6:	2300      	movs	r3, #0
 8002df8:	f383 8811 	msr	BASEPRI, r3
}
 8002dfc:	b007      	add	sp, #28
 8002dfe:	bd30      	pop	{r4, r5, pc}
    chSysHalt("SV#11");
 8002e00:	4807      	ldr	r0, [pc, #28]	; (8002e20 <evt_thread3+0xb0>)
 8002e02:	f7fd fcb5 	bl	8000770 <chSysHalt>
 8002e06:	4807      	ldr	r0, [pc, #28]	; (8002e24 <evt_thread3+0xb4>)
 8002e08:	f7fd fcb2 	bl	8000770 <chSysHalt>
 8002e0c:	4806      	ldr	r0, [pc, #24]	; (8002e28 <evt_thread3+0xb8>)
 8002e0e:	f7fd fcaf 	bl	8000770 <chSysHalt>
  chDbgCheck(tp != NULL);
 8002e12:	4806      	ldr	r0, [pc, #24]	; (8002e2c <evt_thread3+0xbc>)
 8002e14:	f7fd fcac 	bl	8000770 <chSysHalt>
 8002e18:	20000d70 	.word	0x20000d70
 8002e1c:	08002161 	.word	0x08002161
 8002e20:	0800f204 	.word	0x0800f204
 8002e24:	08010de4 	.word	0x08010de4
 8002e28:	08010f9c 	.word	0x08010f9c
 8002e2c:	08010e90 	.word	0x08010e90

08002e30 <chThdSetPriority>:
  chDbgCheck(newprio <= HIGHPRIO);
 8002e30:	28ff      	cmp	r0, #255	; 0xff
tprio_t chThdSetPriority(tprio_t newprio) {
 8002e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck(newprio <= HIGHPRIO);
 8002e34:	d830      	bhi.n	8002e98 <chThdSetPriority+0x68>
 8002e36:	4604      	mov	r4, r0
 8002e38:	2320      	movs	r3, #32
 8002e3a:	f383 8811 	msr	BASEPRI, r3
  oldprio = currp->realprio;
 8002e3e:	4d19      	ldr	r5, [pc, #100]	; (8002ea4 <chThdSetPriority+0x74>)
  _dbg_check_lock();
 8002e40:	f7fd fcee 	bl	8000820 <_dbg_check_lock>
 8002e44:	69ae      	ldr	r6, [r5, #24]
 8002e46:	6bf7      	ldr	r7, [r6, #60]	; 0x3c
  if ((currp->hdr.pqueue.prio == currp->realprio) ||
 8002e48:	68b3      	ldr	r3, [r6, #8]
 8002e4a:	42bb      	cmp	r3, r7
 8002e4c:	d001      	beq.n	8002e52 <chThdSetPriority+0x22>
 8002e4e:	42a3      	cmp	r3, r4
 8002e50:	d200      	bcs.n	8002e54 <chThdSetPriority+0x24>
    currp->hdr.pqueue.prio = newprio;
 8002e52:	60b4      	str	r4, [r6, #8]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002e54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  currp->realprio = newprio;
 8002e56:	63f4      	str	r4, [r6, #60]	; 0x3c
 8002e58:	b9db      	cbnz	r3, 8002e92 <chThdSetPriority+0x62>
 8002e5a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	dd18      	ble.n	8002e92 <chThdSetPriority+0x62>
  chDbgCheckClassI();
 8002e60:	f7fd fd6e 	bl	8000940 <chDbgCheckClassI>
  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8002e64:	682a      	ldr	r2, [r5, #0]
  if (chSchIsRescRequiredI()) {
 8002e66:	68b3      	ldr	r3, [r6, #8]
 8002e68:	6892      	ldr	r2, [r2, #8]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d817      	bhi.n	8002e9e <chThdSetPriority+0x6e>
  _dbg_check_unlock();
 8002e6e:	f7fd fce7 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8002e72:	682b      	ldr	r3, [r5, #0]
 8002e74:	42ab      	cmp	r3, r5
 8002e76:	d007      	beq.n	8002e88 <chThdSetPriority+0x58>
 8002e78:	69aa      	ldr	r2, [r5, #24]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	6892      	ldr	r2, [r2, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d202      	bcs.n	8002e88 <chThdSetPriority+0x58>
 8002e82:	4809      	ldr	r0, [pc, #36]	; (8002ea8 <chThdSetPriority+0x78>)
 8002e84:	f7fd fc74 	bl	8000770 <chSysHalt>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f383 8811 	msr	BASEPRI, r3
}
 8002e8e:	4638      	mov	r0, r7
 8002e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#11");
 8002e92:	4806      	ldr	r0, [pc, #24]	; (8002eac <chThdSetPriority+0x7c>)
 8002e94:	f7fd fc6c 	bl	8000770 <chSysHalt>
  chDbgCheck(newprio <= HIGHPRIO);
 8002e98:	4805      	ldr	r0, [pc, #20]	; (8002eb0 <chThdSetPriority+0x80>)
 8002e9a:	f7fd fc69 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 8002e9e:	f7ff fe9f 	bl	8002be0 <chSchDoReschedule>
 8002ea2:	e7e4      	b.n	8002e6e <chThdSetPriority+0x3e>
 8002ea4:	20000d70 	.word	0x20000d70
 8002ea8:	08010de4 	.word	0x08010de4
 8002eac:	0800f204 	.word	0x0800f204
 8002eb0:	08010fd8 	.word	0x08010fd8
	...

08002ec0 <chThdCreateSuspendedI>:
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 8002ec0:	b570      	push	{r4, r5, r6, lr}
 8002ec2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8002ec4:	f7fd fd3c 	bl	8000940 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 8002ec8:	6862      	ldr	r2, [r4, #4]
 8002eca:	0753      	lsls	r3, r2, #29
 8002ecc:	d103      	bne.n	8002ed6 <chThdCreateSuspendedI+0x16>
 8002ece:	68a3      	ldr	r3, [r4, #8]
 8002ed0:	f013 0007 	ands.w	r0, r3, #7
 8002ed4:	d002      	beq.n	8002edc <chThdCreateSuspendedI+0x1c>
 8002ed6:	4820      	ldr	r0, [pc, #128]	; (8002f58 <chThdCreateSuspendedI+0x98>)
 8002ed8:	f7fd fc4a 	bl	8000770 <chSysHalt>
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d2fa      	bcs.n	8002ed6 <chThdCreateSuspendedI+0x16>
 8002ee0:	1a99      	subs	r1, r3, r2
 8002ee2:	29c7      	cmp	r1, #199	; 0xc7
 8002ee4:	d9f7      	bls.n	8002ed6 <chThdCreateSuspendedI+0x16>
  chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 8002ee6:	68e1      	ldr	r1, [r4, #12]
 8002ee8:	29ff      	cmp	r1, #255	; 0xff
 8002eea:	d8f4      	bhi.n	8002ed6 <chThdCreateSuspendedI+0x16>
 8002eec:	6925      	ldr	r5, [r4, #16]
 8002eee:	2d00      	cmp	r5, #0
 8002ef0:	d0f1      	beq.n	8002ed6 <chThdCreateSuspendedI+0x16>
  tp->wabase = tdp->wbase;
 8002ef2:	f843 2c2c 	str.w	r2, [r3, #-44]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002ef6:	f843 5c6c 	str.w	r5, [r3, #-108]
  return _thread_init(tp, tdp->name, tdp->prio);
 8002efa:	6822      	ldr	r2, [r4, #0]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002efc:	6965      	ldr	r5, [r4, #20]
  tp->flags           = CH_FLAG_MODE_STATIC;
 8002efe:	f803 0c27 	strb.w	r0, [r3, #-39]
  tp->epending        = (eventmask_t)0;
 8002f02:	e943 0005 	strd	r0, r0, [r3, #-20]
  tp->refs            = (trefs_t)1;
 8002f06:	2401      	movs	r4, #1
  tp->state           = CH_STATE_WTSTART;
 8002f08:	2002      	movs	r0, #2
  tp->name            = name;
 8002f0a:	f843 2c30 	str.w	r2, [r3, #-48]
  REG_INSERT(tp);
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <chThdCreateSuspendedI+0x9c>)
  tp->state           = CH_STATE_WTSTART;
 8002f10:	f803 0c28 	strb.w	r0, [r3, #-40]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002f14:	f843 5c68 	str.w	r5, [r3, #-104]
  tp->refs            = (trefs_t)1;
 8002f18:	f803 4c26 	strb.w	r4, [r3, #-38]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002f1c:	4d10      	ldr	r5, [pc, #64]	; (8002f60 <chThdCreateSuspendedI+0xa0>)
  REG_INSERT(tp);
 8002f1e:	6954      	ldr	r4, [r2, #20]
  tp->hdr.pqueue.prio = prio;
 8002f20:	f843 1c40 	str.w	r1, [r3, #-64]
  tp->realprio        = prio;
 8002f24:	f843 1c0c 	str.w	r1, [r3, #-12]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002f28:	f843 5c4c 	str.w	r5, [r3, #-76]
  ch_queue_init(&tp->msgqueue);
 8002f2c:	f1a3 011c 	sub.w	r1, r3, #28
  tp = (thread_t *)((uint8_t *)tdp->wend -
 8002f30:	f1a3 0048 	sub.w	r0, r3, #72	; 0x48
  ch_list_init(&tp->waiting);
 8002f34:	f1a3 0520 	sub.w	r5, r3, #32
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002f38:	f1a3 066c 	sub.w	r6, r3, #108	; 0x6c
  REG_INSERT(tp);
 8002f3c:	f843 2c38 	str.w	r2, [r3, #-56]
 8002f40:	f843 4c34 	str.w	r4, [r3, #-52]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8002f44:	f843 6c3c 	str.w	r6, [r3, #-60]
  REG_INSERT(tp);
 8002f48:	6120      	str	r0, [r4, #16]
 8002f4a:	6150      	str	r0, [r2, #20]
  qp->next = qp;
 8002f4c:	e943 5108 	strd	r5, r1, [r3, #-32]
  qp->prev = qp;
 8002f50:	f843 1c18 	str.w	r1, [r3, #-24]
}
 8002f54:	bd70      	pop	{r4, r5, r6, pc}
 8002f56:	bf00      	nop
 8002f58:	08010df0 	.word	0x08010df0
 8002f5c:	20000d70 	.word	0x20000d70
 8002f60:	08000251 	.word	0x08000251
	...

08002f70 <chThdExitS>:
void chThdExitS(msg_t msg) {
 8002f70:	b508      	push	{r3, lr}
 8002f72:	4603      	mov	r3, r0
  thread_t *tp = currp;
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <chThdExitS+0x44>)
 8002f76:	6994      	ldr	r4, [r2, #24]
  return (bool)(lp->next != lp);
 8002f78:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (ch_list_notempty(&tp->waiting)) {
 8002f7a:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002f7e:	42a8      	cmp	r0, r5
  tp->u.exitcode = msg;
 8002f80:	6263      	str	r3, [r4, #36]	; 0x24
  while (ch_list_notempty(&tp->waiting)) {
 8002f82:	d006      	beq.n	8002f92 <chThdExitS+0x22>
  lp->next = p->next;
 8002f84:	6803      	ldr	r3, [r0, #0]
 8002f86:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI((thread_t *)ch_list_pop(&tp->waiting));
 8002f88:	f7ff f8c2 	bl	8002110 <chSchReadyI>
  return (bool)(lp->next != lp);
 8002f8c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (ch_list_notempty(&tp->waiting)) {
 8002f8e:	42a8      	cmp	r0, r5
 8002f90:	d1f8      	bne.n	8002f84 <chThdExitS+0x14>
  if ((tp->refs == (trefs_t)0) &&
 8002f92:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002f96:	b93b      	cbnz	r3, 8002fa8 <chThdExitS+0x38>
 8002f98:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8002f9c:	079b      	lsls	r3, r3, #30
 8002f9e:	d103      	bne.n	8002fa8 <chThdExitS+0x38>
    REG_REMOVE(tp);
 8002fa0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002fa4:	6113      	str	r3, [r2, #16]
 8002fa6:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8002fa8:	200f      	movs	r0, #15
 8002faa:	f7ff f999 	bl	80022e0 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8002fae:	4802      	ldr	r0, [pc, #8]	; (8002fb8 <chThdExitS+0x48>)
 8002fb0:	f7fd fbde 	bl	8000770 <chSysHalt>
 8002fb4:	20000d70 	.word	0x20000d70
 8002fb8:	0801104c 	.word	0x0801104c
 8002fbc:	00000000 	.word	0x00000000

08002fc0 <chThdExit>:
void chThdExit(msg_t msg) {
 8002fc0:	b508      	push	{r3, lr}
 8002fc2:	2320      	movs	r3, #32
 8002fc4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002fc8:	4b05      	ldr	r3, [pc, #20]	; (8002fe0 <chThdExit+0x20>)
 8002fca:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	d103      	bne.n	8002fda <chThdExit+0x1a>
  _dbg_enter_lock();
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	635a      	str	r2, [r3, #52]	; 0x34
  chThdExitS(msg);
 8002fd6:	f7ff ffcb 	bl	8002f70 <chThdExitS>
    chSysHalt("SV#4");
 8002fda:	4802      	ldr	r0, [pc, #8]	; (8002fe4 <chThdExit+0x24>)
 8002fdc:	f7fd fbc8 	bl	8000770 <chSysHalt>
 8002fe0:	20000d70 	.word	0x20000d70
 8002fe4:	0800f20c 	.word	0x0800f20c
	...

08002ff0 <bmk_thread3.lto_priv.0>:
static THD_FUNCTION(bmk_thread3, p) {
 8002ff0:	b508      	push	{r3, lr}
 8002ff2:	2320      	movs	r3, #32
 8002ff4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <bmk_thread3.lto_priv.0+0x20>)
 8002ffa:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8002ffe:	430a      	orrs	r2, r1
 8003000:	d103      	bne.n	800300a <bmk_thread3.lto_priv.0+0x1a>
  _dbg_enter_lock();
 8003002:	2201      	movs	r2, #1
 8003004:	635a      	str	r2, [r3, #52]	; 0x34
 8003006:	f7ff ffb3 	bl	8002f70 <chThdExitS>
    chSysHalt("SV#4");
 800300a:	4802      	ldr	r0, [pc, #8]	; (8003014 <bmk_thread3.lto_priv.0+0x24>)
 800300c:	f7fd fbb0 	bl	8000770 <chSysHalt>
 8003010:	20000d70 	.word	0x20000d70
 8003014:	0800f20c 	.word	0x0800f20c
	...

08003020 <chThdSleep>:
 8003020:	2320      	movs	r3, #32
void chThdSleep(sysinterval_t time) {
 8003022:	b510      	push	{r4, lr}
 8003024:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003028:	4c12      	ldr	r4, [pc, #72]	; (8003074 <chThdSleep+0x54>)
 800302a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800302e:	4313      	orrs	r3, r2
 8003030:	d117      	bne.n	8003062 <chThdSleep+0x42>
  _dbg_enter_lock();
 8003032:	2301      	movs	r3, #1
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8003034:	4601      	mov	r1, r0
 8003036:	2008      	movs	r0, #8
 8003038:	6363      	str	r3, [r4, #52]	; 0x34
 800303a:	f7ff fa29 	bl	8002490 <chSchGoSleepTimeoutS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800303e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003040:	b993      	cbnz	r3, 8003068 <chThdSleep+0x48>
 8003042:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003044:	2a00      	cmp	r2, #0
 8003046:	dd0f      	ble.n	8003068 <chThdSleep+0x48>
 8003048:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 800304a:	6363      	str	r3, [r4, #52]	; 0x34
 800304c:	42a2      	cmp	r2, r4
 800304e:	d004      	beq.n	800305a <chThdSleep+0x3a>
 8003050:	69a1      	ldr	r1, [r4, #24]
 8003052:	6893      	ldr	r3, [r2, #8]
 8003054:	688a      	ldr	r2, [r1, #8]
 8003056:	429a      	cmp	r2, r3
 8003058:	d309      	bcc.n	800306e <chThdSleep+0x4e>
 800305a:	2300      	movs	r3, #0
 800305c:	f383 8811 	msr	BASEPRI, r3
}
 8003060:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 8003062:	4805      	ldr	r0, [pc, #20]	; (8003078 <chThdSleep+0x58>)
 8003064:	f7fd fb84 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8003068:	4804      	ldr	r0, [pc, #16]	; (800307c <chThdSleep+0x5c>)
 800306a:	f7fd fb81 	bl	8000770 <chSysHalt>
 800306e:	4804      	ldr	r0, [pc, #16]	; (8003080 <chThdSleep+0x60>)
 8003070:	f7fd fb7e 	bl	8000770 <chSysHalt>
 8003074:	20000d70 	.word	0x20000d70
 8003078:	0800f20c 	.word	0x0800f20c
 800307c:	0800f214 	.word	0x0800f214
 8003080:	08010de4 	.word	0x08010de4
	...

08003090 <rt_test_002_002_execute>:
  test_set_step(1);
 8003090:	2301      	movs	r3, #1
static void rt_test_002_002_execute(void) {
 8003092:	b530      	push	{r4, r5, lr}
  test_set_step(1);
 8003094:	4d71      	ldr	r5, [pc, #452]	; (800325c <rt_test_002_002_execute+0x1cc>)
static void rt_test_002_002_execute(void) {
 8003096:	b087      	sub	sp, #28
  test_set_step(1);
 8003098:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800309a:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 800309e:	b96b      	cbnz	r3, 80030bc <rt_test_002_002_execute+0x2c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a0:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 80030a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	f000 8099 	beq.w	80031e0 <rt_test_002_002_execute+0x150>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80030ae:	2320      	movs	r3, #32
 80030b0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80030b4:	f7fd fc14 	bl	80008e0 <_dbg_check_lock_from_isr>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 80030b8:	f7ff fdea 	bl	8002c90 <chSysRestoreStatusX.part.0>
  test_set_step(2);
 80030bc:	2302      	movs	r3, #2
 80030be:	2420      	movs	r4, #32
 80030c0:	602b      	str	r3, [r5, #0]
 80030c2:	f384 8811 	msr	BASEPRI, r4
  _dbg_check_lock();
 80030c6:	f7fd fbab 	bl	8000820 <_dbg_check_lock>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80030ca:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(sts)) {
 80030ce:	b95b      	cbnz	r3, 80030e8 <rt_test_002_002_execute+0x58>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030d0:	f3ef 8305 	mrs	r3, IPSR
  return (bool)((__get_IPSR() & 0x1FFU) != 0U);
 80030d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (port_is_isr_context()) {
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d17c      	bne.n	80031d6 <rt_test_002_002_execute+0x146>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80030dc:	f384 8811 	msr	BASEPRI, r4
 80030e0:	f7fd fb9e 	bl	8000820 <_dbg_check_lock>
  return sts == (syssts_t)CORTEX_BASEPRI_DISABLED;
 80030e4:	f7ff fdd4 	bl	8002c90 <chSysRestoreStatusX.part.0>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80030e8:	4c5d      	ldr	r4, [pc, #372]	; (8003260 <rt_test_002_002_execute+0x1d0>)
  _dbg_check_unlock();
 80030ea:	f7fd fba9 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80030ee:	6823      	ldr	r3, [r4, #0]
 80030f0:	42a3      	cmp	r3, r4
 80030f2:	d004      	beq.n	80030fe <rt_test_002_002_execute+0x6e>
 80030f4:	69a2      	ldr	r2, [r4, #24]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	6892      	ldr	r2, [r2, #8]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d368      	bcc.n	80031d0 <rt_test_002_002_execute+0x140>
 80030fe:	2300      	movs	r3, #0
 8003100:	f383 8811 	msr	BASEPRI, r3
  test_set_step(3);
 8003104:	2303      	movs	r3, #3
 8003106:	602b      	str	r3, [r5, #0]
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003108:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalLock(void) {

  if (port_irq_enabled(port_get_irq_status())) {
 800310c:	2b00      	cmp	r3, #0
 800310e:	d06d      	beq.n	80031ec <rt_test_002_002_execute+0x15c>
 8003110:	f3ef 8311 	mrs	r3, BASEPRI
 8003114:	2b00      	cmp	r3, #0
 8003116:	d072      	beq.n	80031fe <rt_test_002_002_execute+0x16e>
  _dbg_check_unlock();
 8003118:	f7fd fb92 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	42a3      	cmp	r3, r4
 8003120:	d004      	beq.n	800312c <rt_test_002_002_execute+0x9c>
 8003122:	69a2      	ldr	r2, [r4, #24]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	6892      	ldr	r2, [r2, #8]
 8003128:	429a      	cmp	r2, r3
 800312a:	d351      	bcc.n	80031d0 <rt_test_002_002_execute+0x140>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800312c:	2300      	movs	r3, #0
 800312e:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8003132:	2204      	movs	r2, #4
 8003134:	2320      	movs	r3, #32
 8003136:	602a      	str	r2, [r5, #0]
 8003138:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800313c:	f7fd fb70 	bl	8000820 <_dbg_check_lock>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003140:	f3ef 8311 	mrs	r3, BASEPRI
 *
 * @special
 */
static inline void chSysUnconditionalUnlock(void) {

  if (!port_irq_enabled(port_get_irq_status())) {
 8003144:	2b00      	cmp	r3, #0
 8003146:	d160      	bne.n	800320a <rt_test_002_002_execute+0x17a>
 8003148:	f3ef 8311 	mrs	r3, BASEPRI
 800314c:	2b00      	cmp	r3, #0
 800314e:	d16d      	bne.n	800322c <rt_test_002_002_execute+0x19c>
  test_set_step(5);
 8003150:	2105      	movs	r1, #5
  vtp->func = NULL;
 8003152:	2200      	movs	r2, #0
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003154:	2320      	movs	r3, #32
 8003156:	6029      	str	r1, [r5, #0]
 8003158:	9204      	str	r2, [sp, #16]
 800315a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800315e:	f7fd fb5f 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8003162:	f7fd fbed 	bl	8000940 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
 8003166:	9b04      	ldr	r3, [sp, #16]
    chVTDoResetI(vtp);
 8003168:	ad01      	add	r5, sp, #4
  if (chVTIsArmedI(vtp)) {
 800316a:	b113      	cbz	r3, 8003172 <rt_test_002_002_execute+0xe2>
    chVTDoResetI(vtp);
 800316c:	4628      	mov	r0, r5
 800316e:	f7fe ff77 	bl	8002060 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
 8003172:	2300      	movs	r3, #0
 8003174:	2101      	movs	r1, #1
 8003176:	4628      	mov	r0, r5
 8003178:	4a3a      	ldr	r2, [pc, #232]	; (8003264 <rt_test_002_002_execute+0x1d4>)
 800317a:	f7fe fed9 	bl	8001f30 <chVTDoSetI>
  _dbg_check_unlock();
 800317e:	f7fd fb5f 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	42a3      	cmp	r3, r4
 8003186:	d004      	beq.n	8003192 <rt_test_002_002_execute+0x102>
 8003188:	69a2      	ldr	r2, [r4, #24]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	6892      	ldr	r2, [r2, #8]
 800318e:	429a      	cmp	r2, r3
 8003190:	d31e      	bcc.n	80031d0 <rt_test_002_002_execute+0x140>
 8003192:	2300      	movs	r3, #0
 8003194:	f383 8811 	msr	BASEPRI, r3
    chThdSleep(10);
 8003198:	200a      	movs	r0, #10
 800319a:	f7ff ff41 	bl	8003020 <chThdSleep>
 800319e:	2320      	movs	r3, #32
 80031a0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80031a4:	f7fd fb3c 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 80031a8:	f7fd fbca 	bl	8000940 <chDbgCheckClassI>
  return (bool)(vtp->func != NULL);
 80031ac:	9d04      	ldr	r5, [sp, #16]
  _dbg_check_unlock();
 80031ae:	f7fd fb47 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	42a3      	cmp	r3, r4
 80031b6:	d004      	beq.n	80031c2 <rt_test_002_002_execute+0x132>
 80031b8:	69a2      	ldr	r2, [r4, #24]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	6892      	ldr	r2, [r2, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	d306      	bcc.n	80031d0 <rt_test_002_002_execute+0x140>
 80031c2:	2300      	movs	r3, #0
 80031c4:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 80031c8:	2d00      	cmp	r5, #0
 80031ca:	d13d      	bne.n	8003248 <rt_test_002_002_execute+0x1b8>
}
 80031cc:	b007      	add	sp, #28
 80031ce:	bd30      	pop	{r4, r5, pc}
 80031d0:	4825      	ldr	r0, [pc, #148]	; (8003268 <rt_test_002_002_execute+0x1d8>)
 80031d2:	f7fd facd 	bl	8000770 <chSysHalt>
 80031d6:	f384 8811 	msr	BASEPRI, r4
  _dbg_check_lock_from_isr();
 80031da:	f7fd fb81 	bl	80008e0 <_dbg_check_lock_from_isr>
 80031de:	e781      	b.n	80030e4 <rt_test_002_002_execute+0x54>
 80031e0:	2320      	movs	r3, #32
 80031e2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80031e6:	f7fd fb1b 	bl	8000820 <_dbg_check_lock>
 80031ea:	e765      	b.n	80030b8 <rt_test_002_002_execute+0x28>
 80031ec:	2320      	movs	r3, #32
 80031ee:	f383 8811 	msr	BASEPRI, r3
 80031f2:	f7fd fb15 	bl	8000820 <_dbg_check_lock>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80031f6:	f3ef 8311 	mrs	r3, BASEPRI
  if (port_irq_enabled(port_get_irq_status())) {
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d18c      	bne.n	8003118 <rt_test_002_002_execute+0x88>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80031fe:	2320      	movs	r3, #32
 8003200:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003204:	f7fd fb0c 	bl	8000820 <_dbg_check_lock>
 8003208:	e786      	b.n	8003118 <rt_test_002_002_execute+0x88>
  _dbg_check_unlock();
 800320a:	f7fd fb19 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	42a3      	cmp	r3, r4
 8003212:	d004      	beq.n	800321e <rt_test_002_002_execute+0x18e>
 8003214:	69a2      	ldr	r2, [r4, #24]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	6892      	ldr	r2, [r2, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d3d8      	bcc.n	80031d0 <rt_test_002_002_execute+0x140>
 800321e:	2300      	movs	r3, #0
 8003220:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003224:	f3ef 8311 	mrs	r3, BASEPRI
  if (!port_irq_enabled(port_get_irq_status())) {
 8003228:	2b00      	cmp	r3, #0
 800322a:	d091      	beq.n	8003150 <rt_test_002_002_execute+0xc0>
  _dbg_check_unlock();
 800322c:	f7fd fb08 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003230:	6823      	ldr	r3, [r4, #0]
 8003232:	42a3      	cmp	r3, r4
 8003234:	d004      	beq.n	8003240 <rt_test_002_002_execute+0x1b0>
 8003236:	69a2      	ldr	r2, [r4, #24]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	6892      	ldr	r2, [r2, #8]
 800323c:	429a      	cmp	r2, r3
 800323e:	d3c7      	bcc.n	80031d0 <rt_test_002_002_execute+0x140>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8003240:	2300      	movs	r3, #0
 8003242:	f383 8811 	msr	BASEPRI, r3
 8003246:	e783      	b.n	8003150 <rt_test_002_002_execute+0xc0>
  test_local_fail      = true;
 8003248:	2301      	movs	r3, #1
 800324a:	4908      	ldr	r1, [pc, #32]	; (800326c <rt_test_002_002_execute+0x1dc>)
  test_global_fail     = true;
 800324c:	4a08      	ldr	r2, [pc, #32]	; (8003270 <rt_test_002_002_execute+0x1e0>)
  test_failure_message = msg;
 800324e:	4809      	ldr	r0, [pc, #36]	; (8003274 <rt_test_002_002_execute+0x1e4>)
 8003250:	4c09      	ldr	r4, [pc, #36]	; (8003278 <rt_test_002_002_execute+0x1e8>)
  test_local_fail      = true;
 8003252:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8003254:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8003256:	7013      	strb	r3, [r2, #0]
 8003258:	b007      	add	sp, #28
 800325a:	bd30      	pop	{r4, r5, pc}
 800325c:	20001d3c 	.word	0x20001d3c
 8003260:	20000d70 	.word	0x20000d70
 8003264:	08002cf1 	.word	0x08002cf1
 8003268:	08010bd4 	.word	0x08010bd4
 800326c:	20001d39 	.word	0x20001d39
 8003270:	20001d38 	.word	0x20001d38
 8003274:	20001d34 	.word	0x20001d34
 8003278:	0800f280 	.word	0x0800f280
 800327c:	00000000 	.word	0x00000000

08003280 <rt_test_004_001_execute>:
  systime_t time;

  /* [4.1.1] The current system time is read then a sleep is performed
     for 100 system ticks and on exit the system time is verified
     again.*/
  test_set_step(1);
 8003280:	2301      	movs	r3, #1
static void rt_test_004_001_execute(void) {
 8003282:	b570      	push	{r4, r5, r6, lr}
  return (systime_t)STM32_ST_TIM->CNT;
 8003284:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
  test_set_step(1);
 8003288:	4d35      	ldr	r5, [pc, #212]	; (8003360 <rt_test_004_001_execute+0xe0>)
  {
    time = chVTGetSystemTimeX();
    chThdSleep(100);
 800328a:	2064      	movs	r0, #100	; 0x64
  test_set_step(1);
 800328c:	602b      	str	r3, [r5, #0]
 800328e:	6a66      	ldr	r6, [r4, #36]	; 0x24
    chThdSleep(100);
 8003290:	f7ff fec6 	bl	8003020 <chThdSleep>
 8003294:	6a63      	ldr	r3, [r4, #36]	; 0x24
 */
static inline bool chTimeIsInRangeX(systime_t time,
                                    systime_t start,
                                    systime_t end) {

  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003296:	3b64      	subs	r3, #100	; 0x64
 8003298:	1b9b      	subs	r3, r3, r6
  if (!condition)
 800329a:	b29b      	uxth	r3, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d84e      	bhi.n	800333e <rt_test_004_001_execute+0xbe>
  test_end_step(1);

  /* [4.1.2] The current system time is read then a sleep is performed
     for 100000 microseconds and on exit the system time is verified
     again.*/
  test_set_step(2);
 80032a0:	2302      	movs	r3, #2
  {
    time = chVTGetSystemTimeX();
    chThdSleepMicroseconds(100000);
 80032a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(2);
 80032a6:	602b      	str	r3, [r5, #0]
 80032a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
    chThdSleepMicroseconds(100000);
 80032aa:	f7ff feb9 	bl	8003020 <chThdSleep>
 80032ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032b0:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80032b4:	1b9b      	subs	r3, r3, r6
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d840      	bhi.n	800333e <rt_test_004_001_execute+0xbe>
  test_end_step(2);

  /* [4.1.3] The current system time is read then a sleep is performed
     for 100 milliseconds and on exit the system time is verified
     again.*/
  test_set_step(3);
 80032bc:	2303      	movs	r3, #3
  {
    time = chVTGetSystemTimeX();
    chThdSleepMilliseconds(100);
 80032be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(3);
 80032c2:	602b      	str	r3, [r5, #0]
 80032c4:	6a66      	ldr	r6, [r4, #36]	; 0x24
    chThdSleepMilliseconds(100);
 80032c6:	f7ff feab 	bl	8003020 <chThdSleep>
 80032ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032cc:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80032d0:	1b9b      	subs	r3, r3, r6
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d832      	bhi.n	800333e <rt_test_004_001_execute+0xbe>
  }
  test_end_step(3);

  /* [4.1.4] The current system time is read then a sleep is performed
     for 1 second and on exit the system time is verified again.*/
  test_set_step(4);
 80032d8:	2304      	movs	r3, #4
  {
    time = chVTGetSystemTimeX();
    chThdSleepSeconds(1);
 80032da:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(4);
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	6a66      	ldr	r6, [r4, #36]	; 0x24
    chThdSleepSeconds(1);
 80032e2:	f7ff fe9d 	bl	8003020 <chThdSleep>
 80032e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032e8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80032ec:	3b10      	subs	r3, #16
 80032ee:	1b9b      	subs	r3, r3, r6
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d823      	bhi.n	800333e <rt_test_004_001_execute+0xbe>
  }
  test_end_step(4);

  /* [4.1.5] Function chThdSleepUntil() is tested with a timeline of
     "now" + 100 ticks.*/
  test_set_step(5);
 80032f6:	2205      	movs	r2, #5
 80032f8:	602a      	str	r2, [r5, #0]
 80032fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032fc:	2320      	movs	r3, #32
  return systime + (systime_t)interval;
 80032fe:	3564      	adds	r5, #100	; 0x64
 8003300:	b2ad      	uxth	r5, r5
 8003302:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003306:	f7fd fa8b 	bl	8000820 <_dbg_check_lock>
 800330a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800330c:	1a69      	subs	r1, r5, r1
 800330e:	b289      	uxth	r1, r1
  if (interval > (sysinterval_t)0) {
 8003310:	b9f1      	cbnz	r1, 8003350 <rt_test_004_001_execute+0xd0>
  _dbg_check_unlock();
 8003312:	f7fd fa95 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003316:	4b13      	ldr	r3, [pc, #76]	; (8003364 <rt_test_004_001_execute+0xe4>)
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d004      	beq.n	8003328 <rt_test_004_001_execute+0xa8>
 800331e:	6999      	ldr	r1, [r3, #24]
 8003320:	6893      	ldr	r3, [r2, #8]
 8003322:	688a      	ldr	r2, [r1, #8]
 8003324:	429a      	cmp	r2, r3
 8003326:	d317      	bcc.n	8003358 <rt_test_004_001_execute+0xd8>
 8003328:	2300      	movs	r3, #0
 800332a:	f383 8811 	msr	BASEPRI, r3
 800332e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8003334:	1b5d      	subs	r5, r3, r5
 8003336:	b2ad      	uxth	r5, r5
 8003338:	2d02      	cmp	r5, #2
 800333a:	d800      	bhi.n	800333e <rt_test_004_001_execute+0xbe>
    test_assert_time_window(chTimeAddX(time, 100),
                            chTimeAddX(time, 100 + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
  }
  test_end_step(5);
}
 800333c:	bd70      	pop	{r4, r5, r6, pc}
  test_local_fail      = true;
 800333e:	2301      	movs	r3, #1
 8003340:	4909      	ldr	r1, [pc, #36]	; (8003368 <rt_test_004_001_execute+0xe8>)
  test_global_fail     = true;
 8003342:	4a0a      	ldr	r2, [pc, #40]	; (800336c <rt_test_004_001_execute+0xec>)
  test_failure_message = msg;
 8003344:	480a      	ldr	r0, [pc, #40]	; (8003370 <rt_test_004_001_execute+0xf0>)
 8003346:	4c0b      	ldr	r4, [pc, #44]	; (8003374 <rt_test_004_001_execute+0xf4>)
  test_local_fail      = true;
 8003348:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800334a:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800334c:	7013      	strb	r3, [r2, #0]
 800334e:	bd70      	pop	{r4, r5, r6, pc}
 8003350:	2008      	movs	r0, #8
 8003352:	f7ff f89d 	bl	8002490 <chSchGoSleepTimeoutS>
 8003356:	e7dc      	b.n	8003312 <rt_test_004_001_execute+0x92>
 8003358:	4807      	ldr	r0, [pc, #28]	; (8003378 <rt_test_004_001_execute+0xf8>)
 800335a:	f7fd fa09 	bl	8000770 <chSysHalt>
 800335e:	bf00      	nop
 8003360:	20001d3c 	.word	0x20001d3c
 8003364:	20000d70 	.word	0x20000d70
 8003368:	20001d39 	.word	0x20001d39
 800336c:	20001d38 	.word	0x20001d38
 8003370:	20001d34 	.word	0x20001d34
 8003374:	0800f294 	.word	0x0800f294
 8003378:	08010de4 	.word	0x08010de4
 800337c:	00000000 	.word	0x00000000

08003380 <evt_thread7>:
 8003380:	2320      	movs	r3, #32
static THD_FUNCTION(evt_thread7, p) {
 8003382:	b570      	push	{r4, r5, r6, lr}
 8003384:	f383 8811 	msr	BASEPRI, r3
  elp = esp->next;
 8003388:	4d23      	ldr	r5, [pc, #140]	; (8003418 <evt_thread7+0x98>)
  _dbg_check_lock();
 800338a:	f7fd fa49 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800338e:	f7fd fad7 	bl	8000940 <chDbgCheckClassI>
  elp = esp->next;
 8003392:	682c      	ldr	r4, [r5, #0]
  while (elp != (event_listener_t *)esp) {
 8003394:	42ac      	cmp	r4, r5
 8003396:	d006      	beq.n	80033a6 <evt_thread7+0x26>
      chEvtSignalI(elp->listener, elp->events);
 8003398:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800339c:	f7fe ff70 	bl	8002280 <chEvtSignalI>
    elp = elp->next;
 80033a0:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80033a2:	42ac      	cmp	r4, r5
 80033a4:	d1f8      	bne.n	8003398 <evt_thread7+0x18>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80033a6:	4e1d      	ldr	r6, [pc, #116]	; (800341c <evt_thread7+0x9c>)
 */
void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {

  chSysLock();
  chEvtBroadcastFlagsI(esp, flags);
  chSchRescheduleS();
 80033a8:	f7ff fc52 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 80033ac:	f7fd fa48 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80033b0:	6833      	ldr	r3, [r6, #0]
 80033b2:	42b3      	cmp	r3, r6
 80033b4:	d004      	beq.n	80033c0 <evt_thread7+0x40>
 80033b6:	69b2      	ldr	r2, [r6, #24]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	6892      	ldr	r2, [r2, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d328      	bcc.n	8003412 <evt_thread7+0x92>
 80033c0:	2300      	movs	r3, #0
 80033c2:	f383 8811 	msr	BASEPRI, r3
  chThdSleepMilliseconds(50);
 80033c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80033ca:	f7ff fe29 	bl	8003020 <chThdSleep>
 80033ce:	2320      	movs	r3, #32
 80033d0:	f383 8811 	msr	BASEPRI, r3
  elp = esp->next;
 80033d4:	4d12      	ldr	r5, [pc, #72]	; (8003420 <evt_thread7+0xa0>)
  _dbg_check_lock();
 80033d6:	f7fd fa23 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 80033da:	f7fd fab1 	bl	8000940 <chDbgCheckClassI>
  elp = esp->next;
 80033de:	682c      	ldr	r4, [r5, #0]
  while (elp != (event_listener_t *)esp) {
 80033e0:	42ac      	cmp	r4, r5
 80033e2:	d006      	beq.n	80033f2 <evt_thread7+0x72>
      chEvtSignalI(elp->listener, elp->events);
 80033e4:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 80033e8:	f7fe ff4a 	bl	8002280 <chEvtSignalI>
    elp = elp->next;
 80033ec:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80033ee:	42ac      	cmp	r4, r5
 80033f0:	d1f8      	bne.n	80033e4 <evt_thread7+0x64>
  chSchRescheduleS();
 80033f2:	f7ff fc2d 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 80033f6:	f7fd fa23 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80033fa:	6833      	ldr	r3, [r6, #0]
 80033fc:	42b3      	cmp	r3, r6
 80033fe:	d004      	beq.n	800340a <evt_thread7+0x8a>
 8003400:	69b2      	ldr	r2, [r6, #24]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	6892      	ldr	r2, [r2, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d303      	bcc.n	8003412 <evt_thread7+0x92>
 800340a:	2300      	movs	r3, #0
 800340c:	f383 8811 	msr	BASEPRI, r3
}
 8003410:	bd70      	pop	{r4, r5, r6, pc}
 8003412:	4804      	ldr	r0, [pc, #16]	; (8003424 <evt_thread7+0xa4>)
 8003414:	f7fd f9ac 	bl	8000770 <chSysHalt>
 8003418:	20000808 	.word	0x20000808
 800341c:	20000d70 	.word	0x20000d70
 8003420:	2000080c 	.word	0x2000080c
 8003424:	08010f9c 	.word	0x08010f9c
	...

08003430 <chThdYield>:
void chThdYield(void) {
 8003430:	b538      	push	{r3, r4, r5, lr}
 8003432:	2320      	movs	r3, #32
 8003434:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003438:	4c25      	ldr	r4, [pc, #148]	; (80034d0 <chThdYield+0xa0>)
  _dbg_check_lock();
 800343a:	f7fd f9f1 	bl	8000820 <_dbg_check_lock>
 800343e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003440:	b9b3      	cbnz	r3, 8003470 <chThdYield+0x40>
 8003442:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003444:	2b00      	cmp	r3, #0
 8003446:	dd13      	ble.n	8003470 <chThdYield+0x40>
 */
static inline bool chSchCanYieldS(void) {

  chDbgCheckClassS();

  return firstprio(&ch.rlist.pqueue) >= currp->hdr.pqueue.prio;
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	69a0      	ldr	r0, [r4, #24]
 */
static inline void chSchDoYieldS(void) {

  chDbgCheckClassS();

  if (chSchCanYieldS()) {
 800344c:	6899      	ldr	r1, [r3, #8]
 800344e:	6882      	ldr	r2, [r0, #8]
 8003450:	4291      	cmp	r1, r2
 8003452:	d210      	bcs.n	8003476 <chThdYield+0x46>
  _dbg_check_unlock();
 8003454:	f7fd f9f4 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003458:	6823      	ldr	r3, [r4, #0]
 800345a:	42a3      	cmp	r3, r4
 800345c:	d004      	beq.n	8003468 <chThdYield+0x38>
 800345e:	69a2      	ldr	r2, [r4, #24]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	6892      	ldr	r2, [r2, #8]
 8003464:	429a      	cmp	r2, r3
 8003466:	d32f      	bcc.n	80034c8 <chThdYield+0x98>
 8003468:	2300      	movs	r3, #0
 800346a:	f383 8811 	msr	BASEPRI, r3
}
 800346e:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#11");
 8003470:	4818      	ldr	r0, [pc, #96]	; (80034d4 <chThdYield+0xa4>)
 8003472:	f7fd f97d 	bl	8000770 <chSysHalt>
  currp->state = CH_STATE_CURRENT;
 8003476:	2101      	movs	r1, #1
  pqp->next       = p->next;
 8003478:	681a      	ldr	r2, [r3, #0]
  pqp->next->prev = pqp;
 800347a:	6054      	str	r4, [r2, #4]
 800347c:	f883 1020 	strb.w	r1, [r3, #32]
  currp = (thread_t *)ch_pqueue_remove_highest(&ch.rlist.pqueue);
 8003480:	61a3      	str	r3, [r4, #24]
  pqp->next       = p->next;
 8003482:	6022      	str	r2, [r4, #0]
  otp = chSchReadyI(otp);
 8003484:	f7fe fe44 	bl	8002110 <chSchReadyI>
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8003488:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800348a:	4605      	mov	r5, r0
 800348c:	07db      	lsls	r3, r3, #31
 800348e:	d50d      	bpl.n	80034ac <chThdYield+0x7c>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003490:	f3ef 8309 	mrs	r3, PSP
  chSysSwitch(currp, otp);
 8003494:	69ea      	ldr	r2, [r5, #28]
 8003496:	3b24      	subs	r3, #36	; 0x24
 8003498:	429a      	cmp	r2, r3
 800349a:	d804      	bhi.n	80034a6 <chThdYield+0x76>
 800349c:	4629      	mov	r1, r5
 800349e:	69a0      	ldr	r0, [r4, #24]
 80034a0:	f7fc fece 	bl	8000240 <_port_switch>
 80034a4:	e7d6      	b.n	8003454 <chThdYield+0x24>
 80034a6:	480c      	ldr	r0, [pc, #48]	; (80034d8 <chThdYield+0xa8>)
 80034a8:	f7fd f962 	bl	8000770 <chSysHalt>
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 80034ac:	f895 3020 	ldrb.w	r3, [r5, #32]
 80034b0:	69a0      	ldr	r0, [r4, #24]
 80034b2:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80034b4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	f043 0301 	orr.w	r3, r3, #1
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 80034bc:	6090      	str	r0, [r2, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 80034be:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 80034c0:	60d1      	str	r1, [r2, #12]
    trace_next();
 80034c2:	f7fc ff35 	bl	8000330 <trace_next>
 80034c6:	e7e3      	b.n	8003490 <chThdYield+0x60>
 80034c8:	4804      	ldr	r0, [pc, #16]	; (80034dc <chThdYield+0xac>)
 80034ca:	f7fd f951 	bl	8000770 <chSysHalt>
 80034ce:	bf00      	nop
 80034d0:	20000d70 	.word	0x20000d70
 80034d4:	0800f204 	.word	0x0800f204
 80034d8:	0800f270 	.word	0x0800f270
 80034dc:	08010de4 	.word	0x08010de4

080034e0 <chTMStartMeasurementX>:
  return DWT->CYCCNT;
 80034e0:	4b01      	ldr	r3, [pc, #4]	; (80034e8 <chTMStartMeasurementX+0x8>)
 80034e2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 80034e4:	6083      	str	r3, [r0, #8]
}
 80034e6:	4770      	bx	lr
 80034e8:	e0001000 	.word	0xe0001000
 80034ec:	00000000 	.word	0x00000000

080034f0 <chTMStopMeasurementX>:
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80034f2:	4a10      	ldr	r2, [pc, #64]	; (8003534 <chTMStopMeasurementX+0x44>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f8d2 2884 	ldr.w	r2, [r2, #2180]	; 0x884
  tmp->last = (now - tmp->last) - offset;
 80034fa:	6881      	ldr	r1, [r0, #8]
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	1a5b      	subs	r3, r3, r1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8003500:	b410      	push	{r4}
  tmp->n++;
 8003502:	e9d0 4203 	ldrd	r4, r2, [r0, #12]
  tmp->cumulative += (rttime_t)tmp->last;
 8003506:	18d2      	adds	r2, r2, r3
 8003508:	6941      	ldr	r1, [r0, #20]
 800350a:	6102      	str	r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 800350c:	6842      	ldr	r2, [r0, #4]
  tmp->cumulative += (rttime_t)tmp->last;
 800350e:	f141 0100 	adc.w	r1, r1, #0
  if (tmp->last > tmp->worst) {
 8003512:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 8003514:	6802      	ldr	r2, [r0, #0]
  tmp->n++;
 8003516:	f104 0401 	add.w	r4, r4, #1
    tmp->worst = tmp->last;
 800351a:	bf88      	it	hi
 800351c:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 800351e:	4293      	cmp	r3, r2
  tmp->last = (now - tmp->last) - offset;
 8003520:	e9c0 3402 	strd	r3, r4, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003524:	6141      	str	r1, [r0, #20]
}
 8003526:	bc10      	pop	{r4}
    tmp->best = tmp->last;
 8003528:	bf38      	it	cc
 800352a:	6003      	strcc	r3, [r0, #0]
}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e0001000 	.word	0xe0001000
 8003534:	20000d70 	.word	0x20000d70
	...

08003540 <chSemWaitS>:
msg_t chSemWaitS(semaphore_t *sp) {
 8003540:	b510      	push	{r4, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003542:	4c15      	ldr	r4, [pc, #84]	; (8003598 <chSemWaitS+0x58>)
 8003544:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003546:	b962      	cbnz	r2, 8003562 <chSemWaitS+0x22>
 8003548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800354a:	2900      	cmp	r1, #0
 800354c:	dd09      	ble.n	8003562 <chSemWaitS+0x22>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 800354e:	6881      	ldr	r1, [r0, #8]
 8003550:	4603      	mov	r3, r0
 8003552:	2900      	cmp	r1, #0
  return (bool)(qp->next == qp);
 8003554:	6800      	ldr	r0, [r0, #0]
 8003556:	db07      	blt.n	8003568 <chSemWaitS+0x28>
 8003558:	4298      	cmp	r0, r3
 800355a:	d016      	beq.n	800358a <chSemWaitS+0x4a>
 800355c:	480f      	ldr	r0, [pc, #60]	; (800359c <chSemWaitS+0x5c>)
 800355e:	f7fd f907 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8003562:	480f      	ldr	r0, [pc, #60]	; (80035a0 <chSemWaitS+0x60>)
 8003564:	f7fd f904 	bl	8000770 <chSysHalt>
 8003568:	4298      	cmp	r0, r3
 800356a:	d0f7      	beq.n	800355c <chSemWaitS+0x1c>
  if (--sp->cnt < (cnt_t)0) {
 800356c:	3901      	subs	r1, #1
 800356e:	6099      	str	r1, [r3, #8]
    currp->u.wtsemp = sp;
 8003570:	69a2      	ldr	r2, [r4, #24]
  p->prev       = qp->prev;
 8003572:	6859      	ldr	r1, [r3, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003574:	2005      	movs	r0, #5
 8003576:	e9c2 3100 	strd	r3, r1, [r2]
    currp->u.wtsemp = sp;
 800357a:	6253      	str	r3, [r2, #36]	; 0x24
  p->prev->next = p;
 800357c:	600a      	str	r2, [r1, #0]
  qp->prev      = p;
 800357e:	605a      	str	r2, [r3, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 8003580:	f7fe feae 	bl	80022e0 <chSchGoSleepS>
    return currp->u.rdymsg;
 8003584:	69a3      	ldr	r3, [r4, #24]
 8003586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003588:	e003      	b.n	8003592 <chSemWaitS+0x52>
  if (--sp->cnt < (cnt_t)0) {
 800358a:	3901      	subs	r1, #1
 800358c:	6099      	str	r1, [r3, #8]
 800358e:	3101      	adds	r1, #1
 8003590:	d0ee      	beq.n	8003570 <chSemWaitS+0x30>
}
 8003592:	4610      	mov	r0, r2
 8003594:	bd10      	pop	{r4, pc}
 8003596:	bf00      	nop
 8003598:	20000d70 	.word	0x20000d70
 800359c:	08010f90 	.word	0x08010f90
 80035a0:	0800f204 	.word	0x0800f204
	...

080035b0 <chSemWait>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80035b0:	2320      	movs	r3, #32
msg_t chSemWait(semaphore_t *sp) {
 80035b2:	b510      	push	{r4, lr}
 80035b4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80035b8:	4c11      	ldr	r4, [pc, #68]	; (8003600 <chSemWait+0x50>)
 80035ba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 80035be:	4313      	orrs	r3, r2
 80035c0:	d115      	bne.n	80035ee <chSemWait+0x3e>
  _dbg_enter_lock();
 80035c2:	2301      	movs	r3, #1
 80035c4:	6363      	str	r3, [r4, #52]	; 0x34
  msg = chSemWaitS(sp);
 80035c6:	f7ff ffbb 	bl	8003540 <chSemWaitS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80035ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80035cc:	b993      	cbnz	r3, 80035f4 <chSemWait+0x44>
 80035ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80035d0:	2a00      	cmp	r2, #0
 80035d2:	dd0f      	ble.n	80035f4 <chSemWait+0x44>
 80035d4:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 80035d6:	6363      	str	r3, [r4, #52]	; 0x34
 80035d8:	42a2      	cmp	r2, r4
 80035da:	d004      	beq.n	80035e6 <chSemWait+0x36>
 80035dc:	69a1      	ldr	r1, [r4, #24]
 80035de:	6893      	ldr	r3, [r2, #8]
 80035e0:	688a      	ldr	r2, [r1, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d309      	bcc.n	80035fa <chSemWait+0x4a>
 80035e6:	2300      	movs	r3, #0
 80035e8:	f383 8811 	msr	BASEPRI, r3
}
 80035ec:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 80035ee:	4805      	ldr	r0, [pc, #20]	; (8003604 <chSemWait+0x54>)
 80035f0:	f7fd f8be 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 80035f4:	4804      	ldr	r0, [pc, #16]	; (8003608 <chSemWait+0x58>)
 80035f6:	f7fd f8bb 	bl	8000770 <chSysHalt>
 80035fa:	4804      	ldr	r0, [pc, #16]	; (800360c <chSemWait+0x5c>)
 80035fc:	f7fd f8b8 	bl	8000770 <chSysHalt>
 8003600:	20000d70 	.word	0x20000d70
 8003604:	0800f20c 	.word	0x0800f20c
 8003608:	0800f214 	.word	0x0800f214
 800360c:	08011028 	.word	0x08011028

08003610 <bmk_thread7.lto_priv.0>:

#if CH_CFG_USE_SEMAPHORES
static THD_FUNCTION(bmk_thread7, p) {
 8003610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8003612:	4c19      	ldr	r4, [pc, #100]	; (8003678 <bmk_thread7.lto_priv.0+0x68>)
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8003614:	69a3      	ldr	r3, [r4, #24]

  (void)p;
  while (!chThdShouldTerminateX())
 8003616:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800361a:	075a      	lsls	r2, r3, #29
 800361c:	d422      	bmi.n	8003664 <bmk_thread7.lto_priv.0+0x54>
 800361e:	2520      	movs	r5, #32
  _dbg_enter_lock();
 8003620:	2701      	movs	r7, #1
  msg = chSemWaitS(sp);
 8003622:	4e16      	ldr	r6, [pc, #88]	; (800367c <bmk_thread7.lto_priv.0+0x6c>)
 8003624:	f385 8811 	msr	BASEPRI, r5
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003628:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800362c:	4313      	orrs	r3, r2
 800362e:	d11a      	bne.n	8003666 <bmk_thread7.lto_priv.0+0x56>
 8003630:	4630      	mov	r0, r6
  _dbg_enter_lock();
 8003632:	6367      	str	r7, [r4, #52]	; 0x34
 8003634:	f7ff ff84 	bl	8003540 <chSemWaitS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003638:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800363a:	b9bb      	cbnz	r3, 800366c <bmk_thread7.lto_priv.0+0x5c>
 800363c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800363e:	2a00      	cmp	r2, #0
 8003640:	dd14      	ble.n	800366c <bmk_thread7.lto_priv.0+0x5c>
  _dbg_leave_lock();
 8003642:	6363      	str	r3, [r4, #52]	; 0x34
 8003644:	6823      	ldr	r3, [r4, #0]
 8003646:	42a3      	cmp	r3, r4
 8003648:	d004      	beq.n	8003654 <bmk_thread7.lto_priv.0+0x44>
 800364a:	69a2      	ldr	r2, [r4, #24]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	6892      	ldr	r2, [r2, #8]
 8003650:	429a      	cmp	r2, r3
 8003652:	d30e      	bcc.n	8003672 <bmk_thread7.lto_priv.0+0x62>
 8003654:	2300      	movs	r3, #0
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	69a3      	ldr	r3, [r4, #24]
 800365c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003660:	075b      	lsls	r3, r3, #29
 8003662:	d5df      	bpl.n	8003624 <bmk_thread7.lto_priv.0+0x14>
    chSemWait(&sem1);
}
 8003664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#4");
 8003666:	4806      	ldr	r0, [pc, #24]	; (8003680 <bmk_thread7.lto_priv.0+0x70>)
 8003668:	f7fd f882 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800366c:	4805      	ldr	r0, [pc, #20]	; (8003684 <bmk_thread7.lto_priv.0+0x74>)
 800366e:	f7fd f87f 	bl	8000770 <chSysHalt>
 8003672:	4805      	ldr	r0, [pc, #20]	; (8003688 <bmk_thread7.lto_priv.0+0x78>)
 8003674:	f7fd f87c 	bl	8000770 <chSysHalt>
 8003678:	20000d70 	.word	0x20000d70
 800367c:	200016b4 	.word	0x200016b4
 8003680:	0800f20c 	.word	0x0800f20c
 8003684:	0800f214 	.word	0x0800f214
 8003688:	08011028 	.word	0x08011028
 800368c:	00000000 	.word	0x00000000

08003690 <chSemSignal>:
 *
 * @param[in] sp        pointer to a @p semaphore_t structure
 *
 * @api
 */
void chSemSignal(semaphore_t *sp) {
 8003690:	b510      	push	{r4, lr}
 8003692:	2320      	movs	r3, #32
 8003694:	4604      	mov	r4, r0
 8003696:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800369a:	f7fd f8c1 	bl	8000820 <_dbg_check_lock>

  chDbgCheck(sp != NULL);

  chSysLock();
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 800369e:	68a3      	ldr	r3, [r4, #8]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	db05      	blt.n	80036b0 <chSemSignal+0x20>
 80036a4:	6822      	ldr	r2, [r4, #0]
 80036a6:	42a2      	cmp	r2, r4
 80036a8:	d01c      	beq.n	80036e4 <chSemSignal+0x54>
 80036aa:	4811      	ldr	r0, [pc, #68]	; (80036f0 <chSemSignal+0x60>)
 80036ac:	f7fd f860 	bl	8000770 <chSysHalt>
  return (bool)(qp->next != qp);
 80036b0:	6820      	ldr	r0, [r4, #0]
 80036b2:	42a0      	cmp	r0, r4
 80036b4:	d0f9      	beq.n	80036aa <chSemSignal+0x1a>
  qp->next       = p->next;
 80036b6:	6802      	ldr	r2, [r0, #0]
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");
  if (++sp->cnt <= (cnt_t)0) {
 80036b8:	3301      	adds	r3, #1
 80036ba:	60a3      	str	r3, [r4, #8]
 80036bc:	6022      	str	r2, [r4, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&sp->queue), MSG_OK);
 80036be:	2100      	movs	r1, #0
  qp->next->prev = qp;
 80036c0:	6054      	str	r4, [r2, #4]
 80036c2:	f7ff fa3d 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 80036c6:	f7fd f8bb 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <chSemSignal+0x64>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d004      	beq.n	80036dc <chSemSignal+0x4c>
 80036d2:	6999      	ldr	r1, [r3, #24]
 80036d4:	6893      	ldr	r3, [r2, #8]
 80036d6:	688a      	ldr	r2, [r1, #8]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d306      	bcc.n	80036ea <chSemSignal+0x5a>
 80036dc:	2300      	movs	r3, #0
 80036de:	f383 8811 	msr	BASEPRI, r3
  }
  chSysUnlock();
}
 80036e2:	bd10      	pop	{r4, pc}
  if (++sp->cnt <= (cnt_t)0) {
 80036e4:	3301      	adds	r3, #1
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	e7ed      	b.n	80036c6 <chSemSignal+0x36>
 80036ea:	4803      	ldr	r0, [pc, #12]	; (80036f8 <chSemSignal+0x68>)
 80036ec:	f7fd f840 	bl	8000770 <chSysHalt>
 80036f0:	08010ed8 	.word	0x08010ed8
 80036f4:	20000d70 	.word	0x20000d70
 80036f8:	08011028 	.word	0x08011028
 80036fc:	00000000 	.word	0x00000000

08003700 <thread3>:
static THD_FUNCTION(thread3, p) {
 8003700:	b510      	push	{r4, lr}
  chSemWait(&sem1);
 8003702:	4c04      	ldr	r4, [pc, #16]	; (8003714 <thread3+0x14>)
 8003704:	4620      	mov	r0, r4
 8003706:	f7ff ff53 	bl	80035b0 <chSemWait>
  chSemSignal(&sem1);
 800370a:	4620      	mov	r0, r4
}
 800370c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chSemSignal(&sem1);
 8003710:	f7ff bfbe 	b.w	8003690 <chSemSignal>
 8003714:	200016a8 	.word	0x200016a8
	...

08003720 <rt_test_006_001_execute>:
  test_set_step(1);
 8003720:	2201      	movs	r2, #1
static void rt_test_006_001_execute(void) {
 8003722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8003724:	4e37      	ldr	r6, [pc, #220]	; (8003804 <rt_test_006_001_execute+0xe4>)
 8003726:	2320      	movs	r3, #32
 8003728:	6032      	str	r2, [r6, #0]
 800372a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800372e:	f7fd f877 	bl	8000820 <_dbg_check_lock>
  msg = chSemWaitS(sp);
 8003732:	4835      	ldr	r0, [pc, #212]	; (8003808 <rt_test_006_001_execute+0xe8>)
 8003734:	f7ff ff04 	bl	8003540 <chSemWaitS>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003738:	4c34      	ldr	r4, [pc, #208]	; (800380c <rt_test_006_001_execute+0xec>)
 800373a:	4605      	mov	r5, r0
  _dbg_check_unlock();
 800373c:	f7fd f880 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003740:	6823      	ldr	r3, [r4, #0]
 8003742:	42a3      	cmp	r3, r4
 8003744:	d004      	beq.n	8003750 <rt_test_006_001_execute+0x30>
 8003746:	69a2      	ldr	r2, [r4, #24]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	6892      	ldr	r2, [r2, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	d33e      	bcc.n	80037ce <rt_test_006_001_execute+0xae>
 8003750:	2300      	movs	r3, #0
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	2320      	movs	r3, #32
 8003758:	f383 8811 	msr	BASEPRI, r3
 */
static inline cnt_t chSemGetCounterI(const semaphore_t *sp) {

  chDbgCheckClassI();

  return sp->cnt;
 800375c:	4f2a      	ldr	r7, [pc, #168]	; (8003808 <rt_test_006_001_execute+0xe8>)
  _dbg_check_lock();
 800375e:	f7fd f85f 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8003762:	f7fd f8ed 	bl	8000940 <chDbgCheckClassI>
  if (!condition)
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	bba3      	cbnz	r3, 80037d4 <rt_test_006_001_execute+0xb4>
  _dbg_check_unlock();
 800376a:	f7fd f869 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800376e:	6823      	ldr	r3, [r4, #0]
 8003770:	42a3      	cmp	r3, r4
 8003772:	d004      	beq.n	800377e <rt_test_006_001_execute+0x5e>
 8003774:	69a2      	ldr	r2, [r4, #24]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	6892      	ldr	r2, [r2, #8]
 800377a:	429a      	cmp	r2, r3
 800377c:	d33f      	bcc.n	80037fe <rt_test_006_001_execute+0xde>
 800377e:	2300      	movs	r3, #0
 8003780:	f383 8811 	msr	BASEPRI, r3
 8003784:	bb95      	cbnz	r5, 80037ec <rt_test_006_001_execute+0xcc>
  test_set_step(2);
 8003786:	2502      	movs	r5, #2
    chSemSignal(&sem1);
 8003788:	481f      	ldr	r0, [pc, #124]	; (8003808 <rt_test_006_001_execute+0xe8>)
  test_set_step(2);
 800378a:	6035      	str	r5, [r6, #0]
 800378c:	2420      	movs	r4, #32
    chSemSignal(&sem1);
 800378e:	f7ff ff7f 	bl	8003690 <chSemSignal>
 8003792:	f384 8811 	msr	BASEPRI, r4
  _dbg_check_lock();
 8003796:	f7fd f843 	bl	8000820 <_dbg_check_lock>
 800379a:	f7fd f8d1 	bl	8000940 <chDbgCheckClassI>
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d117      	bne.n	80037d4 <rt_test_006_001_execute+0xb4>
 *
 * @special
 */
static inline void osalSysUnlock(void) {

  chSysUnlock();
 80037a4:	f7fe f984 	bl	8001ab0 <chSysUnlock.lto_priv.19>
  test_set_step(3);
 80037a8:	2303      	movs	r3, #3
  chSemResetWithMessage(sp, n, MSG_RESET);
 80037aa:	4629      	mov	r1, r5
 80037ac:	4816      	ldr	r0, [pc, #88]	; (8003808 <rt_test_006_001_execute+0xe8>)
 80037ae:	6033      	str	r3, [r6, #0]
 80037b0:	f009 fc66 	bl	800d080 <chSemResetWithMessage.constprop.0>
 80037b4:	f384 8811 	msr	BASEPRI, r4
 80037b8:	f7fd f832 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 80037bc:	f7fd f8c0 	bl	8000940 <chDbgCheckClassI>
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	42ab      	cmp	r3, r5
 80037c4:	d106      	bne.n	80037d4 <rt_test_006_001_execute+0xb4>
}
 80037c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037ca:	f7fe b971 	b.w	8001ab0 <chSysUnlock.lto_priv.19>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80037ce:	4810      	ldr	r0, [pc, #64]	; (8003810 <rt_test_006_001_execute+0xf0>)
 80037d0:	f7fc ffce 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 80037d4:	2301      	movs	r3, #1
  test_failure_message = msg;
 80037d6:	4c0f      	ldr	r4, [pc, #60]	; (8003814 <rt_test_006_001_execute+0xf4>)
  test_local_fail      = true;
 80037d8:	490f      	ldr	r1, [pc, #60]	; (8003818 <rt_test_006_001_execute+0xf8>)
  test_global_fail     = true;
 80037da:	4a10      	ldr	r2, [pc, #64]	; (800381c <rt_test_006_001_execute+0xfc>)
  test_failure_message = msg;
 80037dc:	4810      	ldr	r0, [pc, #64]	; (8003820 <rt_test_006_001_execute+0x100>)
  test_local_fail      = true;
 80037de:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80037e0:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80037e2:	7013      	strb	r3, [r2, #0]
 80037e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037e8:	f7fe b962 	b.w	8001ab0 <chSysUnlock.lto_priv.19>
  test_local_fail      = true;
 80037ec:	2301      	movs	r3, #1
 80037ee:	490a      	ldr	r1, [pc, #40]	; (8003818 <rt_test_006_001_execute+0xf8>)
  test_global_fail     = true;
 80037f0:	4a0a      	ldr	r2, [pc, #40]	; (800381c <rt_test_006_001_execute+0xfc>)
  test_failure_message = msg;
 80037f2:	480b      	ldr	r0, [pc, #44]	; (8003820 <rt_test_006_001_execute+0x100>)
 80037f4:	4c0b      	ldr	r4, [pc, #44]	; (8003824 <rt_test_006_001_execute+0x104>)
  test_local_fail      = true;
 80037f6:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80037f8:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80037fa:	7013      	strb	r3, [r2, #0]
 80037fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037fe:	480a      	ldr	r0, [pc, #40]	; (8003828 <rt_test_006_001_execute+0x108>)
 8003800:	f7fc ffb6 	bl	8000770 <chSysHalt>
 8003804:	20001d3c 	.word	0x20001d3c
 8003808:	200016a8 	.word	0x200016a8
 800380c:	20000d70 	.word	0x20000d70
 8003810:	08011028 	.word	0x08011028
 8003814:	0800f2a8 	.word	0x0800f2a8
 8003818:	20001d39 	.word	0x20001d39
 800381c:	20001d38 	.word	0x20001d38
 8003820:	20001d34 	.word	0x20001d34
 8003824:	0800f2bc 	.word	0x0800f2bc
 8003828:	08010d40 	.word	0x08010d40
 800382c:	00000000 	.word	0x00000000

08003830 <chSemSignalI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003830:	4a12      	ldr	r2, [pc, #72]	; (800387c <chSemSignalI+0x4c>)
 *
 * @param[in] sp    pointer to a @p semaphore_t structure
 *
 * @iclass
 */
void chSemSignalI(semaphore_t *sp) {
 8003832:	b510      	push	{r4, lr}
 8003834:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003836:	2900      	cmp	r1, #0
 8003838:	db0d      	blt.n	8003856 <chSemSignalI+0x26>
 800383a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800383c:	2a00      	cmp	r2, #0
 800383e:	dd0a      	ble.n	8003856 <chSemSignalI+0x26>

  chDbgCheckClassI();
  chDbgCheck(sp != NULL);
 8003840:	4603      	mov	r3, r0
 8003842:	b128      	cbz	r0, 8003850 <chSemSignalI+0x20>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8003844:	6882      	ldr	r2, [r0, #8]
  return (bool)(qp->next == qp);
 8003846:	6800      	ldr	r0, [r0, #0]
 8003848:	2a00      	cmp	r2, #0
 800384a:	db0a      	blt.n	8003862 <chSemSignalI+0x32>
 800384c:	4298      	cmp	r0, r3
 800384e:	d005      	beq.n	800385c <chSemSignalI+0x2c>
  chDbgCheck(sp != NULL);
 8003850:	480b      	ldr	r0, [pc, #44]	; (8003880 <chSemSignalI+0x50>)
 8003852:	f7fc ff8d 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 8003856:	480b      	ldr	r0, [pc, #44]	; (8003884 <chSemSignalI+0x54>)
 8003858:	f7fc ff8a 	bl	8000770 <chSysHalt>
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  if (++sp->cnt <= (cnt_t)0) {
 800385c:	3201      	adds	r2, #1
 800385e:	6082      	str	r2, [r0, #8]
             chSchReadyI().*/
    thread_t *tp = (thread_t *)ch_queue_fifo_remove(&sp->queue);
    tp->u.rdymsg = MSG_OK;
    (void) chSchReadyI(tp);
  }
}
 8003860:	bd10      	pop	{r4, pc}
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8003862:	4298      	cmp	r0, r3
 8003864:	d0f4      	beq.n	8003850 <chSemSignalI+0x20>
    tp->u.rdymsg = MSG_OK;
 8003866:	2400      	movs	r4, #0
  qp->next       = p->next;
 8003868:	6801      	ldr	r1, [r0, #0]
  if (++sp->cnt <= (cnt_t)0) {
 800386a:	3201      	adds	r2, #1
 800386c:	609a      	str	r2, [r3, #8]
 800386e:	6019      	str	r1, [r3, #0]
  qp->next->prev = qp;
 8003870:	604b      	str	r3, [r1, #4]
    tp->u.rdymsg = MSG_OK;
 8003872:	6244      	str	r4, [r0, #36]	; 0x24
}
 8003874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    (void) chSchReadyI(tp);
 8003878:	f7fe bc4a 	b.w	8002110 <chSchReadyI>
 800387c:	20000d70 	.word	0x20000d70
 8003880:	08010e80 	.word	0x08010e80
 8003884:	0800f22c 	.word	0x0800f22c
	...

08003890 <thread2>:
static THD_FUNCTION(thread2, p) {
 8003890:	b510      	push	{r4, lr}
 8003892:	2320      	movs	r3, #32
 8003894:	b086      	sub	sp, #24
 8003896:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800389a:	4c2b      	ldr	r4, [pc, #172]	; (8003948 <thread2+0xb8>)
  _dbg_check_lock();
 800389c:	f7fc ffc0 	bl	8000820 <_dbg_check_lock>
 80038a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d144      	bne.n	8003930 <thread2+0xa0>
 80038a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dd41      	ble.n	8003930 <thread2+0xa0>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 80038ac:	69a3      	ldr	r3, [r4, #24]
 80038ae:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80038b2:	4a26      	ldr	r2, [pc, #152]	; (800394c <thread2+0xbc>)
 80038b4:	a801      	add	r0, sp, #4
 80038b6:	f7fe fb3b 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 80038ba:	2008      	movs	r0, #8
 80038bc:	f7fe fd10 	bl	80022e0 <chSchGoSleepS>
  chDbgCheckClassI();
 80038c0:	f7fd f83e 	bl	8000940 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 80038c4:	9b04      	ldr	r3, [sp, #16]
 80038c6:	b113      	cbz	r3, 80038ce <thread2+0x3e>
      chVTDoResetI(&vt);
 80038c8:	a801      	add	r0, sp, #4
 80038ca:	f7fe fbc9 	bl	8002060 <chVTDoResetI>
  _dbg_check_unlock();
 80038ce:	f7fc ffb7 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80038d2:	6823      	ldr	r3, [r4, #0]
 80038d4:	42a3      	cmp	r3, r4
 80038d6:	d004      	beq.n	80038e2 <thread2+0x52>
 80038d8:	69a2      	ldr	r2, [r4, #24]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	6892      	ldr	r2, [r2, #8]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d329      	bcc.n	8003936 <thread2+0xa6>
 80038e2:	2300      	movs	r3, #0
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	2320      	movs	r3, #32
 80038ea:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80038ee:	f7fc ff97 	bl	8000820 <_dbg_check_lock>
  chSemSignalI(&sem1); /* For coverage reasons */
 80038f2:	4817      	ldr	r0, [pc, #92]	; (8003950 <thread2+0xc0>)
 80038f4:	f7ff ff9c 	bl	8003830 <chSemSignalI>
 80038f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80038fa:	b9cb      	cbnz	r3, 8003930 <thread2+0xa0>
 80038fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038fe:	2b00      	cmp	r3, #0
 8003900:	dd16      	ble.n	8003930 <thread2+0xa0>
  chDbgCheckClassI();
 8003902:	f7fd f81d 	bl	8000940 <chDbgCheckClassI>
  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8003906:	6822      	ldr	r2, [r4, #0]
 8003908:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 800390a:	6892      	ldr	r2, [r2, #8]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	429a      	cmp	r2, r3
 8003910:	d814      	bhi.n	800393c <thread2+0xac>
  _dbg_check_unlock();
 8003912:	f7fc ff95 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003916:	6823      	ldr	r3, [r4, #0]
 8003918:	42a3      	cmp	r3, r4
 800391a:	d004      	beq.n	8003926 <thread2+0x96>
 800391c:	69a2      	ldr	r2, [r4, #24]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	6892      	ldr	r2, [r2, #8]
 8003922:	429a      	cmp	r2, r3
 8003924:	d30d      	bcc.n	8003942 <thread2+0xb2>
 8003926:	2300      	movs	r3, #0
 8003928:	f383 8811 	msr	BASEPRI, r3
}
 800392c:	b006      	add	sp, #24
 800392e:	bd10      	pop	{r4, pc}
    chSysHalt("SV#11");
 8003930:	4808      	ldr	r0, [pc, #32]	; (8003954 <thread2+0xc4>)
 8003932:	f7fc ff1d 	bl	8000770 <chSysHalt>
 8003936:	4808      	ldr	r0, [pc, #32]	; (8003958 <thread2+0xc8>)
 8003938:	f7fc ff1a 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 800393c:	f7ff f950 	bl	8002be0 <chSchDoReschedule>
 8003940:	e7e7      	b.n	8003912 <thread2+0x82>
 8003942:	4806      	ldr	r0, [pc, #24]	; (800395c <thread2+0xcc>)
 8003944:	f7fc ff14 	bl	8000770 <chSysHalt>
 8003948:	20000d70 	.word	0x20000d70
 800394c:	08002161 	.word	0x08002161
 8003950:	200016a8 	.word	0x200016a8
 8003954:	0800f204 	.word	0x0800f204
 8003958:	08010de4 	.word	0x08010de4
 800395c:	08010d40 	.word	0x08010d40

08003960 <thread4>:
static THD_FUNCTION(thread4, p) {
 8003960:	b510      	push	{r4, lr}
 8003962:	2320      	movs	r3, #32
 8003964:	4604      	mov	r4, r0
 8003966:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800396a:	f7fc ff59 	bl	8000820 <_dbg_check_lock>
 *
 * @iclass
 */
static inline void chBSemSignalI(binary_semaphore_t *bsp) {

  chDbgCheckClassI();
 800396e:	f7fc ffe7 	bl	8000940 <chDbgCheckClassI>

  if (bsp->sem.cnt < (cnt_t)1) {
 8003972:	68a3      	ldr	r3, [r4, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	dd1c      	ble.n	80039b2 <thread4+0x52>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003978:	4c13      	ldr	r4, [pc, #76]	; (80039c8 <thread4+0x68>)
 800397a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800397c:	b9b3      	cbnz	r3, 80039ac <thread4+0x4c>
 800397e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003980:	2b00      	cmp	r3, #0
 8003982:	dd13      	ble.n	80039ac <thread4+0x4c>
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8003988:	6892      	ldr	r2, [r2, #8]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	429a      	cmp	r2, r3
 800398e:	d814      	bhi.n	80039ba <thread4+0x5a>
  _dbg_check_unlock();
 8003990:	f7fc ff56 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	42a3      	cmp	r3, r4
 8003998:	d004      	beq.n	80039a4 <thread4+0x44>
 800399a:	69a2      	ldr	r2, [r4, #24]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	6892      	ldr	r2, [r2, #8]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d30d      	bcc.n	80039c0 <thread4+0x60>
 80039a4:	2300      	movs	r3, #0
 80039a6:	f383 8811 	msr	BASEPRI, r3
}
 80039aa:	bd10      	pop	{r4, pc}
    chSysHalt("SV#11");
 80039ac:	4807      	ldr	r0, [pc, #28]	; (80039cc <thread4+0x6c>)
 80039ae:	f7fc fedf 	bl	8000770 <chSysHalt>
    chSemSignalI(&bsp->sem);
 80039b2:	4620      	mov	r0, r4
 80039b4:	f7ff ff3c 	bl	8003830 <chSemSignalI>
 80039b8:	e7de      	b.n	8003978 <thread4+0x18>
    chSchDoRescheduleAhead();
 80039ba:	f7ff f911 	bl	8002be0 <chSchDoReschedule>
 80039be:	e7e7      	b.n	8003990 <thread4+0x30>
 80039c0:	4803      	ldr	r0, [pc, #12]	; (80039d0 <thread4+0x70>)
 80039c2:	f7fc fed5 	bl	8000770 <chSysHalt>
 80039c6:	bf00      	nop
 80039c8:	20000d70 	.word	0x20000d70
 80039cc:	0800f204 	.word	0x0800f204
 80039d0:	08010d40 	.word	0x08010d40
	...

080039e0 <chMtxLockS>:
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <chMtxLockS+0xe8>)
void chMtxLockS(mutex_t *mp) {
 80039e2:	b570      	push	{r4, r5, r6, lr}
 80039e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039e6:	bb62      	cbnz	r2, 8003a42 <chMtxLockS+0x62>
 80039e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039ea:	2a00      	cmp	r2, #0
 80039ec:	dd29      	ble.n	8003a42 <chMtxLockS+0x62>
  chDbgCheck(mp != NULL);
 80039ee:	4604      	mov	r4, r0
 80039f0:	b320      	cbz	r0, 8003a3c <chMtxLockS+0x5c>
  if (mp->owner != NULL) {
 80039f2:	6880      	ldr	r0, [r0, #8]
  return ch.rlist.current;
 80039f4:	699d      	ldr	r5, [r3, #24]
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d048      	beq.n	8003a8c <chMtxLockS+0xac>
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 80039fa:	68aa      	ldr	r2, [r5, #8]
 80039fc:	6883      	ldr	r3, [r0, #8]
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d207      	bcs.n	8003a12 <chMtxLockS+0x32>
        switch (tp->state) {
 8003a02:	f890 3020 	ldrb.w	r3, [r0, #32]
        tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 8003a06:	6082      	str	r2, [r0, #8]
        switch (tp->state) {
 8003a08:	2b06      	cmp	r3, #6
 8003a0a:	d044      	beq.n	8003a96 <chMtxLockS+0xb6>
 8003a0c:	2b07      	cmp	r3, #7
 8003a0e:	d029      	beq.n	8003a64 <chMtxLockS+0x84>
 8003a10:	b1f3      	cbz	r3, 8003a50 <chMtxLockS+0x70>
  ch_queue_t *cp = qp;
 8003a12:	4623      	mov	r3, r4
 8003a14:	e003      	b.n	8003a1e <chMtxLockS+0x3e>
  } while ((cp != qp) &&
 8003a16:	6899      	ldr	r1, [r3, #8]
 8003a18:	68aa      	ldr	r2, [r5, #8]
 8003a1a:	4291      	cmp	r1, r2
 8003a1c:	d302      	bcc.n	8003a24 <chMtxLockS+0x44>
    cp = cp->next;
 8003a1e:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8003a20:	429c      	cmp	r4, r3
 8003a22:	d1f8      	bne.n	8003a16 <chMtxLockS+0x36>
  tp->prev       = cp->prev;
 8003a24:	685a      	ldr	r2, [r3, #4]
      chSchGoSleepS(CH_STATE_WTMTX);
 8003a26:	2006      	movs	r0, #6
 8003a28:	e9c5 3200 	strd	r3, r2, [r5]
  tp->prev->next = tp;
 8003a2c:	6015      	str	r5, [r2, #0]
  cp->prev       = tp;
 8003a2e:	605d      	str	r5, [r3, #4]
      currtp->u.wtmtxp = mp;
 8003a30:	626c      	str	r4, [r5, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8003a32:	f7fe fc55 	bl	80022e0 <chSchGoSleepS>
      chDbgAssert(mp->owner == currtp, "not owner");
 8003a36:	68a3      	ldr	r3, [r4, #8]
 8003a38:	42ab      	cmp	r3, r5
 8003a3a:	d005      	beq.n	8003a48 <chMtxLockS+0x68>
  chDbgCheck(mp != NULL);
 8003a3c:	4823      	ldr	r0, [pc, #140]	; (8003acc <chMtxLockS+0xec>)
 8003a3e:	f7fc fe97 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8003a42:	4823      	ldr	r0, [pc, #140]	; (8003ad0 <chMtxLockS+0xf0>)
 8003a44:	f7fc fe94 	bl	8000770 <chSysHalt>
      chDbgAssert(currtp->mtxlist == mp, "not owned");
 8003a48:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a4a:	42a3      	cmp	r3, r4
 8003a4c:	d1f6      	bne.n	8003a3c <chMtxLockS+0x5c>
}
 8003a4e:	bd70      	pop	{r4, r5, r6, pc}
          tp->state = CH_STATE_CURRENT;
 8003a50:	2101      	movs	r1, #1
  p->prev->next = p->next;
 8003a52:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003a56:	f880 1020 	strb.w	r1, [r0, #32]
 8003a5a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8003a5c:	605a      	str	r2, [r3, #4]
          (void) chSchReadyI((thread_t *)ch_queue_dequeue(&tp->hdr.queue));
 8003a5e:	f7fe fb57 	bl	8002110 <chSchReadyI>
          break;
 8003a62:	e7d6      	b.n	8003a12 <chMtxLockS+0x32>
          ch_sch_prio_insert(ch_queue_dequeue(&tp->hdr.queue),
 8003a64:	6a46      	ldr	r6, [r0, #36]	; 0x24
  p->prev->next = p->next;
 8003a66:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003a6a:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8003a6c:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 8003a6e:	4633      	mov	r3, r6
 8003a70:	e003      	b.n	8003a7a <chMtxLockS+0x9a>
  } while ((cp != qp) &&
 8003a72:	6899      	ldr	r1, [r3, #8]
 8003a74:	6882      	ldr	r2, [r0, #8]
 8003a76:	4291      	cmp	r1, r2
 8003a78:	d302      	bcc.n	8003a80 <chMtxLockS+0xa0>
    cp = cp->next;
 8003a7a:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8003a7c:	429e      	cmp	r6, r3
 8003a7e:	d1f8      	bne.n	8003a72 <chMtxLockS+0x92>
  tp->prev       = cp->prev;
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	e9c0 3200 	strd	r3, r2, [r0]
  tp->prev->next = tp;
 8003a86:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8003a88:	6058      	str	r0, [r3, #4]
 8003a8a:	e7c2      	b.n	8003a12 <chMtxLockS+0x32>
    mp->next = currtp->mtxlist;
 8003a8c:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003a8e:	e9c4 5302 	strd	r5, r3, [r4, #8]
    currtp->mtxlist = mp;
 8003a92:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8003a94:	bd70      	pop	{r4, r5, r6, pc}
                             &tp->u.wtmtxp->queue);
 8003a96:	6a46      	ldr	r6, [r0, #36]	; 0x24
  p->prev->next = p->next;
 8003a98:	e9d0 3200 	ldrd	r3, r2, [r0]
 8003a9c:	6013      	str	r3, [r2, #0]
  p->next->prev = p->prev;
 8003a9e:	605a      	str	r2, [r3, #4]
  ch_queue_t *cp = qp;
 8003aa0:	4633      	mov	r3, r6
 8003aa2:	e003      	b.n	8003aac <chMtxLockS+0xcc>
  } while ((cp != qp) &&
 8003aa4:	6899      	ldr	r1, [r3, #8]
 8003aa6:	6882      	ldr	r2, [r0, #8]
 8003aa8:	4291      	cmp	r1, r2
 8003aaa:	d302      	bcc.n	8003ab2 <chMtxLockS+0xd2>
    cp = cp->next;
 8003aac:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 8003aae:	429e      	cmp	r6, r3
 8003ab0:	d1f8      	bne.n	8003aa4 <chMtxLockS+0xc4>
  tp->prev       = cp->prev;
 8003ab2:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 8003ab4:	6003      	str	r3, [r0, #0]
  tp->prev       = cp->prev;
 8003ab6:	6042      	str	r2, [r0, #4]
  tp->prev->next = tp;
 8003ab8:	6010      	str	r0, [r2, #0]
  cp->prev       = tp;
 8003aba:	6058      	str	r0, [r3, #4]
          tp = tp->u.wtmtxp->owner;
 8003abc:	68b0      	ldr	r0, [r6, #8]
      while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 8003abe:	68aa      	ldr	r2, [r5, #8]
 8003ac0:	6883      	ldr	r3, [r0, #8]
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d39d      	bcc.n	8003a02 <chMtxLockS+0x22>
 8003ac6:	e7a4      	b.n	8003a12 <chMtxLockS+0x32>
 8003ac8:	20000d70 	.word	0x20000d70
 8003acc:	08010ee4 	.word	0x08010ee4
 8003ad0:	0800f204 	.word	0x0800f204
	...

08003ae0 <chMtxLock>:
 8003ae0:	2320      	movs	r3, #32
void chMtxLock(mutex_t *mp) {
 8003ae2:	b510      	push	{r4, lr}
 8003ae4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003ae8:	4c11      	ldr	r4, [pc, #68]	; (8003b30 <chMtxLock+0x50>)
 8003aea:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003aee:	4313      	orrs	r3, r2
 8003af0:	d115      	bne.n	8003b1e <chMtxLock+0x3e>
  _dbg_enter_lock();
 8003af2:	2301      	movs	r3, #1
 8003af4:	6363      	str	r3, [r4, #52]	; 0x34
  chMtxLockS(mp);
 8003af6:	f7ff ff73 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003afa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003afc:	b993      	cbnz	r3, 8003b24 <chMtxLock+0x44>
 8003afe:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	dd0f      	ble.n	8003b24 <chMtxLock+0x44>
 8003b04:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8003b06:	6363      	str	r3, [r4, #52]	; 0x34
 8003b08:	42a2      	cmp	r2, r4
 8003b0a:	d004      	beq.n	8003b16 <chMtxLock+0x36>
 8003b0c:	69a1      	ldr	r1, [r4, #24]
 8003b0e:	6893      	ldr	r3, [r2, #8]
 8003b10:	688a      	ldr	r2, [r1, #8]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d309      	bcc.n	8003b2a <chMtxLock+0x4a>
 8003b16:	2300      	movs	r3, #0
 8003b18:	f383 8811 	msr	BASEPRI, r3
}
 8003b1c:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 8003b1e:	4805      	ldr	r0, [pc, #20]	; (8003b34 <chMtxLock+0x54>)
 8003b20:	f7fc fe26 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8003b24:	4804      	ldr	r0, [pc, #16]	; (8003b38 <chMtxLock+0x58>)
 8003b26:	f7fc fe23 	bl	8000770 <chSysHalt>
 8003b2a:	4804      	ldr	r0, [pc, #16]	; (8003b3c <chMtxLock+0x5c>)
 8003b2c:	f7fc fe20 	bl	8000770 <chSysHalt>
 8003b30:	20000d70 	.word	0x20000d70
 8003b34:	0800f20c 	.word	0x0800f20c
 8003b38:	0800f214 	.word	0x0800f214
 8003b3c:	08010f48 	.word	0x08010f48

08003b40 <thread4B>:
  chThdSleepMilliseconds(150);
 8003b40:	f240 50dc 	movw	r0, #1500	; 0x5dc
static THD_FUNCTION(thread4B, p) {
 8003b44:	b510      	push	{r4, lr}
  chThdSleepMilliseconds(150);
 8003b46:	f7ff fa6b 	bl	8003020 <chThdSleep>
 8003b4a:	2320      	movs	r3, #32
 8003b4c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003b50:	f7fc fe66 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003b54:	4c14      	ldr	r4, [pc, #80]	; (8003ba8 <thread4B+0x68>)
  chMtxLockS(&m2);   /* For coverage of the chMtxLockS() function variant.*/
 8003b56:	4815      	ldr	r0, [pc, #84]	; (8003bac <thread4B+0x6c>)
 8003b58:	f7ff ff42 	bl	80039e0 <chMtxLockS>
  chMtxUnlockS(&m2); /* For coverage of the chMtxUnlockS() function variant.*/
 8003b5c:	4813      	ldr	r0, [pc, #76]	; (8003bac <thread4B+0x6c>)
 8003b5e:	f7fe fb4f 	bl	8002200 <chMtxUnlockS>
 8003b62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003b64:	b9b3      	cbnz	r3, 8003b94 <thread4B+0x54>
 8003b66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	dd13      	ble.n	8003b94 <thread4B+0x54>
  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8003b6c:	6822      	ldr	r2, [r4, #0]
 8003b6e:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8003b70:	6892      	ldr	r2, [r2, #8]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d810      	bhi.n	8003b9a <thread4B+0x5a>
  _dbg_check_unlock();
 8003b78:	f7fc fe62 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003b7c:	6823      	ldr	r3, [r4, #0]
 8003b7e:	42a3      	cmp	r3, r4
 8003b80:	d004      	beq.n	8003b8c <thread4B+0x4c>
 8003b82:	69a2      	ldr	r2, [r4, #24]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	6892      	ldr	r2, [r2, #8]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d309      	bcc.n	8003ba0 <thread4B+0x60>
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f383 8811 	msr	BASEPRI, r3
}
 8003b92:	bd10      	pop	{r4, pc}
    chSysHalt("SV#11");
 8003b94:	4806      	ldr	r0, [pc, #24]	; (8003bb0 <thread4B+0x70>)
 8003b96:	f7fc fdeb 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 8003b9a:	f7ff f821 	bl	8002be0 <chSchDoReschedule>
 8003b9e:	e7eb      	b.n	8003b78 <thread4B+0x38>
 8003ba0:	4804      	ldr	r0, [pc, #16]	; (8003bb4 <thread4B+0x74>)
 8003ba2:	f7fc fde5 	bl	8000770 <chSysHalt>
 8003ba6:	bf00      	nop
 8003ba8:	20000d70 	.word	0x20000d70
 8003bac:	20000828 	.word	0x20000828
 8003bb0:	0800f204 	.word	0x0800f204
 8003bb4:	08010be0 	.word	0x08010be0
	...

08003bc0 <chMtxUnlock>:
void chMtxUnlock(mutex_t *mp) {
 8003bc0:	b570      	push	{r4, r5, r6, lr}
 8003bc2:	4e26      	ldr	r6, [pc, #152]	; (8003c5c <chMtxUnlock+0x9c>)
 8003bc4:	69b5      	ldr	r5, [r6, #24]
  chDbgCheck(mp != NULL);
 8003bc6:	b150      	cbz	r0, 8003bde <chMtxUnlock+0x1e>
 8003bc8:	4604      	mov	r4, r0
 8003bca:	2320      	movs	r3, #32
 8003bcc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003bd0:	f7fc fe26 	bl	8000820 <_dbg_check_lock>
  chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 8003bd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8003bd6:	b113      	cbz	r3, 8003bde <chMtxUnlock+0x1e>
  chDbgAssert(currtp->mtxlist->owner == currtp, "ownership failure");
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	42aa      	cmp	r2, r5
 8003bdc:	d002      	beq.n	8003be4 <chMtxUnlock+0x24>
  chDbgCheck(mp != NULL);
 8003bde:	4820      	ldr	r0, [pc, #128]	; (8003c60 <chMtxUnlock+0xa0>)
 8003be0:	f7fc fdc6 	bl	8000770 <chSysHalt>
    chDbgAssert(currtp->mtxlist == mp, "not next in list");
 8003be4:	42a3      	cmp	r3, r4
 8003be6:	d1fa      	bne.n	8003bde <chMtxUnlock+0x1e>
    currtp->mtxlist = mp->next;
 8003be8:	68e2      	ldr	r2, [r4, #12]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003bea:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8003bec:	63aa      	str	r2, [r5, #56]	; 0x38
 8003bee:	b9f9      	cbnz	r1, 8003c30 <chMtxUnlock+0x70>
 8003bf0:	6b70      	ldr	r0, [r6, #52]	; 0x34
 8003bf2:	2800      	cmp	r0, #0
 8003bf4:	dd1c      	ble.n	8003c30 <chMtxUnlock+0x70>
    if (chMtxQueueNotEmptyS(mp)) {
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	4284      	cmp	r4, r0
 8003bfa:	d01c      	beq.n	8003c36 <chMtxUnlock+0x76>
      tprio_t newprio = currtp->realprio;
 8003bfc:	6beb      	ldr	r3, [r5, #60]	; 0x3c
      while (lmp != NULL) {
 8003bfe:	b14a      	cbz	r2, 8003c14 <chMtxUnlock+0x54>
  return (bool)(qp->next != qp);
 8003c00:	6811      	ldr	r1, [r2, #0]
        if (chMtxQueueNotEmptyS(lmp) &&
 8003c02:	428a      	cmp	r2, r1
 8003c04:	d003      	beq.n	8003c0e <chMtxUnlock+0x4e>
 8003c06:	6889      	ldr	r1, [r1, #8]
 8003c08:	428b      	cmp	r3, r1
 8003c0a:	bf38      	it	cc
 8003c0c:	460b      	movcc	r3, r1
        lmp = lmp->next;
 8003c0e:	68d2      	ldr	r2, [r2, #12]
      while (lmp != NULL) {
 8003c10:	2a00      	cmp	r2, #0
 8003c12:	d1f5      	bne.n	8003c00 <chMtxUnlock+0x40>
      currtp->hdr.pqueue.prio = newprio;
 8003c14:	60ab      	str	r3, [r5, #8]
  ch_queue_t *p = qp->next;
 8003c16:	6820      	ldr	r0, [r4, #0]
      mp->next = tp->mtxlist;
 8003c18:	6b82      	ldr	r2, [r0, #56]	; 0x38
  qp->next       = p->next;
 8003c1a:	6803      	ldr	r3, [r0, #0]
 8003c1c:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8003c1e:	605c      	str	r4, [r3, #4]
 8003c20:	e9c4 0202 	strd	r0, r2, [r4, #8]
      tp->mtxlist = mp;
 8003c24:	6384      	str	r4, [r0, #56]	; 0x38
      (void) chSchReadyI(tp);
 8003c26:	f7fe fa73 	bl	8002110 <chSchReadyI>
      chSchRescheduleS();
 8003c2a:	f7ff f811 	bl	8002c50 <chSchRescheduleS>
 8003c2e:	e003      	b.n	8003c38 <chMtxUnlock+0x78>
    chSysHalt("SV#11");
 8003c30:	480c      	ldr	r0, [pc, #48]	; (8003c64 <chMtxUnlock+0xa4>)
 8003c32:	f7fc fd9d 	bl	8000770 <chSysHalt>
      mp->owner = NULL;
 8003c36:	6099      	str	r1, [r3, #8]
  _dbg_check_unlock();
 8003c38:	f7fc fe02 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003c3c:	6833      	ldr	r3, [r6, #0]
 8003c3e:	42b3      	cmp	r3, r6
 8003c40:	d004      	beq.n	8003c4c <chMtxUnlock+0x8c>
 8003c42:	69b2      	ldr	r2, [r6, #24]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	6892      	ldr	r2, [r2, #8]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d303      	bcc.n	8003c54 <chMtxUnlock+0x94>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	f383 8811 	msr	BASEPRI, r3
}
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	4804      	ldr	r0, [pc, #16]	; (8003c68 <chMtxUnlock+0xa8>)
 8003c56:	f7fc fd8b 	bl	8000770 <chSysHalt>
 8003c5a:	bf00      	nop
 8003c5c:	20000d70 	.word	0x20000d70
 8003c60:	08010dc0 	.word	0x08010dc0
 8003c64:	0800f204 	.word	0x0800f204
 8003c68:	08010f48 	.word	0x08010f48
 8003c6c:	00000000 	.word	0x00000000

08003c70 <thread4A>:
static THD_FUNCTION(thread4A, p) {
 8003c70:	b510      	push	{r4, lr}
 8003c72:	2320      	movs	r3, #32
 8003c74:	b086      	sub	sp, #24
 8003c76:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003c7a:	4c25      	ldr	r4, [pc, #148]	; (8003d10 <thread4A+0xa0>)
  _dbg_check_lock();
 8003c7c:	f7fc fdd0 	bl	8000820 <_dbg_check_lock>
 8003c80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13b      	bne.n	8003cfe <thread4A+0x8e>
 8003c86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	dd38      	ble.n	8003cfe <thread4A+0x8e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8003c8c:	69a3      	ldr	r3, [r4, #24]
 8003c8e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8003c92:	4a20      	ldr	r2, [pc, #128]	; (8003d14 <thread4A+0xa4>)
 8003c94:	a801      	add	r0, sp, #4
 8003c96:	f7fe f94b 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 8003c9a:	2008      	movs	r0, #8
 8003c9c:	f7fe fb20 	bl	80022e0 <chSchGoSleepS>
 8003ca0:	f7fc fe4e 	bl	8000940 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8003ca4:	9b04      	ldr	r3, [sp, #16]
 8003ca6:	b113      	cbz	r3, 8003cae <thread4A+0x3e>
      chVTDoResetI(&vt);
 8003ca8:	a801      	add	r0, sp, #4
 8003caa:	f7fe f9d9 	bl	8002060 <chVTDoResetI>
  _dbg_check_unlock();
 8003cae:	f7fc fdc7 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	42a3      	cmp	r3, r4
 8003cb6:	d004      	beq.n	8003cc2 <thread4A+0x52>
 8003cb8:	69a2      	ldr	r2, [r4, #24]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	6892      	ldr	r2, [r2, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d320      	bcc.n	8003d04 <thread4A+0x94>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f383 8811 	msr	BASEPRI, r3
 8003cc8:	2320      	movs	r3, #32
 8003cca:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003cce:	f7fc fda7 	bl	8000820 <_dbg_check_lock>
  chMtxLockS(mp);
 8003cd2:	4811      	ldr	r0, [pc, #68]	; (8003d18 <thread4A+0xa8>)
 8003cd4:	f7ff fe84 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 8003cd8:	f7fc fdb2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	42a3      	cmp	r3, r4
 8003ce0:	d004      	beq.n	8003cec <thread4A+0x7c>
 8003ce2:	69a2      	ldr	r2, [r4, #24]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d30e      	bcc.n	8003d0a <thread4A+0x9a>
 8003cec:	2300      	movs	r3, #0
 8003cee:	f383 8811 	msr	BASEPRI, r3
  chMtxUnlock(&m1);
 8003cf2:	4809      	ldr	r0, [pc, #36]	; (8003d18 <thread4A+0xa8>)
}
 8003cf4:	b006      	add	sp, #24
 8003cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  chMtxUnlock(&m1);
 8003cfa:	f7ff bf61 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#11");
 8003cfe:	4807      	ldr	r0, [pc, #28]	; (8003d1c <thread4A+0xac>)
 8003d00:	f7fc fd36 	bl	8000770 <chSysHalt>
 8003d04:	4806      	ldr	r0, [pc, #24]	; (8003d20 <thread4A+0xb0>)
 8003d06:	f7fc fd33 	bl	8000770 <chSysHalt>
 8003d0a:	4806      	ldr	r0, [pc, #24]	; (8003d24 <thread4A+0xb4>)
 8003d0c:	f7fc fd30 	bl	8000770 <chSysHalt>
 8003d10:	20000d70 	.word	0x20000d70
 8003d14:	08002161 	.word	0x08002161
 8003d18:	20000818 	.word	0x20000818
 8003d1c:	0800f204 	.word	0x0800f204
 8003d20:	08010de4 	.word	0x08010de4
 8003d24:	08010f48 	.word	0x08010f48
	...

08003d30 <chEvtBroadcastFlagsI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <chEvtBroadcastFlagsI+0x40>)
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8003d32:	b570      	push	{r4, r5, r6, lr}
 8003d34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d36:	2a00      	cmp	r2, #0
 8003d38:	db16      	blt.n	8003d68 <chEvtBroadcastFlagsI+0x38>
 8003d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dd13      	ble.n	8003d68 <chEvtBroadcastFlagsI+0x38>
  elp = esp->next;
 8003d40:	6804      	ldr	r4, [r0, #0]
 8003d42:	4606      	mov	r6, r0
  while (elp != (event_listener_t *)esp) {
 8003d44:	42a0      	cmp	r0, r4
 8003d46:	460d      	mov	r5, r1
 8003d48:	d00d      	beq.n	8003d66 <chEvtBroadcastFlagsI+0x36>
    elp->flags |= flags;
 8003d4a:	68e3      	ldr	r3, [r4, #12]
 8003d4c:	432b      	orrs	r3, r5
 8003d4e:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8003d50:	b115      	cbz	r5, 8003d58 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 8003d52:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8003d54:	421d      	tst	r5, r3
 8003d56:	d003      	beq.n	8003d60 <chEvtBroadcastFlagsI+0x30>
      chEvtSignalI(elp->listener, elp->events);
 8003d58:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8003d5c:	f7fe fa90 	bl	8002280 <chEvtSignalI>
    elp = elp->next;
 8003d60:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d1f1      	bne.n	8003d4a <chEvtBroadcastFlagsI+0x1a>
}
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#10");
 8003d68:	4802      	ldr	r0, [pc, #8]	; (8003d74 <chEvtBroadcastFlagsI+0x44>)
 8003d6a:	f7fc fd01 	bl	8000770 <chSysHalt>
 8003d6e:	bf00      	nop
 8003d70:	20000d70 	.word	0x20000d70
 8003d74:	0800f22c 	.word	0x0800f22c
	...

08003d80 <sduDataTransmitted>:
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8003d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8003d82:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8003d86:	6a9e      	ldr	r6, [r3, #40]	; 0x28
  if (sdup == NULL) {
 8003d88:	b356      	cbz	r6, 8003de0 <sduDataTransmitted+0x60>
 8003d8a:	2320      	movs	r3, #32
 8003d8c:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003d90:	4b2b      	ldr	r3, [pc, #172]	; (8003e40 <sduDataTransmitted+0xc0>)
 8003d92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d94:	2a00      	cmp	r2, #0
 8003d96:	dd01      	ble.n	8003d9c <sduDataTransmitted+0x1c>
 8003d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9a:	b112      	cbz	r2, 8003da2 <sduDataTransmitted+0x22>
    chSysHalt("SV#6");
 8003d9c:	4829      	ldr	r0, [pc, #164]	; (8003e44 <sduDataTransmitted+0xc4>)
 8003d9e:	f7fc fce7 	bl	8000770 <chSysHalt>
 8003da2:	4604      	mov	r4, r0
 8003da4:	460d      	mov	r5, r1
  _dbg_enter_lock();
 8003da6:	2201      	movs	r2, #1
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8003da8:	2108      	movs	r1, #8
 8003daa:	1d30      	adds	r0, r6, #4
 8003dac:	eb04 0785 	add.w	r7, r4, r5, lsl #2
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
 8003db2:	f7ff ffbd 	bl	8003d30 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	b98b      	cbnz	r3, 8003de2 <sduDataTransmitted+0x62>
  osalDbgCheckClassI();
 8003dbe:	f7fc fdbf 	bl	8000940 <chDbgCheckClassI>
  if (obqIsEmptyI(obqp)) {
 8003dc2:	e9d6 3215 	ldrd	r3, r2, [r6, #84]	; 0x54
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d021      	beq.n	8003e0e <sduDataTransmitted+0x8e>
    usbStartTransmitI(usbp, ep, buf, n);
 8003dca:	4629      	mov	r1, r5
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f852 3b04 	ldr.w	r3, [r2], #4
 8003dd2:	f7fc fe0d 	bl	80009f0 <usbStartTransmitI>
  _dbg_check_unlock_from_isr();
 8003dd6:	f7fc fd9b 	bl	8000910 <_dbg_check_unlock_from_isr>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f383 8811 	msr	BASEPRI, r3
}
 8003de0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  osalDbgCheckClassI();
 8003de2:	f7fc fdad 	bl	8000940 <chDbgCheckClassI>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8003de6:	e9d6 2315 	ldrd	r2, r3, [r6, #84]	; 0x54
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d022      	beq.n	8003e34 <sduDataTransmitted+0xb4>
  obqp->bcounter++;
 8003dee:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8003df0:	3201      	adds	r2, #1
 8003df2:	6532      	str	r2, [r6, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 8003df4:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8003df6:	4413      	add	r3, r2
  if (obqp->brdptr >= obqp->btop) {
 8003df8:	6df2      	ldr	r2, [r6, #92]	; 0x5c
  obqp->brdptr += obqp->bsize;
 8003dfa:	65b3      	str	r3, [r6, #88]	; 0x58
  if (obqp->brdptr >= obqp->btop) {
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d301      	bcc.n	8003e04 <sduDataTransmitted+0x84>
    obqp->brdptr = obqp->buffers;
 8003e00:	6eb3      	ldr	r3, [r6, #104]	; 0x68
 8003e02:	65b3      	str	r3, [r6, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8003e04:	f106 0044 	add.w	r0, r6, #68	; 0x44
 8003e08:	f00a f892 	bl	800df30 <chThdDequeueNextI.constprop.0>
 8003e0c:	e7d7      	b.n	8003dbe <sduDataTransmitted+0x3e>
  if (obqIsEmptyI(obqp)) {
 8003e0e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0da      	beq.n	8003dca <sduDataTransmitted+0x4a>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	695a      	ldr	r2, [r3, #20]
 8003e18:	6812      	ldr	r2, [r2, #0]
 8003e1a:	2a00      	cmp	r2, #0
 8003e1c:	d0db      	beq.n	8003dd6 <sduDataTransmitted+0x56>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 8003e1e:	8a1b      	ldrh	r3, [r3, #16]
 8003e20:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1d7      	bne.n	8003dd6 <sduDataTransmitted+0x56>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 8003e26:	4629      	mov	r1, r5
 8003e28:	4620      	mov	r0, r4
 8003e2a:	f104 0274 	add.w	r2, r4, #116	; 0x74
 8003e2e:	f7fc fddf 	bl	80009f0 <usbStartTransmitI>
 8003e32:	e7d0      	b.n	8003dd6 <sduDataTransmitted+0x56>
  osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 8003e34:	6d32      	ldr	r2, [r6, #80]	; 0x50
 8003e36:	2a00      	cmp	r2, #0
 8003e38:	d0d9      	beq.n	8003dee <sduDataTransmitted+0x6e>
 8003e3a:	4803      	ldr	r0, [pc, #12]	; (8003e48 <sduDataTransmitted+0xc8>)
 8003e3c:	f7fc fc98 	bl	8000770 <chSysHalt>
 8003e40:	20000d70 	.word	0x20000d70
 8003e44:	0800f21c 	.word	0x0800f21c
 8003e48:	08010e9c 	.word	0x08010e9c
 8003e4c:	00000000 	.word	0x00000000

08003e50 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8003e50:	3111      	adds	r1, #17
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8003e52:	b570      	push	{r4, r5, r6, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8003e54:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8003e58:	b324      	cbz	r4, 8003ea4 <sduDataReceived+0x54>
 8003e5a:	2320      	movs	r3, #32
 8003e5c:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003e60:	4d25      	ldr	r5, [pc, #148]	; (8003ef8 <sduDataReceived+0xa8>)
 8003e62:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	dd01      	ble.n	8003e6c <sduDataReceived+0x1c>
 8003e68:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003e6a:	b113      	cbz	r3, 8003e72 <sduDataReceived+0x22>
    chSysHalt("SV#6");
 8003e6c:	4823      	ldr	r0, [pc, #140]	; (8003efc <sduDataReceived+0xac>)
 8003e6e:	f7fc fc7f 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 8003e72:	2101      	movs	r1, #1
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8003e74:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8003e78:	6813      	ldr	r3, [r2, #0]
 8003e7a:	6369      	str	r1, [r5, #52]	; 0x34
 8003e7c:	7952      	ldrb	r2, [r2, #5]
 8003e7e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	685e      	ldr	r6, [r3, #4]
  if (size > (size_t)0) {
 8003e88:	b96e      	cbnz	r6, 8003ea6 <sduDataReceived+0x56>
  (void) sdu_start_receive(sdup);
 8003e8a:	4620      	mov	r0, r4
 8003e8c:	f00b f8a0 	bl	800efd0 <sdu_start_receive.isra.0>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003e90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	dd2c      	ble.n	8003ef0 <sduDataReceived+0xa0>
 8003e96:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	dd29      	ble.n	8003ef0 <sduDataReceived+0xa0>
  _dbg_leave_lock();
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	636b      	str	r3, [r5, #52]	; 0x34
 8003ea0:	f383 8811 	msr	BASEPRI, r3
}
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
  chEvtBroadcastFlagsI(esp, flags);
 8003ea6:	2104      	movs	r1, #4
 8003ea8:	1860      	adds	r0, r4, r1
 8003eaa:	f7ff ff41 	bl	8003d30 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
 8003eae:	f7fc fd47 	bl	8000940 <chDbgCheckClassI>
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8003eb2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003eb4:	3b04      	subs	r3, #4
 8003eb6:	429e      	cmp	r6, r3
 8003eb8:	d817      	bhi.n	8003eea <sduDataReceived+0x9a>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 8003eba:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d010      	beq.n	8003ee4 <sduDataReceived+0x94>
  *((size_t *)ibqp->bwrptr) = size;
 8003ec2:	601e      	str	r6, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8003ec4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8003ec6:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8003ec8:	440b      	add	r3, r1
  if (ibqp->bwrptr >= ibqp->btop) {
 8003eca:	6a61      	ldr	r1, [r4, #36]	; 0x24
  ibqp->bcounter++;
 8003ecc:	3201      	adds	r2, #1
  if (ibqp->bwrptr >= ibqp->btop) {
 8003ece:	428b      	cmp	r3, r1
  ibqp->bcounter++;
 8003ed0:	61a2      	str	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8003ed2:	61e3      	str	r3, [r4, #28]
  if (ibqp->bwrptr >= ibqp->btop) {
 8003ed4:	d301      	bcc.n	8003eda <sduDataReceived+0x8a>
    ibqp->bwrptr = ibqp->buffers;
 8003ed6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ed8:	61e3      	str	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 8003eda:	f104 000c 	add.w	r0, r4, #12
 8003ede:	f00a f827 	bl	800df30 <chThdDequeueNextI.constprop.0>
 8003ee2:	e7d2      	b.n	8003e8a <sduDataReceived+0x3a>
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 8003ee4:	69a2      	ldr	r2, [r4, #24]
 8003ee6:	2a00      	cmp	r2, #0
 8003ee8:	d0eb      	beq.n	8003ec2 <sduDataReceived+0x72>
  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 8003eea:	4805      	ldr	r0, [pc, #20]	; (8003f00 <sduDataReceived+0xb0>)
 8003eec:	f7fc fc40 	bl	8000770 <chSysHalt>
    chSysHalt("SV#7");
 8003ef0:	4804      	ldr	r0, [pc, #16]	; (8003f04 <sduDataReceived+0xb4>)
 8003ef2:	f7fc fc3d 	bl	8000770 <chSysHalt>
 8003ef6:	bf00      	nop
 8003ef8:	20000d70 	.word	0x20000d70
 8003efc:	0800f21c 	.word	0x0800f21c
 8003f00:	08011058 	.word	0x08011058
 8003f04:	0800f224 	.word	0x0800f224
	...

08003f10 <chMsgRelease>:
 * @param[in] tp        pointer to the thread
 * @param[in] msg       message to be returned to the sender
 *
 * @api
 */
void chMsgRelease(thread_t *tp, msg_t msg) {
 8003f10:	b570      	push	{r4, r5, r6, lr}
 8003f12:	2320      	movs	r3, #32
 8003f14:	4604      	mov	r4, r0
 8003f16:	460d      	mov	r5, r1
 8003f18:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8003f1c:	f7fc fc80 	bl	8000820 <_dbg_check_lock>

  chSysLock();
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 8003f20:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003f24:	2b0d      	cmp	r3, #13
 8003f26:	d11e      	bne.n	8003f66 <chMsgRelease+0x56>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003f28:	4e13      	ldr	r6, [pc, #76]	; (8003f78 <chMsgRelease+0x68>)
 8003f2a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f2c:	b9c3      	cbnz	r3, 8003f60 <chMsgRelease+0x50>
 8003f2e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	dd15      	ble.n	8003f60 <chMsgRelease+0x50>
 */
static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {

  chDbgCheckClassS();

  chSchWakeupS(tp, msg);
 8003f34:	4629      	mov	r1, r5
 8003f36:	4620      	mov	r0, r4
 8003f38:	f7fe fe02 	bl	8002b40 <chSchWakeupS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003f3c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8003f3e:	b9ab      	cbnz	r3, 8003f6c <chMsgRelease+0x5c>
 8003f40:	6b72      	ldr	r2, [r6, #52]	; 0x34
 8003f42:	2a00      	cmp	r2, #0
 8003f44:	dd12      	ble.n	8003f6c <chMsgRelease+0x5c>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8003f46:	6832      	ldr	r2, [r6, #0]
  _dbg_leave_lock();
 8003f48:	6373      	str	r3, [r6, #52]	; 0x34
 8003f4a:	42b2      	cmp	r2, r6
 8003f4c:	d004      	beq.n	8003f58 <chMsgRelease+0x48>
 8003f4e:	69b1      	ldr	r1, [r6, #24]
 8003f50:	6893      	ldr	r3, [r2, #8]
 8003f52:	688a      	ldr	r2, [r1, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d30c      	bcc.n	8003f72 <chMsgRelease+0x62>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f383 8811 	msr	BASEPRI, r3
  chMsgReleaseS(tp, msg);
  chSysUnlock();
}
 8003f5e:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#11");
 8003f60:	4806      	ldr	r0, [pc, #24]	; (8003f7c <chMsgRelease+0x6c>)
 8003f62:	f7fc fc05 	bl	8000770 <chSysHalt>
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 8003f66:	4806      	ldr	r0, [pc, #24]	; (8003f80 <chMsgRelease+0x70>)
 8003f68:	f7fc fc02 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8003f6c:	4805      	ldr	r0, [pc, #20]	; (8003f84 <chMsgRelease+0x74>)
 8003f6e:	f7fc fbff 	bl	8000770 <chSysHalt>
 8003f72:	4805      	ldr	r0, [pc, #20]	; (8003f88 <chMsgRelease+0x78>)
 8003f74:	f7fc fbfc 	bl	8000770 <chSysHalt>
 8003f78:	20000d70 	.word	0x20000d70
 8003f7c:	0800f204 	.word	0x0800f204
 8003f80:	08010b70 	.word	0x08010b70
 8003f84:	0800f214 	.word	0x0800f214
 8003f88:	08010cb8 	.word	0x08010cb8
 8003f8c:	00000000 	.word	0x00000000

08003f90 <bmk_thread1.lto_priv.0>:
static THD_FUNCTION(bmk_thread1, p) {
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	2520      	movs	r5, #32
  _dbg_enter_lock();
 8003f94:	2601      	movs	r6, #1
 8003f96:	4c22      	ldr	r4, [pc, #136]	; (8004020 <bmk_thread1.lto_priv.0+0x90>)
 8003f98:	f385 8811 	msr	BASEPRI, r5
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003f9c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	d124      	bne.n	8003fee <bmk_thread1.lto_priv.0+0x5e>
  if (!chMsgIsPendingI(currp)) {
 8003fa4:	69a2      	ldr	r2, [r4, #24]
  _dbg_enter_lock();
 8003fa6:	6366      	str	r6, [r4, #52]	; 0x34
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8003fa8:	4613      	mov	r3, r2
 8003faa:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 8003fae:	4298      	cmp	r0, r3
 8003fb0:	d020      	beq.n	8003ff4 <bmk_thread1.lto_priv.0+0x64>
  tp->state = CH_STATE_SNDMSG;
 8003fb2:	f04f 0c0d 	mov.w	ip, #13
  qp->next       = p->next;
 8003fb6:	6801      	ldr	r1, [r0, #0]
 8003fb8:	62d1      	str	r1, [r2, #44]	; 0x2c
  qp->next->prev = qp;
 8003fba:	604b      	str	r3, [r1, #4]
 8003fbc:	f880 c020 	strb.w	ip, [r0, #32]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003fc0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fc2:	b9fb      	cbnz	r3, 8004004 <bmk_thread1.lto_priv.0+0x74>
 8003fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fc6:	2900      	cmp	r1, #0
 8003fc8:	dd1c      	ble.n	8004004 <bmk_thread1.lto_priv.0+0x74>
  _dbg_leave_lock();
 8003fca:	6363      	str	r3, [r4, #52]	; 0x34
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	42a3      	cmp	r3, r4
 8003fd0:	d003      	beq.n	8003fda <bmk_thread1.lto_priv.0+0x4a>
 8003fd2:	6892      	ldr	r2, [r2, #8]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d31e      	bcc.n	8004018 <bmk_thread1.lto_priv.0+0x88>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 8003fe0:	f890 3020 	ldrb.w	r3, [r0, #32]
 8003fe4:	2b0d      	cmp	r3, #13
 8003fe6:	d010      	beq.n	800400a <bmk_thread1.lto_priv.0+0x7a>
 8003fe8:	480e      	ldr	r0, [pc, #56]	; (8004024 <bmk_thread1.lto_priv.0+0x94>)
 8003fea:	f7fc fbc1 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 8003fee:	480e      	ldr	r0, [pc, #56]	; (8004028 <bmk_thread1.lto_priv.0+0x98>)
 8003ff0:	f7fc fbbe 	bl	8000770 <chSysHalt>
    chSchGoSleepS(CH_STATE_WTMSG);
 8003ff4:	200e      	movs	r0, #14
 8003ff6:	f7fe f973 	bl	80022e0 <chSchGoSleepS>
  tp = (thread_t *)ch_queue_fifo_remove(&currp->msgqueue);
 8003ffa:	69a2      	ldr	r2, [r4, #24]
  ch_queue_t *p = qp->next;
 8003ffc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003ffe:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 8004002:	e7d6      	b.n	8003fb2 <bmk_thread1.lto_priv.0+0x22>
    chSysHalt("SV#5");
 8004004:	4809      	ldr	r0, [pc, #36]	; (800402c <bmk_thread1.lto_priv.0+0x9c>)
 8004006:	f7fc fbb3 	bl	8000770 <chSysHalt>
  return tp->u.sentmsg;
 800400a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    chMsgRelease(tp, msg);
 800400c:	4639      	mov	r1, r7
 800400e:	f7ff ff7f 	bl	8003f10 <chMsgRelease>
  } while (msg);
 8004012:	2f00      	cmp	r7, #0
 8004014:	d1c0      	bne.n	8003f98 <bmk_thread1.lto_priv.0+0x8>
}
 8004016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004018:	4805      	ldr	r0, [pc, #20]	; (8004030 <bmk_thread1.lto_priv.0+0xa0>)
 800401a:	f7fc fba9 	bl	8000770 <chSysHalt>
 800401e:	bf00      	nop
 8004020:	20000d70 	.word	0x20000d70
 8004024:	08010c10 	.word	0x08010c10
 8004028:	0800f20c 	.word	0x0800f20c
 800402c:	0800f214 	.word	0x0800f214
 8004030:	08010d58 	.word	0x08010d58
	...

08004040 <chMBGetFreeCountI.lto_priv.0.lto_priv.0>:
 * @param[in] mbp       the pointer to an initialized @p mailbox_t object
 * @return              The number of empty message slots.
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {
 8004040:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <chMBGetFreeCountI.lto_priv.0.lto_priv.0+0x24>)
 8004044:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004046:	2a00      	cmp	r2, #0
 8004048:	db09      	blt.n	800405e <chMBGetFreeCountI.lto_priv.0.lto_priv.0+0x1e>
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	2b00      	cmp	r3, #0
 800404e:	dd06      	ble.n	800405e <chMBGetFreeCountI.lto_priv.0.lto_priv.0+0x1e>
  return (size_t)(mbp->top - mbp->buffer);
 8004050:	e9d0 2300 	ldrd	r2, r3, [r0]

  chDbgCheckClassI();

  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 8004054:	6900      	ldr	r0, [r0, #16]
  return (size_t)(mbp->top - mbp->buffer);
 8004056:	1a9b      	subs	r3, r3, r2
}
 8004058:	ebc0 00a3 	rsb	r0, r0, r3, asr #2
 800405c:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 800405e:	4802      	ldr	r0, [pc, #8]	; (8004068 <chMBGetFreeCountI.lto_priv.0.lto_priv.0+0x28>)
 8004060:	f7fc fb86 	bl	8000770 <chSysHalt>
 8004064:	20000d70 	.word	0x20000d70
 8004068:	0800f22c 	.word	0x0800f22c
 800406c:	00000000 	.word	0x00000000

08004070 <chMBPostTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8004070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004074:	2320      	movs	r3, #32
 8004076:	4604      	mov	r4, r0
 8004078:	4688      	mov	r8, r1
 800407a:	4617      	mov	r7, r2
 800407c:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004080:	4d2d      	ldr	r5, [pc, #180]	; (8004138 <chMBPostTimeout+0xc8>)
  _dbg_check_lock();
 8004082:	f7fc fbcd 	bl	8000820 <_dbg_check_lock>
 8004086:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004088:	2e00      	cmp	r6, #0
 800408a:	d134      	bne.n	80040f6 <chMBPostTimeout+0x86>
 800408c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800408e:	2b00      	cmp	r3, #0
 8004090:	dd31      	ble.n	80040f6 <chMBPostTimeout+0x86>

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8004092:	f104 0918 	add.w	r9, r4, #24
    if (mbp->reset) {
 8004096:	7d23      	ldrb	r3, [r4, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d132      	bne.n	8004102 <chMBPostTimeout+0x92>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800409c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800409e:	2b00      	cmp	r3, #0
 80040a0:	db2c      	blt.n	80040fc <chMBPostTimeout+0x8c>
 80040a2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	dd29      	ble.n	80040fc <chMBPostTimeout+0x8c>
  return (size_t)(mbp->top - mbp->buffer);
 80040a8:	e9d4 1300 	ldrd	r1, r3, [r4]
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 80040ac:	6922      	ldr	r2, [r4, #16]
 80040ae:	1a58      	subs	r0, r3, r1
 80040b0:	ebb2 0fa0 	cmp.w	r2, r0, asr #2
 80040b4:	d12b      	bne.n	800410e <chMBPostTimeout+0x9e>
  if (TIME_IMMEDIATE == timeout) {
 80040b6:	2f00      	cmp	r7, #0
 80040b8:	d03b      	beq.n	8004132 <chMBPostTimeout+0xc2>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 80040ba:	69ab      	ldr	r3, [r5, #24]
  p->prev       = qp->prev;
 80040bc:	69e2      	ldr	r2, [r4, #28]
  p->next       = qp;
 80040be:	f8c3 9000 	str.w	r9, [r3]
  p->prev       = qp->prev;
 80040c2:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80040c4:	4639      	mov	r1, r7
  p->prev->next = p;
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	2004      	movs	r0, #4
  qp->prev      = p;
 80040ca:	61e3      	str	r3, [r4, #28]
 80040cc:	f7fe f9e0 	bl	8002490 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d0e0      	beq.n	8004096 <chMBPostTimeout+0x26>
 80040d4:	4606      	mov	r6, r0
  _dbg_check_unlock();
 80040d6:	f7fc fbb3 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	42ab      	cmp	r3, r5
 80040de:	d004      	beq.n	80040ea <chMBPostTimeout+0x7a>
 80040e0:	69aa      	ldr	r2, [r5, #24]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	6892      	ldr	r2, [r2, #8]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d30e      	bcc.n	8004108 <chMBPostTimeout+0x98>
 80040ea:	2300      	movs	r3, #0
 80040ec:	f383 8811 	msr	BASEPRI, r3
}
 80040f0:	4630      	mov	r0, r6
 80040f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    chSysHalt("SV#11");
 80040f6:	4811      	ldr	r0, [pc, #68]	; (800413c <chMBPostTimeout+0xcc>)
 80040f8:	f7fc fb3a 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 80040fc:	4810      	ldr	r0, [pc, #64]	; (8004140 <chMBPostTimeout+0xd0>)
 80040fe:	f7fc fb37 	bl	8000770 <chSysHalt>
      return MSG_RESET;
 8004102:	f06f 0601 	mvn.w	r6, #1
 8004106:	e7e6      	b.n	80040d6 <chMBPostTimeout+0x66>
 8004108:	480e      	ldr	r0, [pc, #56]	; (8004144 <chMBPostTimeout+0xd4>)
 800410a:	f7fc fb31 	bl	8000770 <chSysHalt>
      *mbp->wrptr++ = msg;
 800410e:	68a0      	ldr	r0, [r4, #8]
 8004110:	1d02      	adds	r2, r0, #4
 8004112:	60a2      	str	r2, [r4, #8]
 8004114:	f8c0 8000 	str.w	r8, [r0]
      if (mbp->wrptr >= mbp->top) {
 8004118:	4293      	cmp	r3, r2
      mbp->cnt++;
 800411a:	6923      	ldr	r3, [r4, #16]
        mbp->wrptr = mbp->buffer;
 800411c:	bf98      	it	ls
 800411e:	60a1      	strls	r1, [r4, #8]
      mbp->cnt++;
 8004120:	3301      	adds	r3, #1
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004122:	f104 0020 	add.w	r0, r4, #32
      mbp->cnt++;
 8004126:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8004128:	f009 ff02 	bl	800df30 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 800412c:	f7fe fd90 	bl	8002c50 <chSchRescheduleS>
      return MSG_OK;
 8004130:	e7d1      	b.n	80040d6 <chMBPostTimeout+0x66>
    return MSG_TIMEOUT;
 8004132:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8004136:	e7ce      	b.n	80040d6 <chMBPostTimeout+0x66>
 8004138:	20000d70 	.word	0x20000d70
 800413c:	0800f204 	.word	0x0800f204
 8004140:	0800f22c 	.word	0x0800f22c
 8004144:	08011034 	.word	0x08011034
	...

08004150 <chMBFetchTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8004150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004154:	2320      	movs	r3, #32
 8004156:	4604      	mov	r4, r0
 8004158:	460f      	mov	r7, r1
 800415a:	4616      	mov	r6, r2
 800415c:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004160:	4d2a      	ldr	r5, [pc, #168]	; (800420c <chMBFetchTimeout+0xbc>)
  _dbg_check_lock();
 8004162:	f7fc fb5d 	bl	8000820 <_dbg_check_lock>
 8004166:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004168:	bb63      	cbnz	r3, 80041c4 <chMBFetchTimeout+0x74>
 800416a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800416c:	2b00      	cmp	r3, #0
 800416e:	dd29      	ble.n	80041c4 <chMBFetchTimeout+0x74>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8004170:	f104 0920 	add.w	r9, r4, #32
    if (mbp->reset) {
 8004174:	7d23      	ldrb	r3, [r4, #20]
 8004176:	bb5b      	cbnz	r3, 80041d0 <chMBFetchTimeout+0x80>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004178:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800417a:	2b00      	cmp	r3, #0
 800417c:	db25      	blt.n	80041ca <chMBFetchTimeout+0x7a>
 800417e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8004180:	2b00      	cmp	r3, #0
 8004182:	dd22      	ble.n	80041ca <chMBFetchTimeout+0x7a>
  return mbp->cnt;
 8004184:	6923      	ldr	r3, [r4, #16]
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8004186:	bb4b      	cbnz	r3, 80041dc <chMBFetchTimeout+0x8c>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 8004188:	69ab      	ldr	r3, [r5, #24]
  p->prev       = qp->prev;
 800418a:	6a62      	ldr	r2, [r4, #36]	; 0x24
  p->next       = qp;
 800418c:	f8c3 9000 	str.w	r9, [r3]
  p->prev       = qp->prev;
 8004190:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8004192:	4631      	mov	r1, r6
  p->prev->next = p;
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	2004      	movs	r0, #4
  qp->prev      = p;
 8004198:	6263      	str	r3, [r4, #36]	; 0x24
 800419a:	f7fe f979 	bl	8002490 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800419e:	4680      	mov	r8, r0
 80041a0:	2800      	cmp	r0, #0
 80041a2:	d0e7      	beq.n	8004174 <chMBFetchTimeout+0x24>
  _dbg_check_unlock();
 80041a4:	f7fc fb4c 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80041a8:	682b      	ldr	r3, [r5, #0]
 80041aa:	42ab      	cmp	r3, r5
 80041ac:	d004      	beq.n	80041b8 <chMBFetchTimeout+0x68>
 80041ae:	69aa      	ldr	r2, [r5, #24]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	6892      	ldr	r2, [r2, #8]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d30e      	bcc.n	80041d6 <chMBFetchTimeout+0x86>
 80041b8:	2300      	movs	r3, #0
 80041ba:	f383 8811 	msr	BASEPRI, r3
}
 80041be:	4640      	mov	r0, r8
 80041c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    chSysHalt("SV#11");
 80041c4:	4812      	ldr	r0, [pc, #72]	; (8004210 <chMBFetchTimeout+0xc0>)
 80041c6:	f7fc fad3 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 80041ca:	4812      	ldr	r0, [pc, #72]	; (8004214 <chMBFetchTimeout+0xc4>)
 80041cc:	f7fc fad0 	bl	8000770 <chSysHalt>
      return MSG_RESET;
 80041d0:	f06f 0801 	mvn.w	r8, #1
 80041d4:	e7e6      	b.n	80041a4 <chMBFetchTimeout+0x54>
 80041d6:	4810      	ldr	r0, [pc, #64]	; (8004218 <chMBFetchTimeout+0xc8>)
 80041d8:	f7fc faca 	bl	8000770 <chSysHalt>
      *msgp = *mbp->rdptr++;
 80041dc:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 80041de:	6861      	ldr	r1, [r4, #4]
      *msgp = *mbp->rdptr++;
 80041e0:	6810      	ldr	r0, [r2, #0]
 80041e2:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 80041e4:	428a      	cmp	r2, r1
      *msgp = *mbp->rdptr++;
 80041e6:	60e2      	str	r2, [r4, #12]
        mbp->rdptr = mbp->buffer;
 80041e8:	bf28      	it	cs
 80041ea:	6822      	ldrcs	r2, [r4, #0]
      mbp->cnt--;
 80041ec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
      *msgp = *mbp->rdptr++;
 80041f0:	6038      	str	r0, [r7, #0]
        mbp->rdptr = mbp->buffer;
 80041f2:	bf28      	it	cs
 80041f4:	60e2      	strcs	r2, [r4, #12]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80041f6:	f104 0018 	add.w	r0, r4, #24
      mbp->cnt--;
 80041fa:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 80041fc:	f009 fe98 	bl	800df30 <chThdDequeueNextI.constprop.0>
      return MSG_OK;
 8004200:	f04f 0800 	mov.w	r8, #0
      chSchRescheduleS();
 8004204:	f7fe fd24 	bl	8002c50 <chSchRescheduleS>
      return MSG_OK;
 8004208:	e7cc      	b.n	80041a4 <chMBFetchTimeout+0x54>
 800420a:	bf00      	nop
 800420c:	20000d70 	.word	0x20000d70
 8004210:	0800f204 	.word	0x0800f204
 8004214:	0800f22c 	.word	0x0800f22c
 8004218:	08011034 	.word	0x08011034
 800421c:	00000000 	.word	0x00000000

08004220 <chHeapAllocAligned>:
 * @return              A pointer to the aligned allocated block.
 * @retval NULL         if the block cannot be allocated.
 *
 * @api
 */
void *chHeapAllocAligned(memory_heap_t *heapp, size_t size, unsigned align) {
 8004220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  heap_header_t *qp, *hp, *ahp;
  size_t pages;

  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 8004224:	2900      	cmp	r1, #0
 8004226:	d03c      	beq.n	80042a2 <chHeapAllocAligned+0x82>
 8004228:	1e53      	subs	r3, r2, #1
 800422a:	4213      	tst	r3, r2
 800422c:	d139      	bne.n	80042a2 <chHeapAllocAligned+0x82>

  /* If an heap is not specified then the default system header is used.*/
  if (heapp == NULL) {
 800422e:	4606      	mov	r6, r0
    heapp = &default_heap;
 8004230:	4b37      	ldr	r3, [pc, #220]	; (8004310 <chHeapAllocAligned+0xf0>)
  if (align < CH_HEAP_ALIGNMENT) {
    align = CH_HEAP_ALIGNMENT;
  }

  /* Size is converted in number of elementary allocation units.*/
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004232:	1dcf      	adds	r7, r1, #7
    heapp = &default_heap;
 8004234:	2800      	cmp	r0, #0
 8004236:	bf08      	it	eq
 8004238:	461e      	moveq	r6, r3

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 800423a:	f106 080c 	add.w	r8, r6, #12
 800423e:	4640      	mov	r0, r8
 8004240:	460d      	mov	r5, r1
 8004242:	f7ff fc4d 	bl	8003ae0 <chMtxLock>

  /* Start of the free blocks list.*/
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 8004246:	6873      	ldr	r3, [r6, #4]
  pages = MEM_ALIGN_NEXT(size, CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8004248:	08ff      	lsrs	r7, r7, #3
  qp = &heapp->header;
 800424a:	1d31      	adds	r1, r6, #4
  while (H_NEXT(qp) != NULL) {
 800424c:	b90b      	cbnz	r3, 8004252 <chHeapAllocAligned+0x32>
 800424e:	e018      	b.n	8004282 <chHeapAllocAligned+0x62>
 8004250:	4613      	mov	r3, r2
    hp = H_NEXT(qp);

    /* Pointer aligned to the requested alignment.*/
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;

    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004252:	6858      	ldr	r0, [r3, #4]
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 8004254:	f103 0c0f 	add.w	ip, r3, #15
 8004258:	f02c 0c07 	bic.w	ip, ip, #7
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 800425c:	1c42      	adds	r2, r0, #1
    ahp = (heap_header_t *)MEM_ALIGN_NEXT(H_BLOCK(hp), align) - 1U;
 800425e:	f1ac 0e08 	sub.w	lr, ip, #8
    if ((ahp < H_LIMIT(hp)) && (pages <= NPAGES(H_LIMIT(hp), ahp + 1U))) {
 8004262:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8004266:	4572      	cmp	r2, lr
 8004268:	d907      	bls.n	800427a <chHeapAllocAligned+0x5a>
 800426a:	4664      	mov	r4, ip
 800426c:	eba2 0c0c 	sub.w	ip, r2, ip
 8004270:	ebb7 0fec 	cmp.w	r7, ip, asr #3
 8004274:	ea4f 09ec 	mov.w	r9, ip, asr #3
 8004278:	d916      	bls.n	80042a8 <chHeapAllocAligned+0x88>
  while (H_NEXT(qp) != NULL) {
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4619      	mov	r1, r3
 800427e:	2a00      	cmp	r2, #0
 8004280:	d1e6      	bne.n	8004250 <chHeapAllocAligned+0x30>
    /* Next in the free blocks list.*/
    qp = hp;
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004282:	4640      	mov	r0, r8
 8004284:	f7ff fc9c 	bl	8003bc0 <chMtxUnlock>

  /* More memory is required, tries to get it from the associated provider
     else fails.*/
  if (heapp->provider != NULL) {
 8004288:	6834      	ldr	r4, [r6, #0]
 800428a:	b13c      	cbz	r4, 800429c <chHeapAllocAligned+0x7c>
    ahp = heapp->provider(pages * CH_HEAP_ALIGNMENT,
 800428c:	2208      	movs	r2, #8
 800428e:	00f8      	lsls	r0, r7, #3
 8004290:	4611      	mov	r1, r2
 8004292:	47a0      	blx	r4
                          align,
                          sizeof (heap_header_t));
    if (ahp != NULL) {
 8004294:	4604      	mov	r4, r0
 8004296:	b108      	cbz	r0, 800429c <chHeapAllocAligned+0x7c>
      hp = ahp - 1U;
      H_HEAP(hp) = heapp;
      H_SIZE(hp) = size;
 8004298:	e940 6502 	strd	r6, r5, [r0, #-8]
      /*lint -restore*/
    }
  }

  return NULL;
}
 800429c:	4620      	mov	r0, r4
 800429e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck((size > 0U) && MEM_IS_VALID_ALIGNMENT(align));
 80042a2:	481c      	ldr	r0, [pc, #112]	; (8004314 <chHeapAllocAligned+0xf4>)
 80042a4:	f7fc fa64 	bl	8000770 <chSysHalt>
      if (ahp > hp) {
 80042a8:	4573      	cmp	r3, lr
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80042aa:	f103 0c08 	add.w	ip, r3, #8
      if (ahp > hp) {
 80042ae:	d318      	bcc.n	80042e2 <chHeapAllocAligned+0xc2>
        if (H_PAGES(hp) == pages) {
 80042b0:	42b8      	cmp	r0, r7
          H_NEXT(fp) = H_NEXT(hp);
 80042b2:	f8d3 e000 	ldr.w	lr, [r3]
        if (H_PAGES(hp) == pages) {
 80042b6:	d025      	beq.n	8004304 <chHeapAllocAligned+0xe4>
          H_NEXT(qp) = fp;
 80042b8:	4664      	mov	r4, ip
          fp = H_BLOCK(hp) + pages;
 80042ba:	1c78      	adds	r0, r7, #1
          H_NEXT(fp) = H_NEXT(hp);
 80042bc:	f843 e030 	str.w	lr, [r3, r0, lsl #3]
          fp = H_BLOCK(hp) + pages;
 80042c0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
          H_NEXT(qp) = fp;
 80042c4:	469e      	mov	lr, r3
          H_PAGES(fp) = NPAGES(H_LIMIT(hp), H_BLOCK(fp));
 80042c6:	f100 0308 	add.w	r3, r0, #8
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	10db      	asrs	r3, r3, #3
 80042ce:	6043      	str	r3, [r0, #4]
          H_NEXT(qp) = fp;
 80042d0:	6008      	str	r0, [r1, #0]
      H_UNLOCK(heapp);
 80042d2:	4640      	mov	r0, r8
      H_HEAP(hp) = heapp;
 80042d4:	e9ce 6500 	strd	r6, r5, [lr]
      H_UNLOCK(heapp);
 80042d8:	f7ff fc72 	bl	8003bc0 <chMtxUnlock>
}
 80042dc:	4620      	mov	r0, r4
 80042de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80042e2:	ebae 020c 	sub.w	r2, lr, ip
 80042e6:	10d2      	asrs	r2, r2, #3
        if (bpages > pages) {
 80042e8:	45b9      	cmp	r9, r7
        H_PAGES(hp) = NPAGES(ahp, H_BLOCK(hp));
 80042ea:	605a      	str	r2, [r3, #4]
        if (bpages > pages) {
 80042ec:	d9f1      	bls.n	80042d2 <chHeapAllocAligned+0xb2>
          H_PAGES(fp) = (bpages - pages) - 1U;
 80042ee:	43fa      	mvns	r2, r7
          H_NEXT(fp) = H_NEXT(hp);
 80042f0:	6818      	ldr	r0, [r3, #0]
          fp = H_BLOCK(ahp) + pages;
 80042f2:	3701      	adds	r7, #1
 80042f4:	eb0e 01c7 	add.w	r1, lr, r7, lsl #3
          H_PAGES(fp) = (bpages - pages) - 1U;
 80042f8:	444a      	add	r2, r9
 80042fa:	604a      	str	r2, [r1, #4]
          H_NEXT(fp) = H_NEXT(hp);
 80042fc:	f84e 0037 	str.w	r0, [lr, r7, lsl #3]
          H_NEXT(hp) = fp;
 8004300:	6019      	str	r1, [r3, #0]
 8004302:	e7e6      	b.n	80042d2 <chHeapAllocAligned+0xb2>
          H_NEXT(qp) = H_NEXT(hp);
 8004304:	f8c1 e000 	str.w	lr, [r1]
 8004308:	4664      	mov	r4, ip
 800430a:	469e      	mov	lr, r3
 800430c:	e7e1      	b.n	80042d2 <chHeapAllocAligned+0xb2>
 800430e:	bf00      	nop
 8004310:	20001648 	.word	0x20001648
 8004314:	08010ce4 	.word	0x08010ce4
	...

08004320 <chThdCreateFromHeap>:
 *
 * @api
 */
thread_t *chThdCreateFromHeap(memory_heap_t *heapp, size_t size,
                              const char *name, tprio_t prio,
                              tfunc_t pf, void *arg) {
 8004320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004322:	4617      	mov	r7, r2
 8004324:	b087      	sub	sp, #28
  thread_t *tp;
  void *wsp;

  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 8004326:	2208      	movs	r2, #8
                              tfunc_t pf, void *arg) {
 8004328:	460d      	mov	r5, r1
 800432a:	461e      	mov	r6, r3
  wsp = chHeapAllocAligned(heapp, size, PORT_WORKING_AREA_ALIGN);
 800432c:	f7ff ff78 	bl	8004220 <chHeapAllocAligned>
  if (wsp == NULL) {
 8004330:	4604      	mov	r4, r0
 8004332:	b358      	cbz	r0, 800438c <chThdCreateFromHeap+0x6c>
    return NULL;
  }

  thread_descriptor_t td = {
 8004334:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + size),
 8004336:	1943      	adds	r3, r0, r5
  thread_descriptor_t td = {
 8004338:	9204      	str	r2, [sp, #16]
 800433a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
  while (startp < endp) {
 800433c:	4283      	cmp	r3, r0
 800433e:	e9cd 0301 	strd	r0, r3, [sp, #4]
 8004342:	9700      	str	r7, [sp, #0]
 8004344:	9603      	str	r6, [sp, #12]
 8004346:	9205      	str	r2, [sp, #20]
 8004348:	d903      	bls.n	8004352 <chThdCreateFromHeap+0x32>
    *startp++ = v;
 800434a:	462a      	mov	r2, r5
 800434c:	2155      	movs	r1, #85	; 0x55
 800434e:	f00a ff04 	bl	800f15a <memset>
 8004352:	2320      	movs	r3, #32
 8004354:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004358:	f7fc fa62 	bl	8000820 <_dbg_check_lock>
                  (uint8_t *)wsp + size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800435c:	4668      	mov	r0, sp
 800435e:	f7fe fdaf 	bl	8002ec0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_HEAP;
 8004362:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 8004364:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_HEAP;
 8004366:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp = chThdCreateSuspendedI(&td);
 800436a:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800436c:	f7fe fbe8 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 8004370:	f7fc fa66 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8004374:	4b08      	ldr	r3, [pc, #32]	; (8004398 <chThdCreateFromHeap+0x78>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d004      	beq.n	8004386 <chThdCreateFromHeap+0x66>
 800437c:	6999      	ldr	r1, [r3, #24]
 800437e:	6893      	ldr	r3, [r2, #8]
 8004380:	688a      	ldr	r2, [r1, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d305      	bcc.n	8004392 <chThdCreateFromHeap+0x72>
 8004386:	2300      	movs	r3, #0
 8004388:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800438c:	4620      	mov	r0, r4
 800438e:	b007      	add	sp, #28
 8004390:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004392:	4802      	ldr	r0, [pc, #8]	; (800439c <chThdCreateFromHeap+0x7c>)
 8004394:	f7fc f9ec 	bl	8000770 <chSysHalt>
 8004398:	20000d70 	.word	0x20000d70
 800439c:	08010cc4 	.word	0x08010cc4

080043a0 <chHeapFree>:
 *
 * @param[in] p         pointer to the memory block to be freed
 *
 * @api
 */
void chHeapFree(void *p) {
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80043a2:	b3a8      	cbz	r0, 8004410 <chHeapFree+0x70>
 80043a4:	0743      	lsls	r3, r0, #29
 80043a6:	4604      	mov	r4, r0
 80043a8:	d132      	bne.n	8004410 <chHeapFree+0x70>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 80043aa:	e950 6302 	ldrd	r6, r3, [r0, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80043ae:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80043b0:	08db      	lsrs	r3, r3, #3
  qp = &heapp->header;
 80043b2:	1d37      	adds	r7, r6, #4
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80043b4:	f840 3c04 	str.w	r3, [r0, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80043b8:	360c      	adds	r6, #12
 80043ba:	2320      	movs	r3, #32
  hp = (heap_header_t *)p - 1U;
 80043bc:	f1a0 0508 	sub.w	r5, r0, #8
 80043c0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80043c4:	f7fc fa2c 	bl	8000820 <_dbg_check_lock>
 80043c8:	4630      	mov	r0, r6
 80043ca:	f7ff fb09 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 80043ce:	f7fc fa37 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80043d2:	4b25      	ldr	r3, [pc, #148]	; (8004468 <chHeapFree+0xc8>)
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d004      	beq.n	80043e4 <chHeapFree+0x44>
 80043da:	6999      	ldr	r1, [r3, #24]
 80043dc:	6893      	ldr	r3, [r2, #8]
 80043de:	688a      	ldr	r2, [r1, #8]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d318      	bcc.n	8004416 <chHeapFree+0x76>
 80043e4:	2300      	movs	r3, #0
 80043e6:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 80043ea:	463b      	mov	r3, r7

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 80043ec:	42ab      	cmp	r3, r5
 80043ee:	d805      	bhi.n	80043fc <chHeapFree+0x5c>
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	3201      	adds	r2, #1
 80043f4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80043f8:	4295      	cmp	r5, r2
 80043fa:	d309      	bcc.n	8004410 <chHeapFree+0x70>

    if (((qp == &heapp->header) || (hp > qp)) &&
 80043fc:	42bb      	cmp	r3, r7
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80043fe:	681a      	ldr	r2, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8004400:	d001      	beq.n	8004406 <chHeapFree+0x66>
 8004402:	42ab      	cmp	r3, r5
 8004404:	d202      	bcs.n	800440c <chHeapFree+0x6c>
 8004406:	b14a      	cbz	r2, 800441c <chHeapFree+0x7c>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8004408:	4295      	cmp	r5, r2
 800440a:	d307      	bcc.n	800441c <chHeapFree+0x7c>
 800440c:	4613      	mov	r3, r2
 800440e:	e7ed      	b.n	80043ec <chHeapFree+0x4c>
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8004410:	4816      	ldr	r0, [pc, #88]	; (800446c <chHeapFree+0xcc>)
 8004412:	f7fc f9ad 	bl	8000770 <chSysHalt>
 8004416:	4816      	ldr	r0, [pc, #88]	; (8004470 <chHeapFree+0xd0>)
 8004418:	f7fc f9aa 	bl	8000770 <chSysHalt>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 800441c:	f844 2c08 	str.w	r2, [r4, #-8]
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004420:	f854 2c04 	ldr.w	r2, [r4, #-4]
      H_NEXT(qp) = hp;
 8004424:	601d      	str	r5, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8004426:	f854 1c08 	ldr.w	r1, [r4, #-8]
 800442a:	3201      	adds	r2, #1
 800442c:	eb05 00c2 	add.w	r0, r5, r2, lsl #3
 8004430:	4281      	cmp	r1, r0
 8004432:	d00a      	beq.n	800444a <chHeapFree+0xaa>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	1c4a      	adds	r2, r1, #1
 8004438:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800443c:	4295      	cmp	r5, r2
 800443e:	d00c      	beq.n	800445a <chHeapFree+0xba>
    }
    qp = H_NEXT(qp);
  }

  /* Releasing heap mutex/semaphore.*/
  H_UNLOCK(heapp);
 8004440:	4630      	mov	r0, r6

  return;
}
 8004442:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  H_UNLOCK(heapp);
 8004446:	f7ff bbbb 	b.w	8003bc0 <chMtxUnlock>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800444a:	6848      	ldr	r0, [r1, #4]
 800444c:	4402      	add	r2, r0
 800444e:	f844 2c04 	str.w	r2, [r4, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8004452:	680a      	ldr	r2, [r1, #0]
 8004454:	f844 2c08 	str.w	r2, [r4, #-8]
 8004458:	e7ec      	b.n	8004434 <chHeapFree+0x94>
        H_NEXT(qp) = H_NEXT(hp);
 800445a:	e954 0202 	ldrd	r0, r2, [r4, #-8]
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800445e:	3201      	adds	r2, #1
 8004460:	4411      	add	r1, r2
        H_NEXT(qp) = H_NEXT(hp);
 8004462:	e9c3 0100 	strd	r0, r1, [r3]
 8004466:	e7eb      	b.n	8004440 <chHeapFree+0xa0>
 8004468:	20000d70 	.word	0x20000d70
 800446c:	08010b8c 	.word	0x08010b8c
 8004470:	08010f48 	.word	0x08010f48
	...

08004480 <chThdRelease>:
void chThdRelease(thread_t *tp) {
 8004480:	b510      	push	{r4, lr}
 8004482:	2320      	movs	r3, #32
 8004484:	4604      	mov	r4, r0
 8004486:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800448a:	f7fc f9c9 	bl	8000820 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 800448e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004492:	b1b3      	cbz	r3, 80044c2 <chThdRelease+0x42>
  tp->refs--;
 8004494:	3b01      	subs	r3, #1
 8004496:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 800449a:	6a23      	ldr	r3, [r4, #32]
 800449c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80044a0:	2b0f      	cmp	r3, #15
 80044a2:	d014      	beq.n	80044ce <chThdRelease+0x4e>
  _dbg_check_unlock();
 80044a4:	f7fc f9cc 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80044a8:	4b1c      	ldr	r3, [pc, #112]	; (800451c <chThdRelease+0x9c>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d004      	beq.n	80044ba <chThdRelease+0x3a>
 80044b0:	6999      	ldr	r1, [r3, #24]
 80044b2:	6893      	ldr	r3, [r2, #8]
 80044b4:	688a      	ldr	r2, [r1, #8]
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d306      	bcc.n	80044c8 <chThdRelease+0x48>
 80044ba:	2300      	movs	r3, #0
 80044bc:	f383 8811 	msr	BASEPRI, r3
}
 80044c0:	bd10      	pop	{r4, pc}
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80044c2:	4817      	ldr	r0, [pc, #92]	; (8004520 <chThdRelease+0xa0>)
 80044c4:	f7fc f954 	bl	8000770 <chSysHalt>
 80044c8:	4816      	ldr	r0, [pc, #88]	; (8004524 <chThdRelease+0xa4>)
 80044ca:	f7fc f951 	bl	8000770 <chSysHalt>
    REG_REMOVE(tp);
 80044ce:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 80044d2:	611a      	str	r2, [r3, #16]
 80044d4:	6922      	ldr	r2, [r4, #16]
 80044d6:	6153      	str	r3, [r2, #20]
  _dbg_check_unlock();
 80044d8:	f7fc f9b2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80044dc:	4b0f      	ldr	r3, [pc, #60]	; (800451c <chThdRelease+0x9c>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d004      	beq.n	80044ee <chThdRelease+0x6e>
 80044e4:	6999      	ldr	r1, [r3, #24]
 80044e6:	6893      	ldr	r3, [r2, #8]
 80044e8:	688a      	ldr	r2, [r1, #8]
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d3ec      	bcc.n	80044c8 <chThdRelease+0x48>
 80044ee:	2300      	movs	r3, #0
 80044f0:	f383 8811 	msr	BASEPRI, r3
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 80044f4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80044f8:	f003 0303 	and.w	r3, r3, #3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d007      	beq.n	8004510 <chThdRelease+0x90>
 8004500:	2b02      	cmp	r3, #2
 8004502:	d1dd      	bne.n	80044c0 <chThdRelease+0x40>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8004504:	69e1      	ldr	r1, [r4, #28]
 8004506:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
 8004508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 800450c:	f7fd ba38 	b.w	8001980 <chPoolFree>
      chHeapFree(chThdGetWorkingAreaX(tp));
 8004510:	69e0      	ldr	r0, [r4, #28]
}
 8004512:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      chHeapFree(chThdGetWorkingAreaX(tp));
 8004516:	f7ff bf43 	b.w	80043a0 <chHeapFree>
 800451a:	bf00      	nop
 800451c:	20000d70 	.word	0x20000d70
 8004520:	0801106c 	.word	0x0801106c
 8004524:	08010de4 	.word	0x08010de4
	...

08004530 <chThdWait>:
msg_t chThdWait(thread_t *tp) {
 8004530:	b570      	push	{r4, r5, r6, lr}
  chDbgCheck(tp != NULL);
 8004532:	b348      	cbz	r0, 8004588 <chThdWait+0x58>
 8004534:	4604      	mov	r4, r0
 8004536:	2320      	movs	r3, #32
 8004538:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(tp != currp, "waiting self");
 800453c:	4d15      	ldr	r5, [pc, #84]	; (8004594 <chThdWait+0x64>)
  _dbg_check_lock();
 800453e:	f7fc f96f 	bl	8000820 <_dbg_check_lock>
 8004542:	69ab      	ldr	r3, [r5, #24]
 8004544:	42a3      	cmp	r3, r4
 8004546:	d01f      	beq.n	8004588 <chThdWait+0x58>
  chDbgAssert(tp->refs > (trefs_t)0, "no references");
 8004548:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 800454c:	b1e2      	cbz	r2, 8004588 <chThdWait+0x58>
  if (tp->state != CH_STATE_FINAL) {
 800454e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8004552:	2a0f      	cmp	r2, #15
 8004554:	d005      	beq.n	8004562 <chThdWait+0x32>
  p->next = lp->next;
 8004556:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    chSchGoSleepS(CH_STATE_WTEXIT);
 8004558:	2009      	movs	r0, #9
 800455a:	601a      	str	r2, [r3, #0]
  lp->next = p;
 800455c:	62a3      	str	r3, [r4, #40]	; 0x28
 800455e:	f7fd febf 	bl	80022e0 <chSchGoSleepS>
  msg = tp->u.exitcode;
 8004562:	6a66      	ldr	r6, [r4, #36]	; 0x24
  _dbg_check_unlock();
 8004564:	f7fc f96c 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8004568:	682b      	ldr	r3, [r5, #0]
 800456a:	42ab      	cmp	r3, r5
 800456c:	d004      	beq.n	8004578 <chThdWait+0x48>
 800456e:	69aa      	ldr	r2, [r5, #24]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	6892      	ldr	r2, [r2, #8]
 8004574:	429a      	cmp	r2, r3
 8004576:	d30a      	bcc.n	800458e <chThdWait+0x5e>
 8004578:	2300      	movs	r3, #0
 800457a:	f383 8811 	msr	BASEPRI, r3
  chThdRelease(tp);
 800457e:	4620      	mov	r0, r4
 8004580:	f7ff ff7e 	bl	8004480 <chThdRelease>
}
 8004584:	4630      	mov	r0, r6
 8004586:	bd70      	pop	{r4, r5, r6, pc}
  chDbgCheck(tp != NULL);
 8004588:	4803      	ldr	r0, [pc, #12]	; (8004598 <chThdWait+0x68>)
 800458a:	f7fc f8f1 	bl	8000770 <chSysHalt>
 800458e:	4803      	ldr	r0, [pc, #12]	; (800459c <chThdWait+0x6c>)
 8004590:	f7fc f8ee 	bl	8000770 <chSysHalt>
 8004594:	20000d70 	.word	0x20000d70
 8004598:	0801101c 	.word	0x0801101c
 800459c:	08010de4 	.word	0x08010de4

080045a0 <rt_test_006_005_teardown>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	2600      	movs	r6, #0
 80045a4:	4c06      	ldr	r4, [pc, #24]	; (80045c0 <rt_test_006_005_teardown+0x20>)
 80045a6:	f104 0514 	add.w	r5, r4, #20
 80045aa:	f854 0b04 	ldr.w	r0, [r4], #4
 80045ae:	b118      	cbz	r0, 80045b8 <rt_test_006_005_teardown+0x18>
 80045b0:	f7ff ffbe 	bl	8004530 <chThdWait>
 80045b4:	f844 6c04 	str.w	r6, [r4, #-4]
 80045b8:	42ac      	cmp	r4, r5
 80045ba:	d1f6      	bne.n	80045aa <rt_test_006_005_teardown+0xa>
 80045bc:	bd70      	pop	{r4, r5, r6, pc}
 80045be:	bf00      	nop
 80045c0:	20001d54 	.word	0x20001d54
	...

080045d0 <rt_test_006_006_teardown>:
 * - [6.6.6] Signaling the binary semaphore again, the internal state
 *   must not change from "not taken".
 * .
 */

static void rt_test_006_006_teardown(void) {
 80045d0:	b570      	push	{r4, r5, r6, lr}
  unsigned i;

  for (i = 0; i < MAX_THREADS; i++)
    if (threads[i] != NULL) {
      chThdWait(threads[i]);
      threads[i] = NULL;
 80045d2:	2600      	movs	r6, #0
 80045d4:	4c06      	ldr	r4, [pc, #24]	; (80045f0 <rt_test_006_006_teardown+0x20>)
 80045d6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 80045da:	f854 0b04 	ldr.w	r0, [r4], #4
 80045de:	b118      	cbz	r0, 80045e8 <rt_test_006_006_teardown+0x18>
      chThdWait(threads[i]);
 80045e0:	f7ff ffa6 	bl	8004530 <chThdWait>
      threads[i] = NULL;
 80045e4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 80045e8:	42ac      	cmp	r4, r5
 80045ea:	d1f6      	bne.n	80045da <rt_test_006_006_teardown+0xa>
  test_wait_threads();
}
 80045ec:	bd70      	pop	{r4, r5, r6, pc}
 80045ee:	bf00      	nop
 80045f0:	20001d54 	.word	0x20001d54
	...

08004600 <rt_test_007_004_teardown>:
 8004600:	b570      	push	{r4, r5, r6, lr}
 8004602:	2600      	movs	r6, #0
 8004604:	4c06      	ldr	r4, [pc, #24]	; (8004620 <rt_test_007_004_teardown+0x20>)
 8004606:	f104 0514 	add.w	r5, r4, #20
 800460a:	f854 0b04 	ldr.w	r0, [r4], #4
 800460e:	b118      	cbz	r0, 8004618 <rt_test_007_004_teardown+0x18>
 8004610:	f7ff ff8e 	bl	8004530 <chThdWait>
 8004614:	f844 6c04 	str.w	r6, [r4, #-4]
 8004618:	42ac      	cmp	r4, r5
 800461a:	d1f6      	bne.n	800460a <rt_test_007_004_teardown+0xa>
 800461c:	bd70      	pop	{r4, r5, r6, pc}
 800461e:	bf00      	nop
 8004620:	20001d54 	.word	0x20001d54
	...

08004630 <chRegNextThread>:
 8004630:	2320      	movs	r3, #32
 * @return              A reference to the next thread.
 * @retval NULL         if there is no next thread.
 *
 * @api
 */
thread_t *chRegNextThread(thread_t *tp) {
 8004632:	b510      	push	{r4, lr}
 8004634:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004638:	4b16      	ldr	r3, [pc, #88]	; (8004694 <chRegNextThread+0x64>)
 800463a:	e9d3 210c 	ldrd	r2, r1, [r3, #48]	; 0x30
 800463e:	430a      	orrs	r2, r1
 8004640:	d11c      	bne.n	800467c <chRegNextThread+0x4c>
  _dbg_enter_lock();
 8004642:	2101      	movs	r1, #1
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 8004644:	6904      	ldr	r4, [r0, #16]
 8004646:	6359      	str	r1, [r3, #52]	; 0x34
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8004648:	429c      	cmp	r4, r3
 800464a:	d01d      	beq.n	8004688 <chRegNextThread+0x58>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 800464c:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8004650:	2aff      	cmp	r2, #255	; 0xff
 8004652:	d016      	beq.n	8004682 <chRegNextThread+0x52>
    ntp->refs++;
 8004654:	3201      	adds	r2, #1
 8004656:	f884 2022 	strb.w	r2, [r4, #34]	; 0x22
  _dbg_leave_lock();
 800465a:	2100      	movs	r1, #0
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	6359      	str	r1, [r3, #52]	; 0x34
 8004660:	429a      	cmp	r2, r3
 8004662:	d004      	beq.n	800466e <chRegNextThread+0x3e>
 8004664:	6999      	ldr	r1, [r3, #24]
 8004666:	6893      	ldr	r3, [r2, #8]
 8004668:	688a      	ldr	r2, [r1, #8]
 800466a:	429a      	cmp	r2, r3
 800466c:	d30e      	bcc.n	800468c <chRegNextThread+0x5c>
 800466e:	2300      	movs	r3, #0
 8004670:	f383 8811 	msr	BASEPRI, r3
  }
#endif
  chSysUnlock();
#if CH_CFG_USE_DYNAMIC == TRUE
  chThdRelease(tp);
 8004674:	f7ff ff04 	bl	8004480 <chThdRelease>
#endif

  return ntp;
}
 8004678:	4620      	mov	r0, r4
 800467a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 800467c:	4806      	ldr	r0, [pc, #24]	; (8004698 <chRegNextThread+0x68>)
 800467e:	f7fc f877 	bl	8000770 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8004682:	4806      	ldr	r0, [pc, #24]	; (800469c <chRegNextThread+0x6c>)
 8004684:	f7fc f874 	bl	8000770 <chSysHalt>
    ntp = NULL;
 8004688:	4614      	mov	r4, r2
 800468a:	e7e6      	b.n	800465a <chRegNextThread+0x2a>
 800468c:	4804      	ldr	r0, [pc, #16]	; (80046a0 <chRegNextThread+0x70>)
 800468e:	f7fc f86f 	bl	8000770 <chSysHalt>
 8004692:	bf00      	nop
 8004694:	20000d70 	.word	0x20000d70
 8004698:	0800f20c 	.word	0x0800f20c
 800469c:	08010c54 	.word	0x08010c54
 80046a0:	08010da0 	.word	0x08010da0
	...

080046b0 <chThdCreate>:
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 80046b0:	b570      	push	{r4, r5, r6, lr}
 80046b2:	2320      	movs	r3, #32
 80046b4:	4606      	mov	r6, r0
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 80046b6:	6844      	ldr	r4, [r0, #4]
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 80046b8:	b082      	sub	sp, #8
 80046ba:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 80046be:	4d26      	ldr	r5, [pc, #152]	; (8004758 <chThdCreate+0xa8>)
  _dbg_check_lock();
 80046c0:	f7fc f8ae 	bl	8000820 <_dbg_check_lock>
 80046c4:	6928      	ldr	r0, [r5, #16]
  tp->refs++;
 80046c6:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 80046ca:	9001      	str	r0, [sp, #4]
 80046cc:	3301      	adds	r3, #1
 80046ce:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
  _dbg_check_unlock();
 80046d2:	f7fc f8b5 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80046d6:	682b      	ldr	r3, [r5, #0]
 80046d8:	9801      	ldr	r0, [sp, #4]
 80046da:	42ab      	cmp	r3, r5
 80046dc:	d004      	beq.n	80046e8 <chThdCreate+0x38>
 80046de:	69aa      	ldr	r2, [r5, #24]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	6892      	ldr	r2, [r2, #8]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d30c      	bcc.n	8004702 <chThdCreate+0x52>
 80046e8:	2300      	movs	r3, #0
 80046ea:	f383 8811 	msr	BASEPRI, r3
  return tp;
 80046ee:	e002      	b.n	80046f6 <chThdCreate+0x46>
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 80046f0:	f7ff ff9e 	bl	8004630 <chRegNextThread>
  } while (ctp != NULL);
 80046f4:	b140      	cbz	r0, 8004708 <chThdCreate+0x58>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 80046f6:	69c3      	ldr	r3, [r0, #28]
 80046f8:	429c      	cmp	r4, r3
 80046fa:	d1f9      	bne.n	80046f0 <chThdCreate+0x40>
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 80046fc:	4817      	ldr	r0, [pc, #92]	; (800475c <chThdCreate+0xac>)
 80046fe:	f7fc f837 	bl	8000770 <chSysHalt>
 8004702:	4817      	ldr	r0, [pc, #92]	; (8004760 <chThdCreate+0xb0>)
 8004704:	f7fc f834 	bl	8000770 <chSysHalt>
                  (uint8_t *)tdp->wend,
 8004708:	e9d6 0201 	ldrd	r0, r2, [r6, #4]
  while (startp < endp) {
 800470c:	4290      	cmp	r0, r2
 800470e:	d203      	bcs.n	8004718 <chThdCreate+0x68>
    *startp++ = v;
 8004710:	2155      	movs	r1, #85	; 0x55
 8004712:	1a12      	subs	r2, r2, r0
 8004714:	f00a fd21 	bl	800f15a <memset>
 8004718:	2320      	movs	r3, #32
 800471a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800471e:	f7fc f87f 	bl	8000820 <_dbg_check_lock>
  tp = chThdCreateSuspendedI(tdp);
 8004722:	4630      	mov	r0, r6
 8004724:	f7fe fbcc 	bl	8002ec0 <chThdCreateSuspendedI>
  chSchWakeupS(tp, MSG_OK);
 8004728:	2100      	movs	r1, #0
  tp = chThdCreateSuspendedI(tdp);
 800472a:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800472c:	f7fe fa08 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 8004730:	f7fc f886 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8004734:	682b      	ldr	r3, [r5, #0]
 8004736:	42ab      	cmp	r3, r5
 8004738:	d004      	beq.n	8004744 <chThdCreate+0x94>
 800473a:	69aa      	ldr	r2, [r5, #24]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	6892      	ldr	r2, [r2, #8]
 8004740:	429a      	cmp	r2, r3
 8004742:	d305      	bcc.n	8004750 <chThdCreate+0xa0>
 8004744:	2300      	movs	r3, #0
 8004746:	f383 8811 	msr	BASEPRI, r3
}
 800474a:	4620      	mov	r0, r4
 800474c:	b002      	add	sp, #8
 800474e:	bd70      	pop	{r4, r5, r6, pc}
 8004750:	4804      	ldr	r0, [pc, #16]	; (8004764 <chThdCreate+0xb4>)
 8004752:	f7fc f80d 	bl	8000770 <chSysHalt>
 8004756:	bf00      	nop
 8004758:	20000d70 	.word	0x20000d70
 800475c:	08010dd8 	.word	0x08010dd8
 8004760:	08010da0 	.word	0x08010da0
 8004764:	08010de4 	.word	0x08010de4
	...

08004770 <chHeapStatus>:
 *                      free free block found space or @p NULL
 * @return              The number of fragments in the heap.
 *
 * @api
 */
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  heap_header_t *qp;
  size_t n, tpages, lpages;

  if (heapp == NULL) {
    heapp = &default_heap;
 8004772:	4f23      	ldr	r7, [pc, #140]	; (8004800 <chHeapStatus+0x90>)
 8004774:	2320      	movs	r3, #32
 8004776:	2800      	cmp	r0, #0
 8004778:	bf18      	it	ne
 800477a:	4607      	movne	r7, r0
size_t chHeapStatus(memory_heap_t *heapp, size_t *totalp, size_t *largestp) {
 800477c:	460e      	mov	r6, r1
 800477e:	4614      	mov	r4, r2
  }

  H_LOCK(heapp);
 8004780:	f107 050c 	add.w	r5, r7, #12
 8004784:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8004788:	f7fc f84a 	bl	8000820 <_dbg_check_lock>
 800478c:	4628      	mov	r0, r5
 800478e:	f7ff f927 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004792:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <chHeapStatus+0x94>)
 8004794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004796:	bb4a      	cbnz	r2, 80047ec <chHeapStatus+0x7c>
 8004798:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800479a:	2900      	cmp	r1, #0
 800479c:	dd26      	ble.n	80047ec <chHeapStatus+0x7c>
  _dbg_leave_lock();
 800479e:	635a      	str	r2, [r3, #52]	; 0x34
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d004      	beq.n	80047b0 <chHeapStatus+0x40>
 80047a6:	6999      	ldr	r1, [r3, #24]
 80047a8:	6893      	ldr	r3, [r2, #8]
 80047aa:	688a      	ldr	r2, [r1, #8]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d320      	bcc.n	80047f2 <chHeapStatus+0x82>
 80047b0:	f04f 0c00 	mov.w	ip, #0
 80047b4:	f38c 8811 	msr	BASEPRI, ip
  tpages = 0U;
  lpages = 0U;
  n = 0U;
  qp = &heapp->header;
  while (H_NEXT(qp) != NULL) {
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	b1eb      	cbz	r3, 80047f8 <chHeapStatus+0x88>
  tpages = 0U;
 80047bc:	46e6      	mov	lr, ip
  n = 0U;
 80047be:	4667      	mov	r7, ip
    size_t pages = H_PAGES(H_NEXT(qp));
 80047c0:	6858      	ldr	r0, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4584      	cmp	ip, r0
 80047c6:	bf38      	it	cc
 80047c8:	4684      	movcc	ip, r0

    /* Updating counters.*/
    n++;
 80047ca:	3701      	adds	r7, #1
    tpages += pages;
 80047cc:	4486      	add	lr, r0
  while (H_NEXT(qp) != NULL) {
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1f6      	bne.n	80047c0 <chHeapStatus+0x50>

    qp = H_NEXT(qp);
  }

  /* Writing out fragmented free memory.*/
  if (totalp != NULL) {
 80047d2:	b116      	cbz	r6, 80047da <chHeapStatus+0x6a>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80047d4:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 80047d8:	6033      	str	r3, [r6, #0]
  }

  /* Writing out unfragmented free memory.*/
  if (largestp != NULL) {
 80047da:	b114      	cbz	r4, 80047e2 <chHeapStatus+0x72>
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 80047dc:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 80047e0:	6023      	str	r3, [r4, #0]
  }
  H_UNLOCK(heapp);
 80047e2:	4628      	mov	r0, r5
 80047e4:	f7ff f9ec 	bl	8003bc0 <chMtxUnlock>

  return n;
}
 80047e8:	4638      	mov	r0, r7
 80047ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 80047ec:	4806      	ldr	r0, [pc, #24]	; (8004808 <chHeapStatus+0x98>)
 80047ee:	f7fb ffbf 	bl	8000770 <chSysHalt>
 80047f2:	4806      	ldr	r0, [pc, #24]	; (800480c <chHeapStatus+0x9c>)
 80047f4:	f7fb ffbc 	bl	8000770 <chSysHalt>
  lpages = 0U;
 80047f8:	469c      	mov	ip, r3
  tpages = 0U;
 80047fa:	469e      	mov	lr, r3
  n = 0U;
 80047fc:	461f      	mov	r7, r3
 80047fe:	e7e8      	b.n	80047d2 <chHeapStatus+0x62>
 8004800:	20001648 	.word	0x20001648
 8004804:	20000d70 	.word	0x20000d70
 8004808:	0800f214 	.word	0x0800f214
 800480c:	08010f48 	.word	0x08010f48

08004810 <chPoolAllocI>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004810:	4b0e      	ldr	r3, [pc, #56]	; (800484c <chPoolAllocI+0x3c>)
void *chPoolAllocI(memory_pool_t *mp) {
 8004812:	b510      	push	{r4, lr}
 8004814:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004816:	2a00      	cmp	r2, #0
 8004818:	db08      	blt.n	800482c <chPoolAllocI+0x1c>
 800481a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800481c:	2b00      	cmp	r3, #0
 800481e:	dd05      	ble.n	800482c <chPoolAllocI+0x1c>
  objp = mp->next;
 8004820:	4604      	mov	r4, r0
 8004822:	6800      	ldr	r0, [r0, #0]
  if (objp != NULL) {
 8004824:	b128      	cbz	r0, 8004832 <chPoolAllocI+0x22>
    mp->next = mp->next->next;
 8004826:	6803      	ldr	r3, [r0, #0]
 8004828:	6023      	str	r3, [r4, #0]
}
 800482a:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 800482c:	4808      	ldr	r0, [pc, #32]	; (8004850 <chPoolAllocI+0x40>)
 800482e:	f7fb ff9f 	bl	8000770 <chSysHalt>
  else if (mp->provider != NULL) {
 8004832:	68e3      	ldr	r3, [r4, #12]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f8      	beq.n	800482a <chPoolAllocI+0x1a>
    objp = mp->provider(mp->object_size, mp->align);
 8004838:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800483c:	4798      	blx	r3
    chDbgAssert(MEM_IS_ALIGNED(objp, mp->align),
 800483e:	68a3      	ldr	r3, [r4, #8]
 8004840:	3b01      	subs	r3, #1
 8004842:	4218      	tst	r0, r3
 8004844:	d0f1      	beq.n	800482a <chPoolAllocI+0x1a>
 8004846:	4803      	ldr	r0, [pc, #12]	; (8004854 <chPoolAllocI+0x44>)
 8004848:	f7fb ff92 	bl	8000770 <chSysHalt>
 800484c:	20000d70 	.word	0x20000d70
 8004850:	0800f22c 	.word	0x0800f22c
 8004854:	08010ef0 	.word	0x08010ef0
	...

08004860 <chGuardedPoolAllocTimeout>:
 8004860:	2320      	movs	r3, #32
 * @retval NULL         if the operation timed out.
 *
 * @api
 */
void *chGuardedPoolAllocTimeout(guarded_memory_pool_t *gmp,
                                sysinterval_t timeout) {
 8004862:	b570      	push	{r4, r5, r6, lr}
 8004864:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004868:	4d15      	ldr	r5, [pc, #84]	; (80048c0 <chGuardedPoolAllocTimeout+0x60>)
 800486a:	e9d5 340c 	ldrd	r3, r4, [r5, #48]	; 0x30
 800486e:	431c      	orrs	r4, r3
 8004870:	d11b      	bne.n	80048aa <chGuardedPoolAllocTimeout+0x4a>
  _dbg_enter_lock();
 8004872:	2301      	movs	r3, #1
 8004874:	4606      	mov	r6, r0
 8004876:	636b      	str	r3, [r5, #52]	; 0x34
  msg = chSemWaitTimeoutS(&gmp->sem, timeout);
 8004878:	f7fe f92a 	bl	8002ad0 <chSemWaitTimeoutS>
  if (msg != MSG_OK) {
 800487c:	b9d8      	cbnz	r0, 80048b6 <chGuardedPoolAllocTimeout+0x56>
  return chPoolAllocI(&gmp->pool);
 800487e:	f106 000c 	add.w	r0, r6, #12
 8004882:	f7ff ffc5 	bl	8004810 <chPoolAllocI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004886:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004888:	b993      	cbnz	r3, 80048b0 <chGuardedPoolAllocTimeout+0x50>
 800488a:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800488c:	2a00      	cmp	r2, #0
 800488e:	dd0f      	ble.n	80048b0 <chGuardedPoolAllocTimeout+0x50>
 8004890:	682a      	ldr	r2, [r5, #0]
  _dbg_leave_lock();
 8004892:	636b      	str	r3, [r5, #52]	; 0x34
 8004894:	42aa      	cmp	r2, r5
 8004896:	d004      	beq.n	80048a2 <chGuardedPoolAllocTimeout+0x42>
 8004898:	69a9      	ldr	r1, [r5, #24]
 800489a:	6893      	ldr	r3, [r2, #8]
 800489c:	688a      	ldr	r2, [r1, #8]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d30b      	bcc.n	80048ba <chGuardedPoolAllocTimeout+0x5a>
 80048a2:	2300      	movs	r3, #0
 80048a4:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chGuardedPoolAllocTimeoutS(gmp, timeout);
  chSysUnlock();

  return p;
}
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#4");
 80048aa:	4806      	ldr	r0, [pc, #24]	; (80048c4 <chGuardedPoolAllocTimeout+0x64>)
 80048ac:	f7fb ff60 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 80048b0:	4805      	ldr	r0, [pc, #20]	; (80048c8 <chGuardedPoolAllocTimeout+0x68>)
 80048b2:	f7fb ff5d 	bl	8000770 <chSysHalt>
    return NULL;
 80048b6:	4620      	mov	r0, r4
 80048b8:	e7e5      	b.n	8004886 <chGuardedPoolAllocTimeout+0x26>
 80048ba:	4804      	ldr	r0, [pc, #16]	; (80048cc <chGuardedPoolAllocTimeout+0x6c>)
 80048bc:	f7fb ff58 	bl	8000770 <chSysHalt>
 80048c0:	20000d70 	.word	0x20000d70
 80048c4:	0800f20c 	.word	0x0800f20c
 80048c8:	0800f214 	.word	0x0800f214
 80048cc:	08010e40 	.word	0x08010e40

080048d0 <chCacheReleaseObjectI>:
 * @param[in] objp      pointer to the @p oc_object_t structure
 *
 * @iclass
 */
void chCacheReleaseObjectI(objects_cache_t *ocp,
                           oc_object_t *objp) {
 80048d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  /* Checking initial conditions of the object to be released.*/
  chDbgAssert((objp->obj_flags & (OC_FLAG_INLRU |
 80048d2:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80048d4:	f006 0307 	and.w	r3, r6, #7
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d124      	bne.n	8004926 <chCacheReleaseObjectI+0x56>
 80048dc:	460c      	mov	r4, r1
 80048de:	4605      	mov	r5, r0
 80048e0:	f7fc f82e 	bl	8000940 <chDbgCheckClassI>
  return sp->cnt;
 80048e4:	6a27      	ldr	r7, [r4, #32]
                                  OC_FLAG_INHASH |
                                  OC_FLAG_SHARED)) == OC_FLAG_INHASH,
              "invalid object state");
  chDbgAssert(chSemGetCounterI(&objp->obj_sem) <= (cnt_t)0,
 80048e6:	2f00      	cmp	r7, #0
 80048e8:	dc1d      	bgt.n	8004926 <chCacheReleaseObjectI+0x56>
  chDbgCheckClassI();
 80048ea:	f7fc f829 	bl	8000940 <chDbgCheckClassI>
              "semaphore counter greater than 0");

  /* If some thread is waiting for this specific buffer then it is
     handed directly without going through the LRU.*/
  if (chSemGetCounterI(&objp->obj_sem) < (cnt_t)0) {
 80048ee:	2f00      	cmp	r7, #0
 80048f0:	d130      	bne.n	8004954 <chCacheReleaseObjectI+0x84>
    return;
  }

  /* If the object specifies OC_FLAG_NOTSYNC then it must be invalidated
     and removed from the hash table.*/
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 80048f2:	0731      	lsls	r1, r6, #28
    HASH_REMOVE(objp);
    LRU_INSERT_TAIL(ocp, objp);
 80048f4:	f105 0314 	add.w	r3, r5, #20
  if ((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U) {
 80048f8:	d418      	bmi.n	800492c <chCacheReleaseObjectI+0x5c>
    objp->obj_key   = 0U;
    objp->obj_flags = OC_FLAG_INLRU;
  }
  else {
    /* LRU insertion point depends on the OC_FLAG_FORGET flag.*/
    if ((objp->obj_flags & OC_FLAG_FORGET) == 0U) {
 80048fa:	06b2      	lsls	r2, r6, #26
 80048fc:	d424      	bmi.n	8004948 <chCacheReleaseObjectI+0x78>
      /* Placing it on head.*/
      LRU_INSERT_HEAD(ocp, objp);
 80048fe:	69ea      	ldr	r2, [r5, #28]
 8004900:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004904:	60d4      	str	r4, [r2, #12]
 8004906:	61ec      	str	r4, [r5, #28]
    }
    else {
      /* Low priority data, placing it on tail.*/
      LRU_INSERT_TAIL(ocp, objp);
    }
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_LAZYWRITE;
 8004908:	f006 0612 	and.w	r6, r6, #18
    objp->obj_flags |= OC_FLAG_INLRU;
 800490c:	f046 0601 	orr.w	r6, r6, #1
 8004910:	6266      	str	r6, [r4, #36]	; 0x24
  }

  /* Increasing the LRU counter semaphore.*/
  chSemSignalI(&ocp->lru_sem);
 8004912:	f105 0030 	add.w	r0, r5, #48	; 0x30
 8004916:	f7fe ff8b 	bl	8003830 <chSemSignalI>
  chDbgCheckClassI();
 800491a:	f7fc f811 	bl	8000940 <chDbgCheckClassI>
  sp->cnt++;
 800491e:	6a23      	ldr	r3, [r4, #32]
 8004920:	3301      	adds	r3, #1
 8004922:	6223      	str	r3, [r4, #32]

  /* Releasing the object, we know there are no threads waiting so
     using the "fast" signal variant.*/
  chSemFastSignalI(&objp->obj_sem);
}
 8004924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert((objp->obj_flags & (OC_FLAG_INLRU |
 8004926:	4810      	ldr	r0, [pc, #64]	; (8004968 <chCacheReleaseObjectI+0x98>)
 8004928:	f7fb ff22 	bl	8000770 <chSysHalt>
    objp->obj_flags = OC_FLAG_INLRU;
 800492c:	2601      	movs	r6, #1
    LRU_INSERT_TAIL(ocp, objp);
 800492e:	6a2a      	ldr	r2, [r5, #32]
    HASH_REMOVE(objp);
 8004930:	6860      	ldr	r0, [r4, #4]
 8004932:	6821      	ldr	r1, [r4, #0]
 8004934:	6001      	str	r1, [r0, #0]
 8004936:	6048      	str	r0, [r1, #4]
    LRU_INSERT_TAIL(ocp, objp);
 8004938:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800493c:	6094      	str	r4, [r2, #8]
 800493e:	622c      	str	r4, [r5, #32]
    objp->obj_key   = 0U;
 8004940:	e9c4 7704 	strd	r7, r7, [r4, #16]
    objp->obj_flags = OC_FLAG_INLRU;
 8004944:	6266      	str	r6, [r4, #36]	; 0x24
 8004946:	e7e4      	b.n	8004912 <chCacheReleaseObjectI+0x42>
      LRU_INSERT_TAIL(ocp, objp);
 8004948:	6a2a      	ldr	r2, [r5, #32]
 800494a:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800494e:	6094      	str	r4, [r2, #8]
 8004950:	622c      	str	r4, [r5, #32]
 8004952:	e7d9      	b.n	8004908 <chCacheReleaseObjectI+0x38>
    objp->obj_flags &= OC_FLAG_INHASH | OC_FLAG_NOTSYNC | OC_FLAG_LAZYWRITE;
 8004954:	f006 061a 	and.w	r6, r6, #26
 8004958:	6266      	str	r6, [r4, #36]	; 0x24
    chSemSignalI(&objp->obj_sem);
 800495a:	f104 0018 	add.w	r0, r4, #24
}
 800495e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chSemSignalI(&objp->obj_sem);
 8004962:	f7fe bf65 	b.w	8003830 <chSemSignalI>
 8004966:	bf00      	nop
 8004968:	08010b98 	.word	0x08010b98
 800496c:	00000000 	.word	0x00000000

08004970 <chDelegateCallVeneer>:
 * @param[in] veneer    pointer to the veneer function to be called
 * @param[in] ...       variable number of parameters
 * @return              The function return value casted to msg_t. It is
 *                      garbage for functions returning @p void.
 */
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 8004970:	b40e      	push	{r1, r2, r3}
 8004972:	b500      	push	{lr}
 8004974:	b084      	sub	sp, #16
 8004976:	ab05      	add	r3, sp, #20

  va_start(args, veneer);

  /* Preparing the call message.*/
  cm.veneer = veneer;
  cm.argsp  = &args;
 8004978:	aa01      	add	r2, sp, #4
 800497a:	9203      	str	r2, [sp, #12]
msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 800497c:	f853 2b04 	ldr.w	r2, [r3], #4
  (void)cm; /* Suppresses a lint warning.*/

  /* Sending the message to the dispatcher thread, the return value is
     contained in the returned message.*/
  msg = chMsgSend(tp, (msg_t)&cm);
 8004980:	a902      	add	r1, sp, #8
  cm.veneer = veneer;
 8004982:	e9cd 3201 	strd	r3, r2, [sp, #4]
  msg = chMsgSend(tp, (msg_t)&cm);
 8004986:	f7fd fceb 	bl	8002360 <chMsgSend>

  va_end(args);

  return msg;
}
 800498a:	b004      	add	sp, #16
 800498c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004990:	b003      	add	sp, #12
 8004992:	4770      	bx	lr
	...

080049a0 <dyn_create_object_heap.lto_priv.0>:

#if CH_FACTORY_REQUIRES_HEAP || defined(__DOXYGEN__)
static dyn_element_t *dyn_create_object_heap(const char *name,
                                             dyn_list_t *dlp,
                                             size_t size,
                                             unsigned align) {
 80049a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  dyn_element_t *p = dlp->next;
 80049a4:	680c      	ldr	r4, [r1, #0]
                                             unsigned align) {
 80049a6:	460e      	mov	r6, r1
  while (p != (dyn_element_t *)dlp) {
 80049a8:	42a1      	cmp	r1, r4
                                             unsigned align) {
 80049aa:	4605      	mov	r5, r0
 80049ac:	4617      	mov	r7, r2
 80049ae:	4698      	mov	r8, r3
  while (p != (dyn_element_t *)dlp) {
 80049b0:	d103      	bne.n	80049ba <dyn_create_object_heap.lto_priv.0+0x1a>
 80049b2:	e00e      	b.n	80049d2 <dyn_create_object_heap.lto_priv.0+0x32>
    p = p->next;
 80049b4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 80049b6:	42a6      	cmp	r6, r4
 80049b8:	d00b      	beq.n	80049d2 <dyn_create_object_heap.lto_priv.0+0x32>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 80049ba:	2208      	movs	r2, #8
 80049bc:	4629      	mov	r1, r5
 80049be:	f104 0008 	add.w	r0, r4, #8
 80049c2:	f00a fbdf 	bl	800f184 <strncmp>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d1f4      	bne.n	80049b4 <dyn_create_object_heap.lto_priv.0+0x14>

  chDbgCheck(name != NULL);

  /* Checking if an object with this name has already been created.*/
  dep = dyn_list_find(name, dlp);
  if (dep != NULL) {
 80049ca:	b114      	cbz	r4, 80049d2 <dyn_create_object_heap.lto_priv.0+0x32>
    return NULL;
 80049cc:	2000      	movs	r0, #0

  /* Updating factory list.*/
  dlp->next = dep;

  return dep;
}
 80049ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dep = (dyn_element_t *)chHeapAllocAligned(NULL, size, align);
 80049d2:	4642      	mov	r2, r8
 80049d4:	4639      	mov	r1, r7
 80049d6:	2000      	movs	r0, #0
 80049d8:	f7ff fc22 	bl	8004220 <chHeapAllocAligned>
  if (dep == NULL) {
 80049dc:	2800      	cmp	r0, #0
 80049de:	d0f5      	beq.n	80049cc <dyn_create_object_heap.lto_priv.0+0x2c>
  copy_name(name, dep->name);
 80049e0:	f100 0208 	add.w	r2, r0, #8
  i = CH_CFG_FACTORY_MAX_NAMES_LENGTH;
 80049e4:	f105 0108 	add.w	r1, r5, #8
    c = *sp++;
 80049e8:	f815 3b01 	ldrb.w	r3, [r5], #1
    *dp++ = c;
 80049ec:	f802 3b01 	strb.w	r3, [r2], #1
  } while ((c != (char)0) && (i > 0U));
 80049f0:	b10b      	cbz	r3, 80049f6 <dyn_create_object_heap.lto_priv.0+0x56>
 80049f2:	42a9      	cmp	r1, r5
 80049f4:	d1f8      	bne.n	80049e8 <dyn_create_object_heap.lto_priv.0+0x48>
  dep->refs = (ucnt_t)1;
 80049f6:	2301      	movs	r3, #1
  dep->next = dlp->next;
 80049f8:	6832      	ldr	r2, [r6, #0]
  dep->refs = (ucnt_t)1;
 80049fa:	e9c0 2300 	strd	r2, r3, [r0]
  dlp->next = dep;
 80049fe:	6030      	str	r0, [r6, #0]
}
 8004a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004a10 <dyn_release_object_heap.lto_priv.0>:

static void dyn_release_object_heap(dyn_element_t *dep,
                                    dyn_list_t *dlp) {
 8004a10:	b508      	push	{r3, lr}

  chDbgCheck(dep != NULL);
 8004a12:	b198      	cbz	r0, 8004a3c <dyn_release_object_heap.lto_priv.0+0x2c>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 8004a14:	6842      	ldr	r2, [r0, #4]
 8004a16:	4603      	mov	r3, r0
 8004a18:	b182      	cbz	r2, 8004a3c <dyn_release_object_heap.lto_priv.0+0x2c>

  dep->refs--;
 8004a1a:	3a01      	subs	r2, #1
 8004a1c:	6042      	str	r2, [r0, #4]
  if (dep->refs == (ucnt_t)0) {
 8004a1e:	b962      	cbnz	r2, 8004a3a <dyn_release_object_heap.lto_priv.0+0x2a>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8004a20:	4608      	mov	r0, r1
 8004a22:	e001      	b.n	8004a28 <dyn_release_object_heap.lto_priv.0+0x18>
    if (prev->next == element) {
 8004a24:	4283      	cmp	r3, r0
 8004a26:	d00c      	beq.n	8004a42 <dyn_release_object_heap.lto_priv.0+0x32>
  while (prev->next != (dyn_element_t *)dlp) {
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6800      	ldr	r0, [r0, #0]
 8004a2c:	4281      	cmp	r1, r0
 8004a2e:	d1f9      	bne.n	8004a24 <dyn_release_object_heap.lto_priv.0+0x14>
  return NULL;
 8004a30:	2000      	movs	r0, #0
    dep = dyn_list_unlink(dep, dlp);
    chHeapFree((void *)dep);
  }
}
 8004a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chHeapFree((void *)dep);
 8004a36:	f7ff bcb3 	b.w	80043a0 <chHeapFree>
}
 8004a3a:	bd08      	pop	{r3, pc}
  chDbgCheck(dep != NULL);
 8004a3c:	4804      	ldr	r0, [pc, #16]	; (8004a50 <dyn_release_object_heap.lto_priv.0+0x40>)
 8004a3e:	f7fb fe97 	bl	8000770 <chSysHalt>
      prev->next = element->next;
 8004a42:	6803      	ldr	r3, [r0, #0]
 8004a44:	6013      	str	r3, [r2, #0]
}
 8004a46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chHeapFree((void *)dep);
 8004a4a:	f7ff bca9 	b.w	80043a0 <chHeapFree>
 8004a4e:	bf00      	nop
 8004a50:	08010d04 	.word	0x08010d04
	...

08004a60 <dyn_release_object_pool.lto_priv.0>:
  return dep;
}

static void dyn_release_object_pool(dyn_element_t *dep,
                                    dyn_list_t *dlp,
                                    memory_pool_t *mp) {
 8004a60:	b508      	push	{r3, lr}

  chDbgCheck(dep != NULL);
 8004a62:	b1a8      	cbz	r0, 8004a90 <dyn_release_object_pool.lto_priv.0+0x30>
  chDbgAssert(dep->refs > (ucnt_t)0, "invalid references number");
 8004a64:	468c      	mov	ip, r1
 8004a66:	6841      	ldr	r1, [r0, #4]
 8004a68:	4603      	mov	r3, r0
 8004a6a:	b189      	cbz	r1, 8004a90 <dyn_release_object_pool.lto_priv.0+0x30>

  dep->refs--;
 8004a6c:	3901      	subs	r1, #1
 8004a6e:	6041      	str	r1, [r0, #4]
  if (dep->refs == (ucnt_t)0) {
 8004a70:	b969      	cbnz	r1, 8004a8e <dyn_release_object_pool.lto_priv.0+0x2e>
  dyn_element_t *prev = (dyn_element_t *)dlp;
 8004a72:	4661      	mov	r1, ip
 8004a74:	e001      	b.n	8004a7a <dyn_release_object_pool.lto_priv.0+0x1a>
    if (prev->next == element) {
 8004a76:	428b      	cmp	r3, r1
 8004a78:	d00d      	beq.n	8004a96 <dyn_release_object_pool.lto_priv.0+0x36>
  while (prev->next != (dyn_element_t *)dlp) {
 8004a7a:	4608      	mov	r0, r1
 8004a7c:	6809      	ldr	r1, [r1, #0]
 8004a7e:	458c      	cmp	ip, r1
 8004a80:	d1f9      	bne.n	8004a76 <dyn_release_object_pool.lto_priv.0+0x16>
  return NULL;
 8004a82:	2100      	movs	r1, #0
    dep = dyn_list_unlink(dep, dlp);
    chPoolFree(mp, (void *)dep);
  }
}
 8004a84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chPoolFree(mp, (void *)dep);
 8004a88:	4610      	mov	r0, r2
 8004a8a:	f7fc bf79 	b.w	8001980 <chPoolFree>
}
 8004a8e:	bd08      	pop	{r3, pc}
  chDbgCheck(dep != NULL);
 8004a90:	4804      	ldr	r0, [pc, #16]	; (8004aa4 <dyn_release_object_pool.lto_priv.0+0x44>)
 8004a92:	f7fb fe6d 	bl	8000770 <chSysHalt>
      prev->next = element->next;
 8004a96:	680b      	ldr	r3, [r1, #0]
 8004a98:	6003      	str	r3, [r0, #0]
    chPoolFree(mp, (void *)dep);
 8004a9a:	4610      	mov	r0, r2
}
 8004a9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    chPoolFree(mp, (void *)dep);
 8004aa0:	f7fc bf6e 	b.w	8001980 <chPoolFree>
 8004aa4:	08010f00 	.word	0x08010f00
	...

08004ab0 <chFactoryReleaseObject>:
 *
 * @param[in] rop       registered object reference
 *
 * @api
 */
void chFactoryReleaseObject(registered_object_t *rop) {
 8004ab0:	b538      	push	{r3, r4, r5, lr}
 8004ab2:	2320      	movs	r3, #32
 8004ab4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004ab8:	4c17      	ldr	r4, [pc, #92]	; (8004b18 <chFactoryReleaseObject+0x68>)
 8004aba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	d120      	bne.n	8004b04 <chFactoryReleaseObject+0x54>
  _dbg_enter_lock();
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	4605      	mov	r5, r0
 8004ac6:	4815      	ldr	r0, [pc, #84]	; (8004b1c <chFactoryReleaseObject+0x6c>)
 8004ac8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aca:	f7fe ff89 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004ace:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004ad0:	b9db      	cbnz	r3, 8004b0a <chFactoryReleaseObject+0x5a>
 8004ad2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004ad4:	2a00      	cmp	r2, #0
 8004ad6:	dd18      	ble.n	8004b0a <chFactoryReleaseObject+0x5a>
 8004ad8:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8004ada:	6363      	str	r3, [r4, #52]	; 0x34
 8004adc:	42a2      	cmp	r2, r4
 8004ade:	d004      	beq.n	8004aea <chFactoryReleaseObject+0x3a>
 8004ae0:	69a1      	ldr	r1, [r4, #24]
 8004ae2:	6893      	ldr	r3, [r2, #8]
 8004ae4:	688a      	ldr	r2, [r1, #8]
 8004ae6:	429a      	cmp	r2, r3
 8004ae8:	d312      	bcc.n	8004b10 <chFactoryReleaseObject+0x60>
 8004aea:	2300      	movs	r3, #0
 8004aec:	f383 8811 	msr	BASEPRI, r3

  F_LOCK();

  dyn_release_object_pool(&rop->element,
 8004af0:	4a0b      	ldr	r2, [pc, #44]	; (8004b20 <chFactoryReleaseObject+0x70>)
 8004af2:	4628      	mov	r0, r5
 8004af4:	1f11      	subs	r1, r2, #4
 8004af6:	f7ff ffb3 	bl	8004a60 <dyn_release_object_pool.lto_priv.0>
                          &ch_factory.obj_list,
                          &ch_factory.obj_pool);

  F_UNLOCK();
}
 8004afa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8004afe:	4807      	ldr	r0, [pc, #28]	; (8004b1c <chFactoryReleaseObject+0x6c>)
 8004b00:	f7ff b85e 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8004b04:	4807      	ldr	r0, [pc, #28]	; (8004b24 <chFactoryReleaseObject+0x74>)
 8004b06:	f7fb fe33 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8004b0a:	4807      	ldr	r0, [pc, #28]	; (8004b28 <chFactoryReleaseObject+0x78>)
 8004b0c:	f7fb fe30 	bl	8000770 <chSysHalt>
 8004b10:	4806      	ldr	r0, [pc, #24]	; (8004b2c <chFactoryReleaseObject+0x7c>)
 8004b12:	f7fb fe2d 	bl	8000770 <chSysHalt>
 8004b16:	bf00      	nop
 8004b18:	20000d70 	.word	0x20000d70
 8004b1c:	200015f8 	.word	0x200015f8
 8004b20:	2000160c 	.word	0x2000160c
 8004b24:	0800f20c 	.word	0x0800f20c
 8004b28:	0800f214 	.word	0x0800f214
 8004b2c:	08010f48 	.word	0x08010f48

08004b30 <chFactoryReleaseBuffer>:
 *
 * @param[in] dbp       dynamic buffer object reference
 *
 * @api
 */
void chFactoryReleaseBuffer(dyn_buffer_t *dbp) {
 8004b30:	b538      	push	{r3, r4, r5, lr}
 8004b32:	2320      	movs	r3, #32
 8004b34:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004b38:	4c16      	ldr	r4, [pc, #88]	; (8004b94 <chFactoryReleaseBuffer+0x64>)
 8004b3a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d11f      	bne.n	8004b82 <chFactoryReleaseBuffer+0x52>
  _dbg_enter_lock();
 8004b42:	2301      	movs	r3, #1
 8004b44:	4605      	mov	r5, r0
 8004b46:	4814      	ldr	r0, [pc, #80]	; (8004b98 <chFactoryReleaseBuffer+0x68>)
 8004b48:	6363      	str	r3, [r4, #52]	; 0x34
 8004b4a:	f7fe ff49 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004b4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b50:	b9d3      	cbnz	r3, 8004b88 <chFactoryReleaseBuffer+0x58>
 8004b52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	dd17      	ble.n	8004b88 <chFactoryReleaseBuffer+0x58>
 8004b58:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8004b5a:	6363      	str	r3, [r4, #52]	; 0x34
 8004b5c:	42a2      	cmp	r2, r4
 8004b5e:	d004      	beq.n	8004b6a <chFactoryReleaseBuffer+0x3a>
 8004b60:	69a1      	ldr	r1, [r4, #24]
 8004b62:	6893      	ldr	r3, [r2, #8]
 8004b64:	688a      	ldr	r2, [r1, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d311      	bcc.n	8004b8e <chFactoryReleaseBuffer+0x5e>
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f383 8811 	msr	BASEPRI, r3

  F_LOCK();

  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 8004b70:	490a      	ldr	r1, [pc, #40]	; (8004b9c <chFactoryReleaseBuffer+0x6c>)
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7ff ff4c 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>

  F_UNLOCK();
}
 8004b78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8004b7c:	4806      	ldr	r0, [pc, #24]	; (8004b98 <chFactoryReleaseBuffer+0x68>)
 8004b7e:	f7ff b81f 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8004b82:	4807      	ldr	r0, [pc, #28]	; (8004ba0 <chFactoryReleaseBuffer+0x70>)
 8004b84:	f7fb fdf4 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8004b88:	4806      	ldr	r0, [pc, #24]	; (8004ba4 <chFactoryReleaseBuffer+0x74>)
 8004b8a:	f7fb fdf1 	bl	8000770 <chSysHalt>
 8004b8e:	4806      	ldr	r0, [pc, #24]	; (8004ba8 <chFactoryReleaseBuffer+0x78>)
 8004b90:	f7fb fdee 	bl	8000770 <chSysHalt>
 8004b94:	20000d70 	.word	0x20000d70
 8004b98:	200015f8 	.word	0x200015f8
 8004b9c:	2000161c 	.word	0x2000161c
 8004ba0:	0800f20c 	.word	0x0800f20c
 8004ba4:	0800f214 	.word	0x0800f214
 8004ba8:	08010f48 	.word	0x08010f48
 8004bac:	00000000 	.word	0x00000000

08004bb0 <chFactoryReleaseSemaphore>:
 *
 * @param[in] dsp       dynamic semaphore object reference
 *
 * @api
 */
void chFactoryReleaseSemaphore(dyn_semaphore_t *dsp) {
 8004bb0:	b538      	push	{r3, r4, r5, lr}
 8004bb2:	2320      	movs	r3, #32
 8004bb4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004bb8:	4c17      	ldr	r4, [pc, #92]	; (8004c18 <chFactoryReleaseSemaphore+0x68>)
 8004bba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	d120      	bne.n	8004c04 <chFactoryReleaseSemaphore+0x54>
  _dbg_enter_lock();
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	4815      	ldr	r0, [pc, #84]	; (8004c1c <chFactoryReleaseSemaphore+0x6c>)
 8004bc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004bca:	f7fe ff09 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004bce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004bd0:	b9db      	cbnz	r3, 8004c0a <chFactoryReleaseSemaphore+0x5a>
 8004bd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004bd4:	2a00      	cmp	r2, #0
 8004bd6:	dd18      	ble.n	8004c0a <chFactoryReleaseSemaphore+0x5a>
 8004bd8:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8004bda:	6363      	str	r3, [r4, #52]	; 0x34
 8004bdc:	42a2      	cmp	r2, r4
 8004bde:	d004      	beq.n	8004bea <chFactoryReleaseSemaphore+0x3a>
 8004be0:	69a1      	ldr	r1, [r4, #24]
 8004be2:	6893      	ldr	r3, [r2, #8]
 8004be4:	688a      	ldr	r2, [r1, #8]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d312      	bcc.n	8004c10 <chFactoryReleaseSemaphore+0x60>
 8004bea:	2300      	movs	r3, #0
 8004bec:	f383 8811 	msr	BASEPRI, r3

  F_LOCK();

  dyn_release_object_pool(&dsp->element,
 8004bf0:	4a0b      	ldr	r2, [pc, #44]	; (8004c20 <chFactoryReleaseSemaphore+0x70>)
 8004bf2:	4628      	mov	r0, r5
 8004bf4:	1f11      	subs	r1, r2, #4
 8004bf6:	f7ff ff33 	bl	8004a60 <dyn_release_object_pool.lto_priv.0>
                          &ch_factory.sem_list,
                          &ch_factory.sem_pool);

  F_UNLOCK();
}
 8004bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8004bfe:	4807      	ldr	r0, [pc, #28]	; (8004c1c <chFactoryReleaseSemaphore+0x6c>)
 8004c00:	f7fe bfde 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8004c04:	4807      	ldr	r0, [pc, #28]	; (8004c24 <chFactoryReleaseSemaphore+0x74>)
 8004c06:	f7fb fdb3 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8004c0a:	4807      	ldr	r0, [pc, #28]	; (8004c28 <chFactoryReleaseSemaphore+0x78>)
 8004c0c:	f7fb fdb0 	bl	8000770 <chSysHalt>
 8004c10:	4806      	ldr	r0, [pc, #24]	; (8004c2c <chFactoryReleaseSemaphore+0x7c>)
 8004c12:	f7fb fdad 	bl	8000770 <chSysHalt>
 8004c16:	bf00      	nop
 8004c18:	20000d70 	.word	0x20000d70
 8004c1c:	200015f8 	.word	0x200015f8
 8004c20:	20001624 	.word	0x20001624
 8004c24:	0800f20c 	.word	0x0800f20c
 8004c28:	0800f214 	.word	0x0800f214
 8004c2c:	08010f48 	.word	0x08010f48

08004c30 <chFactoryReleaseMailbox>:
 *
 * @param[in] dmp       dynamic mailbox object reference
 *
 * @api
 */
void chFactoryReleaseMailbox(dyn_mailbox_t *dmp) {
 8004c30:	b538      	push	{r3, r4, r5, lr}
 8004c32:	2320      	movs	r3, #32
 8004c34:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004c38:	4c16      	ldr	r4, [pc, #88]	; (8004c94 <chFactoryReleaseMailbox+0x64>)
 8004c3a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	d11f      	bne.n	8004c82 <chFactoryReleaseMailbox+0x52>
  _dbg_enter_lock();
 8004c42:	2301      	movs	r3, #1
 8004c44:	4605      	mov	r5, r0
 8004c46:	4814      	ldr	r0, [pc, #80]	; (8004c98 <chFactoryReleaseMailbox+0x68>)
 8004c48:	6363      	str	r3, [r4, #52]	; 0x34
 8004c4a:	f7fe fec9 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004c4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004c50:	b9d3      	cbnz	r3, 8004c88 <chFactoryReleaseMailbox+0x58>
 8004c52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004c54:	2a00      	cmp	r2, #0
 8004c56:	dd17      	ble.n	8004c88 <chFactoryReleaseMailbox+0x58>
 8004c58:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8004c5a:	6363      	str	r3, [r4, #52]	; 0x34
 8004c5c:	42a2      	cmp	r2, r4
 8004c5e:	d004      	beq.n	8004c6a <chFactoryReleaseMailbox+0x3a>
 8004c60:	69a1      	ldr	r1, [r4, #24]
 8004c62:	6893      	ldr	r3, [r2, #8]
 8004c64:	688a      	ldr	r2, [r1, #8]
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d311      	bcc.n	8004c8e <chFactoryReleaseMailbox+0x5e>
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	f383 8811 	msr	BASEPRI, r3

  F_LOCK();

  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 8004c70:	490a      	ldr	r1, [pc, #40]	; (8004c9c <chFactoryReleaseMailbox+0x6c>)
 8004c72:	4628      	mov	r0, r5
 8004c74:	f7ff fecc 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>

  F_UNLOCK();
}
 8004c78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8004c7c:	4806      	ldr	r0, [pc, #24]	; (8004c98 <chFactoryReleaseMailbox+0x68>)
 8004c7e:	f7fe bf9f 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8004c82:	4807      	ldr	r0, [pc, #28]	; (8004ca0 <chFactoryReleaseMailbox+0x70>)
 8004c84:	f7fb fd74 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8004c88:	4806      	ldr	r0, [pc, #24]	; (8004ca4 <chFactoryReleaseMailbox+0x74>)
 8004c8a:	f7fb fd71 	bl	8000770 <chSysHalt>
 8004c8e:	4806      	ldr	r0, [pc, #24]	; (8004ca8 <chFactoryReleaseMailbox+0x78>)
 8004c90:	f7fb fd6e 	bl	8000770 <chSysHalt>
 8004c94:	20000d70 	.word	0x20000d70
 8004c98:	200015f8 	.word	0x200015f8
 8004c9c:	20001634 	.word	0x20001634
 8004ca0:	0800f20c 	.word	0x0800f20c
 8004ca4:	0800f214 	.word	0x0800f214
 8004ca8:	08010f48 	.word	0x08010f48
 8004cac:	00000000 	.word	0x00000000

08004cb0 <chFactoryReleaseObjectsFIFO>:
 *
 * @param[in] dofp      dynamic "objects FIFO" object reference
 *
 * @api
 */
void chFactoryReleaseObjectsFIFO(dyn_objects_fifo_t *dofp) {
 8004cb0:	b538      	push	{r3, r4, r5, lr}
 8004cb2:	2320      	movs	r3, #32
 8004cb4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004cb8:	4c16      	ldr	r4, [pc, #88]	; (8004d14 <chFactoryReleaseObjectsFIFO+0x64>)
 8004cba:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	d11f      	bne.n	8004d02 <chFactoryReleaseObjectsFIFO+0x52>
  _dbg_enter_lock();
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	4605      	mov	r5, r0
 8004cc6:	4814      	ldr	r0, [pc, #80]	; (8004d18 <chFactoryReleaseObjectsFIFO+0x68>)
 8004cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8004cca:	f7fe fe89 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004cce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004cd0:	b9d3      	cbnz	r3, 8004d08 <chFactoryReleaseObjectsFIFO+0x58>
 8004cd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004cd4:	2a00      	cmp	r2, #0
 8004cd6:	dd17      	ble.n	8004d08 <chFactoryReleaseObjectsFIFO+0x58>
 8004cd8:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8004cda:	6363      	str	r3, [r4, #52]	; 0x34
 8004cdc:	42a2      	cmp	r2, r4
 8004cde:	d004      	beq.n	8004cea <chFactoryReleaseObjectsFIFO+0x3a>
 8004ce0:	69a1      	ldr	r1, [r4, #24]
 8004ce2:	6893      	ldr	r3, [r2, #8]
 8004ce4:	688a      	ldr	r2, [r1, #8]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d311      	bcc.n	8004d0e <chFactoryReleaseObjectsFIFO+0x5e>
 8004cea:	2300      	movs	r3, #0
 8004cec:	f383 8811 	msr	BASEPRI, r3

  F_LOCK();

  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 8004cf0:	490a      	ldr	r1, [pc, #40]	; (8004d1c <chFactoryReleaseObjectsFIFO+0x6c>)
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7ff fe8c 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>

  F_UNLOCK();
}
 8004cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8004cfc:	4806      	ldr	r0, [pc, #24]	; (8004d18 <chFactoryReleaseObjectsFIFO+0x68>)
 8004cfe:	f7fe bf5f 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8004d02:	4807      	ldr	r0, [pc, #28]	; (8004d20 <chFactoryReleaseObjectsFIFO+0x70>)
 8004d04:	f7fb fd34 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8004d08:	4806      	ldr	r0, [pc, #24]	; (8004d24 <chFactoryReleaseObjectsFIFO+0x74>)
 8004d0a:	f7fb fd31 	bl	8000770 <chSysHalt>
 8004d0e:	4806      	ldr	r0, [pc, #24]	; (8004d28 <chFactoryReleaseObjectsFIFO+0x78>)
 8004d10:	f7fb fd2e 	bl	8000770 <chSysHalt>
 8004d14:	20000d70 	.word	0x20000d70
 8004d18:	200015f8 	.word	0x200015f8
 8004d1c:	20001638 	.word	0x20001638
 8004d20:	0800f20c 	.word	0x0800f20c
 8004d24:	0800f214 	.word	0x0800f214
 8004d28:	08010f48 	.word	0x08010f48
 8004d2c:	00000000 	.word	0x00000000

08004d30 <chFactoryReleasePipe>:
 *
 * @param[in] dpp       dynamic pipe object reference
 *
 * @api
 */
void chFactoryReleasePipe(dyn_pipe_t *dpp) {
 8004d30:	b538      	push	{r3, r4, r5, lr}
 8004d32:	2320      	movs	r3, #32
 8004d34:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8004d38:	4c16      	ldr	r4, [pc, #88]	; (8004d94 <chFactoryReleasePipe+0x64>)
 8004d3a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	d11f      	bne.n	8004d82 <chFactoryReleasePipe+0x52>
  _dbg_enter_lock();
 8004d42:	2301      	movs	r3, #1
 8004d44:	4605      	mov	r5, r0
 8004d46:	4814      	ldr	r0, [pc, #80]	; (8004d98 <chFactoryReleasePipe+0x68>)
 8004d48:	6363      	str	r3, [r4, #52]	; 0x34
 8004d4a:	f7fe fe49 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8004d4e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004d50:	b9d3      	cbnz	r3, 8004d88 <chFactoryReleasePipe+0x58>
 8004d52:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004d54:	2a00      	cmp	r2, #0
 8004d56:	dd17      	ble.n	8004d88 <chFactoryReleasePipe+0x58>
 8004d58:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 8004d5a:	6363      	str	r3, [r4, #52]	; 0x34
 8004d5c:	42a2      	cmp	r2, r4
 8004d5e:	d004      	beq.n	8004d6a <chFactoryReleasePipe+0x3a>
 8004d60:	69a1      	ldr	r1, [r4, #24]
 8004d62:	6893      	ldr	r3, [r2, #8]
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d311      	bcc.n	8004d8e <chFactoryReleasePipe+0x5e>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	f383 8811 	msr	BASEPRI, r3

  F_LOCK();

  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);
 8004d70:	490a      	ldr	r1, [pc, #40]	; (8004d9c <chFactoryReleasePipe+0x6c>)
 8004d72:	4628      	mov	r0, r5
 8004d74:	f7ff fe4c 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>

  F_UNLOCK();
}
 8004d78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  F_UNLOCK();
 8004d7c:	4806      	ldr	r0, [pc, #24]	; (8004d98 <chFactoryReleasePipe+0x68>)
 8004d7e:	f7fe bf1f 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8004d82:	4807      	ldr	r0, [pc, #28]	; (8004da0 <chFactoryReleasePipe+0x70>)
 8004d84:	f7fb fcf4 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8004d88:	4806      	ldr	r0, [pc, #24]	; (8004da4 <chFactoryReleasePipe+0x74>)
 8004d8a:	f7fb fcf1 	bl	8000770 <chSysHalt>
 8004d8e:	4806      	ldr	r0, [pc, #24]	; (8004da8 <chFactoryReleasePipe+0x78>)
 8004d90:	f7fb fcee 	bl	8000770 <chSysHalt>
 8004d94:	20000d70 	.word	0x20000d70
 8004d98:	200015f8 	.word	0x200015f8
 8004d9c:	2000163c 	.word	0x2000163c
 8004da0:	0800f20c 	.word	0x0800f20c
 8004da4:	0800f214 	.word	0x0800f214
 8004da8:	08010f48 	.word	0x08010f48
 8004dac:	00000000 	.word	0x00000000

08004db0 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8004db0:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8004db4:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8004db6:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f383 8811 	msr	BASEPRI, r3
}
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
	...

08004dd0 <chprintf>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8004dd0:	b40e      	push	{r1, r2, r3}
 8004dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	ab0f      	add	r3, sp, #60	; 0x3c
 8004dda:	f853 8b04 	ldr.w	r8, [r3], #4
    c = *fmt++;
 8004dde:	4644      	mov	r4, r8
 8004de0:	f814 1b01 	ldrb.w	r1, [r4], #1
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8004de4:	e9cd 3301 	strd	r3, r3, [sp, #4]
    if (c == 0) {
 8004de8:	2900      	cmp	r1, #0
 8004dea:	f000 824e 	beq.w	800528a <chprintf+0x4ba>
 8004dee:	4605      	mov	r5, r0
  int n = 0;
 8004df0:	f04f 0900 	mov.w	r9, #0
 8004df4:	e00c      	b.n	8004e10 <chprintf+0x40>
      streamPut(chp, (uint8_t)c);
 8004df6:	682b      	ldr	r3, [r5, #0]
 8004df8:	4628      	mov	r0, r5
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	4798      	blx	r3
    c = *fmt++;
 8004dfe:	46a0      	mov	r8, r4
      n++;
 8004e00:	f109 0901 	add.w	r9, r9, #1
    c = *fmt++;
 8004e04:	3401      	adds	r4, #1
 8004e06:	f898 1000 	ldrb.w	r1, [r8]
    if (c == 0) {
 8004e0a:	2900      	cmp	r1, #0
 8004e0c:	f000 8103 	beq.w	8005016 <chprintf+0x246>
    if (c != '%') {
 8004e10:	2925      	cmp	r1, #37	; 0x25
 8004e12:	d1f0      	bne.n	8004df6 <chprintf+0x26>
    if (*fmt == '-') {
 8004e14:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004e18:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8004e1a:	bf08      	it	eq
 8004e1c:	f108 0402 	addeq.w	r4, r8, #2
    if (*fmt == '+') {
 8004e20:	7823      	ldrb	r3, [r4, #0]
      left_align = true;
 8004e22:	bf0c      	ite	eq
 8004e24:	f04f 0c01 	moveq.w	ip, #1
    left_align = false;
 8004e28:	f04f 0c00 	movne.w	ip, #0
    if (*fmt == '+') {
 8004e2c:	2b2b      	cmp	r3, #43	; 0x2b
    if (*fmt == '0') {
 8004e2e:	bf03      	ittte	eq
 8004e30:	7863      	ldrbeq	r3, [r4, #1]
      do_sign = true;
 8004e32:	2601      	moveq	r6, #1
      fmt++;
 8004e34:	3401      	addeq	r4, #1
    do_sign = false;
 8004e36:	2600      	movne	r6, #0
    if (*fmt == '0') {
 8004e38:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8004e3a:	bf03      	ittte	eq
 8004e3c:	3401      	addeq	r4, #1
      filler = '0';
 8004e3e:	461f      	moveq	r7, r3
    if ( *fmt == '*') {
 8004e40:	7823      	ldrbeq	r3, [r4, #0]
    filler = ' ';
 8004e42:	2720      	movne	r7, #32
    if ( *fmt == '*') {
 8004e44:	2b2a      	cmp	r3, #42	; 0x2a
 8004e46:	d14c      	bne.n	8004ee2 <chprintf+0x112>
      c = *fmt++;
 8004e48:	7863      	ldrb	r3, [r4, #1]
      width = va_arg(ap, int);
 8004e4a:	f8dd e004 	ldr.w	lr, [sp, #4]
    if (c == '.') {
 8004e4e:	2b2e      	cmp	r3, #46	; 0x2e
      c = *fmt++;
 8004e50:	f104 0802 	add.w	r8, r4, #2
      width = va_arg(ap, int);
 8004e54:	f85e 0b04 	ldr.w	r0, [lr], #4
      c = *fmt++;
 8004e58:	f104 0403 	add.w	r4, r4, #3
    if (c == '.') {
 8004e5c:	d05c      	beq.n	8004f18 <chprintf+0x148>
    precision = 0;
 8004e5e:	2100      	movs	r1, #0
    if (c == 'l' || c == 'L') {
 8004e60:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8004e64:	2a4c      	cmp	r2, #76	; 0x4c
 8004e66:	d069      	beq.n	8004f3c <chprintf+0x16c>
    switch (c) {
 8004e68:	f1a3 0a44 	sub.w	sl, r3, #68	; 0x44
 8004e6c:	f1ba 0f34 	cmp.w	sl, #52	; 0x34
 8004e70:	f200 80a7 	bhi.w	8004fc2 <chprintf+0x1f2>
 8004e74:	e8df f01a 	tbh	[pc, sl, lsl #1]
 8004e78:	00a50150 	.word	0x00a50150
 8004e7c:	00a500a5 	.word	0x00a500a5
 8004e80:	015000a5 	.word	0x015000a5
 8004e84:	00a500a5 	.word	0x00a500a5
 8004e88:	00a500a5 	.word	0x00a500a5
 8004e8c:	01e500a5 	.word	0x01e500a5
 8004e90:	00a5018d 	.word	0x00a5018d
 8004e94:	00a500a5 	.word	0x00a500a5
 8004e98:	01e800a5 	.word	0x01e800a5
 8004e9c:	00a500a5 	.word	0x00a500a5
 8004ea0:	00a5018d 	.word	0x00a5018d
 8004ea4:	00a500a5 	.word	0x00a500a5
 8004ea8:	00a500a5 	.word	0x00a500a5
 8004eac:	00a500a5 	.word	0x00a500a5
 8004eb0:	00a500a5 	.word	0x00a500a5
 8004eb4:	011d00a5 	.word	0x011d00a5
 8004eb8:	00a50150 	.word	0x00a50150
 8004ebc:	00a500a5 	.word	0x00a500a5
 8004ec0:	015000a5 	.word	0x015000a5
 8004ec4:	00a500a5 	.word	0x00a500a5
 8004ec8:	00a500a5 	.word	0x00a500a5
 8004ecc:	01e500a5 	.word	0x01e500a5
 8004ed0:	00a5018d 	.word	0x00a5018d
 8004ed4:	00f800a5 	.word	0x00f800a5
 8004ed8:	01e800a5 	.word	0x01e800a5
 8004edc:	00a500a5 	.word	0x00a500a5
 8004ee0:	018d      	.short	0x018d
        c = *fmt++;
 8004ee2:	3401      	adds	r4, #1
        if (c == 0) {
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 8096 	beq.w	8005016 <chprintf+0x246>
      width = 0;
 8004eea:	2000      	movs	r0, #0
 8004eec:	e006      	b.n	8004efc <chprintf+0x12c>
        c = *fmt++;
 8004eee:	f814 3c01 	ldrb.w	r3, [r4, #-1]
          width = width * 10 + c;
 8004ef2:	eb02 0041 	add.w	r0, r2, r1, lsl #1
        if (c == 0) {
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	f000 808d 	beq.w	8005016 <chprintf+0x246>
        if (c >= '0' && c <= '9') {
 8004efc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	2a09      	cmp	r2, #9
 8004f04:	46a0      	mov	r8, r4
          width = width * 10 + c;
 8004f06:	eb00 0180 	add.w	r1, r0, r0, lsl #2
        c = *fmt++;
 8004f0a:	f104 0401 	add.w	r4, r4, #1
        if (c >= '0' && c <= '9') {
 8004f0e:	d9ee      	bls.n	8004eee <chprintf+0x11e>
    if (c == '.') {
 8004f10:	2b2e      	cmp	r3, #46	; 0x2e
        if (c >= '0' && c <= '9') {
 8004f12:	f8dd e004 	ldr.w	lr, [sp, #4]
    if (c == '.') {
 8004f16:	d1a2      	bne.n	8004e5e <chprintf+0x8e>
      c = *fmt++;
 8004f18:	f898 3000 	ldrb.w	r3, [r8]
      if (c == 0) {
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d07a      	beq.n	8005016 <chprintf+0x246>
      if (c == '*') {
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d166      	bne.n	8004ff2 <chprintf+0x222>
        c = *fmt++;
 8004f24:	f898 3001 	ldrb.w	r3, [r8, #1]
      c = *fmt++;
 8004f28:	f108 0403 	add.w	r4, r8, #3
    if (c == 'l' || c == 'L') {
 8004f2c:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8004f30:	2a4c      	cmp	r2, #76	; 0x4c
        precision = va_arg(ap, int);
 8004f32:	f85e 1b04 	ldr.w	r1, [lr], #4
        c = *fmt++;
 8004f36:	f108 0802 	add.w	r8, r8, #2
    if (c == 'l' || c == 'L') {
 8004f3a:	d195      	bne.n	8004e68 <chprintf+0x98>
      c = *fmt++;
 8004f3c:	f898 3000 	ldrb.w	r3, [r8]
      if (c == 0) {
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d068      	beq.n	8005016 <chprintf+0x246>
    switch (c) {
 8004f44:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    c = *fmt++;
 8004f48:	f104 0a01 	add.w	sl, r4, #1
 8004f4c:	2a34      	cmp	r2, #52	; 0x34
 8004f4e:	d836      	bhi.n	8004fbe <chprintf+0x1ee>
 8004f50:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004f54:	00350157 	.word	0x00350157
 8004f58:	00350035 	.word	0x00350035
 8004f5c:	01570035 	.word	0x01570035
 8004f60:	00350035 	.word	0x00350035
 8004f64:	00350035 	.word	0x00350035
 8004f68:	01860035 	.word	0x01860035
 8004f6c:	0035014e 	.word	0x0035014e
 8004f70:	00350035 	.word	0x00350035
 8004f74:	017d0035 	.word	0x017d0035
 8004f78:	00350035 	.word	0x00350035
 8004f7c:	0035014e 	.word	0x0035014e
 8004f80:	00350035 	.word	0x00350035
 8004f84:	00350035 	.word	0x00350035
 8004f88:	00350035 	.word	0x00350035
 8004f8c:	00350035 	.word	0x00350035
 8004f90:	00ad0035 	.word	0x00ad0035
 8004f94:	00350157 	.word	0x00350157
 8004f98:	00350035 	.word	0x00350035
 8004f9c:	01570035 	.word	0x01570035
 8004fa0:	00350035 	.word	0x00350035
 8004fa4:	00350035 	.word	0x00350035
 8004fa8:	01860035 	.word	0x01860035
 8004fac:	0035014e 	.word	0x0035014e
 8004fb0:	00880035 	.word	0x00880035
 8004fb4:	017d0035 	.word	0x017d0035
 8004fb8:	00350035 	.word	0x00350035
 8004fbc:	014e      	.short	0x014e
 8004fbe:	46a0      	mov	r8, r4
 8004fc0:	4654      	mov	r4, sl
      *p++ = c;
 8004fc2:	3801      	subs	r0, #1
 8004fc4:	f88d 300c 	strb.w	r3, [sp, #12]
    if ((width -= i) < 0) {
 8004fc8:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
      *p++ = c;
 8004fcc:	f8cd e004 	str.w	lr, [sp, #4]
 8004fd0:	9300      	str	r3, [sp, #0]
    if (left_align == false) {
 8004fd2:	f1bc 0f00 	cmp.w	ip, #0
 8004fd6:	d125      	bne.n	8005024 <chprintf+0x254>
 8004fd8:	4666      	mov	r6, ip
 8004fda:	f10d 0a0c 	add.w	sl, sp, #12
      width = -width;
 8004fde:	9b00      	ldr	r3, [sp, #0]
    if (width < 0) {
 8004fe0:	2800      	cmp	r0, #0
      width = -width;
 8004fe2:	f1c3 0b00 	rsb	fp, r3, #0
    if (width < 0) {
 8004fe6:	dc73      	bgt.n	80050d0 <chprintf+0x300>
      width = -width;
 8004fe8:	f8cd b000 	str.w	fp, [sp]
    while (--i >= 0) {
 8004fec:	2e00      	cmp	r6, #0
 8004fee:	da1c      	bge.n	800502a <chprintf+0x25a>
 8004ff0:	e029      	b.n	8005046 <chprintf+0x276>
    precision = 0;
 8004ff2:	2100      	movs	r1, #0
        while (c >= '0' && c <= '9') {
 8004ff4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	2a09      	cmp	r2, #9
 8004ffc:	46a0      	mov	r8, r4
          precision = precision * 10 + c;
 8004ffe:	eb01 0a81 	add.w	sl, r1, r1, lsl #2
          c = *fmt++;
 8005002:	f104 0401 	add.w	r4, r4, #1
        while (c >= '0' && c <= '9') {
 8005006:	f63f af2b 	bhi.w	8004e60 <chprintf+0x90>
          c = *fmt++;
 800500a:	f814 3c01 	ldrb.w	r3, [r4, #-1]
          precision = precision * 10 + c;
 800500e:	eb02 014a 	add.w	r1, r2, sl, lsl #1
          if (c == 0) {
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1ee      	bne.n	8004ff4 <chprintf+0x224>
 8005016:	464b      	mov	r3, r9
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8005018:	4618      	mov	r0, r3
 800501a:	b006      	add	sp, #24
 800501c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005020:	b003      	add	sp, #12
 8005022:	4770      	bx	lr
    if (left_align == false) {
 8005024:	2600      	movs	r6, #0
 8005026:	f10d 0a0c 	add.w	sl, sp, #12
 800502a:	f106 0b01 	add.w	fp, r6, #1
 800502e:	44d3      	add	fp, sl
      streamPut(chp, (uint8_t)*s++);
 8005030:	682b      	ldr	r3, [r5, #0]
 8005032:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005036:	4628      	mov	r0, r5
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4798      	blx	r3
    while (--i >= 0) {
 800503c:	45da      	cmp	sl, fp
 800503e:	d1f7      	bne.n	8005030 <chprintf+0x260>
 8005040:	f109 0901 	add.w	r9, r9, #1
      n++;
 8005044:	44b1      	add	r9, r6
    while (width) {
 8005046:	9e00      	ldr	r6, [sp, #0]
 8005048:	2e00      	cmp	r6, #0
 800504a:	f43f aedc 	beq.w	8004e06 <chprintf+0x36>
      streamPut(chp, (uint8_t)filler);
 800504e:	682b      	ldr	r3, [r5, #0]
 8005050:	4639      	mov	r1, r7
 8005052:	4628      	mov	r0, r5
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	4798      	blx	r3
    while (width) {
 8005058:	3e01      	subs	r6, #1
 800505a:	d1f8      	bne.n	800504e <chprintf+0x27e>
      n++;
 800505c:	9b00      	ldr	r3, [sp, #0]
 800505e:	444b      	add	r3, r9
 8005060:	4699      	mov	r9, r3
 8005062:	e6d0      	b.n	8004e06 <chprintf+0x36>
    c = *fmt++;
 8005064:	46a0      	mov	r8, r4
 8005066:	4654      	mov	r4, sl
      if ((s = va_arg(ap, char *)) == 0) {
 8005068:	4673      	mov	r3, lr
 800506a:	f853 ab04 	ldr.w	sl, [r3], #4
 800506e:	9301      	str	r3, [sp, #4]
 8005070:	f1ba 0f00 	cmp.w	sl, #0
 8005074:	f000 80fd 	beq.w	8005272 <chprintf+0x4a2>
      for (p = s; *p && (--precision >= 0); p++)
 8005078:	f89a 2000 	ldrb.w	r2, [sl]
      if (precision == 0) {
 800507c:	2900      	cmp	r1, #0
 800507e:	f000 80d1 	beq.w	8005224 <chprintf+0x454>
      for (p = s; *p && (--precision >= 0); p++)
 8005082:	2a00      	cmp	r2, #0
 8005084:	f000 80d3 	beq.w	800522e <chprintf+0x45e>
 8005088:	3901      	subs	r1, #1
 800508a:	f100 80d0 	bmi.w	800522e <chprintf+0x45e>
 800508e:	4652      	mov	r2, sl
 8005090:	e001      	b.n	8005096 <chprintf+0x2c6>
 8005092:	42ce      	cmn	r6, r1
 8005094:	d405      	bmi.n	80050a2 <chprintf+0x2d2>
 8005096:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800509a:	ebaa 0602 	sub.w	r6, sl, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f7      	bne.n	8005092 <chprintf+0x2c2>
    i = (int)(p - s);
 80050a2:	eba2 020a 	sub.w	r2, r2, sl
      filler = ' ';
 80050a6:	2720      	movs	r7, #32
    if ((width -= i) < 0) {
 80050a8:	1a80      	subs	r0, r0, r2
        i--;
 80050aa:	1e56      	subs	r6, r2, #1
 80050ac:	e069      	b.n	8005182 <chprintf+0x3b2>
    c = *fmt++;
 80050ae:	46a0      	mov	r8, r4
 80050b0:	4654      	mov	r4, sl
      *p++ = va_arg(ap, int);
 80050b2:	4672      	mov	r2, lr
 80050b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80050b8:	3801      	subs	r0, #1
 80050ba:	f88d 300c 	strb.w	r3, [sp, #12]
      break;
 80050be:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
      filler = ' ';
 80050c2:	2720      	movs	r7, #32
      *p++ = va_arg(ap, int);
 80050c4:	9201      	str	r2, [sp, #4]
 80050c6:	9300      	str	r3, [sp, #0]
    if (left_align == false) {
 80050c8:	f1bc 0f00 	cmp.w	ip, #0
 80050cc:	d1aa      	bne.n	8005024 <chprintf+0x254>
 80050ce:	e783      	b.n	8004fd8 <chprintf+0x208>
      if ((*s == '-' || *s == '+') && filler == '0') {
 80050d0:	f89a 1000 	ldrb.w	r1, [sl]
      streamPut(chp, (uint8_t)c);
 80050d4:	682a      	ldr	r2, [r5, #0]
      if ((*s == '-' || *s == '+') && filler == '0') {
 80050d6:	292d      	cmp	r1, #45	; 0x2d
      streamPut(chp, (uint8_t)c);
 80050d8:	68d2      	ldr	r2, [r2, #12]
      if ((*s == '-' || *s == '+') && filler == '0') {
 80050da:	d001      	beq.n	80050e0 <chprintf+0x310>
 80050dc:	292b      	cmp	r1, #43	; 0x2b
 80050de:	d10d      	bne.n	80050fc <chprintf+0x32c>
 80050e0:	2f30      	cmp	r7, #48	; 0x30
 80050e2:	d10b      	bne.n	80050fc <chprintf+0x32c>
        streamPut(chp, (uint8_t)*s++);
 80050e4:	4628      	mov	r0, r5
 80050e6:	4790      	blx	r2
        streamPut(chp, (uint8_t)filler);
 80050e8:	682a      	ldr	r2, [r5, #0]
      n++;
 80050ea:	f109 0901 	add.w	r9, r9, #1
        streamPut(chp, (uint8_t)filler);
 80050ee:	68d2      	ldr	r2, [r2, #12]
        streamPut(chp, (uint8_t)*s++);
 80050f0:	f10a 0a01 	add.w	sl, sl, #1
    while (--i >= 0) {
 80050f4:	3e01      	subs	r6, #1
 80050f6:	e001      	b.n	80050fc <chprintf+0x32c>
        streamPut(chp, (uint8_t)filler);
 80050f8:	682b      	ldr	r3, [r5, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	4639      	mov	r1, r7
 80050fe:	4628      	mov	r0, r5
 8005100:	4790      	blx	r2
      } while (++width != 0);
 8005102:	f11b 0b01 	adds.w	fp, fp, #1
 8005106:	d1f7      	bne.n	80050f8 <chprintf+0x328>
 8005108:	9b00      	ldr	r3, [sp, #0]
    while (--i >= 0) {
 800510a:	2e00      	cmp	r6, #0
 800510c:	4499      	add	r9, r3
 800510e:	bfa8      	it	ge
 8005110:	f8cd b000 	strge.w	fp, [sp]
 8005114:	da89      	bge.n	800502a <chprintf+0x25a>
 8005116:	e676      	b.n	8004e06 <chprintf+0x36>
        l = va_arg(ap, int);
 8005118:	f8de 1000 	ldr.w	r1, [lr]
 800511c:	f10e 0304 	add.w	r3, lr, #4
      if (l < 0) {
 8005120:	2900      	cmp	r1, #0
        l = va_arg(ap, int);
 8005122:	9301      	str	r3, [sp, #4]
      if (l < 0) {
 8005124:	db76      	blt.n	8005214 <chprintf+0x444>
        if (do_sign) {
 8005126:	2e00      	cmp	r6, #0
 8005128:	f000 80a9 	beq.w	800527e <chprintf+0x4ae>
          *p++ = '+';
 800512c:	232b      	movs	r3, #43	; 0x2b
 800512e:	f10d 0a0d 	add.w	sl, sp, #13
 8005132:	f88d 300c 	strb.w	r3, [sp, #12]
 8005136:	ab03      	add	r3, sp, #12
  q = p + MAX_FILLER;
 8005138:	f10a 020b 	add.w	r2, sl, #11
 800513c:	4616      	mov	r6, r2
 800513e:	9200      	str	r2, [sp, #0]
    i = (int)(l % radix);
 8005140:	4a54      	ldr	r2, [pc, #336]	; (8005294 <chprintf+0x4c4>)
 8005142:	468b      	mov	fp, r1
 8005144:	fba2 e201 	umull	lr, r2, r2, r1
 8005148:	08d2      	lsrs	r2, r2, #3
 800514a:	4696      	mov	lr, r2
 800514c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005150:	eba1 0242 	sub.w	r2, r1, r2, lsl #1
    i += '0';
 8005154:	3230      	adds	r2, #48	; 0x30
    *--q = i;
 8005156:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 8005158:	f1bb 0f09 	cmp.w	fp, #9
    l /= radix;
 800515c:	4671      	mov	r1, lr
    *--q = i;
 800515e:	f806 2d01 	strb.w	r2, [r6, #-1]!
  } while ((ll /= radix) != 0);
 8005162:	dced      	bgt.n	8005140 <chprintf+0x370>
  i = (int)(p + MAX_FILLER - q);
 8005164:	9900      	ldr	r1, [sp, #0]
 8005166:	1b89      	subs	r1, r1, r6
 8005168:	4451      	add	r1, sl
 800516a:	e001      	b.n	8005170 <chprintf+0x3a0>
    *p++ = *q++;
 800516c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8005170:	f80a 2b01 	strb.w	r2, [sl], #1
  while (--i);
 8005174:	458a      	cmp	sl, r1
 8005176:	d1f9      	bne.n	800516c <chprintf+0x39c>
    i = (int)(p - s);
 8005178:	ebaa 0603 	sub.w	r6, sl, r3
    s = tmpbuf;
 800517c:	469a      	mov	sl, r3
    if ((width -= i) < 0) {
 800517e:	1b80      	subs	r0, r0, r6
        i--;
 8005180:	3e01      	subs	r6, #1
    if ((width -= i) < 0) {
 8005182:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8005186:	9300      	str	r3, [sp, #0]
    if (left_align == false) {
 8005188:	f1bc 0f00 	cmp.w	ip, #0
 800518c:	f47f af2e 	bne.w	8004fec <chprintf+0x21c>
 8005190:	e725      	b.n	8004fde <chprintf+0x20e>
      is_long = (c >= 'A') && (c <= 'Z');
 8005192:	f04f 0a10 	mov.w	sl, #16
        l = va_arg(ap, unsigned int);
 8005196:	4673      	mov	r3, lr
 8005198:	f853 1b04 	ldr.w	r1, [r3], #4
 800519c:	9301      	str	r3, [sp, #4]
  q = p + MAX_FILLER;
 800519e:	f10d 0317 	add.w	r3, sp, #23
 80051a2:	e000      	b.n	80051a6 <chprintf+0x3d6>
  } while ((ll /= radix) != 0);
 80051a4:	4633      	mov	r3, r6
    i = (int)(l % radix);
 80051a6:	468e      	mov	lr, r1
 80051a8:	fbb1 f1fa 	udiv	r1, r1, sl
 80051ac:	fb0a eb11 	mls	fp, sl, r1, lr
    i += '0';
 80051b0:	f10b 0230 	add.w	r2, fp, #48	; 0x30
    if (i > '9') {
 80051b4:	2a39      	cmp	r2, #57	; 0x39
      i += 'A' - '0' - 10;
 80051b6:	bfc8      	it	gt
 80051b8:	f10b 0237 	addgt.w	r2, fp, #55	; 0x37
    *--q = i;
 80051bc:	b2d2      	uxtb	r2, r2
  } while ((ll /= radix) != 0);
 80051be:	45d6      	cmp	lr, sl
    *--q = i;
 80051c0:	f103 36ff 	add.w	r6, r3, #4294967295	; 0xffffffff
 80051c4:	f803 2c01 	strb.w	r2, [r3, #-1]
  } while ((ll /= radix) != 0);
 80051c8:	d2ec      	bcs.n	80051a4 <chprintf+0x3d4>
 80051ca:	4619      	mov	r1, r3
  i = (int)(p + MAX_FILLER - q);
 80051cc:	f10d 0317 	add.w	r3, sp, #23
 80051d0:	1b9e      	subs	r6, r3, r6
 80051d2:	ab03      	add	r3, sp, #12
 80051d4:	469e      	mov	lr, r3
 80051d6:	f10d 0a17 	add.w	sl, sp, #23
 80051da:	e001      	b.n	80051e0 <chprintf+0x410>
    *p++ = *q++;
 80051dc:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (--i);
 80051e0:	4551      	cmp	r1, sl
    *p++ = *q++;
 80051e2:	f80e 2b01 	strb.w	r2, [lr], #1
  while (--i);
 80051e6:	d1f9      	bne.n	80051dc <chprintf+0x40c>
    if ((width -= i) < 0) {
 80051e8:	1b80      	subs	r0, r0, r6
    s = tmpbuf;
 80051ea:	469a      	mov	sl, r3
        i--;
 80051ec:	3e01      	subs	r6, #1
 80051ee:	e7c8      	b.n	8005182 <chprintf+0x3b2>
        l = va_arg(ap, unsigned int);
 80051f0:	f85e 1b04 	ldr.w	r1, [lr], #4
      c = *fmt++;
 80051f4:	46a0      	mov	r8, r4
        l = va_arg(ap, unsigned int);
 80051f6:	f8cd e004 	str.w	lr, [sp, #4]
        l = va_arg(ap, int);
 80051fa:	4654      	mov	r4, sl
 80051fc:	f04f 0a10 	mov.w	sl, #16
 8005200:	e7cd      	b.n	800519e <chprintf+0x3ce>
 8005202:	f8de 1000 	ldr.w	r1, [lr]
 8005206:	f10e 0304 	add.w	r3, lr, #4
      if (l < 0) {
 800520a:	2900      	cmp	r1, #0
      c = *fmt++;
 800520c:	46a0      	mov	r8, r4
        l = va_arg(ap, int);
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	4654      	mov	r4, sl
      if (l < 0) {
 8005212:	da88      	bge.n	8005126 <chprintf+0x356>
        *p++ = '-';
 8005214:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8005216:	4249      	negs	r1, r1
        *p++ = '-';
 8005218:	f88d 300c 	strb.w	r3, [sp, #12]
 800521c:	f10d 0a0d 	add.w	sl, sp, #13
 8005220:	ab03      	add	r3, sp, #12
 8005222:	e789      	b.n	8005138 <chprintf+0x368>
      for (p = s; *p && (--precision >= 0); p++)
 8005224:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8005228:	2a00      	cmp	r2, #0
 800522a:	f47f af30 	bne.w	800508e <chprintf+0x2be>
    if ((width -= i) < 0) {
 800522e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
 8005232:	9300      	str	r3, [sp, #0]
    if (left_align == false) {
 8005234:	f1bc 0f00 	cmp.w	ip, #0
 8005238:	d129      	bne.n	800528e <chprintf+0x4be>
 800523a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800523e:	2720      	movs	r7, #32
 8005240:	e6cd      	b.n	8004fde <chprintf+0x20e>
      is_long = (c >= 'A') && (c <= 'Z');
 8005242:	f04f 0a08 	mov.w	sl, #8
 8005246:	e7a6      	b.n	8005196 <chprintf+0x3c6>
 8005248:	f04f 0a0a 	mov.w	sl, #10
 800524c:	e7a3      	b.n	8005196 <chprintf+0x3c6>
        l = va_arg(ap, unsigned int);
 800524e:	f85e 1b04 	ldr.w	r1, [lr], #4
      c = *fmt++;
 8005252:	46a0      	mov	r8, r4
        l = va_arg(ap, unsigned int);
 8005254:	f8cd e004 	str.w	lr, [sp, #4]
        l = va_arg(ap, int);
 8005258:	4654      	mov	r4, sl
 800525a:	f04f 0a0a 	mov.w	sl, #10
 800525e:	e79e      	b.n	800519e <chprintf+0x3ce>
        l = va_arg(ap, unsigned int);
 8005260:	f85e 1b04 	ldr.w	r1, [lr], #4
      c = *fmt++;
 8005264:	46a0      	mov	r8, r4
        l = va_arg(ap, unsigned int);
 8005266:	f8cd e004 	str.w	lr, [sp, #4]
        l = va_arg(ap, int);
 800526a:	4654      	mov	r4, sl
 800526c:	f04f 0a08 	mov.w	sl, #8
 8005270:	e795      	b.n	800519e <chprintf+0x3ce>
      if (precision == 0) {
 8005272:	b939      	cbnz	r1, 8005284 <chprintf+0x4b4>
      for (p = s; *p && (--precision >= 0); p++)
 8005274:	f647 71fe 	movw	r1, #32766	; 0x7ffe
        s = "(null)";
 8005278:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8005298 <chprintf+0x4c8>
 800527c:	e707      	b.n	800508e <chprintf+0x2be>
    p = tmpbuf;
 800527e:	ab03      	add	r3, sp, #12
 8005280:	469a      	mov	sl, r3
 8005282:	e759      	b.n	8005138 <chprintf+0x368>
        s = "(null)";
 8005284:	f8df a010 	ldr.w	sl, [pc, #16]	; 8005298 <chprintf+0x4c8>
 8005288:	e6fe      	b.n	8005088 <chprintf+0x2b8>
  int n = 0;
 800528a:	460b      	mov	r3, r1
  return formatted_bytes;
 800528c:	e6c4      	b.n	8005018 <chprintf+0x248>
    if (left_align == false) {
 800528e:	2720      	movs	r7, #32
 8005290:	e6d9      	b.n	8005046 <chprintf+0x276>
 8005292:	bf00      	nop
 8005294:	cccccccd 	.word	0xcccccccd
 8005298:	0800f2d4 	.word	0x0800f2d4
 800529c:	00000000 	.word	0x00000000

080052a0 <shellThread>:
/**
 * @brief   Shell thread function.
 *
 * @param[in] p         pointer to a @p BaseSequentialStream object
 */
THD_FUNCTION(shellThread, p) {
 80052a0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80052a4:	f8df 920c 	ldr.w	r9, [pc, #524]	; 80054b4 <shellThread+0x214>
 80052a8:	4a83      	ldr	r2, [pc, #524]	; (80054b8 <shellThread+0x218>)
 80052aa:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80052ae:	b09b      	sub	sp, #108	; 0x6c
  ShellHistory *shp = &hist;
#else
  ShellHistory *shp = NULL;
#endif

  chprintf(chp, SHELL_NEWLINE_STR);
 80052b0:	4982      	ldr	r1, [pc, #520]	; (80054bc <shellThread+0x21c>)
THD_FUNCTION(shellThread, p) {
 80052b2:	9000      	str	r0, [sp, #0]
  const ShellCommand *scp = scfg->sc_commands;
 80052b4:	e9d0 8000 	ldrd	r8, r0, [r0]
 80052b8:	619a      	str	r2, [r3, #24]
 80052ba:	9001      	str	r0, [sp, #4]
  chprintf(chp, SHELL_NEWLINE_STR);
 80052bc:	4640      	mov	r0, r8
 80052be:	f7ff fd87 	bl	8004dd0 <chprintf>
  chprintf(chp, "ChibiOS/RT Shell" SHELL_NEWLINE_STR);
 80052c2:	4640      	mov	r0, r8
 80052c4:	497e      	ldr	r1, [pc, #504]	; (80054c0 <shellThread+0x220>)
 80052c6:	f7ff fd83 	bl	8004dd0 <chprintf>
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 80052ca:	f8d9 3018 	ldr.w	r3, [r9, #24]
#if !defined(_CHIBIOS_NIL_)
  while (!chThdShouldTerminateX()) {
 80052ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052d2:	075a      	lsls	r2, r3, #29
 80052d4:	f100 8095 	bmi.w	8005402 <shellThread+0x162>
#else
  while (true) {
#endif
    chprintf(chp, SHELL_PROMPT_STR);
 80052d8:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 80054c4 <shellThread+0x224>
        p--;
      }
      continue;
    }
    if (c == '\r') {
      chprintf(chp, SHELL_NEWLINE_STR);
 80052dc:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 80054bc <shellThread+0x21c>
 80052e0:	af0a      	add	r7, sp, #40	; 0x28
  char *p = line;
 80052e2:	463c      	mov	r4, r7
    chprintf(chp, SHELL_PROMPT_STR);
 80052e4:	4659      	mov	r1, fp
 80052e6:	4640      	mov	r0, r8
 80052e8:	f7ff fd72 	bl	8004dd0 <chprintf>
    if (shellGetLine(scfg, line, sizeof(line), shp)) {
 80052ec:	9b00      	ldr	r3, [sp, #0]
 80052ee:	681e      	ldr	r6, [r3, #0]
    if (streamRead(chp, (uint8_t *)&c, 1) == 0)
 80052f0:	6833      	ldr	r3, [r6, #0]
 80052f2:	2201      	movs	r2, #1
 80052f4:	4630      	mov	r0, r6
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f10d 010f 	add.w	r1, sp, #15
 80052fc:	4798      	blx	r3
 80052fe:	2800      	cmp	r0, #0
 8005300:	f000 809f 	beq.w	8005442 <shellThread+0x1a2>
    if (c == 4) {
 8005304:	f89d 100f 	ldrb.w	r1, [sp, #15]
 8005308:	2904      	cmp	r1, #4
 800530a:	f000 8096 	beq.w	800543a <shellThread+0x19a>
    if ((c == 8) || (c == 127)) {
 800530e:	2908      	cmp	r1, #8
 8005310:	d012      	beq.n	8005338 <shellThread+0x98>
 8005312:	297f      	cmp	r1, #127	; 0x7f
 8005314:	d010      	beq.n	8005338 <shellThread+0x98>
    if (c == '\r') {
 8005316:	290d      	cmp	r1, #13
 8005318:	d021      	beq.n	800535e <shellThread+0xbe>
        p = line + len;
      }
      continue;
    }
#endif
    if (c < 0x20)
 800531a:	291f      	cmp	r1, #31
 800531c:	d9e8      	bls.n	80052f0 <shellThread+0x50>
      continue;
    if (p < line + size - 1) {
 800531e:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 8005322:	429c      	cmp	r4, r3
 8005324:	d2e4      	bcs.n	80052f0 <shellThread+0x50>
      streamPut(chp, c);
 8005326:	6833      	ldr	r3, [r6, #0]
 8005328:	4630      	mov	r0, r6
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	4798      	blx	r3
      *p++ = (char)c;
 800532e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005332:	f804 3b01 	strb.w	r3, [r4], #1
 8005336:	e7db      	b.n	80052f0 <shellThread+0x50>
      if (p != line) {
 8005338:	42bc      	cmp	r4, r7
 800533a:	d0d9      	beq.n	80052f0 <shellThread+0x50>
        streamPut(chp, 0x08);
 800533c:	6833      	ldr	r3, [r6, #0]
 800533e:	2108      	movs	r1, #8
 8005340:	4630      	mov	r0, r6
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4798      	blx	r3
        streamPut(chp, 0x20);
 8005346:	6833      	ldr	r3, [r6, #0]
 8005348:	2120      	movs	r1, #32
 800534a:	4630      	mov	r0, r6
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	4798      	blx	r3
        streamPut(chp, 0x08);
 8005350:	6833      	ldr	r3, [r6, #0]
 8005352:	2108      	movs	r1, #8
 8005354:	4630      	mov	r0, r6
 8005356:	68db      	ldr	r3, [r3, #12]
        p--;
 8005358:	3c01      	subs	r4, #1
        streamPut(chp, 0x08);
 800535a:	4798      	blx	r3
 800535c:	e7c8      	b.n	80052f0 <shellThread+0x50>
      *p = 0;
 800535e:	2500      	movs	r5, #0
      chprintf(chp, SHELL_NEWLINE_STR);
 8005360:	4651      	mov	r1, sl
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff fd34 	bl	8004dd0 <chprintf>
    lp = parse_arguments(line, &tokp);
 8005368:	a904      	add	r1, sp, #16
      *p = 0;
 800536a:	7025      	strb	r5, [r4, #0]
    lp = parse_arguments(line, &tokp);
 800536c:	4638      	mov	r0, r7
 800536e:	f7fb f8a7 	bl	80004c0 <parse_arguments>
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8005372:	a904      	add	r1, sp, #16
    lp = parse_arguments(line, &tokp);
 8005374:	4604      	mov	r4, r0
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8005376:	2000      	movs	r0, #0
 8005378:	ae05      	add	r6, sp, #20
 800537a:	f7fb f8a1 	bl	80004c0 <parse_arguments>
 800537e:	b150      	cbz	r0, 8005396 <shellThread+0xf6>
      if (n >= SHELL_MAX_ARGUMENTS) {
 8005380:	2d04      	cmp	r5, #4
 8005382:	d053      	beq.n	800542c <shellThread+0x18c>
      args[n++] = lp;
 8005384:	f846 0b04 	str.w	r0, [r6], #4
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 8005388:	a904      	add	r1, sp, #16
 800538a:	2000      	movs	r0, #0
      args[n++] = lp;
 800538c:	3501      	adds	r5, #1
    while ((lp = parse_arguments(NULL, &tokp)) != NULL) {
 800538e:	f7fb f897 	bl	80004c0 <parse_arguments>
 8005392:	2800      	cmp	r0, #0
 8005394:	d1f4      	bne.n	8005380 <shellThread+0xe0>
    args[n] = NULL;
 8005396:	ab1a      	add	r3, sp, #104	; 0x68
 8005398:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800539c:	f843 0c54 	str.w	r0, [r3, #-84]
    if (cmd != NULL) {
 80053a0:	b344      	cbz	r4, 80053f4 <shellThread+0x154>
      if (strcmp(cmd, "help") == 0) {
 80053a2:	4620      	mov	r0, r4
 80053a4:	4948      	ldr	r1, [pc, #288]	; (80054c8 <shellThread+0x228>)
 80053a6:	f7fa ff66 	bl	8000276 <strcmp>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d152      	bne.n	8005454 <shellThread+0x1b4>
        if (n > 0) {
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	d161      	bne.n	8005476 <shellThread+0x1d6>
        chprintf(chp, "Commands: help ");
 80053b2:	4640      	mov	r0, r8
 80053b4:	4945      	ldr	r1, [pc, #276]	; (80054cc <shellThread+0x22c>)
 80053b6:	f7ff fd0b 	bl	8004dd0 <chprintf>
  while (scp->sc_name != NULL) {
 80053ba:	4c45      	ldr	r4, [pc, #276]	; (80054d0 <shellThread+0x230>)
 80053bc:	4a45      	ldr	r2, [pc, #276]	; (80054d4 <shellThread+0x234>)
    chprintf(chp, "%s ", scp->sc_name);
 80053be:	4d46      	ldr	r5, [pc, #280]	; (80054d8 <shellThread+0x238>)
 80053c0:	4629      	mov	r1, r5
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff fd04 	bl	8004dd0 <chprintf>
  while (scp->sc_name != NULL) {
 80053c8:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80053cc:	2a00      	cmp	r2, #0
 80053ce:	d1f7      	bne.n	80053c0 <shellThread+0x120>
        if (scp != NULL)
 80053d0:	9b01      	ldr	r3, [sp, #4]
 80053d2:	b15b      	cbz	r3, 80053ec <shellThread+0x14c>
  while (scp->sc_name != NULL) {
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	b14a      	cbz	r2, 80053ec <shellThread+0x14c>
 80053d8:	461c      	mov	r4, r3
    chprintf(chp, "%s ", scp->sc_name);
 80053da:	4d3f      	ldr	r5, [pc, #252]	; (80054d8 <shellThread+0x238>)
 80053dc:	4629      	mov	r1, r5
 80053de:	4640      	mov	r0, r8
 80053e0:	f7ff fcf6 	bl	8004dd0 <chprintf>
  while (scp->sc_name != NULL) {
 80053e4:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80053e8:	2a00      	cmp	r2, #0
 80053ea:	d1f7      	bne.n	80053dc <shellThread+0x13c>
        chprintf(chp, SHELL_NEWLINE_STR);
 80053ec:	4651      	mov	r1, sl
 80053ee:	4640      	mov	r0, r8
 80053f0:	f7ff fcee 	bl	8004dd0 <chprintf>
 80053f4:	f8d9 3018 	ldr.w	r3, [r9, #24]
  while (!chThdShouldTerminateX()) {
 80053f8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053fc:	075b      	lsls	r3, r3, #29
 80053fe:	f57f af70 	bpl.w	80052e2 <shellThread+0x42>
 8005402:	2320      	movs	r3, #32
 8005404:	f383 8811 	msr	BASEPRI, r3
  elp = esp->next;
 8005408:	4d34      	ldr	r5, [pc, #208]	; (80054dc <shellThread+0x23c>)
  _dbg_check_lock();
 800540a:	f7fb fa09 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800540e:	f7fb fa97 	bl	8000940 <chDbgCheckClassI>
  elp = esp->next;
 8005412:	682c      	ldr	r4, [r5, #0]
  while (elp != (event_listener_t *)esp) {
 8005414:	42ac      	cmp	r4, r5
 8005416:	d006      	beq.n	8005426 <shellThread+0x186>
      chEvtSignalI(elp->listener, elp->events);
 8005418:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 800541c:	f7fc ff30 	bl	8002280 <chEvtSignalI>
    elp = elp->next;
 8005420:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005422:	42ac      	cmp	r4, r5
 8005424:	d1f8      	bne.n	8005418 <shellThread+0x178>
  chThdExitS(msg);
 8005426:	2000      	movs	r0, #0
 8005428:	f7fd fda2 	bl	8002f70 <chThdExitS>
        chprintf(chp, "too many arguments" SHELL_NEWLINE_STR);
 800542c:	4640      	mov	r0, r8
 800542e:	492c      	ldr	r1, [pc, #176]	; (80054e0 <shellThread+0x240>)
 8005430:	f7ff fcce 	bl	8004dd0 <chprintf>
    args[n] = NULL;
 8005434:	2300      	movs	r3, #0
 8005436:	9309      	str	r3, [sp, #36]	; 0x24
    if (cmd != NULL) {
 8005438:	e7dc      	b.n	80053f4 <shellThread+0x154>
      chprintf(chp, "^D");
 800543a:	4630      	mov	r0, r6
 800543c:	4929      	ldr	r1, [pc, #164]	; (80054e4 <shellThread+0x244>)
 800543e:	f7ff fcc7 	bl	8004dd0 <chprintf>
      chprintf(chp, SHELL_NEWLINE_STR);
 8005442:	4640      	mov	r0, r8
 8005444:	491d      	ldr	r1, [pc, #116]	; (80054bc <shellThread+0x21c>)
 8005446:	f7ff fcc3 	bl	8004dd0 <chprintf>
      chprintf(chp, "logout");
 800544a:	4640      	mov	r0, r8
 800544c:	4926      	ldr	r1, [pc, #152]	; (80054e8 <shellThread+0x248>)
 800544e:	f7ff fcbf 	bl	8004dd0 <chprintf>
      break;
 8005452:	e7d6      	b.n	8005402 <shellThread+0x162>
 8005454:	4e1e      	ldr	r6, [pc, #120]	; (80054d0 <shellThread+0x230>)
  while (scp->sc_name != NULL) {
 8005456:	481f      	ldr	r0, [pc, #124]	; (80054d4 <shellThread+0x234>)
 8005458:	e002      	b.n	8005460 <shellThread+0x1c0>
 800545a:	f856 0f08 	ldr.w	r0, [r6, #8]!
 800545e:	b180      	cbz	r0, 8005482 <shellThread+0x1e2>
    if (strcmp(scp->sc_name, name) == 0) {
 8005460:	4621      	mov	r1, r4
 8005462:	f7fa ff08 	bl	8000276 <strcmp>
 8005466:	2800      	cmp	r0, #0
 8005468:	d1f7      	bne.n	800545a <shellThread+0x1ba>
      scp->sc_function(chp, argc, argv);
 800546a:	4629      	mov	r1, r5
 800546c:	4640      	mov	r0, r8
 800546e:	6873      	ldr	r3, [r6, #4]
 8005470:	aa05      	add	r2, sp, #20
 8005472:	4798      	blx	r3
      return false;
 8005474:	e7be      	b.n	80053f4 <shellThread+0x154>
          shellUsage(chp, "help");
 8005476:	4640      	mov	r0, r8
 8005478:	4a13      	ldr	r2, [pc, #76]	; (80054c8 <shellThread+0x228>)
 800547a:	491c      	ldr	r1, [pc, #112]	; (80054ec <shellThread+0x24c>)
 800547c:	f7ff fca8 	bl	8004dd0 <chprintf>
          continue;
 8005480:	e7b8      	b.n	80053f4 <shellThread+0x154>
      else if (cmdexec(shell_local_commands, chp, cmd, n, args) &&
 8005482:	9b01      	ldr	r3, [sp, #4]
 8005484:	b163      	cbz	r3, 80054a0 <shellThread+0x200>
  while (scp->sc_name != NULL) {
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	b150      	cbz	r0, 80054a0 <shellThread+0x200>
 800548a:	461e      	mov	r6, r3
 800548c:	e002      	b.n	8005494 <shellThread+0x1f4>
 800548e:	f856 0f08 	ldr.w	r0, [r6, #8]!
 8005492:	b128      	cbz	r0, 80054a0 <shellThread+0x200>
    if (strcmp(scp->sc_name, name) == 0) {
 8005494:	4621      	mov	r1, r4
 8005496:	f7fa feee 	bl	8000276 <strcmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	d1f7      	bne.n	800548e <shellThread+0x1ee>
 800549e:	e7e4      	b.n	800546a <shellThread+0x1ca>
        chprintf(chp, "%s", cmd);
 80054a0:	4622      	mov	r2, r4
 80054a2:	4640      	mov	r0, r8
 80054a4:	4912      	ldr	r1, [pc, #72]	; (80054f0 <shellThread+0x250>)
 80054a6:	f7ff fc93 	bl	8004dd0 <chprintf>
        chprintf(chp, " ?" SHELL_NEWLINE_STR);
 80054aa:	4640      	mov	r0, r8
 80054ac:	4911      	ldr	r1, [pc, #68]	; (80054f4 <shellThread+0x254>)
 80054ae:	f7ff fc8f 	bl	8004dd0 <chprintf>
 80054b2:	e79f      	b.n	80053f4 <shellThread+0x154>
 80054b4:	20000d70 	.word	0x20000d70
 80054b8:	0800f2e4 	.word	0x0800f2e4
 80054bc:	08011d88 	.word	0x08011d88
 80054c0:	0800f2ec 	.word	0x0800f2ec
 80054c4:	0800f300 	.word	0x0800f300
 80054c8:	0800f32c 	.word	0x0800f32c
 80054cc:	0800f340 	.word	0x0800f340
 80054d0:	080117f0 	.word	0x080117f0
 80054d4:	0800f2dc 	.word	0x0800f2dc
 80054d8:	0800f350 	.word	0x0800f350
 80054dc:	200016c0 	.word	0x200016c0
 80054e0:	0800f314 	.word	0x0800f314
 80054e4:	0800f308 	.word	0x0800f308
 80054e8:	0800f30c 	.word	0x0800f30c
 80054ec:	0800f334 	.word	0x0800f334
 80054f0:	0800f354 	.word	0x0800f354
 80054f4:	0800f358 	.word	0x0800f358
	...

08005500 <cmd_exit>:
  if (argc > 0) {
 8005500:	2900      	cmp	r1, #0
 8005502:	dc15      	bgt.n	8005530 <cmd_exit+0x30>
static void cmd_exit(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	2320      	movs	r3, #32
 8005508:	f383 8811 	msr	BASEPRI, r3
  elp = esp->next;
 800550c:	4d0a      	ldr	r5, [pc, #40]	; (8005538 <cmd_exit+0x38>)
 800550e:	f7fb f987 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8005512:	f7fb fa15 	bl	8000940 <chDbgCheckClassI>
  elp = esp->next;
 8005516:	682c      	ldr	r4, [r5, #0]
  while (elp != (event_listener_t *)esp) {
 8005518:	42ac      	cmp	r4, r5
 800551a:	d006      	beq.n	800552a <cmd_exit+0x2a>
      chEvtSignalI(elp->listener, elp->events);
 800551c:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
 8005520:	f7fc feae 	bl	8002280 <chEvtSignalI>
    elp = elp->next;
 8005524:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005526:	42ac      	cmp	r4, r5
 8005528:	d1f8      	bne.n	800551c <cmd_exit+0x1c>
  chThdExitS(msg);
 800552a:	2000      	movs	r0, #0
 800552c:	f7fd fd20 	bl	8002f70 <chThdExitS>
    shellUsage(chp, "exit");
 8005530:	4a02      	ldr	r2, [pc, #8]	; (800553c <cmd_exit+0x3c>)
 8005532:	4903      	ldr	r1, [pc, #12]	; (8005540 <cmd_exit+0x40>)
 8005534:	f7ff bc4c 	b.w	8004dd0 <chprintf>
 8005538:	200016c0 	.word	0x200016c0
 800553c:	0800f2dc 	.word	0x0800f2dc
 8005540:	0800f334 	.word	0x0800f334
	...

08005550 <cmd_info>:
  if (argc > 0) {
 8005550:	2900      	cmp	r1, #0
 8005552:	dc2e      	bgt.n	80055b2 <cmd_info+0x62>
static void cmd_info(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005554:	b530      	push	{r4, r5, lr}
 8005556:	4604      	mov	r4, r0
 8005558:	b083      	sub	sp, #12
  chprintf(chp, "Kernel:       %s" SHELL_NEWLINE_STR, CH_KERNEL_VERSION);
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <cmd_info+0x6c>)
 800555c:	4918      	ldr	r1, [pc, #96]	; (80055c0 <cmd_info+0x70>)
 800555e:	f7ff fc37 	bl	8004dd0 <chprintf>
  chprintf(chp, "Compiler:     %s" SHELL_NEWLINE_STR, PORT_COMPILER_NAME);
 8005562:	4620      	mov	r0, r4
 8005564:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <cmd_info+0x74>)
 8005566:	4918      	ldr	r1, [pc, #96]	; (80055c8 <cmd_info+0x78>)
 8005568:	f7ff fc32 	bl	8004dd0 <chprintf>
  chprintf(chp, "Architecture: %s" SHELL_NEWLINE_STR, PORT_ARCHITECTURE_NAME);
 800556c:	4620      	mov	r0, r4
 800556e:	4a17      	ldr	r2, [pc, #92]	; (80055cc <cmd_info+0x7c>)
 8005570:	4917      	ldr	r1, [pc, #92]	; (80055d0 <cmd_info+0x80>)
 8005572:	f7ff fc2d 	bl	8004dd0 <chprintf>
  chprintf(chp, "Core Variant: %s" SHELL_NEWLINE_STR, PORT_CORE_VARIANT_NAME);
 8005576:	4620      	mov	r0, r4
 8005578:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <cmd_info+0x84>)
 800557a:	4917      	ldr	r1, [pc, #92]	; (80055d8 <cmd_info+0x88>)
 800557c:	f7ff fc28 	bl	8004dd0 <chprintf>
  chprintf(chp, "Port Info:    %s" SHELL_NEWLINE_STR, PORT_INFO);
 8005580:	4620      	mov	r0, r4
 8005582:	4a16      	ldr	r2, [pc, #88]	; (80055dc <cmd_info+0x8c>)
 8005584:	4916      	ldr	r1, [pc, #88]	; (80055e0 <cmd_info+0x90>)
 8005586:	f7ff fc23 	bl	8004dd0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 800558a:	4d16      	ldr	r5, [pc, #88]	; (80055e4 <cmd_info+0x94>)
  chprintf(chp, "Platform:     %s" SHELL_NEWLINE_STR, PLATFORM_NAME);
 800558c:	4620      	mov	r0, r4
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <cmd_info+0x98>)
 8005590:	4916      	ldr	r1, [pc, #88]	; (80055ec <cmd_info+0x9c>)
 8005592:	f7ff fc1d 	bl	8004dd0 <chprintf>
  chprintf(chp, "Board:        %s" SHELL_NEWLINE_STR, BOARD_NAME);
 8005596:	4620      	mov	r0, r4
 8005598:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <cmd_info+0xa0>)
 800559a:	4916      	ldr	r1, [pc, #88]	; (80055f4 <cmd_info+0xa4>)
 800559c:	f7ff fc18 	bl	8004dd0 <chprintf>
  chprintf(chp, "Build time:   %s%s%s" SHELL_NEWLINE_STR, __DATE__, " - ", __TIME__);
 80055a0:	4620      	mov	r0, r4
 80055a2:	4b15      	ldr	r3, [pc, #84]	; (80055f8 <cmd_info+0xa8>)
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <cmd_info+0xac>)
 80055a6:	4916      	ldr	r1, [pc, #88]	; (8005600 <cmd_info+0xb0>)
 80055a8:	9500      	str	r5, [sp, #0]
 80055aa:	f7ff fc11 	bl	8004dd0 <chprintf>
}
 80055ae:	b003      	add	sp, #12
 80055b0:	bd30      	pop	{r4, r5, pc}
    shellUsage(chp, "info");
 80055b2:	4a14      	ldr	r2, [pc, #80]	; (8005604 <cmd_info+0xb4>)
 80055b4:	4914      	ldr	r1, [pc, #80]	; (8005608 <cmd_info+0xb8>)
 80055b6:	f7ff bc0b 	b.w	8004dd0 <chprintf>
 80055ba:	bf00      	nop
 80055bc:	0800f368 	.word	0x0800f368
 80055c0:	0800f370 	.word	0x0800f370
 80055c4:	0800f384 	.word	0x0800f384
 80055c8:	0800f390 	.word	0x0800f390
 80055cc:	0800f3a4 	.word	0x0800f3a4
 80055d0:	0800f3ac 	.word	0x0800f3ac
 80055d4:	0800f3c0 	.word	0x0800f3c0
 80055d8:	0800f3cc 	.word	0x0800f3cc
 80055dc:	0800f3e0 	.word	0x0800f3e0
 80055e0:	0800f3f8 	.word	0x0800f3f8
 80055e4:	0800f49c 	.word	0x0800f49c
 80055e8:	0800f40c 	.word	0x0800f40c
 80055ec:	0800f438 	.word	0x0800f438
 80055f0:	0800f44c 	.word	0x0800f44c
 80055f4:	0800f460 	.word	0x0800f460
 80055f8:	0800f474 	.word	0x0800f474
 80055fc:	0800f478 	.word	0x0800f478
 8005600:	0800f484 	.word	0x0800f484
 8005604:	0800f360 	.word	0x0800f360
 8005608:	0800f334 	.word	0x0800f334
 800560c:	00000000 	.word	0x00000000

08005610 <cmd_echo>:
  if (argc != 1) {
 8005610:	2901      	cmp	r1, #1
 8005612:	d003      	beq.n	800561c <cmd_echo+0xc>
    shellUsage(chp, "echo \"message\"");
 8005614:	4a03      	ldr	r2, [pc, #12]	; (8005624 <cmd_echo+0x14>)
 8005616:	4904      	ldr	r1, [pc, #16]	; (8005628 <cmd_echo+0x18>)
 8005618:	f7ff bbda 	b.w	8004dd0 <chprintf>
  chprintf(chp, "%s" SHELL_NEWLINE_STR, argv[0]);
 800561c:	6812      	ldr	r2, [r2, #0]
 800561e:	4903      	ldr	r1, [pc, #12]	; (800562c <cmd_echo+0x1c>)
 8005620:	f7ff bbd6 	b.w	8004dd0 <chprintf>
 8005624:	0800f4a8 	.word	0x0800f4a8
 8005628:	0800f334 	.word	0x0800f334
 800562c:	0800f4b8 	.word	0x0800f4b8

08005630 <cmd_systime>:
  if (argc > 0) {
 8005630:	2900      	cmp	r1, #0
 8005632:	dc1e      	bgt.n	8005672 <cmd_systime+0x42>
static void cmd_systime(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	2320      	movs	r3, #32
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f7fb f8ef 	bl	8000820 <_dbg_check_lock>
 8005642:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005646:	6a5d      	ldr	r5, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8005648:	f7fb f8fa 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <cmd_systime+0x50>)
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	429a      	cmp	r2, r3
 8005652:	d004      	beq.n	800565e <cmd_systime+0x2e>
 8005654:	6999      	ldr	r1, [r3, #24]
 8005656:	6893      	ldr	r3, [r2, #8]
 8005658:	688a      	ldr	r2, [r1, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	d30d      	bcc.n	800567a <cmd_systime+0x4a>
 800565e:	2300      	movs	r3, #0
 8005660:	f383 8811 	msr	BASEPRI, r3
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 8005664:	4907      	ldr	r1, [pc, #28]	; (8005684 <cmd_systime+0x54>)
 8005666:	4620      	mov	r0, r4
 8005668:	b2aa      	uxth	r2, r5
}
 800566a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chprintf(chp, "%lu" SHELL_NEWLINE_STR, (unsigned long)chVTGetSystemTime());
 800566e:	f7ff bbaf 	b.w	8004dd0 <chprintf>
    shellUsage(chp, "systime");
 8005672:	4a05      	ldr	r2, [pc, #20]	; (8005688 <cmd_systime+0x58>)
 8005674:	4905      	ldr	r1, [pc, #20]	; (800568c <cmd_systime+0x5c>)
 8005676:	f7ff bbab 	b.w	8004dd0 <chprintf>
 800567a:	4805      	ldr	r0, [pc, #20]	; (8005690 <cmd_systime+0x60>)
 800567c:	f7fb f878 	bl	8000770 <chSysHalt>
 8005680:	20000d70 	.word	0x20000d70
 8005684:	0800f4c8 	.word	0x0800f4c8
 8005688:	0800f4c0 	.word	0x0800f4c0
 800568c:	0800f334 	.word	0x0800f334
 8005690:	08010bb0 	.word	0x08010bb0
	...

080056a0 <cmd_mem>:
  if (argc > 0) {
 80056a0:	2900      	cmp	r1, #0
 80056a2:	dc32      	bgt.n	800570a <cmd_mem+0x6a>
static void cmd_mem(BaseSequentialStream *chp, int argc, char *argv[]) {
 80056a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  H_LOCK(heapp);
 80056a6:	4c1d      	ldr	r4, [pc, #116]	; (800571c <cmd_mem+0x7c>)
 80056a8:	4607      	mov	r7, r0
 80056aa:	f104 000c 	add.w	r0, r4, #12
 80056ae:	f7fe fa17 	bl	8003ae0 <chMtxLock>
  while (H_NEXT(qp) != NULL) {
 80056b2:	6863      	ldr	r3, [r4, #4]
 80056b4:	b36b      	cbz	r3, 8005712 <cmd_mem+0x72>
  lpages = 0U;
 80056b6:	2400      	movs	r4, #0
  tpages = 0U;
 80056b8:	4622      	mov	r2, r4
  n = 0U;
 80056ba:	4626      	mov	r6, r4
    size_t pages = H_PAGES(H_NEXT(qp));
 80056bc:	6859      	ldr	r1, [r3, #4]
  while (H_NEXT(qp) != NULL) {
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	428c      	cmp	r4, r1
 80056c2:	bf38      	it	cc
 80056c4:	460c      	movcc	r4, r1
    n++;
 80056c6:	3601      	adds	r6, #1
    tpages += pages;
 80056c8:	440a      	add	r2, r1
  while (H_NEXT(qp) != NULL) {
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1f6      	bne.n	80056bc <cmd_mem+0x1c>
    *totalp = tpages * CH_HEAP_ALIGNMENT;
 80056ce:	00d5      	lsls	r5, r2, #3
    *largestp = lpages * CH_HEAP_ALIGNMENT;
 80056d0:	00e4      	lsls	r4, r4, #3
  H_UNLOCK(heapp);
 80056d2:	4813      	ldr	r0, [pc, #76]	; (8005720 <cmd_mem+0x80>)
 80056d4:	f7fe fa74 	bl	8003bc0 <chMtxUnlock>
 * @xclass
 */
size_t chCoreGetStatusX(void) {

  /*lint -save -e9033 [10.8] The cast is safe.*/
  return (size_t)(ch_memcore.topmem - ch_memcore.basemem);
 80056d8:	4b12      	ldr	r3, [pc, #72]	; (8005724 <cmd_mem+0x84>)
  chprintf(chp, "core free memory : %u bytes" SHELL_NEWLINE_STR, chCoreGetStatusX());
 80056da:	4638      	mov	r0, r7
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4911      	ldr	r1, [pc, #68]	; (8005728 <cmd_mem+0x88>)
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	f7ff fb74 	bl	8004dd0 <chprintf>
  chprintf(chp, "heap fragments   : %u" SHELL_NEWLINE_STR, n);
 80056e8:	4632      	mov	r2, r6
 80056ea:	4638      	mov	r0, r7
 80056ec:	490f      	ldr	r1, [pc, #60]	; (800572c <cmd_mem+0x8c>)
 80056ee:	f7ff fb6f 	bl	8004dd0 <chprintf>
  chprintf(chp, "heap free total  : %u bytes" SHELL_NEWLINE_STR, total);
 80056f2:	462a      	mov	r2, r5
 80056f4:	4638      	mov	r0, r7
 80056f6:	490e      	ldr	r1, [pc, #56]	; (8005730 <cmd_mem+0x90>)
 80056f8:	f7ff fb6a 	bl	8004dd0 <chprintf>
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 80056fc:	4622      	mov	r2, r4
 80056fe:	4638      	mov	r0, r7
}
 8005700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chprintf(chp, "heap free largest: %u bytes" SHELL_NEWLINE_STR, largest);
 8005704:	490b      	ldr	r1, [pc, #44]	; (8005734 <cmd_mem+0x94>)
 8005706:	f7ff bb63 	b.w	8004dd0 <chprintf>
    shellUsage(chp, "mem");
 800570a:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <cmd_mem+0x98>)
 800570c:	490b      	ldr	r1, [pc, #44]	; (800573c <cmd_mem+0x9c>)
 800570e:	f7ff bb5f 	b.w	8004dd0 <chprintf>
  while (H_NEXT(qp) != NULL) {
 8005712:	461c      	mov	r4, r3
 8005714:	461d      	mov	r5, r3
  n = 0U;
 8005716:	461e      	mov	r6, r3
 8005718:	e7db      	b.n	80056d2 <cmd_mem+0x32>
 800571a:	bf00      	nop
 800571c:	20001648 	.word	0x20001648
 8005720:	20001654 	.word	0x20001654
 8005724:	20001640 	.word	0x20001640
 8005728:	0800f4d4 	.word	0x0800f4d4
 800572c:	0800f4f4 	.word	0x0800f4f4
 8005730:	0800f50c 	.word	0x0800f50c
 8005734:	0800f52c 	.word	0x0800f52c
 8005738:	0800f4d0 	.word	0x0800f4d0
 800573c:	0800f334 	.word	0x0800f334

08005740 <cmd_threads>:
  if (argc > 0) {
 8005740:	2900      	cmp	r1, #0
 8005742:	dc45      	bgt.n	80057d0 <cmd_threads+0x90>
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 8005748:	4925      	ldr	r1, [pc, #148]	; (80057e0 <cmd_threads+0xa0>)
static void cmd_threads(BaseSequentialStream *chp, int argc, char *argv[]) {
 800574a:	b087      	sub	sp, #28
 800574c:	4680      	mov	r8, r0
  chprintf(chp, "stklimit    stack     addr refs prio     state         name\r\n" SHELL_NEWLINE_STR);
 800574e:	f7ff fb3f 	bl	8004dd0 <chprintf>
 8005752:	2320      	movs	r3, #32
 8005754:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 8005758:	4d22      	ldr	r5, [pc, #136]	; (80057e4 <cmd_threads+0xa4>)
  _dbg_check_lock();
 800575a:	f7fb f861 	bl	8000820 <_dbg_check_lock>
 800575e:	692c      	ldr	r4, [r5, #16]
  tp->refs++;
 8005760:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8005764:	3301      	adds	r3, #1
 8005766:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  _dbg_check_unlock();
 800576a:	f7fb f869 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800576e:	682b      	ldr	r3, [r5, #0]
 8005770:	42ab      	cmp	r3, r5
 8005772:	d004      	beq.n	800577e <cmd_threads+0x3e>
 8005774:	69aa      	ldr	r2, [r5, #24]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	6892      	ldr	r2, [r2, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	d32c      	bcc.n	80057d8 <cmd_threads+0x98>
 800577e:	2300      	movs	r3, #0
 8005780:	f383 8811 	msr	BASEPRI, r3
  return tp;
 8005784:	f8df a060 	ldr.w	sl, [pc, #96]	; 80057e8 <cmd_threads+0xa8>
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8005788:	f8df 9060 	ldr.w	r9, [pc, #96]	; 80057ec <cmd_threads+0xac>
 800578c:	f8df b060 	ldr.w	fp, [pc, #96]	; 80057f0 <cmd_threads+0xb0>
             tp->name == NULL ? "" : tp->name);
 8005790:	69a5      	ldr	r5, [r4, #24]
             (uint32_t)tp->hdr.pqueue.prio, states[tp->state],
 8005792:	f894 1020 	ldrb.w	r1, [r4, #32]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 8005796:	2d00      	cmp	r5, #0
 8005798:	bf08      	it	eq
 800579a:	464d      	moveq	r5, r9
             (uint32_t)tp->hdr.pqueue.prio, states[tp->state],
 800579c:	e9d4 7302 	ldrd	r7, r3, [r4, #8]
             (uint32_t)tp->refs - 1,
 80057a0:	f894 6022 	ldrb.w	r6, [r4, #34]	; 0x22
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80057a4:	f85a 0021 	ldr.w	r0, [sl, r1, lsl #2]
 80057a8:	3e01      	subs	r6, #1
    uint32_t stklimit = (uint32_t)tp->wabase;
 80057aa:	69e2      	ldr	r2, [r4, #28]
    chprintf(chp, "%08lx %08lx %08lx %4lu %4lu %9s %12s" SHELL_NEWLINE_STR,
 80057ac:	4659      	mov	r1, fp
 80057ae:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80057b2:	9400      	str	r4, [sp, #0]
 80057b4:	4640      	mov	r0, r8
 80057b6:	9601      	str	r6, [sp, #4]
 80057b8:	9504      	str	r5, [sp, #16]
 80057ba:	f7ff fb09 	bl	8004dd0 <chprintf>
    tp = chRegNextThread(tp);
 80057be:	4620      	mov	r0, r4
 80057c0:	f7fe ff36 	bl	8004630 <chRegNextThread>
  } while (tp != NULL);
 80057c4:	4604      	mov	r4, r0
 80057c6:	2800      	cmp	r0, #0
 80057c8:	d1e2      	bne.n	8005790 <cmd_threads+0x50>
}
 80057ca:	b007      	add	sp, #28
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    shellUsage(chp, "threads");
 80057d0:	4a08      	ldr	r2, [pc, #32]	; (80057f4 <cmd_threads+0xb4>)
 80057d2:	4909      	ldr	r1, [pc, #36]	; (80057f8 <cmd_threads+0xb8>)
 80057d4:	f7ff bafc 	b.w	8004dd0 <chprintf>
 80057d8:	4808      	ldr	r0, [pc, #32]	; (80057fc <cmd_threads+0xbc>)
 80057da:	f7fa ffc9 	bl	8000770 <chSysHalt>
 80057de:	bf00      	nop
 80057e0:	0800f54c 	.word	0x0800f54c
 80057e4:	20000d70 	.word	0x20000d70
 80057e8:	08011830 	.word	0x08011830
 80057ec:	0800f35c 	.word	0x0800f35c
 80057f0:	0800f58c 	.word	0x0800f58c
 80057f4:	08010980 	.word	0x08010980
 80057f8:	0800f334 	.word	0x0800f334
 80057fc:	08010da0 	.word	0x08010da0

08005800 <cmd_test>:
}

static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005800:	b530      	push	{r4, r5, lr}
  thread_t *tp;
  tfunc_t tfp;

  (void)argv;
  if (argc != 1) {
 8005802:	2901      	cmp	r1, #1
static void cmd_test(BaseSequentialStream *chp, int argc, char *argv[]) {
 8005804:	4604      	mov	r4, r0
 8005806:	b083      	sub	sp, #12
  if (argc != 1) {
 8005808:	d121      	bne.n	800584e <cmd_test+0x4e>
 800580a:	6810      	ldr	r0, [r2, #0]
    shellUsage(chp, "test rt|oslib");
    return;
  }
  if (!strcmp(argv[0], "rt")) {
 800580c:	7803      	ldrb	r3, [r0, #0]
 800580e:	2b72      	cmp	r3, #114	; 0x72
 8005810:	d015      	beq.n	800583e <cmd_test+0x3e>
    tfp = test_rt;
  }
  else if (!strcmp(argv[0], "oslib")) {
 8005812:	4916      	ldr	r1, [pc, #88]	; (800586c <cmd_test+0x6c>)
 8005814:	f7fa fd2f 	bl	8000276 <strcmp>
 8005818:	b9c8      	cbnz	r0, 800584e <cmd_test+0x4e>
    tfp = test_oslib;
 800581a:	4d15      	ldr	r5, [pc, #84]	; (8005870 <cmd_test+0x70>)
  return ch.rlist.current;
 800581c:	4b15      	ldr	r3, [pc, #84]	; (8005874 <cmd_test+0x74>)
  }
  else {
    shellUsage(chp, "test rt|oslib");
    return;
  }
  tp = chThdCreateFromHeap(NULL, SHELL_CMD_TEST_WA_SIZE,
 800581e:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	2000      	movs	r0, #0
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4a13      	ldr	r2, [pc, #76]	; (8005878 <cmd_test+0x78>)
 800582a:	e9cd 5400 	strd	r5, r4, [sp]
 800582e:	f7fe fd77 	bl	8004320 <chThdCreateFromHeap>
                           "test", chThdGetPriorityX(),
                           tfp, chp);
  if (tp == NULL) {
 8005832:	b1a0      	cbz	r0, 800585e <cmd_test+0x5e>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
    return;
  }
  chThdWait(tp);
}
 8005834:	b003      	add	sp, #12
 8005836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  chThdWait(tp);
 800583a:	f7fe be79 	b.w	8004530 <chThdWait>
  if (!strcmp(argv[0], "rt")) {
 800583e:	7843      	ldrb	r3, [r0, #1]
 8005840:	2b74      	cmp	r3, #116	; 0x74
 8005842:	d1e6      	bne.n	8005812 <cmd_test+0x12>
 8005844:	7883      	ldrb	r3, [r0, #2]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <cmd_test+0x12>
    tfp = test_rt;
 800584a:	4d0c      	ldr	r5, [pc, #48]	; (800587c <cmd_test+0x7c>)
 800584c:	e7e6      	b.n	800581c <cmd_test+0x1c>
    shellUsage(chp, "test rt|oslib");
 800584e:	4620      	mov	r0, r4
 8005850:	4a0b      	ldr	r2, [pc, #44]	; (8005880 <cmd_test+0x80>)
 8005852:	490c      	ldr	r1, [pc, #48]	; (8005884 <cmd_test+0x84>)
}
 8005854:	b003      	add	sp, #12
 8005856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    shellUsage(chp, "test rt|oslib");
 800585a:	f7ff bab9 	b.w	8004dd0 <chprintf>
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 800585e:	4620      	mov	r0, r4
 8005860:	4909      	ldr	r1, [pc, #36]	; (8005888 <cmd_test+0x88>)
}
 8005862:	b003      	add	sp, #12
 8005864:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    chprintf(chp, "out of memory" SHELL_NEWLINE_STR);
 8005868:	f7ff bab2 	b.w	8004dd0 <chprintf>
 800586c:	0800f5bc 	.word	0x0800f5bc
 8005870:	08000631 	.word	0x08000631
 8005874:	20000d70 	.word	0x20000d70
 8005878:	08010854 	.word	0x08010854
 800587c:	08000621 	.word	0x08000621
 8005880:	0800f5b4 	.word	0x0800f5b4
 8005884:	0800f334 	.word	0x0800f334
 8005888:	0800f5c4 	.word	0x0800f5c4
 800588c:	00000000 	.word	0x00000000

08005890 <print_line.lto_priv.0>:
static void print_line(void) {
 8005890:	b570      	push	{r4, r5, r6, lr}
 8005892:	244c      	movs	r4, #76	; 0x4c
 8005894:	4d07      	ldr	r5, [pc, #28]	; (80058b4 <print_line.lto_priv.0+0x24>)
    streamPut(test_chp, '-');
 8005896:	6828      	ldr	r0, [r5, #0]
 8005898:	212d      	movs	r1, #45	; 0x2d
 800589a:	6803      	ldr	r3, [r0, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 80058a0:	3c01      	subs	r4, #1
 80058a2:	d1f8      	bne.n	8005896 <print_line.lto_priv.0+0x6>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80058a4:	6828      	ldr	r0, [r5, #0]
 80058a6:	2202      	movs	r2, #2
}
 80058a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80058ac:	6803      	ldr	r3, [r0, #0]
 80058ae:	4902      	ldr	r1, [pc, #8]	; (80058b8 <print_line.lto_priv.0+0x28>)
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	4718      	bx	r3
 80058b4:	20001d30 	.word	0x20001d30
 80058b8:	08011d88 	.word	0x08011d88
 80058bc:	00000000 	.word	0x00000000

080058c0 <_test_assert>:
  if (!condition)
 80058c0:	b108      	cbz	r0, 80058c6 <_test_assert+0x6>
    return _test_fail(msg);
  return false;
 80058c2:	2000      	movs	r0, #0
}
 80058c4:	4770      	bx	lr
  test_local_fail      = true;
 80058c6:	2301      	movs	r3, #1
bool _test_assert(bool condition, const char *msg) {
 80058c8:	b410      	push	{r4}
  test_failure_message = msg;
 80058ca:	4804      	ldr	r0, [pc, #16]	; (80058dc <_test_assert+0x1c>)
  test_local_fail      = true;
 80058cc:	4c04      	ldr	r4, [pc, #16]	; (80058e0 <_test_assert+0x20>)
  test_global_fail     = true;
 80058ce:	4a05      	ldr	r2, [pc, #20]	; (80058e4 <_test_assert+0x24>)
  test_failure_message = msg;
 80058d0:	6001      	str	r1, [r0, #0]
  test_local_fail      = true;
 80058d2:	7023      	strb	r3, [r4, #0]
    return _test_fail(msg);
 80058d4:	4618      	mov	r0, r3
}
 80058d6:	bc10      	pop	{r4}
  test_global_fail     = true;
 80058d8:	7013      	strb	r3, [r2, #0]
}
 80058da:	4770      	bx	lr
 80058dc:	20001d34 	.word	0x20001d34
 80058e0:	20001d39 	.word	0x20001d39
 80058e4:	20001d38 	.word	0x20001d38
	...

080058f0 <rt_test_002_001_execute>:
  test_set_step(1);
 80058f0:	2201      	movs	r2, #1
static void rt_test_002_001_execute(void) {
 80058f2:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 80058f4:	4e5b      	ldr	r6, [pc, #364]	; (8005a64 <rt_test_002_001_execute+0x174>)
 80058f6:	2320      	movs	r3, #32
 80058f8:	6032      	str	r2, [r6, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80058fe:	4d5a      	ldr	r5, [pc, #360]	; (8005a68 <rt_test_002_001_execute+0x178>)
  _dbg_check_lock();
 8005900:	f7fa ff8e 	bl	8000820 <_dbg_check_lock>
 8005904:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005906:	2b00      	cmp	r3, #0
 8005908:	f2c0 808b 	blt.w	8005a22 <rt_test_002_001_execute+0x132>
 800590c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800590e:	2b00      	cmp	r3, #0
 8005910:	f340 8087 	ble.w	8005a22 <rt_test_002_001_execute+0x132>
    pqp = ch.rlist.pqueue.next;
 8005914:	682b      	ldr	r3, [r5, #0]
    n = (cnt_t)0;
 8005916:	2400      	movs	r4, #0
    while (pqp != &ch.rlist.pqueue) {
 8005918:	42ab      	cmp	r3, r5
 800591a:	d003      	beq.n	8005924 <rt_test_002_001_execute+0x34>
      pqp = pqp->next;
 800591c:	681b      	ldr	r3, [r3, #0]
      n++;
 800591e:	3401      	adds	r4, #1
    while (pqp != &ch.rlist.pqueue) {
 8005920:	42ab      	cmp	r3, r5
 8005922:	d1fb      	bne.n	800591c <rt_test_002_001_execute+0x2c>
    pqp = ch.rlist.pqueue.prev;
 8005924:	686b      	ldr	r3, [r5, #4]
    while (pqp != &ch.rlist.pqueue) {
 8005926:	42ab      	cmp	r3, r5
 8005928:	d003      	beq.n	8005932 <rt_test_002_001_execute+0x42>
      pqp = pqp->prev;
 800592a:	685b      	ldr	r3, [r3, #4]
      n--;
 800592c:	3c01      	subs	r4, #1
    while (pqp != &ch.rlist.pqueue) {
 800592e:	42ab      	cmp	r3, r5
 8005930:	d1fb      	bne.n	800592a <rt_test_002_001_execute+0x3a>
  _dbg_check_unlock();
 8005932:	f7fa ff85 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005936:	682b      	ldr	r3, [r5, #0]
 8005938:	42ab      	cmp	r3, r5
 800593a:	d004      	beq.n	8005946 <rt_test_002_001_execute+0x56>
 800593c:	69aa      	ldr	r2, [r5, #24]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	6892      	ldr	r2, [r2, #8]
 8005942:	429a      	cmp	r2, r3
 8005944:	d370      	bcc.n	8005a28 <rt_test_002_001_execute+0x138>
 8005946:	2300      	movs	r3, #0
 8005948:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 800594c:	2c00      	cmp	r4, #0
 800594e:	d16e      	bne.n	8005a2e <rt_test_002_001_execute+0x13e>
  test_set_step(2);
 8005950:	2202      	movs	r2, #2
 8005952:	2320      	movs	r3, #32
 8005954:	6032      	str	r2, [r6, #0]
 8005956:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800595a:	f7fa ff61 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800595e:	f7fa ffef 	bl	8000940 <chDbgCheckClassI>
    dlp = ch.vtlist.dlist.next;
 8005962:	69eb      	ldr	r3, [r5, #28]
    while (dlp != &ch.vtlist.dlist) {
 8005964:	4a41      	ldr	r2, [pc, #260]	; (8005a6c <rt_test_002_001_execute+0x17c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d003      	beq.n	8005972 <rt_test_002_001_execute+0x82>
      dlp = dlp->next;
 800596a:	681b      	ldr	r3, [r3, #0]
      n++;
 800596c:	3401      	adds	r4, #1
    while (dlp != &ch.vtlist.dlist) {
 800596e:	4293      	cmp	r3, r2
 8005970:	d1fb      	bne.n	800596a <rt_test_002_001_execute+0x7a>
    dlp = ch.vtlist.dlist.prev;
 8005972:	6a2b      	ldr	r3, [r5, #32]
    while (dlp != &ch.vtlist.dlist) {
 8005974:	4293      	cmp	r3, r2
 8005976:	d003      	beq.n	8005980 <rt_test_002_001_execute+0x90>
      dlp = dlp->prev;
 8005978:	685b      	ldr	r3, [r3, #4]
      n--;
 800597a:	3c01      	subs	r4, #1
    while (dlp != &ch.vtlist.dlist) {
 800597c:	4293      	cmp	r3, r2
 800597e:	d1fb      	bne.n	8005978 <rt_test_002_001_execute+0x88>
  _dbg_check_unlock();
 8005980:	f7fa ff5e 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	42ab      	cmp	r3, r5
 8005988:	d004      	beq.n	8005994 <rt_test_002_001_execute+0xa4>
 800598a:	69aa      	ldr	r2, [r5, #24]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	6892      	ldr	r2, [r2, #8]
 8005990:	429a      	cmp	r2, r3
 8005992:	d349      	bcc.n	8005a28 <rt_test_002_001_execute+0x138>
 8005994:	2300      	movs	r3, #0
 8005996:	f383 8811 	msr	BASEPRI, r3
 800599a:	2c00      	cmp	r4, #0
 800599c:	d150      	bne.n	8005a40 <rt_test_002_001_execute+0x150>
  test_set_step(3);
 800599e:	2203      	movs	r2, #3
 80059a0:	2320      	movs	r3, #32
 80059a2:	6032      	str	r2, [r6, #0]
 80059a4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80059a8:	f7fa ff3a 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 80059ac:	f7fa ffc8 	bl	8000940 <chDbgCheckClassI>
    tp = ch.rlist.newer;
 80059b0:	692b      	ldr	r3, [r5, #16]
    while (tp != (thread_t *)&ch.rlist) {
 80059b2:	42ab      	cmp	r3, r5
 80059b4:	d003      	beq.n	80059be <rt_test_002_001_execute+0xce>
      tp = tp->newer;
 80059b6:	691b      	ldr	r3, [r3, #16]
      n++;
 80059b8:	3401      	adds	r4, #1
    while (tp != (thread_t *)&ch.rlist) {
 80059ba:	42ab      	cmp	r3, r5
 80059bc:	d1fb      	bne.n	80059b6 <rt_test_002_001_execute+0xc6>
    tp = ch.rlist.older;
 80059be:	696b      	ldr	r3, [r5, #20]
    while (tp != (thread_t *)&ch.rlist) {
 80059c0:	42ab      	cmp	r3, r5
 80059c2:	d003      	beq.n	80059cc <rt_test_002_001_execute+0xdc>
      tp = tp->older;
 80059c4:	695b      	ldr	r3, [r3, #20]
      n--;
 80059c6:	3c01      	subs	r4, #1
    while (tp != (thread_t *)&ch.rlist) {
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	d1fb      	bne.n	80059c4 <rt_test_002_001_execute+0xd4>
  _dbg_check_unlock();
 80059cc:	f7fa ff38 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80059d0:	682b      	ldr	r3, [r5, #0]
 80059d2:	42ab      	cmp	r3, r5
 80059d4:	d004      	beq.n	80059e0 <rt_test_002_001_execute+0xf0>
 80059d6:	69aa      	ldr	r2, [r5, #24]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	6892      	ldr	r2, [r2, #8]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d323      	bcc.n	8005a28 <rt_test_002_001_execute+0x138>
 80059e0:	2300      	movs	r3, #0
 80059e2:	f383 8811 	msr	BASEPRI, r3
 80059e6:	2c00      	cmp	r4, #0
 80059e8:	d133      	bne.n	8005a52 <rt_test_002_001_execute+0x162>
  test_set_step(4);
 80059ea:	2204      	movs	r2, #4
 80059ec:	2320      	movs	r3, #32
 80059ee:	6032      	str	r2, [r6, #0]
 80059f0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80059f4:	f7fa ff14 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 80059f8:	f7fa ffa2 	bl	8000940 <chDbgCheckClassI>
  _dbg_check_unlock();
 80059fc:	f7fa ff20 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	42ab      	cmp	r3, r5
 8005a04:	d004      	beq.n	8005a10 <rt_test_002_001_execute+0x120>
 8005a06:	69aa      	ldr	r2, [r5, #24]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	6892      	ldr	r2, [r2, #8]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d30b      	bcc.n	8005a28 <rt_test_002_001_execute+0x138>
 8005a10:	2300      	movs	r3, #0
 8005a12:	f383 8811 	msr	BASEPRI, r3
}
 8005a16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(result == false, "port layer check failed");
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	4914      	ldr	r1, [pc, #80]	; (8005a70 <rt_test_002_001_execute+0x180>)
 8005a1e:	f7ff bf4f 	b.w	80058c0 <_test_assert>
    chSysHalt("SV#10");
 8005a22:	4814      	ldr	r0, [pc, #80]	; (8005a74 <rt_test_002_001_execute+0x184>)
 8005a24:	f7fa fea4 	bl	8000770 <chSysHalt>
 8005a28:	4813      	ldr	r0, [pc, #76]	; (8005a78 <rt_test_002_001_execute+0x188>)
 8005a2a:	f7fa fea1 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	4912      	ldr	r1, [pc, #72]	; (8005a7c <rt_test_002_001_execute+0x18c>)
  test_global_fail     = true;
 8005a32:	4a13      	ldr	r2, [pc, #76]	; (8005a80 <rt_test_002_001_execute+0x190>)
  test_failure_message = msg;
 8005a34:	4813      	ldr	r0, [pc, #76]	; (8005a84 <rt_test_002_001_execute+0x194>)
 8005a36:	4c14      	ldr	r4, [pc, #80]	; (8005a88 <rt_test_002_001_execute+0x198>)
  test_local_fail      = true;
 8005a38:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005a3a:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005a3c:	7013      	strb	r3, [r2, #0]
}
 8005a3e:	bd70      	pop	{r4, r5, r6, pc}
  test_local_fail      = true;
 8005a40:	2301      	movs	r3, #1
 8005a42:	490e      	ldr	r1, [pc, #56]	; (8005a7c <rt_test_002_001_execute+0x18c>)
  test_global_fail     = true;
 8005a44:	4a0e      	ldr	r2, [pc, #56]	; (8005a80 <rt_test_002_001_execute+0x190>)
  test_failure_message = msg;
 8005a46:	480f      	ldr	r0, [pc, #60]	; (8005a84 <rt_test_002_001_execute+0x194>)
 8005a48:	4c10      	ldr	r4, [pc, #64]	; (8005a8c <rt_test_002_001_execute+0x19c>)
  test_local_fail      = true;
 8005a4a:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005a4c:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005a4e:	7013      	strb	r3, [r2, #0]
 8005a50:	bd70      	pop	{r4, r5, r6, pc}
  test_local_fail      = true;
 8005a52:	2301      	movs	r3, #1
 8005a54:	4909      	ldr	r1, [pc, #36]	; (8005a7c <rt_test_002_001_execute+0x18c>)
  test_global_fail     = true;
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <rt_test_002_001_execute+0x190>)
  test_failure_message = msg;
 8005a58:	480a      	ldr	r0, [pc, #40]	; (8005a84 <rt_test_002_001_execute+0x194>)
 8005a5a:	4c0d      	ldr	r4, [pc, #52]	; (8005a90 <rt_test_002_001_execute+0x1a0>)
  test_local_fail      = true;
 8005a5c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005a5e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005a60:	7013      	strb	r3, [r2, #0]
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	20001d3c 	.word	0x20001d3c
 8005a68:	20000d70 	.word	0x20000d70
 8005a6c:	20000d8c 	.word	0x20000d8c
 8005a70:	0800f62c 	.word	0x0800f62c
 8005a74:	0800f22c 	.word	0x0800f22c
 8005a78:	08010bd4 	.word	0x08010bd4
 8005a7c:	20001d39 	.word	0x20001d39
 8005a80:	20001d38 	.word	0x20001d38
 8005a84:	20001d34 	.word	0x20001d34
 8005a88:	0800f5d4 	.word	0x0800f5d4
 8005a8c:	0800f5ec 	.word	0x0800f5ec
 8005a90:	0800f610 	.word	0x0800f610
	...

08005aa0 <rt_test_004_003_execute>:
 * - [4.3.2] Thread priority is returned to the previous value then a
 *   check is performed.
 * .
 */

static void rt_test_004_003_execute(void) {
 8005aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  tprio_t prio, p1;

  /* [4.3.1] Thread priority is increased by one then a check is
     performed.*/
  test_set_step(1);
 8005aa4:	f04f 0901 	mov.w	r9, #1
  return ch.rlist.current;
 8005aa8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8005b20 <rt_test_004_003_execute+0x80>
 8005aac:	4f1d      	ldr	r7, [pc, #116]	; (8005b24 <rt_test_004_003_execute+0x84>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005aae:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005ab2:	f8c7 9000 	str.w	r9, [r7]
 8005ab6:	689d      	ldr	r5, [r3, #8]
  {
    prio = chThdGetPriorityX();
    p1 = chThdSetPriority(prio + 1);
 8005ab8:	eb05 0609 	add.w	r6, r5, r9
 8005abc:	4630      	mov	r0, r6
 8005abe:	f7fd f9b7 	bl	8002e30 <chThdSetPriority>
  if (!condition)
 8005ac2:	42a8      	cmp	r0, r5
 8005ac4:	d117      	bne.n	8005af6 <rt_test_004_003_execute+0x56>
 8005ac6:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	429e      	cmp	r6, r3
 8005ace:	d11c      	bne.n	8005b0a <rt_test_004_003_execute+0x6a>
  }
  test_end_step(1);

  /* [4.3.2] Thread priority is returned to the previous value then a
     check is performed.*/
  test_set_step(2);
 8005ad0:	2302      	movs	r3, #2
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	603b      	str	r3, [r7, #0]
  {
    p1 = chThdSetPriority(p1);
 8005ad6:	f7fd f9ab 	bl	8002e30 <chThdSetPriority>
 8005ada:	4286      	cmp	r6, r0
 8005adc:	d10b      	bne.n	8005af6 <rt_test_004_003_execute+0x56>
 8005ade:	f8d8 3018 	ldr.w	r3, [r8, #24]
    test_assert(p1 == prio + 1, "unexpected returned priority level");
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8005ae2:	4911      	ldr	r1, [pc, #68]	; (8005b28 <rt_test_004_003_execute+0x88>)
 8005ae4:	6898      	ldr	r0, [r3, #8]
 8005ae6:	1b00      	subs	r0, r0, r4
 8005ae8:	fab0 f080 	clz	r0, r0
  }
  test_end_step(2);
}
 8005aec:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == prio, "unexpected priority level");
 8005af0:	0940      	lsrs	r0, r0, #5
 8005af2:	f7ff bee5 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 8005af6:	2301      	movs	r3, #1
 8005af8:	490c      	ldr	r1, [pc, #48]	; (8005b2c <rt_test_004_003_execute+0x8c>)
  test_global_fail     = true;
 8005afa:	4a0d      	ldr	r2, [pc, #52]	; (8005b30 <rt_test_004_003_execute+0x90>)
  test_failure_message = msg;
 8005afc:	480d      	ldr	r0, [pc, #52]	; (8005b34 <rt_test_004_003_execute+0x94>)
 8005afe:	4c0e      	ldr	r4, [pc, #56]	; (8005b38 <rt_test_004_003_execute+0x98>)
  test_local_fail      = true;
 8005b00:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005b02:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005b04:	7013      	strb	r3, [r2, #0]
}
 8005b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 8005b0a:	4808      	ldr	r0, [pc, #32]	; (8005b2c <rt_test_004_003_execute+0x8c>)
  test_global_fail     = true;
 8005b0c:	4908      	ldr	r1, [pc, #32]	; (8005b30 <rt_test_004_003_execute+0x90>)
  test_failure_message = msg;
 8005b0e:	4b09      	ldr	r3, [pc, #36]	; (8005b34 <rt_test_004_003_execute+0x94>)
 8005b10:	4a05      	ldr	r2, [pc, #20]	; (8005b28 <rt_test_004_003_execute+0x88>)
  test_local_fail      = true;
 8005b12:	f880 9000 	strb.w	r9, [r0]
  test_global_fail     = true;
 8005b16:	f881 9000 	strb.w	r9, [r1]
  test_failure_message = msg;
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b20:	20000d70 	.word	0x20000d70
 8005b24:	20001d3c 	.word	0x20001d3c
 8005b28:	0800f668 	.word	0x0800f668
 8005b2c:	20001d39 	.word	0x20001d39
 8005b30:	20001d38 	.word	0x20001d38
 8005b34:	20001d34 	.word	0x20001d34
 8005b38:	0800f644 	.word	0x0800f644
 8005b3c:	00000000 	.word	0x00000000

08005b40 <rt_test_004_004_execute>:
  }
  test_end_step(1);

  /* [4.4.2] Raising thread priority above original priority but below
     the boosted level.*/
  test_set_step(2);
 8005b40:	2202      	movs	r2, #2
static void rt_test_004_004_execute(void) {
 8005b42:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return ch.rlist.current;
 8005b46:	4f3a      	ldr	r7, [pc, #232]	; (8005c30 <rt_test_004_004_execute+0xf0>)
  test_set_step(2);
 8005b48:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 8005c34 <rt_test_004_004_execute+0xf4>
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f8c9 2000 	str.w	r2, [r9]
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005b52:	689d      	ldr	r5, [r3, #8]
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8005b54:	18ae      	adds	r6, r5, r2
  {
    p1 = chThdSetPriority(prio + 1);
 8005b56:	f105 0801 	add.w	r8, r5, #1
 8005b5a:	4640      	mov	r0, r8
    chThdGetSelfX()->hdr.pqueue.prio += 2;
 8005b5c:	609e      	str	r6, [r3, #8]
    p1 = chThdSetPriority(prio + 1);
 8005b5e:	f7fd f967 	bl	8002e30 <chThdSetPriority>
  if (!condition)
 8005b62:	42a8      	cmp	r0, r5
 8005b64:	d157      	bne.n	8005c16 <rt_test_004_004_execute+0xd6>
  return ch.rlist.current;
 8005b66:	69bb      	ldr	r3, [r7, #24]
 8005b68:	689a      	ldr	r2, [r3, #8]
 8005b6a:	4296      	cmp	r6, r2
 8005b6c:	d149      	bne.n	8005c02 <rt_test_004_004_execute+0xc2>
 8005b6e:	4604      	mov	r4, r0
    test_assert(p1 == prio, "unexpected returned priority level");
    test_assert(chThdGetSelfX()->hdr.pqueue.prio == prio + 2, "unexpected priority level");
    test_assert(chThdGetSelfX()->realprio == prio + 1, "unexpected returned real priority level");
 8005b70:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005b72:	4931      	ldr	r1, [pc, #196]	; (8005c38 <rt_test_004_004_execute+0xf8>)
 8005b74:	eba0 0008 	sub.w	r0, r0, r8
 8005b78:	fab0 f080 	clz	r0, r0
 8005b7c:	0940      	lsrs	r0, r0, #5
 8005b7e:	f7ff fe9f 	bl	80058c0 <_test_assert>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d145      	bne.n	8005c12 <rt_test_004_004_execute+0xd2>
  }
  test_end_step(2);

  /* [4.4.3] Raising thread priority above the boosted level.*/
  test_set_step(3);
 8005b86:	2303      	movs	r3, #3
  {
    p1 = chThdSetPriority(prio + 3);
 8005b88:	18e5      	adds	r5, r4, r3
 8005b8a:	4628      	mov	r0, r5
  test_set_step(3);
 8005b8c:	f8c9 3000 	str.w	r3, [r9]
    p1 = chThdSetPriority(prio + 3);
 8005b90:	f7fd f94e 	bl	8002e30 <chThdSetPriority>
    test_assert(p1 == prio + 1, "unexpected returned priority level");
 8005b94:	eba8 0000 	sub.w	r0, r8, r0
 8005b98:	fab0 f080 	clz	r0, r0
 8005b9c:	4927      	ldr	r1, [pc, #156]	; (8005c3c <rt_test_004_004_execute+0xfc>)
 8005b9e:	0940      	lsrs	r0, r0, #5
 8005ba0:	f7ff fe8e 	bl	80058c0 <_test_assert>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	d134      	bne.n	8005c12 <rt_test_004_004_execute+0xd2>
    test_assert(chThdGetSelfX()->hdr.pqueue.prio == prio + 3, "unexpected priority level");
 8005ba8:	69bb      	ldr	r3, [r7, #24]
 8005baa:	4925      	ldr	r1, [pc, #148]	; (8005c40 <rt_test_004_004_execute+0x100>)
 8005bac:	6898      	ldr	r0, [r3, #8]
 8005bae:	1b40      	subs	r0, r0, r5
 8005bb0:	fab0 f080 	clz	r0, r0
 8005bb4:	0940      	lsrs	r0, r0, #5
 8005bb6:	f7ff fe83 	bl	80058c0 <_test_assert>
 8005bba:	bb50      	cbnz	r0, 8005c12 <rt_test_004_004_execute+0xd2>
    test_assert(chThdGetSelfX()->realprio == prio + 3, "unexpected real priority level");
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	4921      	ldr	r1, [pc, #132]	; (8005c44 <rt_test_004_004_execute+0x104>)
 8005bc0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005bc2:	1b40      	subs	r0, r0, r5
 8005bc4:	fab0 f080 	clz	r0, r0
 8005bc8:	0940      	lsrs	r0, r0, #5
 8005bca:	f7ff fe79 	bl	80058c0 <_test_assert>
 8005bce:	bb00      	cbnz	r0, 8005c12 <rt_test_004_004_execute+0xd2>
  }
  test_end_step(3);

  /* [4.4.4] Restoring original conditions.*/
  test_set_step(4);
 8005bd0:	2204      	movs	r2, #4
 8005bd2:	2320      	movs	r3, #32
 8005bd4:	f8c9 2000 	str.w	r2, [r9]
 8005bd8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8005bdc:	f7fa fe20 	bl	8000820 <_dbg_check_lock>
 8005be0:	69bb      	ldr	r3, [r7, #24]
  {
    chSysLock();
    chThdGetSelfX()->hdr.pqueue.prio = prio;
 8005be2:	609c      	str	r4, [r3, #8]
    chThdGetSelfX()->realprio = prio;
 8005be4:	63dc      	str	r4, [r3, #60]	; 0x3c
  _dbg_check_unlock();
 8005be6:	f7fa fe2b 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	42bb      	cmp	r3, r7
 8005bee:	d004      	beq.n	8005bfa <rt_test_004_004_execute+0xba>
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	6892      	ldr	r2, [r2, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d317      	bcc.n	8005c2a <rt_test_004_004_execute+0xea>
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();
  }
  test_end_step(4);
 8005c00:	e007      	b.n	8005c12 <rt_test_004_004_execute+0xd2>
  test_local_fail      = true;
 8005c02:	2301      	movs	r3, #1
 8005c04:	4910      	ldr	r1, [pc, #64]	; (8005c48 <rt_test_004_004_execute+0x108>)
  test_global_fail     = true;
 8005c06:	4a11      	ldr	r2, [pc, #68]	; (8005c4c <rt_test_004_004_execute+0x10c>)
  test_failure_message = msg;
 8005c08:	4811      	ldr	r0, [pc, #68]	; (8005c50 <rt_test_004_004_execute+0x110>)
 8005c0a:	4c0d      	ldr	r4, [pc, #52]	; (8005c40 <rt_test_004_004_execute+0x100>)
  test_local_fail      = true;
 8005c0c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005c0e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005c10:	7013      	strb	r3, [r2, #0]
}
 8005c12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 8005c16:	2301      	movs	r3, #1
 8005c18:	490b      	ldr	r1, [pc, #44]	; (8005c48 <rt_test_004_004_execute+0x108>)
  test_global_fail     = true;
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <rt_test_004_004_execute+0x10c>)
  test_failure_message = msg;
 8005c1c:	480c      	ldr	r0, [pc, #48]	; (8005c50 <rt_test_004_004_execute+0x110>)
 8005c1e:	4c07      	ldr	r4, [pc, #28]	; (8005c3c <rt_test_004_004_execute+0xfc>)
  test_local_fail      = true;
 8005c20:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005c22:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005c24:	7013      	strb	r3, [r2, #0]
 8005c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2a:	480a      	ldr	r0, [pc, #40]	; (8005c54 <rt_test_004_004_execute+0x114>)
 8005c2c:	f7fa fda0 	bl	8000770 <chSysHalt>
 8005c30:	20000d70 	.word	0x20000d70
 8005c34:	20001d3c 	.word	0x20001d3c
 8005c38:	0800f684 	.word	0x0800f684
 8005c3c:	0800f644 	.word	0x0800f644
 8005c40:	0800f668 	.word	0x0800f668
 8005c44:	0800f6ac 	.word	0x0800f6ac
 8005c48:	20001d39 	.word	0x20001d39
 8005c4c:	20001d38 	.word	0x20001d38
 8005c50:	20001d34 	.word	0x20001d34
 8005c54:	08010d1c 	.word	0x08010d1c
	...

08005c60 <rt_test_006_005_execute>:
static void rt_test_006_005_execute(void) {
 8005c60:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8005c62:	2601      	movs	r6, #1
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <rt_test_006_005_execute+0x74>)
 8005c66:	4c1c      	ldr	r4, [pc, #112]	; (8005cd8 <rt_test_006_005_execute+0x78>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005c68:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005c6a:	481c      	ldr	r0, [pc, #112]	; (8005cdc <rt_test_006_005_execute+0x7c>)
 8005c6c:	6891      	ldr	r1, [r2, #8]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4a1b      	ldr	r2, [pc, #108]	; (8005ce0 <rt_test_006_005_execute+0x80>)
 8005c72:	4431      	add	r1, r6
  test_set_step(1);
 8005c74:	6026      	str	r6, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005c76:	f007 fa43 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 8005c7a:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005c7c:	4a19      	ldr	r2, [pc, #100]	; (8005ce4 <rt_test_006_005_execute+0x84>)
  test_set_step(2);
 8005c7e:	6023      	str	r3, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread3, 0);
 8005c80:	6010      	str	r0, [r2, #0]
    chSemSignalWait(&sem1, &sem1);
 8005c82:	f008 ff05 	bl	800ea90 <chSemSignalWait.constprop.0.isra.0>
  return (bool)(qp->next == qp);
 8005c86:	4b18      	ldr	r3, [pc, #96]	; (8005ce8 <rt_test_006_005_execute+0x88>)
  if (!condition)
 8005c88:	681d      	ldr	r5, [r3, #0]
 8005c8a:	429d      	cmp	r5, r3
 8005c8c:	d111      	bne.n	8005cb2 <rt_test_006_005_execute+0x52>
 8005c8e:	68ab      	ldr	r3, [r5, #8]
 8005c90:	b9c3      	cbnz	r3, 8005cc4 <rt_test_006_005_execute+0x64>
  test_set_step(3);
 8005c92:	2303      	movs	r3, #3
 8005c94:	6023      	str	r3, [r4, #0]
    chSemSignalWait(&sem1, &sem1);
 8005c96:	f008 fefb 	bl	800ea90 <chSemSignalWait.constprop.0.isra.0>
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	42ab      	cmp	r3, r5
 8005c9e:	d108      	bne.n	8005cb2 <rt_test_006_005_execute+0x52>
}
 8005ca0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert(sem1.cnt == 0, "counter not zero");
 8005ca4:	6898      	ldr	r0, [r3, #8]
 8005ca6:	4911      	ldr	r1, [pc, #68]	; (8005cec <rt_test_006_005_execute+0x8c>)
 8005ca8:	fab0 f080 	clz	r0, r0
 8005cac:	0940      	lsrs	r0, r0, #5
 8005cae:	f7ff be07 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	490e      	ldr	r1, [pc, #56]	; (8005cf0 <rt_test_006_005_execute+0x90>)
  test_global_fail     = true;
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <rt_test_006_005_execute+0x94>)
  test_failure_message = msg;
 8005cb8:	480f      	ldr	r0, [pc, #60]	; (8005cf8 <rt_test_006_005_execute+0x98>)
 8005cba:	4c10      	ldr	r4, [pc, #64]	; (8005cfc <rt_test_006_005_execute+0x9c>)
  test_local_fail      = true;
 8005cbc:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005cbe:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005cc0:	7013      	strb	r3, [r2, #0]
}
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
  test_local_fail      = true;
 8005cc4:	480a      	ldr	r0, [pc, #40]	; (8005cf0 <rt_test_006_005_execute+0x90>)
  test_global_fail     = true;
 8005cc6:	490b      	ldr	r1, [pc, #44]	; (8005cf4 <rt_test_006_005_execute+0x94>)
  test_failure_message = msg;
 8005cc8:	4b0b      	ldr	r3, [pc, #44]	; (8005cf8 <rt_test_006_005_execute+0x98>)
 8005cca:	4a08      	ldr	r2, [pc, #32]	; (8005cec <rt_test_006_005_execute+0x8c>)
  test_local_fail      = true;
 8005ccc:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8005cce:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	bd70      	pop	{r4, r5, r6, pc}
 8005cd4:	20000d70 	.word	0x20000d70
 8005cd8:	20001d3c 	.word	0x20001d3c
 8005cdc:	200016c8 	.word	0x200016c8
 8005ce0:	08003701 	.word	0x08003701
 8005ce4:	20001d54 	.word	0x20001d54
 8005ce8:	200016a8 	.word	0x200016a8
 8005cec:	0800f6dc 	.word	0x0800f6dc
 8005cf0:	20001d39 	.word	0x20001d39
 8005cf4:	20001d38 	.word	0x20001d38
 8005cf8:	20001d34 	.word	0x20001d34
 8005cfc:	0800f6cc 	.word	0x0800f6cc

08005d00 <rt_test_006_006_execute>:
  binary_semaphore_t bsem;
  msg_t msg;

  /* [6.6.1] Creating a binary semaphore in "taken" state, the state is
     checked.*/
  test_set_step(1);
 8005d00:	2101      	movs	r1, #1
  sp->cnt = n;
 8005d02:	2200      	movs	r2, #0
static void rt_test_006_006_execute(void) {
 8005d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 8005d06:	4e7a      	ldr	r6, [pc, #488]	; (8005ef0 <rt_test_006_006_execute+0x1f0>)
static void rt_test_006_006_execute(void) {
 8005d08:	b085      	sub	sp, #20
  qp->next = qp;
 8005d0a:	ac01      	add	r4, sp, #4
 8005d0c:	2320      	movs	r3, #32
  qp->prev = qp;
 8005d0e:	e9cd 4401 	strd	r4, r4, [sp, #4]
  test_set_step(1);
 8005d12:	6031      	str	r1, [r6, #0]
 8005d14:	9203      	str	r2, [sp, #12]
 8005d16:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8005d1a:	f7fa fd81 	bl	8000820 <_dbg_check_lock>
 *
 * @iclass
 */
static inline bool chBSemGetStateI(const binary_semaphore_t *bsp) {

  chDbgCheckClassI();
 8005d1e:	f7fa fe0f 	bl	8000940 <chDbgCheckClassI>
  if (!condition)
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f300 80cb 	bgt.w	8005ec0 <rt_test_006_006_execute+0x1c0>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8005d2a:	4d72      	ldr	r5, [pc, #456]	; (8005ef4 <rt_test_006_006_execute+0x1f4>)
 8005d2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005d2e:	b973      	cbnz	r3, 8005d4e <rt_test_006_006_execute+0x4e>
 8005d30:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8005d32:	2a00      	cmp	r2, #0
 8005d34:	dd0b      	ble.n	8005d4e <rt_test_006_006_execute+0x4e>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005d36:	682a      	ldr	r2, [r5, #0]
  _dbg_leave_lock();
 8005d38:	636b      	str	r3, [r5, #52]	; 0x34
 8005d3a:	42aa      	cmp	r2, r5
 8005d3c:	d00a      	beq.n	8005d54 <rt_test_006_006_execute+0x54>
 8005d3e:	69a9      	ldr	r1, [r5, #24]
 8005d40:	6893      	ldr	r3, [r2, #8]
 8005d42:	688a      	ldr	r2, [r1, #8]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d205      	bcs.n	8005d54 <rt_test_006_006_execute+0x54>
 8005d48:	486b      	ldr	r0, [pc, #428]	; (8005ef8 <rt_test_006_006_execute+0x1f8>)
 8005d4a:	f7fa fd11 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8005d4e:	486b      	ldr	r0, [pc, #428]	; (8005efc <rt_test_006_006_execute+0x1fc>)
 8005d50:	f7fa fd0e 	bl	8000770 <chSysHalt>
 8005d54:	2100      	movs	r1, #0
 8005d56:	f381 8811 	msr	BASEPRI, r1
  }
  test_end_step(1);

  /* [6.6.2] Resetting the binary semaphore in "taken" state, the state
     must not change.*/
  test_set_step(2);
 8005d5a:	2302      	movs	r3, #2
  chSemResetWithMessage(sp, n, MSG_RESET);
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	6033      	str	r3, [r6, #0]
 8005d60:	2720      	movs	r7, #32
 8005d62:	f007 f98d 	bl	800d080 <chSemResetWithMessage.constprop.0>
 8005d66:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 8005d6a:	f7fa fd59 	bl	8000820 <_dbg_check_lock>
 8005d6e:	f7fa fde7 	bl	8000940 <chDbgCheckClassI>
 8005d72:	9b03      	ldr	r3, [sp, #12]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f300 80a3 	bgt.w	8005ec0 <rt_test_006_006_execute+0x1c0>
  chSysUnlock();
 8005d7a:	f7fb fe99 	bl	8001ab0 <chSysUnlock.lto_priv.19>
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
  }
  test_end_step(2);

  /* [6.6.3] Starting a signaler thread at a lower priority.*/
  test_set_step(3);
 8005d7e:	f04f 0c03 	mov.w	ip, #3
 8005d82:	69ab      	ldr	r3, [r5, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8005d84:	4a5e      	ldr	r2, [pc, #376]	; (8005f00 <rt_test_006_006_execute+0x200>)
 8005d86:	6899      	ldr	r1, [r3, #8]
 8005d88:	485e      	ldr	r0, [pc, #376]	; (8005f04 <rt_test_006_006_execute+0x204>)
 8005d8a:	4623      	mov	r3, r4
 8005d8c:	3901      	subs	r1, #1
  test_set_step(3);
 8005d8e:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8005d92:	f007 f9b5 	bl	800d100 <chThdCreateStatic.constprop.0>
  }
  test_end_step(3);

  /* [6.6.4] Waiting for the binary semaphore to be signaled, the
     semaphore is expected to be taken.*/
  test_set_step(4);
 8005d96:	2304      	movs	r3, #4
 8005d98:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE,
 8005d9a:	4b5b      	ldr	r3, [pc, #364]	; (8005f08 <rt_test_006_006_execute+0x208>)
 8005d9c:	6018      	str	r0, [r3, #0]
 8005d9e:	f387 8811 	msr	BASEPRI, r7
 8005da2:	f7fa fd3d 	bl	8000820 <_dbg_check_lock>
  msg = chSemWaitS(sp);
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7fd fbca 	bl	8003540 <chSemWaitS>
 8005dac:	4607      	mov	r7, r0
  _dbg_check_unlock();
 8005dae:	f7fa fd47 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005db2:	682b      	ldr	r3, [r5, #0]
 8005db4:	42ab      	cmp	r3, r5
 8005db6:	d005      	beq.n	8005dc4 <rt_test_006_006_execute+0xc4>
 8005db8:	69aa      	ldr	r2, [r5, #24]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	6892      	ldr	r2, [r2, #8]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	f0c0 808a 	bcc.w	8005ed8 <rt_test_006_006_execute+0x1d8>
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	2520      	movs	r5, #32
 8005dcc:	f385 8811 	msr	BASEPRI, r5
  _dbg_check_lock();
 8005dd0:	f7fa fd26 	bl	8000820 <_dbg_check_lock>
 8005dd4:	f7fa fdb4 	bl	8000940 <chDbgCheckClassI>
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	dc70      	bgt.n	8005ec0 <rt_test_006_006_execute+0x1c0>
 8005dde:	f7fb fe67 	bl	8001ab0 <chSysUnlock.lto_priv.19>
  {
    msg = chBSemWait(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == true, "not taken");
    test_assert(msg == MSG_OK, "unexpected message");
 8005de2:	fab7 f087 	clz	r0, r7
 8005de6:	4949      	ldr	r1, [pc, #292]	; (8005f0c <rt_test_006_006_execute+0x20c>)
 8005de8:	0940      	lsrs	r0, r0, #5
 8005dea:	f7ff fd69 	bl	80058c0 <_test_assert>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d170      	bne.n	8005ed4 <rt_test_006_006_execute+0x1d4>
  test_end_step(4);

  /* [6.6.5] Signaling the binary semaphore, checking the binary
     semaphore state to be "not taken" and the underlying counter
     semaphore counter to be one.*/
  test_set_step(5);
 8005df2:	2305      	movs	r3, #5
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	f385 8811 	msr	BASEPRI, r5
 8005dfa:	f7fa fd11 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8005dfe:	f7fa fd9f 	bl	8000940 <chDbgCheckClassI>
  if (bsp->sem.cnt < (cnt_t)1) {
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	dd6a      	ble.n	8005ede <rt_test_006_006_execute+0x1de>
  chSchRescheduleS();
 8005e08:	f7fc ff22 	bl	8002c50 <chSchRescheduleS>
 8005e0c:	2520      	movs	r5, #32
  chSysUnlock();
 8005e0e:	f7fb fe4f 	bl	8001ab0 <chSysUnlock.lto_priv.19>
 8005e12:	f385 8811 	msr	BASEPRI, r5
 8005e16:	f7fa fd03 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8005e1a:	f7fa fd91 	bl	8000940 <chDbgCheckClassI>
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) ==false, "still taken");
 8005e1e:	9803      	ldr	r0, [sp, #12]
 8005e20:	493b      	ldr	r1, [pc, #236]	; (8005f10 <rt_test_006_006_execute+0x210>)
 8005e22:	2800      	cmp	r0, #0
 8005e24:	bfd4      	ite	le
 8005e26:	2000      	movle	r0, #0
 8005e28:	2001      	movgt	r0, #1
 8005e2a:	f7ff fd49 	bl	80058c0 <_test_assert>
 8005e2e:	2800      	cmp	r0, #0
 8005e30:	d143      	bne.n	8005eba <rt_test_006_006_execute+0x1ba>
 8005e32:	f7fb fe3d 	bl	8001ab0 <chSysUnlock.lto_priv.19>
 8005e36:	f385 8811 	msr	BASEPRI, r5
 8005e3a:	f7fa fcf1 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8005e3e:	f7fa fd7f 	bl	8000940 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8005e42:	9803      	ldr	r0, [sp, #12]
 8005e44:	4933      	ldr	r1, [pc, #204]	; (8005f14 <rt_test_006_006_execute+0x214>)
 8005e46:	f1a0 0001 	sub.w	r0, r0, #1
 8005e4a:	fab0 f080 	clz	r0, r0
 8005e4e:	0940      	lsrs	r0, r0, #5
 8005e50:	f7ff fd36 	bl	80058c0 <_test_assert>
 8005e54:	bb88      	cbnz	r0, 8005eba <rt_test_006_006_execute+0x1ba>
 8005e56:	f7fb fe2b 	bl	8001ab0 <chSysUnlock.lto_priv.19>
  }
  test_end_step(5);

  /* [6.6.6] Signaling the binary semaphore again, the internal state
     must not change from "not taken".*/
  test_set_step(6);
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	6033      	str	r3, [r6, #0]
 8005e5e:	f385 8811 	msr	BASEPRI, r5
 8005e62:	f7fa fcdd 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8005e66:	f7fa fd6b 	bl	8000940 <chDbgCheckClassI>
  if (bsp->sem.cnt < (cnt_t)1) {
 8005e6a:	9b03      	ldr	r3, [sp, #12]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	dd3a      	ble.n	8005ee6 <rt_test_006_006_execute+0x1e6>
  chSchRescheduleS();
 8005e70:	f7fc feee 	bl	8002c50 <chSchRescheduleS>
 8005e74:	2420      	movs	r4, #32
  chSysUnlock();
 8005e76:	f7fb fe1b 	bl	8001ab0 <chSysUnlock.lto_priv.19>
 8005e7a:	f384 8811 	msr	BASEPRI, r4
 8005e7e:	f7fa fccf 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8005e82:	f7fa fd5d 	bl	8000940 <chDbgCheckClassI>
  {
    chBSemSignal(&bsem);
    test_assert_lock(chBSemGetStateI(&bsem) == false, "taken");
 8005e86:	9803      	ldr	r0, [sp, #12]
 8005e88:	4923      	ldr	r1, [pc, #140]	; (8005f18 <rt_test_006_006_execute+0x218>)
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	bfd4      	ite	le
 8005e8e:	2000      	movle	r0, #0
 8005e90:	2001      	movgt	r0, #1
 8005e92:	f7ff fd15 	bl	80058c0 <_test_assert>
 8005e96:	b980      	cbnz	r0, 8005eba <rt_test_006_006_execute+0x1ba>
 8005e98:	f7fb fe0a 	bl	8001ab0 <chSysUnlock.lto_priv.19>
 8005e9c:	f384 8811 	msr	BASEPRI, r4
 8005ea0:	f7fa fcbe 	bl	8000820 <_dbg_check_lock>
 8005ea4:	f7fa fd4c 	bl	8000940 <chDbgCheckClassI>
    test_assert_lock(chSemGetCounterI(&bsem.sem) == 1, "unexpected counter");
 8005ea8:	9803      	ldr	r0, [sp, #12]
 8005eaa:	491a      	ldr	r1, [pc, #104]	; (8005f14 <rt_test_006_006_execute+0x214>)
 8005eac:	f1a0 0001 	sub.w	r0, r0, #1
 8005eb0:	fab0 f080 	clz	r0, r0
 8005eb4:	0940      	lsrs	r0, r0, #5
 8005eb6:	f7ff fd03 	bl	80058c0 <_test_assert>
 8005eba:	f7fb fdf9 	bl	8001ab0 <chSysUnlock.lto_priv.19>
  }
  test_end_step(6);
 8005ebe:	e009      	b.n	8005ed4 <rt_test_006_006_execute+0x1d4>
  test_local_fail      = true;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	4916      	ldr	r1, [pc, #88]	; (8005f1c <rt_test_006_006_execute+0x21c>)
  test_global_fail     = true;
 8005ec4:	4a16      	ldr	r2, [pc, #88]	; (8005f20 <rt_test_006_006_execute+0x220>)
  test_failure_message = msg;
 8005ec6:	4817      	ldr	r0, [pc, #92]	; (8005f24 <rt_test_006_006_execute+0x224>)
 8005ec8:	4c17      	ldr	r4, [pc, #92]	; (8005f28 <rt_test_006_006_execute+0x228>)
  test_local_fail      = true;
 8005eca:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8005ecc:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8005ece:	7013      	strb	r3, [r2, #0]
 8005ed0:	f7fb fdee 	bl	8001ab0 <chSysUnlock.lto_priv.19>
}
 8005ed4:	b005      	add	sp, #20
 8005ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8005ed8:	4814      	ldr	r0, [pc, #80]	; (8005f2c <rt_test_006_006_execute+0x22c>)
 8005eda:	f7fa fc49 	bl	8000770 <chSysHalt>
    chSemSignalI(&bsp->sem);
 8005ede:	4620      	mov	r0, r4
 8005ee0:	f7fd fca6 	bl	8003830 <chSemSignalI>
 8005ee4:	e790      	b.n	8005e08 <rt_test_006_006_execute+0x108>
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f7fd fca2 	bl	8003830 <chSemSignalI>
 8005eec:	e7c0      	b.n	8005e70 <rt_test_006_006_execute+0x170>
 8005eee:	bf00      	nop
 8005ef0:	20001d3c 	.word	0x20001d3c
 8005ef4:	20000d70 	.word	0x20000d70
 8005ef8:	08010d40 	.word	0x08010d40
 8005efc:	0800f214 	.word	0x0800f214
 8005f00:	08003961 	.word	0x08003961
 8005f04:	200016c8 	.word	0x200016c8
 8005f08:	20001d54 	.word	0x20001d54
 8005f0c:	0800f6fc 	.word	0x0800f6fc
 8005f10:	0800f710 	.word	0x0800f710
 8005f14:	0800f71c 	.word	0x0800f71c
 8005f18:	0800f6f4 	.word	0x0800f6f4
 8005f1c:	20001d39 	.word	0x20001d39
 8005f20:	20001d38 	.word	0x20001d38
 8005f24:	20001d34 	.word	0x20001d34
 8005f28:	0800f6f0 	.word	0x0800f6f0
 8005f2c:	08011028 	.word	0x08011028

08005f30 <rt_test_007_004_execute>:
static void rt_test_007_004_execute(void) {
 8005f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(2);
 8005f34:	2302      	movs	r3, #2
  return ch.rlist.current;
 8005f36:	4c38      	ldr	r4, [pc, #224]	; (8006018 <rt_test_007_004_execute+0xe8>)
 8005f38:	4d38      	ldr	r5, [pc, #224]	; (800601c <rt_test_007_004_execute+0xec>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8005f3a:	69a2      	ldr	r2, [r4, #24]
 8005f3c:	602b      	str	r3, [r5, #0]
 8005f3e:	6896      	ldr	r6, [r2, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005f40:	4b37      	ldr	r3, [pc, #220]	; (8006020 <rt_test_007_004_execute+0xf0>)
    pa = p + 1;
 8005f42:	1c77      	adds	r7, r6, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005f44:	4639      	mov	r1, r7
 8005f46:	4a37      	ldr	r2, [pc, #220]	; (8006024 <rt_test_007_004_execute+0xf4>)
 8005f48:	4837      	ldr	r0, [pc, #220]	; (8006028 <rt_test_007_004_execute+0xf8>)
 8005f4a:	f007 f8d9 	bl	800d100 <chThdCreateStatic.constprop.0>
 8005f4e:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 800602c <rt_test_007_004_execute+0xfc>
    pb = p + 2;
 8005f52:	f106 0902 	add.w	r9, r6, #2
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005f56:	4649      	mov	r1, r9
 8005f58:	4b35      	ldr	r3, [pc, #212]	; (8006030 <rt_test_007_004_execute+0x100>)
 8005f5a:	4a36      	ldr	r2, [pc, #216]	; (8006034 <rt_test_007_004_execute+0x104>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, pa, thread4A, "A");
 8005f5c:	f8c8 0000 	str.w	r0, [r8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005f60:	4835      	ldr	r0, [pc, #212]	; (8006038 <rt_test_007_004_execute+0x108>)
 8005f62:	f007 f8cd 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 8005f66:	2303      	movs	r3, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, pb, thread4B, "B");
 8005f68:	f8c8 0004 	str.w	r0, [r8, #4]
    chMtxLock(&m1);
 8005f6c:	4833      	ldr	r0, [pc, #204]	; (800603c <rt_test_007_004_execute+0x10c>)
  test_set_step(3);
 8005f6e:	602b      	str	r3, [r5, #0]
    chMtxLock(&m1);
 8005f70:	f7fd fdb6 	bl	8003ae0 <chMtxLock>
 8005f74:	69a3      	ldr	r3, [r4, #24]
  if (!condition)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	429e      	cmp	r6, r3
 8005f7a:	d142      	bne.n	8006002 <rt_test_007_004_execute+0xd2>
  test_set_step(4);
 8005f7c:	2304      	movs	r3, #4
    chThdSleepMilliseconds(100);
 8005f7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(4);
 8005f82:	602b      	str	r3, [r5, #0]
    chThdSleepMilliseconds(100);
 8005f84:	f7fd f84c 	bl	8003020 <chThdSleep>
 8005f88:	69a3      	ldr	r3, [r4, #24]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	429f      	cmp	r7, r3
 8005f8e:	d138      	bne.n	8006002 <rt_test_007_004_execute+0xd2>
  test_set_step(5);
 8005f90:	2305      	movs	r3, #5
    chMtxLock(&m2);
 8005f92:	482b      	ldr	r0, [pc, #172]	; (8006040 <rt_test_007_004_execute+0x110>)
  test_set_step(5);
 8005f94:	602b      	str	r3, [r5, #0]
    chMtxLock(&m2);
 8005f96:	f7fd fda3 	bl	8003ae0 <chMtxLock>
 8005f9a:	69a3      	ldr	r3, [r4, #24]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	429f      	cmp	r7, r3
 8005fa0:	d12f      	bne.n	8006002 <rt_test_007_004_execute+0xd2>
  test_set_step(6);
 8005fa2:	2306      	movs	r3, #6
    chThdSleepMilliseconds(100);
 8005fa4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  test_set_step(6);
 8005fa8:	602b      	str	r3, [r5, #0]
    chThdSleepMilliseconds(100);
 8005faa:	f7fd f839 	bl	8003020 <chThdSleep>
 8005fae:	69a3      	ldr	r3, [r4, #24]
    test_assert(chThdGetPriorityX() == pb, "wrong priority level");
 8005fb0:	4924      	ldr	r1, [pc, #144]	; (8006044 <rt_test_007_004_execute+0x114>)
 8005fb2:	6898      	ldr	r0, [r3, #8]
 8005fb4:	eba0 0009 	sub.w	r0, r0, r9
 8005fb8:	fab0 f080 	clz	r0, r0
 8005fbc:	0940      	lsrs	r0, r0, #5
 8005fbe:	f7ff fc7f 	bl	80058c0 <_test_assert>
 8005fc2:	bb30      	cbnz	r0, 8006012 <rt_test_007_004_execute+0xe2>
  test_set_step(7);
 8005fc4:	2307      	movs	r3, #7
    chMtxUnlock(&m2);
 8005fc6:	481e      	ldr	r0, [pc, #120]	; (8006040 <rt_test_007_004_execute+0x110>)
  test_set_step(7);
 8005fc8:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m2);
 8005fca:	f7fd fdf9 	bl	8003bc0 <chMtxUnlock>
 8005fce:	69a3      	ldr	r3, [r4, #24]
    test_assert(chThdGetPriorityX() == pa, "wrong priority level");
 8005fd0:	491c      	ldr	r1, [pc, #112]	; (8006044 <rt_test_007_004_execute+0x114>)
 8005fd2:	6898      	ldr	r0, [r3, #8]
 8005fd4:	1bc0      	subs	r0, r0, r7
 8005fd6:	fab0 f080 	clz	r0, r0
 8005fda:	0940      	lsrs	r0, r0, #5
 8005fdc:	f7ff fc70 	bl	80058c0 <_test_assert>
 8005fe0:	b9b8      	cbnz	r0, 8006012 <rt_test_007_004_execute+0xe2>
  test_set_step(8);
 8005fe2:	2308      	movs	r3, #8
    chMtxUnlock(&m1);
 8005fe4:	4815      	ldr	r0, [pc, #84]	; (800603c <rt_test_007_004_execute+0x10c>)
  test_set_step(8);
 8005fe6:	602b      	str	r3, [r5, #0]
    chMtxUnlock(&m1);
 8005fe8:	f7fd fdea 	bl	8003bc0 <chMtxUnlock>
 8005fec:	69a3      	ldr	r3, [r4, #24]
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005fee:	4915      	ldr	r1, [pc, #84]	; (8006044 <rt_test_007_004_execute+0x114>)
 8005ff0:	6898      	ldr	r0, [r3, #8]
 8005ff2:	1b80      	subs	r0, r0, r6
 8005ff4:	fab0 f080 	clz	r0, r0
}
 8005ff8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_assert(chThdGetPriorityX() == p, "wrong priority level");
 8005ffc:	0940      	lsrs	r0, r0, #5
 8005ffe:	f7ff bc5f 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 8006002:	2301      	movs	r3, #1
 8006004:	4910      	ldr	r1, [pc, #64]	; (8006048 <rt_test_007_004_execute+0x118>)
  test_global_fail     = true;
 8006006:	4a11      	ldr	r2, [pc, #68]	; (800604c <rt_test_007_004_execute+0x11c>)
  test_failure_message = msg;
 8006008:	4811      	ldr	r0, [pc, #68]	; (8006050 <rt_test_007_004_execute+0x120>)
 800600a:	4c0e      	ldr	r4, [pc, #56]	; (8006044 <rt_test_007_004_execute+0x114>)
  test_local_fail      = true;
 800600c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800600e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8006010:	7013      	strb	r3, [r2, #0]
}
 8006012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006016:	bf00      	nop
 8006018:	20000d70 	.word	0x20000d70
 800601c:	20001d3c 	.word	0x20001d3c
 8006020:	0800f730 	.word	0x0800f730
 8006024:	08003c71 	.word	0x08003c71
 8006028:	200016c8 	.word	0x200016c8
 800602c:	20001d54 	.word	0x20001d54
 8006030:	0800f734 	.word	0x0800f734
 8006034:	08003b41 	.word	0x08003b41
 8006038:	20001810 	.word	0x20001810
 800603c:	20000818 	.word	0x20000818
 8006040:	20000828 	.word	0x20000828
 8006044:	0800f738 	.word	0x0800f738
 8006048:	20001d39 	.word	0x20001d39
 800604c:	20001d38 	.word	0x20001d38
 8006050:	20001d34 	.word	0x20001d34
	...

08006060 <rt_test_007_005_execute>:
  test_set_step(2);
 8006060:	2202      	movs	r2, #2
static void rt_test_007_005_execute(void) {
 8006062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 8006066:	4c70      	ldr	r4, [pc, #448]	; (8006228 <rt_test_007_005_execute+0x1c8>)
  test_set_step(2);
 8006068:	4e70      	ldr	r6, [pc, #448]	; (800622c <rt_test_007_005_execute+0x1cc>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800606a:	69a1      	ldr	r1, [r4, #24]
 800606c:	2320      	movs	r3, #32
 800606e:	688f      	ldr	r7, [r1, #8]
 8006070:	6032      	str	r2, [r6, #0]
 8006072:	f383 8811 	msr	BASEPRI, r3
  if (mp->owner != NULL) {
 8006076:	4d6e      	ldr	r5, [pc, #440]	; (8006230 <rt_test_007_005_execute+0x1d0>)
  _dbg_check_lock();
 8006078:	f7fa fbd2 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassS();
 800607c:	f7fa fb90 	bl	80007a0 <chDbgCheckClassS>
  if (mp->owner != NULL) {
 8006080:	68ab      	ldr	r3, [r5, #8]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80a5 	beq.w	80061d2 <rt_test_007_005_execute+0x172>
    return false;
 8006088:	f04f 0800 	mov.w	r8, #0
  _dbg_check_unlock();
 800608c:	f7fa fbd8 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006090:	6823      	ldr	r3, [r4, #0]
 8006092:	42a3      	cmp	r3, r4
 8006094:	d005      	beq.n	80060a2 <rt_test_007_005_execute+0x42>
 8006096:	69a2      	ldr	r2, [r4, #24]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	6892      	ldr	r2, [r2, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	f0c0 8095 	bcc.w	80061cc <rt_test_007_005_execute+0x16c>
 80060a2:	2300      	movs	r3, #0
 80060a4:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 80060a8:	f1b8 0f00 	cmp.w	r8, #0
 80060ac:	f000 8099 	beq.w	80061e2 <rt_test_007_005_execute+0x182>
  test_set_step(3);
 80060b0:	2303      	movs	r3, #3
 80060b2:	6033      	str	r3, [r6, #0]
    b = chMtxTryLock(&m1);
 80060b4:	f006 ffb4 	bl	800d020 <chMtxTryLock.constprop.0>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	f040 809c 	bne.w	80061f6 <rt_test_007_005_execute+0x196>
  test_set_step(4);
 80060be:	2304      	movs	r3, #4
    chMtxUnlock(&m1);
 80060c0:	485b      	ldr	r0, [pc, #364]	; (8006230 <rt_test_007_005_execute+0x1d0>)
  test_set_step(4);
 80060c2:	6033      	str	r3, [r6, #0]
    chMtxUnlock(&m1);
 80060c4:	f7fd fd7c 	bl	8003bc0 <chMtxUnlock>
 80060c8:	68ab      	ldr	r3, [r5, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 809d 	bne.w	800620a <rt_test_007_005_execute+0x1aa>
  return (bool)(qp->next == qp);
 80060d0:	6828      	ldr	r0, [r5, #0]
    test_assert(ch_queue_isempty(&m1.queue), "queue not empty");
 80060d2:	4958      	ldr	r1, [pc, #352]	; (8006234 <rt_test_007_005_execute+0x1d4>)
 80060d4:	1b40      	subs	r0, r0, r5
 80060d6:	fab0 f080 	clz	r0, r0
 80060da:	0940      	lsrs	r0, r0, #5
 80060dc:	f7ff fbf0 	bl	80058c0 <_test_assert>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	f040 8086 	bne.w	80061f2 <rt_test_007_005_execute+0x192>
 80060e6:	69a2      	ldr	r2, [r4, #24]
  test_set_step(5);
 80060e8:	2305      	movs	r3, #5
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80060ea:	6890      	ldr	r0, [r2, #8]
 80060ec:	4952      	ldr	r1, [pc, #328]	; (8006238 <rt_test_007_005_execute+0x1d8>)
 80060ee:	1bc0      	subs	r0, r0, r7
 80060f0:	fab0 f080 	clz	r0, r0
 80060f4:	0940      	lsrs	r0, r0, #5
  test_set_step(5);
 80060f6:	6033      	str	r3, [r6, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80060f8:	f7ff fbe2 	bl	80058c0 <_test_assert>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	d178      	bne.n	80061f2 <rt_test_007_005_execute+0x192>
  test_set_step(6);
 8006100:	2306      	movs	r3, #6
 8006102:	6033      	str	r3, [r6, #0]
    b = chMtxTryLock(&m1);
 8006104:	f006 ff8c 	bl	800d020 <chMtxTryLock.constprop.0>
    test_assert(b, "already locked");
 8006108:	494c      	ldr	r1, [pc, #304]	; (800623c <rt_test_007_005_execute+0x1dc>)
 800610a:	f7ff fbd9 	bl	80058c0 <_test_assert>
 800610e:	2800      	cmp	r0, #0
 8006110:	d16f      	bne.n	80061f2 <rt_test_007_005_execute+0x192>
    b = chMtxTryLock(&m1);
 8006112:	f006 ff85 	bl	800d020 <chMtxTryLock.constprop.0>
    test_assert(!b, "not locked");
 8006116:	f080 0001 	eor.w	r0, r0, #1
 800611a:	4949      	ldr	r1, [pc, #292]	; (8006240 <rt_test_007_005_execute+0x1e0>)
 800611c:	b2c0      	uxtb	r0, r0
 800611e:	f7ff fbcf 	bl	80058c0 <_test_assert>
 8006122:	2800      	cmp	r0, #0
 8006124:	d165      	bne.n	80061f2 <rt_test_007_005_execute+0x192>
 8006126:	2320      	movs	r3, #32
 8006128:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800612c:	f7fa fb78 	bl	8000820 <_dbg_check_lock>
  return ch.rlist.current;
 8006130:	f8d4 8018 	ldr.w	r8, [r4, #24]
 * @sclass
 */
void chMtxUnlockAllS(void) {
  thread_t *currtp = chThdGetSelfX();

  if (currtp->mtxlist != NULL) {
 8006134:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 8006138:	b1fb      	cbz	r3, 800617a <rt_test_007_005_execute+0x11a>
    do {
      mutex_t *mp = currtp->mtxlist;
      currtp->mtxlist = mp->next;
 800613a:	68da      	ldr	r2, [r3, #12]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800613c:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800613e:	f8c8 2038 	str.w	r2, [r8, #56]	; 0x38
 8006142:	2800      	cmp	r0, #0
 8006144:	d16a      	bne.n	800621c <rt_test_007_005_execute+0x1bc>
 8006146:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006148:	2900      	cmp	r1, #0
 800614a:	dd67      	ble.n	800621c <rt_test_007_005_execute+0x1bc>
  return (bool)(qp->next != qp);
 800614c:	6819      	ldr	r1, [r3, #0]
      if (chMtxQueueNotEmptyS(mp)) {
 800614e:	428b      	cmp	r3, r1
 8006150:	d067      	beq.n	8006222 <rt_test_007_005_execute+0x1c2>
  qp->next       = p->next;
 8006152:	680a      	ldr	r2, [r1, #0]
#endif
        tp = (thread_t *)ch_queue_fifo_remove(&mp->queue);
        mp->owner   = tp;
        mp->next    = tp->mtxlist;
        tp->mtxlist = mp;
        (void) chSchReadyI(tp);
 8006154:	4608      	mov	r0, r1
 8006156:	601a      	str	r2, [r3, #0]
  qp->next->prev = qp;
 8006158:	6053      	str	r3, [r2, #4]
        mp->next    = tp->mtxlist;
 800615a:	6b8a      	ldr	r2, [r1, #56]	; 0x38
        mp->owner   = tp;
 800615c:	6099      	str	r1, [r3, #8]
        mp->next    = tp->mtxlist;
 800615e:	60da      	str	r2, [r3, #12]
        tp->mtxlist = mp;
 8006160:	638b      	str	r3, [r1, #56]	; 0x38
        (void) chSchReadyI(tp);
 8006162:	f7fb ffd5 	bl	8002110 <chSchReadyI>
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
        mp->cnt = (cnt_t)0;
#endif
        mp->owner = NULL;
      }
    } while (currtp->mtxlist != NULL);
 8006166:	f8d8 3038 	ldr.w	r3, [r8, #56]	; 0x38
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <rt_test_007_005_execute+0xda>
    currtp->hdr.pqueue.prio = currtp->realprio;
 800616e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8006172:	f8c8 3008 	str.w	r3, [r8, #8]
    chSchRescheduleS();
 8006176:	f7fc fd6b 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800617a:	f7fa fb61 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	42a3      	cmp	r3, r4
 8006182:	d004      	beq.n	800618e <rt_test_007_005_execute+0x12e>
 8006184:	69a2      	ldr	r2, [r4, #24]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	6892      	ldr	r2, [r2, #8]
 800618a:	429a      	cmp	r2, r3
 800618c:	d31e      	bcc.n	80061cc <rt_test_007_005_execute+0x16c>
 800618e:	2300      	movs	r3, #0
 8006190:	f383 8811 	msr	BASEPRI, r3
    test_assert(m1.owner == NULL, "still owned");
 8006194:	68a8      	ldr	r0, [r5, #8]
 8006196:	492b      	ldr	r1, [pc, #172]	; (8006244 <rt_test_007_005_execute+0x1e4>)
 8006198:	fab0 f080 	clz	r0, r0
 800619c:	0940      	lsrs	r0, r0, #5
 800619e:	f7ff fb8f 	bl	80058c0 <_test_assert>
 80061a2:	bb30      	cbnz	r0, 80061f2 <rt_test_007_005_execute+0x192>
  return (bool)(qp->next == qp);
 80061a4:	6828      	ldr	r0, [r5, #0]
    test_assert(ch_queue_isempty(&m1.queue), "queue not empty");
 80061a6:	1b41      	subs	r1, r0, r5
 80061a8:	4248      	negs	r0, r1
 80061aa:	4148      	adcs	r0, r1
 80061ac:	4921      	ldr	r1, [pc, #132]	; (8006234 <rt_test_007_005_execute+0x1d4>)
 80061ae:	f7ff fb87 	bl	80058c0 <_test_assert>
 80061b2:	b9f0      	cbnz	r0, 80061f2 <rt_test_007_005_execute+0x192>
  test_set_step(7);
 80061b4:	2307      	movs	r3, #7
  return chThdGetSelfX()->hdr.pqueue.prio;
 80061b6:	69a2      	ldr	r2, [r4, #24]
 80061b8:	6033      	str	r3, [r6, #0]
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80061ba:	6890      	ldr	r0, [r2, #8]
 80061bc:	491e      	ldr	r1, [pc, #120]	; (8006238 <rt_test_007_005_execute+0x1d8>)
 80061be:	1bc2      	subs	r2, r0, r7
 80061c0:	4250      	negs	r0, r2
 80061c2:	4150      	adcs	r0, r2
}
 80061c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(chThdGetPriorityX() == prio, "wrong priority level");
 80061c8:	f7ff bb7a 	b.w	80058c0 <_test_assert>
 80061cc:	481e      	ldr	r0, [pc, #120]	; (8006248 <rt_test_007_005_execute+0x1e8>)
 80061ce:	f7fa facf 	bl	8000770 <chSysHalt>
  return ch.rlist.current;
 80061d2:	69a3      	ldr	r3, [r4, #24]
  return true;
 80061d4:	f04f 0801 	mov.w	r8, #1
  mp->next = currtp->mtxlist;
 80061d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  mp->owner = currtp;
 80061da:	60ab      	str	r3, [r5, #8]
  currtp->mtxlist = mp;
 80061dc:	639d      	str	r5, [r3, #56]	; 0x38
  mp->next = currtp->mtxlist;
 80061de:	60ea      	str	r2, [r5, #12]
 80061e0:	e754      	b.n	800608c <rt_test_007_005_execute+0x2c>
  test_local_fail      = true;
 80061e2:	2301      	movs	r3, #1
 80061e4:	4919      	ldr	r1, [pc, #100]	; (800624c <rt_test_007_005_execute+0x1ec>)
  test_global_fail     = true;
 80061e6:	4a1a      	ldr	r2, [pc, #104]	; (8006250 <rt_test_007_005_execute+0x1f0>)
  test_failure_message = msg;
 80061e8:	481a      	ldr	r0, [pc, #104]	; (8006254 <rt_test_007_005_execute+0x1f4>)
 80061ea:	4c14      	ldr	r4, [pc, #80]	; (800623c <rt_test_007_005_execute+0x1dc>)
  test_local_fail      = true;
 80061ec:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80061ee:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80061f0:	7013      	strb	r3, [r2, #0]
}
 80061f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 80061f6:	2301      	movs	r3, #1
 80061f8:	4914      	ldr	r1, [pc, #80]	; (800624c <rt_test_007_005_execute+0x1ec>)
  test_global_fail     = true;
 80061fa:	4a15      	ldr	r2, [pc, #84]	; (8006250 <rt_test_007_005_execute+0x1f0>)
  test_failure_message = msg;
 80061fc:	4815      	ldr	r0, [pc, #84]	; (8006254 <rt_test_007_005_execute+0x1f4>)
 80061fe:	4c10      	ldr	r4, [pc, #64]	; (8006240 <rt_test_007_005_execute+0x1e0>)
  test_local_fail      = true;
 8006200:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8006202:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8006204:	7013      	strb	r3, [r2, #0]
 8006206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_local_fail      = true;
 800620a:	2301      	movs	r3, #1
 800620c:	490f      	ldr	r1, [pc, #60]	; (800624c <rt_test_007_005_execute+0x1ec>)
  test_global_fail     = true;
 800620e:	4a10      	ldr	r2, [pc, #64]	; (8006250 <rt_test_007_005_execute+0x1f0>)
  test_failure_message = msg;
 8006210:	4810      	ldr	r0, [pc, #64]	; (8006254 <rt_test_007_005_execute+0x1f4>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <rt_test_007_005_execute+0x1e4>)
  test_local_fail      = true;
 8006214:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8006216:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8006218:	7013      	strb	r3, [r2, #0]
 800621a:	e7ea      	b.n	80061f2 <rt_test_007_005_execute+0x192>
    chSysHalt("SV#11");
 800621c:	480e      	ldr	r0, [pc, #56]	; (8006258 <rt_test_007_005_execute+0x1f8>)
 800621e:	f7fa faa7 	bl	8000770 <chSysHalt>
        mp->owner = NULL;
 8006222:	6098      	str	r0, [r3, #8]
 8006224:	4613      	mov	r3, r2
 8006226:	e7a0      	b.n	800616a <rt_test_007_005_execute+0x10a>
 8006228:	20000d70 	.word	0x20000d70
 800622c:	20001d3c 	.word	0x20001d3c
 8006230:	20000818 	.word	0x20000818
 8006234:	0800f6cc 	.word	0x0800f6cc
 8006238:	0800f738 	.word	0x0800f738
 800623c:	0800f750 	.word	0x0800f750
 8006240:	0800f760 	.word	0x0800f760
 8006244:	0800f76c 	.word	0x0800f76c
 8006248:	08010f48 	.word	0x08010f48
 800624c:	20001d39 	.word	0x20001d39
 8006250:	20001d38 	.word	0x20001d38
 8006254:	20001d34 	.word	0x20001d34
 8006258:	0800f204 	.word	0x0800f204
 800625c:	00000000 	.word	0x00000000

08006260 <rt_test_009_006_execute>:
  test_set_step(1);
 8006260:	2201      	movs	r2, #1
static void rt_test_009_006_execute(void) {
 8006262:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 8006266:	4e85      	ldr	r6, [pc, #532]	; (800647c <rt_test_009_006_execute+0x21c>)
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 8006268:	4c85      	ldr	r4, [pc, #532]	; (8006480 <rt_test_009_006_execute+0x220>)
 800626a:	2320      	movs	r3, #32
 800626c:	69a5      	ldr	r5, [r4, #24]
 800626e:	6032      	str	r2, [r6, #0]
 8006270:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006274:	f7fa fad4 	bl	8000820 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
 8006278:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800627a:	2b00      	cmp	r3, #0
 800627c:	f040 80ab 	bne.w	80063d6 <rt_test_009_006_execute+0x176>
  _dbg_check_unlock();
 8006280:	f7fa fade 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006284:	6823      	ldr	r3, [r4, #0]
 8006286:	42a3      	cmp	r3, r4
 8006288:	d005      	beq.n	8006296 <rt_test_009_006_execute+0x36>
 800628a:	69a2      	ldr	r2, [r4, #24]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	6892      	ldr	r2, [r2, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	f0c0 80b0 	bcc.w	80063f6 <rt_test_009_006_execute+0x196>
 8006296:	2300      	movs	r3, #0
 8006298:	f383 8811 	msr	BASEPRI, r3
 800629c:	2520      	movs	r5, #32
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 800629e:	69a7      	ldr	r7, [r4, #24]
 80062a0:	f385 8811 	msr	BASEPRI, r5
  _dbg_check_lock();
 80062a4:	f7fa fabc 	bl	8000820 <_dbg_check_lock>
  eventmask_t m;

  chSysLock();
  m = ctp->epending & events;
  if (m == (eventmask_t)0) {
 80062a8:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
 80062ac:	f1b8 0f00 	cmp.w	r8, #0
 80062b0:	f040 80b4 	bne.w	800641c <rt_test_009_006_execute+0x1bc>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
 80062b4:	f7fb facc 	bl	8001850 <chSysUnlock.lto_priv.7>
 * @retval 0            if the operation has timed out.
 *
 * @api
 */
eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
  thread_t *ctp = currp;
 80062b8:	69a7      	ldr	r7, [r4, #24]
 80062ba:	f385 8811 	msr	BASEPRI, r5
 80062be:	f7fa faaf 	bl	8000820 <_dbg_check_lock>

  chSysLock();
  if ((ctp->epending & events) != events) {
 80062c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c4:	3301      	adds	r3, #1
 80062c6:	f000 80b9 	beq.w	800643c <rt_test_009_006_execute+0x1dc>
    if (TIME_IMMEDIATE == timeout) {
      chSysUnlock();
 80062ca:	f7fb fac1 	bl	8001850 <chSysUnlock.lto_priv.7>
  test_set_step(2);
 80062ce:	2302      	movs	r3, #2
  thread_t *ctp = currp;
 80062d0:	69a7      	ldr	r7, [r4, #24]
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	f385 8811 	msr	BASEPRI, r5
 80062d8:	f7fa faa2 	bl	8000820 <_dbg_check_lock>
  m = ctp->epending & events;
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80062de:	b95b      	cbnz	r3, 80062f8 <rt_test_009_006_execute+0x98>
    ctp->u.ewmask = events;
 80062e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80062e4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80062e8:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80062ea:	627b      	str	r3, [r7, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 80062ec:	f7fc f8d0 	bl	8002490 <chSchGoSleepTimeoutS>
 80062f0:	2800      	cmp	r0, #0
 80062f2:	f2c0 80b7 	blt.w	8006464 <rt_test_009_006_execute+0x204>
    m = ctp->epending & events;
 80062f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80062f8:	425a      	negs	r2, r3
 80062fa:	ea03 0502 	and.w	r5, r3, r2
  ctp->epending &= ~m;
 80062fe:	ea23 0302 	bic.w	r3, r3, r2
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
  _dbg_check_unlock();
 8006304:	f7fa fa9c 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	42a3      	cmp	r3, r4
 800630c:	d004      	beq.n	8006318 <rt_test_009_006_execute+0xb8>
 800630e:	69a2      	ldr	r2, [r4, #24]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	6892      	ldr	r2, [r2, #8]
 8006314:	429a      	cmp	r2, r3
 8006316:	d36e      	bcc.n	80063f6 <rt_test_009_006_execute+0x196>
 8006318:	2300      	movs	r3, #0
 800631a:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 800631e:	fab5 f085 	clz	r0, r5
 8006322:	0940      	lsrs	r0, r0, #5
 8006324:	4957      	ldr	r1, [pc, #348]	; (8006484 <rt_test_009_006_execute+0x224>)
 8006326:	f7ff facb 	bl	80058c0 <_test_assert>
 800632a:	2800      	cmp	r0, #0
 800632c:	d174      	bne.n	8006418 <rt_test_009_006_execute+0x1b8>
 800632e:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006330:	69a6      	ldr	r6, [r4, #24]
 8006332:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8006336:	f7fa fa73 	bl	8000820 <_dbg_check_lock>
  m = ctp->epending & events;
 800633a:	6b75      	ldr	r5, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800633c:	b95d      	cbnz	r5, 8006356 <rt_test_009_006_execute+0xf6>
    ctp->u.ewmask = events;
 800633e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 8006342:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8006346:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8006348:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 800634a:	f7fc f8a1 	bl	8002490 <chSchGoSleepTimeoutS>
 800634e:	2800      	cmp	r0, #0
 8006350:	f2c0 808c 	blt.w	800646c <rt_test_009_006_execute+0x20c>
    m = ctp->epending & events;
 8006354:	6b75      	ldr	r5, [r6, #52]	; 0x34
  ctp->epending &= ~m;
 8006356:	2300      	movs	r3, #0
 8006358:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 800635a:	f7fa fa71 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	42a3      	cmp	r3, r4
 8006362:	d004      	beq.n	800636e <rt_test_009_006_execute+0x10e>
 8006364:	69a2      	ldr	r2, [r4, #24]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	6892      	ldr	r2, [r2, #8]
 800636a:	429a      	cmp	r2, r3
 800636c:	d343      	bcc.n	80063f6 <rt_test_009_006_execute+0x196>
 800636e:	2300      	movs	r3, #0
 8006370:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 8006374:	fab5 f085 	clz	r0, r5
 8006378:	0940      	lsrs	r0, r0, #5
 800637a:	4942      	ldr	r1, [pc, #264]	; (8006484 <rt_test_009_006_execute+0x224>)
 800637c:	f7ff faa0 	bl	80058c0 <_test_assert>
 8006380:	4605      	mov	r5, r0
 8006382:	2800      	cmp	r0, #0
 8006384:	d148      	bne.n	8006418 <rt_test_009_006_execute+0x1b8>
 8006386:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 8006388:	69a6      	ldr	r6, [r4, #24]
 800638a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800638e:	f7fa fa47 	bl	8000820 <_dbg_check_lock>
  if ((ctp->epending & events) != events) {
 8006392:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8006394:	3301      	adds	r3, #1
 8006396:	d009      	beq.n	80063ac <rt_test_009_006_execute+0x14c>
      return (eventmask_t)0;
    }
    ctp->u.ewmask = events;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 800639c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80063a0:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 80063a2:	6273      	str	r3, [r6, #36]	; 0x24
    if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 80063a4:	f7fc f874 	bl	8002490 <chSchGoSleepTimeoutS>
 80063a8:	2800      	cmp	r0, #0
 80063aa:	db63      	blt.n	8006474 <rt_test_009_006_execute+0x214>
      chSysUnlock();
      return (eventmask_t)0;
    }
  }
  ctp->epending &= ~events;
 80063ac:	2300      	movs	r3, #0
 80063ae:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 80063b0:	f7fa fa46 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	42a3      	cmp	r3, r4
 80063b8:	d004      	beq.n	80063c4 <rt_test_009_006_execute+0x164>
 80063ba:	69a2      	ldr	r2, [r4, #24]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	6892      	ldr	r2, [r2, #8]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d318      	bcc.n	80063f6 <rt_test_009_006_execute+0x196>
 80063c4:	2300      	movs	r3, #0
 80063c6:	f383 8811 	msr	BASEPRI, r3
    test_assert(m == 0, "spurious event");
 80063ca:	4628      	mov	r0, r5
}
 80063cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert(m == 0, "spurious event");
 80063d0:	492c      	ldr	r1, [pc, #176]	; (8006484 <rt_test_009_006_execute+0x224>)
 80063d2:	f7ff ba75 	b.w	80058c0 <_test_assert>
  m ^= m & (m - (eventmask_t)1);
 80063d6:	425a      	negs	r2, r3
  ctp->epending &= ~m;
 80063d8:	ea23 0102 	bic.w	r1, r3, r2
 80063dc:	6369      	str	r1, [r5, #52]	; 0x34
  m ^= m & (m - (eventmask_t)1);
 80063de:	ea02 0503 	and.w	r5, r2, r3
  _dbg_check_unlock();
 80063e2:	f7fa fa2d 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80063e6:	6823      	ldr	r3, [r4, #0]
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d007      	beq.n	80063fc <rt_test_009_006_execute+0x19c>
 80063ec:	69a2      	ldr	r2, [r4, #24]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	6892      	ldr	r2, [r2, #8]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d202      	bcs.n	80063fc <rt_test_009_006_execute+0x19c>
 80063f6:	4824      	ldr	r0, [pc, #144]	; (8006488 <rt_test_009_006_execute+0x228>)
 80063f8:	f7fa f9ba 	bl	8000770 <chSysHalt>
 80063fc:	2300      	movs	r3, #0
 80063fe:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8006402:	2d00      	cmp	r5, #0
 8006404:	f43f af4a 	beq.w	800629c <rt_test_009_006_execute+0x3c>
  test_local_fail      = true;
 8006408:	2301      	movs	r3, #1
 800640a:	4920      	ldr	r1, [pc, #128]	; (800648c <rt_test_009_006_execute+0x22c>)
  test_global_fail     = true;
 800640c:	4a20      	ldr	r2, [pc, #128]	; (8006490 <rt_test_009_006_execute+0x230>)
  test_failure_message = msg;
 800640e:	4821      	ldr	r0, [pc, #132]	; (8006494 <rt_test_009_006_execute+0x234>)
 8006410:	4c1c      	ldr	r4, [pc, #112]	; (8006484 <rt_test_009_006_execute+0x224>)
  test_local_fail      = true;
 8006412:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8006414:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8006416:	7013      	strb	r3, [r2, #0]
}
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ctp->epending &= ~m;
 800641c:	2300      	movs	r3, #0
 800641e:	637b      	str	r3, [r7, #52]	; 0x34
  _dbg_check_unlock();
 8006420:	f7fa fa0e 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006424:	6823      	ldr	r3, [r4, #0]
 8006426:	42a3      	cmp	r3, r4
 8006428:	d004      	beq.n	8006434 <rt_test_009_006_execute+0x1d4>
 800642a:	69a2      	ldr	r2, [r4, #24]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	6892      	ldr	r2, [r2, #8]
 8006430:	429a      	cmp	r2, r3
 8006432:	d3e0      	bcc.n	80063f6 <rt_test_009_006_execute+0x196>
 8006434:	2300      	movs	r3, #0
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	e7e5      	b.n	8006408 <rt_test_009_006_execute+0x1a8>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800643c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ctp->epending &= ~events;
 800643e:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
 8006442:	b963      	cbnz	r3, 800645e <rt_test_009_006_execute+0x1fe>
 8006444:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006446:	2a00      	cmp	r2, #0
 8006448:	dd09      	ble.n	800645e <rt_test_009_006_execute+0x1fe>
 800644a:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 800644c:	6363      	str	r3, [r4, #52]	; 0x34
 800644e:	42a2      	cmp	r2, r4
 8006450:	d0f0      	beq.n	8006434 <rt_test_009_006_execute+0x1d4>
 8006452:	69a1      	ldr	r1, [r4, #24]
 8006454:	6893      	ldr	r3, [r2, #8]
 8006456:	688a      	ldr	r2, [r1, #8]
 8006458:	429a      	cmp	r2, r3
 800645a:	d2eb      	bcs.n	8006434 <rt_test_009_006_execute+0x1d4>
 800645c:	e7cb      	b.n	80063f6 <rt_test_009_006_execute+0x196>
    chSysHalt("SV#5");
 800645e:	480e      	ldr	r0, [pc, #56]	; (8006498 <rt_test_009_006_execute+0x238>)
 8006460:	f7fa f986 	bl	8000770 <chSysHalt>
      chSysUnlock();
 8006464:	f7fb f9f4 	bl	8001850 <chSysUnlock.lto_priv.7>
 8006468:	2001      	movs	r0, #1
 800646a:	e75b      	b.n	8006324 <rt_test_009_006_execute+0xc4>
      chSysUnlock();
 800646c:	f7fb f9f0 	bl	8001850 <chSysUnlock.lto_priv.7>
 8006470:	2001      	movs	r0, #1
 8006472:	e782      	b.n	800637a <rt_test_009_006_execute+0x11a>
      chSysUnlock();
 8006474:	f7fb f9ec 	bl	8001850 <chSysUnlock.lto_priv.7>
 8006478:	2501      	movs	r5, #1
 800647a:	e7a6      	b.n	80063ca <rt_test_009_006_execute+0x16a>
 800647c:	20001d3c 	.word	0x20001d3c
 8006480:	20000d70 	.word	0x20000d70
 8006484:	0800f778 	.word	0x0800f778
 8006488:	08010f9c 	.word	0x08010f9c
 800648c:	20001d39 	.word	0x20001d39
 8006490:	20001d38 	.word	0x20001d38
 8006494:	20001d34 	.word	0x20001d34
 8006498:	0800f214 	.word	0x0800f214
 800649c:	00000000 	.word	0x00000000

080064a0 <_test_assert_sequence>:

bool _test_assert_sequence(char *expected, const char *msg) {
 80064a0:	b470      	push	{r4, r5, r6}
  char *cp = test_tokens_buffer;

  while (cp < test_tokp) {
 80064a2:	4d0e      	ldr	r5, [pc, #56]	; (80064dc <_test_assert_sequence+0x3c>)
  char *cp = test_tokens_buffer;
 80064a4:	4e0e      	ldr	r6, [pc, #56]	; (80064e0 <_test_assert_sequence+0x40>)
  while (cp < test_tokp) {
 80064a6:	682c      	ldr	r4, [r5, #0]
  char *cp = test_tokens_buffer;
 80064a8:	4633      	mov	r3, r6
 80064aa:	1e42      	subs	r2, r0, #1
 80064ac:	e003      	b.n	80064b6 <_test_assert_sequence+0x16>
    if (*cp++ != *expected++)
 80064ae:	f813 cb01 	ldrb.w	ip, [r3], #1
 80064b2:	4584      	cmp	ip, r0
 80064b4:	d107      	bne.n	80064c6 <_test_assert_sequence+0x26>
  while (cp < test_tokp) {
 80064b6:	429c      	cmp	r4, r3
    if (*cp++ != *expected++)
 80064b8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
  while (cp < test_tokp) {
 80064bc:	d8f7      	bhi.n	80064ae <_test_assert_sequence+0xe>
     return _test_fail(msg);
  }

  if (*expected)
 80064be:	b910      	cbnz	r0, 80064c6 <_test_assert_sequence+0x26>
  test_tokp = test_tokens_buffer;
 80064c0:	602e      	str	r6, [r5, #0]
    return _test_fail(msg);

  clear_tokens();

  return false;
}
 80064c2:	bc70      	pop	{r4, r5, r6}
 80064c4:	4770      	bx	lr
  test_local_fail      = true;
 80064c6:	2301      	movs	r3, #1
 80064c8:	4c06      	ldr	r4, [pc, #24]	; (80064e4 <_test_assert_sequence+0x44>)
  test_failure_message = msg;
 80064ca:	4807      	ldr	r0, [pc, #28]	; (80064e8 <_test_assert_sequence+0x48>)
  test_global_fail     = true;
 80064cc:	4a07      	ldr	r2, [pc, #28]	; (80064ec <_test_assert_sequence+0x4c>)
  test_failure_message = msg;
 80064ce:	6001      	str	r1, [r0, #0]
  test_local_fail      = true;
 80064d0:	7023      	strb	r3, [r4, #0]
     return _test_fail(msg);
 80064d2:	4618      	mov	r0, r3
}
 80064d4:	bc70      	pop	{r4, r5, r6}
  test_global_fail     = true;
 80064d6:	7013      	strb	r3, [r2, #0]
}
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	20001d50 	.word	0x20001d50
 80064e0:	20001d40 	.word	0x20001d40
 80064e4:	20001d39 	.word	0x20001d39
 80064e8:	20001d34 	.word	0x20001d34
 80064ec:	20001d38 	.word	0x20001d38

080064f0 <rt_test_009_002_execute>:
static void rt_test_009_002_execute(void) {
 80064f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 80064f2:	2601      	movs	r6, #1
 80064f4:	2507      	movs	r5, #7
 80064f6:	2400      	movs	r4, #0
 80064f8:	4b0e      	ldr	r3, [pc, #56]	; (8006534 <rt_test_009_002_execute+0x44>)
 80064fa:	4f0f      	ldr	r7, [pc, #60]	; (8006538 <rt_test_009_002_execute+0x48>)
 80064fc:	601e      	str	r6, [r3, #0]
    if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 80064fe:	fa25 f304 	lsr.w	r3, r5, r4
 8006502:	07db      	lsls	r3, r3, #31
 8006504:	d511      	bpl.n	800652a <rt_test_009_002_execute+0x3a>
      chDbgAssert(handlers[eid] != NULL, "null handler");
 8006506:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800650a:	b183      	cbz	r3, 800652e <rt_test_009_002_execute+0x3e>
      events &= ~EVENT_MASK(eid);
 800650c:	fa06 f204 	lsl.w	r2, r6, r4
      handlers[eid](eid);
 8006510:	4620      	mov	r0, r4
      events &= ~EVENT_MASK(eid);
 8006512:	ea25 0502 	bic.w	r5, r5, r2
    eid++;
 8006516:	3401      	adds	r4, #1
      handlers[eid](eid);
 8006518:	4798      	blx	r3
  while (events != (eventmask_t)0) {
 800651a:	2d00      	cmp	r5, #0
 800651c:	d1ef      	bne.n	80064fe <rt_test_009_002_execute+0xe>
}
 800651e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 8006522:	4906      	ldr	r1, [pc, #24]	; (800653c <rt_test_009_002_execute+0x4c>)
 8006524:	4806      	ldr	r0, [pc, #24]	; (8006540 <rt_test_009_002_execute+0x50>)
 8006526:	f7ff bfbb 	b.w	80064a0 <_test_assert_sequence>
    eid++;
 800652a:	3401      	adds	r4, #1
 800652c:	e7e7      	b.n	80064fe <rt_test_009_002_execute+0xe>
      chDbgAssert(handlers[eid] != NULL, "null handler");
 800652e:	4805      	ldr	r0, [pc, #20]	; (8006544 <rt_test_009_002_execute+0x54>)
 8006530:	f7fa f91e 	bl	8000770 <chSysHalt>
 8006534:	20001d3c 	.word	0x20001d3c
 8006538:	080110a4 	.word	0x080110a4
 800653c:	0800f788 	.word	0x0800f788
 8006540:	0800f79c 	.word	0x0800f79c
 8006544:	08010b60 	.word	0x08010b60
	...

08006550 <test_print>:
 *
 * @api
 */
void test_print(const char *msgp) {

  while (*msgp)
 8006550:	7801      	ldrb	r1, [r0, #0]
 8006552:	b159      	cbz	r1, 800656c <test_print+0x1c>
void test_print(const char *msgp) {
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	4604      	mov	r4, r0
 8006558:	4d05      	ldr	r5, [pc, #20]	; (8006570 <test_print+0x20>)
    streamPut(test_chp, *msgp++);
 800655a:	6828      	ldr	r0, [r5, #0]
 800655c:	6803      	ldr	r3, [r0, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4798      	blx	r3
  while (*msgp)
 8006562:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006566:	2900      	cmp	r1, #0
 8006568:	d1f7      	bne.n	800655a <test_print+0xa>
}
 800656a:	bd38      	pop	{r3, r4, r5, pc}
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	20001d30 	.word	0x20001d30
	...

08006580 <test_println>:
 *
 * @param[in] msgp      the message
 *
 * @api
 */
void test_println(const char *msgp) {
 8006580:	b570      	push	{r4, r5, r6, lr}
  while (*msgp)
 8006582:	7801      	ldrb	r1, [r0, #0]
 8006584:	b189      	cbz	r1, 80065aa <test_println+0x2a>
 8006586:	4604      	mov	r4, r0
 8006588:	4d09      	ldr	r5, [pc, #36]	; (80065b0 <test_println+0x30>)
    streamPut(test_chp, *msgp++);
 800658a:	6828      	ldr	r0, [r5, #0]
 800658c:	6803      	ldr	r3, [r0, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	4798      	blx	r3
  while (*msgp)
 8006592:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8006596:	2900      	cmp	r1, #0
 8006598:	d1f7      	bne.n	800658a <test_println+0xa>

  test_print(msgp);
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800659a:	6828      	ldr	r0, [r5, #0]
 800659c:	2202      	movs	r2, #2
}
 800659e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 80065a2:	6803      	ldr	r3, [r0, #0]
 80065a4:	4903      	ldr	r1, [pc, #12]	; (80065b4 <test_println+0x34>)
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	4718      	bx	r3
 80065aa:	4d01      	ldr	r5, [pc, #4]	; (80065b0 <test_println+0x30>)
 80065ac:	e7f5      	b.n	800659a <test_println+0x1a>
 80065ae:	bf00      	nop
 80065b0:	20001d30 	.word	0x20001d30
 80065b4:	08011d88 	.word	0x08011d88
	...

080065c0 <test_emit_token>:
 *
 * @param[in] token     the token as a char
 *
 * @api
 */
void test_emit_token(char token) {
 80065c0:	b538      	push	{r3, r4, r5, lr}
 80065c2:	2320      	movs	r3, #32
 80065c4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80065c8:	4b15      	ldr	r3, [pc, #84]	; (8006620 <test_emit_token+0x60>)
 80065ca:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 80065ce:	430a      	orrs	r2, r1
 80065d0:	d114      	bne.n	80065fc <test_emit_token+0x3c>
  _dbg_enter_lock();
 80065d2:	2501      	movs	r5, #1

  osalSysLock();
  if (test_tokp < &test_tokens_buffer[TEST_CFG_MAX_TOKENS])
 80065d4:	4913      	ldr	r1, [pc, #76]	; (8006624 <test_emit_token+0x64>)
 80065d6:	4c14      	ldr	r4, [pc, #80]	; (8006628 <test_emit_token+0x68>)
 80065d8:	680a      	ldr	r2, [r1, #0]
 80065da:	635d      	str	r5, [r3, #52]	; 0x34
 80065dc:	42a2      	cmp	r2, r4
 80065de:	d310      	bcc.n	8006602 <test_emit_token+0x42>
  _dbg_leave_lock();
 80065e0:	2100      	movs	r1, #0
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	6359      	str	r1, [r3, #52]	; 0x34
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d004      	beq.n	80065f4 <test_emit_token+0x34>
 80065ea:	6999      	ldr	r1, [r3, #24]
 80065ec:	6893      	ldr	r3, [r2, #8]
 80065ee:	688a      	ldr	r2, [r1, #8]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	d312      	bcc.n	800661a <test_emit_token+0x5a>
 80065f4:	2300      	movs	r3, #0
 80065f6:	f383 8811 	msr	BASEPRI, r3
    *test_tokp++ = token;
  osalSysUnlock();
}
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#4");
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <test_emit_token+0x6c>)
 80065fe:	f7fa f8b7 	bl	8000770 <chSysHalt>
    *test_tokp++ = token;
 8006602:	1954      	adds	r4, r2, r5
 8006604:	600c      	str	r4, [r1, #0]
 8006606:	7010      	strb	r0, [r2, #0]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8006608:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800660a:	b112      	cbz	r2, 8006612 <test_emit_token+0x52>
    chSysHalt("SV#5");
 800660c:	4808      	ldr	r0, [pc, #32]	; (8006630 <test_emit_token+0x70>)
 800660e:	f7fa f8af 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8006612:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006614:	2a00      	cmp	r2, #0
 8006616:	ddf9      	ble.n	800660c <test_emit_token+0x4c>
 8006618:	e7e2      	b.n	80065e0 <test_emit_token+0x20>
 800661a:	4806      	ldr	r0, [pc, #24]	; (8006634 <test_emit_token+0x74>)
 800661c:	f7fa f8a8 	bl	8000770 <chSysHalt>
 8006620:	20000d70 	.word	0x20000d70
 8006624:	20001d50 	.word	0x20001d50
 8006628:	20001d50 	.word	0x20001d50
 800662c:	0800f20c 	.word	0x0800f20c
 8006630:	0800f214 	.word	0x0800f214
 8006634:	08010bbc 	.word	0x08010bbc
	...

08006640 <thread>:
  test_emit_token(*(char *)p);
 8006640:	7800      	ldrb	r0, [r0, #0]
 8006642:	f7ff bfbd 	b.w	80065c0 <test_emit_token>
 8006646:	bf00      	nop
	...

08006650 <thread1.lto_priv.0>:
static THD_FUNCTION(thread1, p) {
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	2320      	movs	r3, #32
 8006654:	4605      	mov	r5, r0
 8006656:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800665a:	f7fa f8e1 	bl	8000820 <_dbg_check_lock>
  if (*trp != NULL) {
 800665e:	4b1c      	ldr	r3, [pc, #112]	; (80066d0 <thread1.lto_priv.0+0x80>)
 8006660:	6818      	ldr	r0, [r3, #0]
 8006662:	b140      	cbz	r0, 8006676 <thread1.lto_priv.0+0x26>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8006664:	f890 2020 	ldrb.w	r2, [r0, #32]
 8006668:	2a03      	cmp	r2, #3
 800666a:	d124      	bne.n	80066b6 <thread1.lto_priv.0+0x66>
    *trp = NULL;
 800666c:	2200      	movs	r2, #0
    tp->u.rdymsg = msg;
 800666e:	6242      	str	r2, [r0, #36]	; 0x24
    *trp = NULL;
 8006670:	601a      	str	r2, [r3, #0]
    (void) chSchReadyI(tp);
 8006672:	f7fb fd4d 	bl	8002110 <chSchReadyI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8006676:	4c17      	ldr	r4, [pc, #92]	; (80066d4 <thread1.lto_priv.0+0x84>)
 8006678:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800667a:	b9fb      	cbnz	r3, 80066bc <thread1.lto_priv.0+0x6c>
 800667c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800667e:	2b00      	cmp	r3, #0
 8006680:	dd1c      	ble.n	80066bc <thread1.lto_priv.0+0x6c>
  chDbgCheckClassI();
 8006682:	f7fa f95d 	bl	8000940 <chDbgCheckClassI>
  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8006686:	6822      	ldr	r2, [r4, #0]
 8006688:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 800668a:	6892      	ldr	r2, [r2, #8]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d817      	bhi.n	80066c2 <thread1.lto_priv.0+0x72>
  _dbg_check_unlock();
 8006692:	f7fa f8d5 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	42a3      	cmp	r3, r4
 800669a:	d004      	beq.n	80066a6 <thread1.lto_priv.0+0x56>
 800669c:	69a2      	ldr	r2, [r4, #24]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	6892      	ldr	r2, [r2, #8]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d310      	bcc.n	80066c8 <thread1.lto_priv.0+0x78>
 80066a6:	2300      	movs	r3, #0
 80066a8:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80066ac:	7828      	ldrb	r0, [r5, #0]
}
 80066ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  test_emit_token(*(char *)p);
 80066b2:	f7ff bf85 	b.w	80065c0 <test_emit_token>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 80066b6:	4808      	ldr	r0, [pc, #32]	; (80066d8 <thread1.lto_priv.0+0x88>)
 80066b8:	f7fa f85a 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 80066bc:	4807      	ldr	r0, [pc, #28]	; (80066dc <thread1.lto_priv.0+0x8c>)
 80066be:	f7fa f857 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 80066c2:	f7fc fa8d 	bl	8002be0 <chSchDoReschedule>
 80066c6:	e7e4      	b.n	8006692 <thread1.lto_priv.0+0x42>
 80066c8:	4805      	ldr	r0, [pc, #20]	; (80066e0 <thread1.lto_priv.0+0x90>)
 80066ca:	f7fa f851 	bl	8000770 <chSysHalt>
 80066ce:	bf00      	nop
 80066d0:	20001d68 	.word	0x20001d68
 80066d4:	20000d70 	.word	0x20000d70
 80066d8:	08010e70 	.word	0x08010e70
 80066dc:	0800f204 	.word	0x0800f204
 80066e0:	08010d28 	.word	0x08010d28
	...

080066f0 <thread1.lto_priv.1>:
static THD_FUNCTION(thread1, p) {
 80066f0:	b510      	push	{r4, lr}
 80066f2:	4604      	mov	r4, r0
  chSemWait(&sem1);
 80066f4:	4803      	ldr	r0, [pc, #12]	; (8006704 <thread1.lto_priv.1+0x14>)
 80066f6:	f7fc ff5b 	bl	80035b0 <chSemWait>
  test_emit_token(*(char *)p);
 80066fa:	7820      	ldrb	r0, [r4, #0]
}
 80066fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  test_emit_token(*(char *)p);
 8006700:	f7ff bf5e 	b.w	80065c0 <test_emit_token>
 8006704:	200016a8 	.word	0x200016a8
	...

08006710 <thread1.lto_priv.2>:
static THD_FUNCTION(thread1, p) {
 8006710:	b538      	push	{r3, r4, r5, lr}
 8006712:	2320      	movs	r3, #32
 8006714:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8006718:	4c16      	ldr	r4, [pc, #88]	; (8006774 <thread1.lto_priv.2+0x64>)
 800671a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800671e:	4313      	orrs	r3, r2
 8006720:	d11e      	bne.n	8006760 <thread1.lto_priv.2+0x50>
  _dbg_enter_lock();
 8006722:	2301      	movs	r3, #1
 8006724:	4605      	mov	r5, r0
  chMtxLockS(mp);
 8006726:	4814      	ldr	r0, [pc, #80]	; (8006778 <thread1.lto_priv.2+0x68>)
 8006728:	6363      	str	r3, [r4, #52]	; 0x34
 800672a:	f7fd f959 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800672e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006730:	b9cb      	cbnz	r3, 8006766 <thread1.lto_priv.2+0x56>
 8006732:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006734:	2a00      	cmp	r2, #0
 8006736:	dd16      	ble.n	8006766 <thread1.lto_priv.2+0x56>
 8006738:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 800673a:	6363      	str	r3, [r4, #52]	; 0x34
 800673c:	42a2      	cmp	r2, r4
 800673e:	d004      	beq.n	800674a <thread1.lto_priv.2+0x3a>
 8006740:	69a1      	ldr	r1, [r4, #24]
 8006742:	6893      	ldr	r3, [r2, #8]
 8006744:	688a      	ldr	r2, [r1, #8]
 8006746:	429a      	cmp	r2, r3
 8006748:	d310      	bcc.n	800676c <thread1.lto_priv.2+0x5c>
 800674a:	2300      	movs	r3, #0
 800674c:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 8006750:	7828      	ldrb	r0, [r5, #0]
 8006752:	f7ff ff35 	bl	80065c0 <test_emit_token>
}
 8006756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m1);
 800675a:	4807      	ldr	r0, [pc, #28]	; (8006778 <thread1.lto_priv.2+0x68>)
 800675c:	f7fd ba30 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 8006760:	4806      	ldr	r0, [pc, #24]	; (800677c <thread1.lto_priv.2+0x6c>)
 8006762:	f7fa f805 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8006766:	4806      	ldr	r0, [pc, #24]	; (8006780 <thread1.lto_priv.2+0x70>)
 8006768:	f7fa f802 	bl	8000770 <chSysHalt>
 800676c:	4805      	ldr	r0, [pc, #20]	; (8006784 <thread1.lto_priv.2+0x74>)
 800676e:	f7f9 ffff 	bl	8000770 <chSysHalt>
 8006772:	bf00      	nop
 8006774:	20000d70 	.word	0x20000d70
 8006778:	20000818 	.word	0x20000818
 800677c:	0800f20c 	.word	0x0800f20c
 8006780:	0800f214 	.word	0x0800f214
 8006784:	08010f48 	.word	0x08010f48
	...

08006790 <thread6>:
static THD_FUNCTION(thread6, p) {
 8006790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006792:	2320      	movs	r3, #32
 8006794:	4606      	mov	r6, r0
 8006796:	f383 8811 	msr	BASEPRI, r3
 800679a:	4c2e      	ldr	r4, [pc, #184]	; (8006854 <thread6+0xc4>)
  _dbg_check_lock();
 800679c:	f7fa f840 	bl	8000820 <_dbg_check_lock>
 80067a0:	482d      	ldr	r0, [pc, #180]	; (8006858 <thread6+0xc8>)
 80067a2:	f7fd f91d 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 80067a6:	f7fa f84b 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80067aa:	6823      	ldr	r3, [r4, #0]
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	d004      	beq.n	80067ba <thread6+0x2a>
 80067b0:	69a2      	ldr	r2, [r4, #24]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	6892      	ldr	r2, [r2, #8]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d33f      	bcc.n	800683a <thread6+0xaa>
 80067ba:	2300      	movs	r3, #0
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	2320      	movs	r3, #32
 80067c2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80067c6:	f7fa f82b 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80067ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d137      	bne.n	8006840 <thread6+0xb0>
 80067d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	dd34      	ble.n	8006840 <thread6+0xb0>
 *                      @p chCondBroadcast().
 *
 * @sclass
 */
msg_t chCondWaitS(condition_variable_t *cp) {
  thread_t *ctp = currp;
 80067d6:	69a5      	ldr	r5, [r4, #24]
 *
 * @xclass
 */
static inline mutex_t *chMtxGetNextMutexX(void) {

  return chThdGetSelfX()->mtxlist;
 80067d8:	6baf      	ldr	r7, [r5, #56]	; 0x38
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
  chDbgCheck(cp != NULL);
  chDbgAssert(mp != NULL, "not owning a mutex");
 80067da:	2f00      	cmp	r7, #0
 80067dc:	d036      	beq.n	800684c <thread6+0xbc>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 80067de:	4638      	mov	r0, r7
 80067e0:	f7fb fd0e 	bl	8002200 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  ctp->u.wtobjp = cp;
 80067e4:	481d      	ldr	r0, [pc, #116]	; (800685c <thread6+0xcc>)
  ch_queue_t *cp = qp;
 80067e6:	4603      	mov	r3, r0
 80067e8:	6268      	str	r0, [r5, #36]	; 0x24
 80067ea:	e003      	b.n	80067f4 <thread6+0x64>
  } while ((cp != qp) &&
 80067ec:	6899      	ldr	r1, [r3, #8]
 80067ee:	68aa      	ldr	r2, [r5, #8]
 80067f0:	4291      	cmp	r1, r2
 80067f2:	d302      	bcc.n	80067fa <thread6+0x6a>
    cp = cp->next;
 80067f4:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 80067f6:	4283      	cmp	r3, r0
 80067f8:	d1f8      	bne.n	80067ec <thread6+0x5c>
  tp->prev       = cp->prev;
 80067fa:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 80067fc:	602b      	str	r3, [r5, #0]
  tp->prev       = cp->prev;
 80067fe:	606a      	str	r2, [r5, #4]
  ch_sch_prio_insert(&ctp->hdr.queue, &cp->queue);
  chSchGoSleepS(CH_STATE_WTCOND);
 8006800:	2007      	movs	r0, #7
  tp->prev->next = tp;
 8006802:	6015      	str	r5, [r2, #0]
  cp->prev       = tp;
 8006804:	605d      	str	r5, [r3, #4]
 8006806:	f7fb fd6b 	bl	80022e0 <chSchGoSleepS>
  msg = ctp->u.rdymsg;
  chMtxLockS(mp);
 800680a:	4638      	mov	r0, r7
 800680c:	f7fd f8e8 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 8006810:	f7fa f816 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	42a3      	cmp	r3, r4
 8006818:	d004      	beq.n	8006824 <thread6+0x94>
 800681a:	69a2      	ldr	r2, [r4, #24]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	6892      	ldr	r2, [r2, #8]
 8006820:	429a      	cmp	r2, r3
 8006822:	d310      	bcc.n	8006846 <thread6+0xb6>
 8006824:	2300      	movs	r3, #0
 8006826:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800682a:	7830      	ldrb	r0, [r6, #0]
 800682c:	f7ff fec8 	bl	80065c0 <test_emit_token>
}
 8006830:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  chMtxUnlock(&m1);
 8006834:	4808      	ldr	r0, [pc, #32]	; (8006858 <thread6+0xc8>)
 8006836:	f7fd b9c3 	b.w	8003bc0 <chMtxUnlock>
 800683a:	4809      	ldr	r0, [pc, #36]	; (8006860 <thread6+0xd0>)
 800683c:	f7f9 ff98 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8006840:	4808      	ldr	r0, [pc, #32]	; (8006864 <thread6+0xd4>)
 8006842:	f7f9 ff95 	bl	8000770 <chSysHalt>
 8006846:	4808      	ldr	r0, [pc, #32]	; (8006868 <thread6+0xd8>)
 8006848:	f7f9 ff92 	bl	8000770 <chSysHalt>
  chDbgAssert(mp != NULL, "not owning a mutex");
 800684c:	4807      	ldr	r0, [pc, #28]	; (800686c <thread6+0xdc>)
 800684e:	f7f9 ff8f 	bl	8000770 <chSysHalt>
 8006852:	bf00      	nop
 8006854:	20000d70 	.word	0x20000d70
 8006858:	20000818 	.word	0x20000818
 800685c:	20000800 	.word	0x20000800
 8006860:	08010f48 	.word	0x08010f48
 8006864:	0800f204 	.word	0x0800f204
 8006868:	08010f54 	.word	0x08010f54
 800686c:	08010dcc 	.word	0x08010dcc

08006870 <thread8>:
static THD_FUNCTION(thread8, p) {
 8006870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006874:	2320      	movs	r3, #32
 8006876:	4607      	mov	r7, r0
 8006878:	f383 8811 	msr	BASEPRI, r3
 800687c:	4c36      	ldr	r4, [pc, #216]	; (8006958 <thread8+0xe8>)
  _dbg_check_lock();
 800687e:	f7f9 ffcf 	bl	8000820 <_dbg_check_lock>
 8006882:	4836      	ldr	r0, [pc, #216]	; (800695c <thread8+0xec>)
 8006884:	f7fd f8ac 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 8006888:	f7f9 ffda 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800688c:	6823      	ldr	r3, [r4, #0]
 800688e:	42a3      	cmp	r3, r4
 8006890:	d004      	beq.n	800689c <thread8+0x2c>
 8006892:	69a2      	ldr	r2, [r4, #24]
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	6892      	ldr	r2, [r2, #8]
 8006898:	429a      	cmp	r2, r3
 800689a:	d354      	bcc.n	8006946 <thread8+0xd6>
 800689c:	2300      	movs	r3, #0
 800689e:	f383 8811 	msr	BASEPRI, r3
  chMtxLock(&m1);
 80068a2:	482f      	ldr	r0, [pc, #188]	; (8006960 <thread8+0xf0>)
 80068a4:	f7fd f91c 	bl	8003ae0 <chMtxLock>
 80068a8:	2320      	movs	r3, #32
 80068aa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80068ae:	f7f9 ffb7 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80068b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d143      	bne.n	8006940 <thread8+0xd0>
 80068b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	dd40      	ble.n	8006940 <thread8+0xd0>
 80068be:	69a3      	ldr	r3, [r4, #24]
 80068c0:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
  mutex_t *mp = chMtxGetNextMutexX();
  msg_t msg;

  chDbgCheckClassS();
  chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
  chDbgAssert(mp != NULL, "not owning a mutex");
 80068c4:	f1b8 0f00 	cmp.w	r8, #0
 80068c8:	d040      	beq.n	800694c <thread8+0xdc>

  /* Releasing "current" mutex.*/
  chMtxUnlockS(mp);
 80068ca:	4640      	mov	r0, r8
 80068cc:	f7fb fc98 	bl	8002200 <chMtxUnlockS>

  /* Start waiting on the condition variable, on exit the mutex is taken
     again.*/
  currp->u.wtobjp = cp;
 80068d0:	4e24      	ldr	r6, [pc, #144]	; (8006964 <thread8+0xf4>)
 80068d2:	69a5      	ldr	r5, [r4, #24]
  ch_queue_t *cp = qp;
 80068d4:	4633      	mov	r3, r6
 80068d6:	626e      	str	r6, [r5, #36]	; 0x24
 80068d8:	e003      	b.n	80068e2 <thread8+0x72>
  } while ((cp != qp) &&
 80068da:	6899      	ldr	r1, [r3, #8]
 80068dc:	68aa      	ldr	r2, [r5, #8]
 80068de:	4291      	cmp	r1, r2
 80068e0:	d302      	bcc.n	80068e8 <thread8+0x78>
    cp = cp->next;
 80068e2:	681b      	ldr	r3, [r3, #0]
           (((thread_t *)cp)->hdr.pqueue.prio >= ((thread_t *)tp)->hdr.pqueue.prio));
 80068e4:	42b3      	cmp	r3, r6
 80068e6:	d1f8      	bne.n	80068da <thread8+0x6a>
  tp->prev       = cp->prev;
 80068e8:	685a      	ldr	r2, [r3, #4]
  tp->next       = cp;
 80068ea:	602b      	str	r3, [r5, #0]
  tp->prev       = cp->prev;
 80068ec:	606a      	str	r2, [r5, #4]
  tp->prev->next = tp;
 80068ee:	6015      	str	r5, [r2, #0]
  cp->prev       = tp;
 80068f0:	605d      	str	r5, [r3, #4]
 80068f2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80068f4:	bb23      	cbnz	r3, 8006940 <thread8+0xd0>
 80068f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dd21      	ble.n	8006940 <thread8+0xd0>
    chSchGoSleepS(newstate);
 80068fc:	2007      	movs	r0, #7
 80068fe:	f7fb fcef 	bl	80022e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8006902:	69a3      	ldr	r3, [r4, #24]
  ch_sch_prio_insert(&currp->hdr.queue, &cp->queue);
  msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
  if (msg != MSG_TIMEOUT) {
 8006904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006906:	3301      	adds	r3, #1
 8006908:	d002      	beq.n	8006910 <thread8+0xa0>
    chMtxLockS(mp);
 800690a:	4640      	mov	r0, r8
 800690c:	f7fd f868 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 8006910:	f7f9 ff96 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	42a3      	cmp	r3, r4
 8006918:	d004      	beq.n	8006924 <thread8+0xb4>
 800691a:	69a2      	ldr	r2, [r4, #24]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	6892      	ldr	r2, [r2, #8]
 8006920:	429a      	cmp	r2, r3
 8006922:	d316      	bcc.n	8006952 <thread8+0xe2>
 8006924:	2300      	movs	r3, #0
 8006926:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 800692a:	7838      	ldrb	r0, [r7, #0]
 800692c:	f7ff fe48 	bl	80065c0 <test_emit_token>
  chMtxUnlock(&m1);
 8006930:	480b      	ldr	r0, [pc, #44]	; (8006960 <thread8+0xf0>)
 8006932:	f7fd f945 	bl	8003bc0 <chMtxUnlock>
}
 8006936:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  chMtxUnlock(&m2);
 800693a:	4808      	ldr	r0, [pc, #32]	; (800695c <thread8+0xec>)
 800693c:	f7fd b940 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#11");
 8006940:	4809      	ldr	r0, [pc, #36]	; (8006968 <thread8+0xf8>)
 8006942:	f7f9 ff15 	bl	8000770 <chSysHalt>
 8006946:	4809      	ldr	r0, [pc, #36]	; (800696c <thread8+0xfc>)
 8006948:	f7f9 ff12 	bl	8000770 <chSysHalt>
  chDbgAssert(mp != NULL, "not owning a mutex");
 800694c:	4808      	ldr	r0, [pc, #32]	; (8006970 <thread8+0x100>)
 800694e:	f7f9 ff0f 	bl	8000770 <chSysHalt>
 8006952:	4808      	ldr	r0, [pc, #32]	; (8006974 <thread8+0x104>)
 8006954:	f7f9 ff0c 	bl	8000770 <chSysHalt>
 8006958:	20000d70 	.word	0x20000d70
 800695c:	20000828 	.word	0x20000828
 8006960:	20000818 	.word	0x20000818
 8006964:	20000800 	.word	0x20000800
 8006968:	0800f204 	.word	0x0800f204
 800696c:	08010f48 	.word	0x08010f48
 8006970:	08010c74 	.word	0x08010c74
 8006974:	08010f54 	.word	0x08010f54
	...

08006980 <thread9>:
static THD_FUNCTION(thread9, p) {
 8006980:	b538      	push	{r3, r4, r5, lr}
 8006982:	2320      	movs	r3, #32
 8006984:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8006988:	4c16      	ldr	r4, [pc, #88]	; (80069e4 <thread9+0x64>)
 800698a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800698e:	4313      	orrs	r3, r2
 8006990:	d11e      	bne.n	80069d0 <thread9+0x50>
  _dbg_enter_lock();
 8006992:	2301      	movs	r3, #1
 8006994:	4605      	mov	r5, r0
 8006996:	4814      	ldr	r0, [pc, #80]	; (80069e8 <thread9+0x68>)
 8006998:	6363      	str	r3, [r4, #52]	; 0x34
 800699a:	f7fd f821 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800699e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80069a0:	b9cb      	cbnz	r3, 80069d6 <thread9+0x56>
 80069a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80069a4:	2a00      	cmp	r2, #0
 80069a6:	dd16      	ble.n	80069d6 <thread9+0x56>
 80069a8:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 80069aa:	6363      	str	r3, [r4, #52]	; 0x34
 80069ac:	42a2      	cmp	r2, r4
 80069ae:	d004      	beq.n	80069ba <thread9+0x3a>
 80069b0:	69a1      	ldr	r1, [r4, #24]
 80069b2:	6893      	ldr	r3, [r2, #8]
 80069b4:	688a      	ldr	r2, [r1, #8]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d310      	bcc.n	80069dc <thread9+0x5c>
 80069ba:	2300      	movs	r3, #0
 80069bc:	f383 8811 	msr	BASEPRI, r3
  test_emit_token(*(char *)p);
 80069c0:	7828      	ldrb	r0, [r5, #0]
 80069c2:	f7ff fdfd 	bl	80065c0 <test_emit_token>
}
 80069c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chMtxUnlock(&m2);
 80069ca:	4807      	ldr	r0, [pc, #28]	; (80069e8 <thread9+0x68>)
 80069cc:	f7fd b8f8 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#4");
 80069d0:	4806      	ldr	r0, [pc, #24]	; (80069ec <thread9+0x6c>)
 80069d2:	f7f9 fecd 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 80069d6:	4806      	ldr	r0, [pc, #24]	; (80069f0 <thread9+0x70>)
 80069d8:	f7f9 feca 	bl	8000770 <chSysHalt>
 80069dc:	4805      	ldr	r0, [pc, #20]	; (80069f4 <thread9+0x74>)
 80069de:	f7f9 fec7 	bl	8000770 <chSysHalt>
 80069e2:	bf00      	nop
 80069e4:	20000d70 	.word	0x20000d70
 80069e8:	20000828 	.word	0x20000828
 80069ec:	0800f20c 	.word	0x0800f20c
 80069f0:	0800f214 	.word	0x0800f214
 80069f4:	08010f48 	.word	0x08010f48
	...

08006a00 <h1>:
static void h1(eventid_t id) {(void)id;test_emit_token('A');}
 8006a00:	2041      	movs	r0, #65	; 0x41
 8006a02:	f7ff bddd 	b.w	80065c0 <test_emit_token>
 8006a06:	bf00      	nop
	...

08006a10 <h2>:
static void h2(eventid_t id) {(void)id;test_emit_token('B');}
 8006a10:	2042      	movs	r0, #66	; 0x42
 8006a12:	f7ff bdd5 	b.w	80065c0 <test_emit_token>
 8006a16:	bf00      	nop
	...

08006a20 <h3>:
static void h3(eventid_t id) {(void)id;test_emit_token('C');}
 8006a20:	2043      	movs	r0, #67	; 0x43
 8006a22:	f7ff bdcd 	b.w	80065c0 <test_emit_token>
 8006a26:	bf00      	nop
	...

08006a30 <dyn_thread1.lto_priv.0>:
 8006a30:	7800      	ldrb	r0, [r0, #0]
 8006a32:	f7ff bdc5 	b.w	80065c0 <test_emit_token>
 8006a36:	bf00      	nop
	...

08006a40 <test_printn.part.0>:
    while (n)
 8006a40:	b320      	cbz	r0, 8006a8c <test_printn.part.0+0x4c>
void test_printn(uint32_t n) {
 8006a42:	b570      	push	{r4, r5, r6, lr}
 8006a44:	b084      	sub	sp, #16
    p = buf;
 8006a46:	466d      	mov	r5, sp
 8006a48:	462a      	mov	r2, r5
      *p++ = (n % 10) + '0', n /= 10;
 8006a4a:	4e11      	ldr	r6, [pc, #68]	; (8006a90 <test_printn.part.0+0x50>)
 8006a4c:	4684      	mov	ip, r0
 8006a4e:	fba6 1300 	umull	r1, r3, r6, r0
 8006a52:	08db      	lsrs	r3, r3, #3
 8006a54:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006a58:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
 8006a5c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8006a60:	b2c9      	uxtb	r1, r1
    while (n)
 8006a62:	f1bc 0f09 	cmp.w	ip, #9
 8006a66:	4614      	mov	r4, r2
      *p++ = (n % 10) + '0', n /= 10;
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f802 1b01 	strb.w	r1, [r2], #1
    while (n)
 8006a6e:	d8ed      	bhi.n	8006a4c <test_printn.part.0+0xc>
    while (p > buf)
 8006a70:	42aa      	cmp	r2, r5
 8006a72:	d909      	bls.n	8006a88 <test_printn.part.0+0x48>
 8006a74:	4e07      	ldr	r6, [pc, #28]	; (8006a94 <test_printn.part.0+0x54>)
 8006a76:	e001      	b.n	8006a7c <test_printn.part.0+0x3c>
      streamPut(test_chp, *--p);
 8006a78:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8006a7c:	6830      	ldr	r0, [r6, #0]
 8006a7e:	6803      	ldr	r3, [r0, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	4798      	blx	r3
    while (p > buf)
 8006a84:	42a5      	cmp	r5, r4
 8006a86:	d1f7      	bne.n	8006a78 <test_printn.part.0+0x38>
}
 8006a88:	b004      	add	sp, #16
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop
 8006a90:	cccccccd 	.word	0xcccccccd
 8006a94:	20001d30 	.word	0x20001d30
	...

08006aa0 <test_printn>:
  if (!n)
 8006aa0:	b928      	cbnz	r0, 8006aae <test_printn+0xe>
    streamPut(test_chp, '0');
 8006aa2:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <test_printn+0x14>)
 8006aa4:	2130      	movs	r1, #48	; 0x30
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	6803      	ldr	r3, [r0, #0]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	4718      	bx	r3
 8006aae:	f7ff bfc7 	b.w	8006a40 <test_printn.part.0>
 8006ab2:	bf00      	nop
 8006ab4:	20001d30 	.word	0x20001d30
	...

08006ac0 <rt_test_001_001_execute.lto_priv.0>:
 */

static void rt_test_001_001_execute(void) {

  /* [1.1.1] Prints the version string.*/
  test_set_step(1);
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	4b1c      	ldr	r3, [pc, #112]	; (8006b34 <rt_test_001_001_execute.lto_priv.0+0x74>)
static void rt_test_001_001_execute(void) {
 8006ac4:	b510      	push	{r4, lr}
  {
#if defined(PORT_ARCHITECTURE_NAME)
    test_print("--- Architecture:                       ");
 8006ac6:	481c      	ldr	r0, [pc, #112]	; (8006b38 <rt_test_001_001_execute.lto_priv.0+0x78>)
  test_set_step(1);
 8006ac8:	601a      	str	r2, [r3, #0]
    test_print("--- Architecture:                       ");
 8006aca:	f7ff fd41 	bl	8006550 <test_print>
    test_println(PORT_ARCHITECTURE_NAME);
 8006ace:	481b      	ldr	r0, [pc, #108]	; (8006b3c <rt_test_001_001_execute.lto_priv.0+0x7c>)
 8006ad0:	f7ff fd56 	bl	8006580 <test_println>
#endif
#if defined(PORT_CORE_VARIANT_NAME)
    test_print("--- Core Variant:                       ");
 8006ad4:	481a      	ldr	r0, [pc, #104]	; (8006b40 <rt_test_001_001_execute.lto_priv.0+0x80>)
 8006ad6:	f7ff fd3b 	bl	8006550 <test_print>
    test_println(PORT_CORE_VARIANT_NAME);
 8006ada:	481a      	ldr	r0, [pc, #104]	; (8006b44 <rt_test_001_001_execute.lto_priv.0+0x84>)
 8006adc:	f7ff fd50 	bl	8006580 <test_println>
#endif
#if defined(PORT_COMPILER_NAME)
    test_print("--- Compiler:                           ");
 8006ae0:	4819      	ldr	r0, [pc, #100]	; (8006b48 <rt_test_001_001_execute.lto_priv.0+0x88>)
 8006ae2:	f7ff fd35 	bl	8006550 <test_print>
    test_println(PORT_COMPILER_NAME);
 8006ae6:	4819      	ldr	r0, [pc, #100]	; (8006b4c <rt_test_001_001_execute.lto_priv.0+0x8c>)
 8006ae8:	f7ff fd4a 	bl	8006580 <test_println>
#endif
#if defined(PORT_INFO)
    test_print("--- Port Info:                          ");
 8006aec:	4818      	ldr	r0, [pc, #96]	; (8006b50 <rt_test_001_001_execute.lto_priv.0+0x90>)
 8006aee:	f7ff fd2f 	bl	8006550 <test_print>
    test_println(PORT_INFO);
 8006af2:	4818      	ldr	r0, [pc, #96]	; (8006b54 <rt_test_001_001_execute.lto_priv.0+0x94>)
#endif
#if defined(PORT_NATURAL_ALIGN)
    test_print("--- Natural alignment:                  ");
    test_printn(PORT_NATURAL_ALIGN);
    test_println("");
 8006af4:	4c18      	ldr	r4, [pc, #96]	; (8006b58 <rt_test_001_001_execute.lto_priv.0+0x98>)
    test_println(PORT_INFO);
 8006af6:	f7ff fd43 	bl	8006580 <test_println>
    test_print("--- Natural alignment:                  ");
 8006afa:	4818      	ldr	r0, [pc, #96]	; (8006b5c <rt_test_001_001_execute.lto_priv.0+0x9c>)
 8006afc:	f7ff fd28 	bl	8006550 <test_print>
void test_printn(uint32_t n) {
 8006b00:	2004      	movs	r0, #4
 8006b02:	f7ff ff9d 	bl	8006a40 <test_printn.part.0>
    test_println("");
 8006b06:	4620      	mov	r0, r4
 8006b08:	f7ff fd3a 	bl	8006580 <test_println>
#endif
#if defined(PORT_STACK_ALIGN)
    test_print("--- Stack alignment:                    ");
 8006b0c:	4814      	ldr	r0, [pc, #80]	; (8006b60 <rt_test_001_001_execute.lto_priv.0+0xa0>)
 8006b0e:	f7ff fd1f 	bl	8006550 <test_print>
 8006b12:	2008      	movs	r0, #8
 8006b14:	f7ff ff94 	bl	8006a40 <test_printn.part.0>
    test_printn(PORT_STACK_ALIGN);
    test_println("");
 8006b18:	4620      	mov	r0, r4
 8006b1a:	f7ff fd31 	bl	8006580 <test_println>
#endif
#if defined(PORT_WORKING_AREA_ALIGN)
    test_print("--- Working area alignment:             ");
 8006b1e:	4811      	ldr	r0, [pc, #68]	; (8006b64 <rt_test_001_001_execute.lto_priv.0+0xa4>)
 8006b20:	f7ff fd16 	bl	8006550 <test_print>
 8006b24:	2008      	movs	r0, #8
 8006b26:	f7ff ff8b 	bl	8006a40 <test_printn.part.0>
    test_printn(PORT_WORKING_AREA_ALIGN);
    test_println("");
 8006b2a:	4620      	mov	r0, r4
#endif
  }
  test_end_step(1);
}
 8006b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    test_println("");
 8006b30:	f7ff bd26 	b.w	8006580 <test_println>
 8006b34:	20001d3c 	.word	0x20001d3c
 8006b38:	0800f7a0 	.word	0x0800f7a0
 8006b3c:	0800f3a4 	.word	0x0800f3a4
 8006b40:	0800f7cc 	.word	0x0800f7cc
 8006b44:	0800f3c0 	.word	0x0800f3c0
 8006b48:	0800f7f8 	.word	0x0800f7f8
 8006b4c:	0800f384 	.word	0x0800f384
 8006b50:	0800f824 	.word	0x0800f824
 8006b54:	0800f3e0 	.word	0x0800f3e0
 8006b58:	0800f35c 	.word	0x0800f35c
 8006b5c:	0800f850 	.word	0x0800f850
 8006b60:	0800f87c 	.word	0x0800f87c
 8006b64:	0800f8a8 	.word	0x0800f8a8
	...

08006b70 <rt_test_001_002_execute>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void rt_test_001_002_execute(void) {
 8006b70:	b538      	push	{r3, r4, r5, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8006b72:	2501      	movs	r5, #1
 8006b74:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <rt_test_001_002_execute+0x68>)
  {
    test_println("--- Product:                            ChibiOS/RT");
 8006b76:	4819      	ldr	r0, [pc, #100]	; (8006bdc <rt_test_001_002_execute+0x6c>)
  test_set_step(1);
 8006b78:	601d      	str	r5, [r3, #0]
    test_print("--- Stable Flag:                        ");
    test_printn(CH_KERNEL_STABLE);
    test_println("");
 8006b7a:	4c19      	ldr	r4, [pc, #100]	; (8006be0 <rt_test_001_002_execute+0x70>)
    test_println("--- Product:                            ChibiOS/RT");
 8006b7c:	f7ff fd00 	bl	8006580 <test_println>
    test_print("--- Stable Flag:                        ");
 8006b80:	4818      	ldr	r0, [pc, #96]	; (8006be4 <rt_test_001_002_execute+0x74>)
 8006b82:	f7ff fce5 	bl	8006550 <test_print>
 8006b86:	4628      	mov	r0, r5
 8006b88:	f7ff ff5a 	bl	8006a40 <test_printn.part.0>
    test_println("");
 8006b8c:	4620      	mov	r0, r4
 8006b8e:	f7ff fcf7 	bl	8006580 <test_println>
    test_print("--- Version String:                     ");
 8006b92:	4815      	ldr	r0, [pc, #84]	; (8006be8 <rt_test_001_002_execute+0x78>)
 8006b94:	f7ff fcdc 	bl	8006550 <test_print>
    test_println(CH_KERNEL_VERSION);
 8006b98:	4814      	ldr	r0, [pc, #80]	; (8006bec <rt_test_001_002_execute+0x7c>)
 8006b9a:	f7ff fcf1 	bl	8006580 <test_println>
    test_print("--- Major Number:                       ");
 8006b9e:	4814      	ldr	r0, [pc, #80]	; (8006bf0 <rt_test_001_002_execute+0x80>)
 8006ba0:	f7ff fcd6 	bl	8006550 <test_print>
 8006ba4:	2006      	movs	r0, #6
 8006ba6:	f7ff ff4b 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_KERNEL_MAJOR);
    test_println("");
 8006baa:	4620      	mov	r0, r4
 8006bac:	f7ff fce8 	bl	8006580 <test_println>
    test_print("--- Minor Number:                       ");
 8006bb0:	4810      	ldr	r0, [pc, #64]	; (8006bf4 <rt_test_001_002_execute+0x84>)
 8006bb2:	f7ff fccd 	bl	8006550 <test_print>
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	f7ff ff42 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_KERNEL_MINOR);
    test_println("");
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f7ff fcdf 	bl	8006580 <test_println>
    test_print("--- Patch Number:                       ");
 8006bc2:	480d      	ldr	r0, [pc, #52]	; (8006bf8 <rt_test_001_002_execute+0x88>)
 8006bc4:	f7ff fcc4 	bl	8006550 <test_print>
 8006bc8:	2003      	movs	r0, #3
 8006bca:	f7ff ff39 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_KERNEL_PATCH);
    test_println("");
 8006bce:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8006bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8006bd4:	f7ff bcd4 	b.w	8006580 <test_println>
 8006bd8:	20001d3c 	.word	0x20001d3c
 8006bdc:	0800f8d4 	.word	0x0800f8d4
 8006be0:	0800f35c 	.word	0x0800f35c
 8006be4:	0800f908 	.word	0x0800f908
 8006be8:	0800f934 	.word	0x0800f934
 8006bec:	0800f368 	.word	0x0800f368
 8006bf0:	0800f960 	.word	0x0800f960
 8006bf4:	0800f98c 	.word	0x0800f98c
 8006bf8:	0800f9b8 	.word	0x0800f9b8
 8006bfc:	00000000 	.word	0x00000000

08006c00 <rt_test_001_003_execute>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void rt_test_001_003_execute(void) {
 8006c00:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 8006c02:	2501      	movs	r5, #1
 8006c04:	4b92      	ldr	r3, [pc, #584]	; (8006e50 <rt_test_001_003_execute+0x250>)
  {
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
    test_printn(CH_CFG_ST_RESOLUTION);
    test_println("");
 8006c06:	4c93      	ldr	r4, [pc, #588]	; (8006e54 <rt_test_001_003_execute+0x254>)
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8006c08:	4893      	ldr	r0, [pc, #588]	; (8006e58 <rt_test_001_003_execute+0x258>)
  test_set_step(1);
 8006c0a:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_ST_RESOLUTION:               ");
 8006c0c:	f7ff fca0 	bl	8006550 <test_print>
 8006c10:	2010      	movs	r0, #16
 8006c12:	f7ff ff15 	bl	8006a40 <test_printn.part.0>
    test_println("");
 8006c16:	4620      	mov	r0, r4
 8006c18:	f7ff fcb2 	bl	8006580 <test_println>
    test_print("--- CH_CFG_ST_FREQUENCY:                ");
 8006c1c:	488f      	ldr	r0, [pc, #572]	; (8006e5c <rt_test_001_003_execute+0x25c>)
 8006c1e:	f7ff fc97 	bl	8006550 <test_print>
 8006c22:	f242 7010 	movw	r0, #10000	; 0x2710
 8006c26:	f7ff ff0b 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_ST_FREQUENCY);
    test_println("");
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f7ff fca8 	bl	8006580 <test_println>
    test_print("--- CH_CFG_INTERVALS_SIZE:              ");
 8006c30:	488b      	ldr	r0, [pc, #556]	; (8006e60 <rt_test_001_003_execute+0x260>)
 8006c32:	f7ff fc8d 	bl	8006550 <test_print>
 8006c36:	2020      	movs	r0, #32
 8006c38:	f7ff ff02 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_INTERVALS_SIZE);
    test_println("");
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f7ff fc9f 	bl	8006580 <test_println>
    test_print("--- CH_CFG_TIME_TYPES_SIZE:             ");
 8006c42:	4888      	ldr	r0, [pc, #544]	; (8006e64 <rt_test_001_003_execute+0x264>)
 8006c44:	f7ff fc84 	bl	8006550 <test_print>
 8006c48:	2020      	movs	r0, #32
 8006c4a:	f7ff fef9 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_TIME_TYPES_SIZE);
    test_println("");
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f7ff fc96 	bl	8006580 <test_println>
    test_print("--- CH_CFG_ST_TIMEDELTA:                ");
 8006c54:	4884      	ldr	r0, [pc, #528]	; (8006e68 <rt_test_001_003_execute+0x268>)
 8006c56:	f7ff fc7b 	bl	8006550 <test_print>
 8006c5a:	2002      	movs	r0, #2
 8006c5c:	f7ff fef0 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_ST_TIMEDELTA);
    test_println("");
 8006c60:	4620      	mov	r0, r4
 8006c62:	f7ff fc8d 	bl	8006580 <test_println>
    test_print("--- CH_CFG_TIME_QUANTUM:                ");
 8006c66:	4881      	ldr	r0, [pc, #516]	; (8006e6c <rt_test_001_003_execute+0x26c>)
 8006c68:	f7ff fc72 	bl	8006550 <test_print>
    test_printn(CH_CFG_TIME_QUANTUM);
 8006c6c:	2000      	movs	r0, #0
 8006c6e:	f7ff ff17 	bl	8006aa0 <test_printn>
    test_println("");
 8006c72:	4620      	mov	r0, r4
 8006c74:	f7ff fc84 	bl	8006580 <test_println>
    test_print("--- CH_CFG_MEMCORE_SIZE:                ");
 8006c78:	487d      	ldr	r0, [pc, #500]	; (8006e70 <rt_test_001_003_execute+0x270>)
 8006c7a:	f7ff fc69 	bl	8006550 <test_print>
    test_printn(CH_CFG_MEMCORE_SIZE);
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f7ff ff0e 	bl	8006aa0 <test_printn>
    test_println("");
 8006c84:	4620      	mov	r0, r4
 8006c86:	f7ff fc7b 	bl	8006580 <test_println>
    test_print("--- CH_CFG_NO_IDLE_THREAD:              ");
 8006c8a:	487a      	ldr	r0, [pc, #488]	; (8006e74 <rt_test_001_003_execute+0x274>)
 8006c8c:	f7ff fc60 	bl	8006550 <test_print>
    test_printn(CH_CFG_NO_IDLE_THREAD);
 8006c90:	2000      	movs	r0, #0
 8006c92:	f7ff ff05 	bl	8006aa0 <test_printn>
    test_println("");
 8006c96:	4620      	mov	r0, r4
 8006c98:	f7ff fc72 	bl	8006580 <test_println>
    test_print("--- CH_CFG_OPTIMIZE_SPEED:              ");
 8006c9c:	4876      	ldr	r0, [pc, #472]	; (8006e78 <rt_test_001_003_execute+0x278>)
 8006c9e:	f7ff fc57 	bl	8006550 <test_print>
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f7ff fecc 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_OPTIMIZE_SPEED);
    test_println("");
 8006ca8:	4620      	mov	r0, r4
 8006caa:	f7ff fc69 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_TM:                      ");
 8006cae:	4873      	ldr	r0, [pc, #460]	; (8006e7c <rt_test_001_003_execute+0x27c>)
 8006cb0:	f7ff fc4e 	bl	8006550 <test_print>
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f7ff fec3 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_TM);
    test_println("");
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7ff fc60 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_REGISTRY:                ");
 8006cc0:	486f      	ldr	r0, [pc, #444]	; (8006e80 <rt_test_001_003_execute+0x280>)
 8006cc2:	f7ff fc45 	bl	8006550 <test_print>
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f7ff feba 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_REGISTRY);
    test_println("");
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f7ff fc57 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_WAITEXIT:                ");
 8006cd2:	486c      	ldr	r0, [pc, #432]	; (8006e84 <rt_test_001_003_execute+0x284>)
 8006cd4:	f7ff fc3c 	bl	8006550 <test_print>
 8006cd8:	4628      	mov	r0, r5
 8006cda:	f7ff feb1 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_WAITEXIT);
    test_println("");
 8006cde:	4620      	mov	r0, r4
 8006ce0:	f7ff fc4e 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES:              ");
 8006ce4:	4868      	ldr	r0, [pc, #416]	; (8006e88 <rt_test_001_003_execute+0x288>)
 8006ce6:	f7ff fc33 	bl	8006550 <test_print>
 8006cea:	4628      	mov	r0, r5
 8006cec:	f7ff fea8 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_SEMAPHORES);
    test_println("");
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	f7ff fc45 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_SEMAPHORES_PRIORITY:     ");
 8006cf6:	4865      	ldr	r0, [pc, #404]	; (8006e8c <rt_test_001_003_execute+0x28c>)
 8006cf8:	f7ff fc2a 	bl	8006550 <test_print>
    test_printn(CH_CFG_USE_SEMAPHORES_PRIORITY);
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	f7ff fecf 	bl	8006aa0 <test_printn>
    test_println("");
 8006d02:	4620      	mov	r0, r4
 8006d04:	f7ff fc3c 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES:                 ");
 8006d08:	4861      	ldr	r0, [pc, #388]	; (8006e90 <rt_test_001_003_execute+0x290>)
 8006d0a:	f7ff fc21 	bl	8006550 <test_print>
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f7ff fe96 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MUTEXES);
    test_println("");
 8006d14:	4620      	mov	r0, r4
 8006d16:	f7ff fc33 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_MUTEXES_RECURSIVE:       ");
 8006d1a:	485e      	ldr	r0, [pc, #376]	; (8006e94 <rt_test_001_003_execute+0x294>)
 8006d1c:	f7ff fc18 	bl	8006550 <test_print>
    test_printn(CH_CFG_USE_MUTEXES_RECURSIVE);
 8006d20:	2000      	movs	r0, #0
 8006d22:	f7ff febd 	bl	8006aa0 <test_printn>
    test_println("");   
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff fc2a 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS:                ");
 8006d2c:	485a      	ldr	r0, [pc, #360]	; (8006e98 <rt_test_001_003_execute+0x298>)
 8006d2e:	f7ff fc0f 	bl	8006550 <test_print>
 8006d32:	4628      	mov	r0, r5
 8006d34:	f7ff fe84 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS);
    test_println("");
 8006d38:	4620      	mov	r0, r4
 8006d3a:	f7ff fc21 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_CONDVARS_TIMEOUT:        ");
 8006d3e:	4857      	ldr	r0, [pc, #348]	; (8006e9c <rt_test_001_003_execute+0x29c>)
 8006d40:	f7ff fc06 	bl	8006550 <test_print>
 8006d44:	4628      	mov	r0, r5
 8006d46:	f7ff fe7b 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_CONDVARS_TIMEOUT);
    test_println("");
 8006d4a:	4620      	mov	r0, r4
 8006d4c:	f7ff fc18 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_EVENTS:                  ");
 8006d50:	4853      	ldr	r0, [pc, #332]	; (8006ea0 <rt_test_001_003_execute+0x2a0>)
 8006d52:	f7ff fbfd 	bl	8006550 <test_print>
 8006d56:	4628      	mov	r0, r5
 8006d58:	f7ff fe72 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS);
    test_println("");
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f7ff fc0f 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_EVENTS_TIMEOUT:          ");
 8006d62:	4850      	ldr	r0, [pc, #320]	; (8006ea4 <rt_test_001_003_execute+0x2a4>)
 8006d64:	f7ff fbf4 	bl	8006550 <test_print>
 8006d68:	4628      	mov	r0, r5
 8006d6a:	f7ff fe69 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_EVENTS_TIMEOUT);
    test_println("");
 8006d6e:	4620      	mov	r0, r4
 8006d70:	f7ff fc06 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES:                ");
 8006d74:	484c      	ldr	r0, [pc, #304]	; (8006ea8 <rt_test_001_003_execute+0x2a8>)
 8006d76:	f7ff fbeb 	bl	8006550 <test_print>
 8006d7a:	4628      	mov	r0, r5
 8006d7c:	f7ff fe60 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MESSAGES);
    test_println("");
 8006d80:	4620      	mov	r0, r4
 8006d82:	f7ff fbfd 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_MESSAGES_PRIORITY:       ");
 8006d86:	4849      	ldr	r0, [pc, #292]	; (8006eac <rt_test_001_003_execute+0x2ac>)
 8006d88:	f7ff fbe2 	bl	8006550 <test_print>
    test_printn(CH_CFG_USE_MESSAGES_PRIORITY);
 8006d8c:	2000      	movs	r0, #0
 8006d8e:	f7ff fe87 	bl	8006aa0 <test_printn>
    test_println("");
 8006d92:	4620      	mov	r0, r4
 8006d94:	f7ff fbf4 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_DYNAMIC:                 ");
 8006d98:	4845      	ldr	r0, [pc, #276]	; (8006eb0 <rt_test_001_003_execute+0x2b0>)
 8006d9a:	f7ff fbd9 	bl	8006550 <test_print>
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f7ff fe4e 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_DYNAMIC);
    test_println("");
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff fbeb 	bl	8006580 <test_println>
    test_print("--- CH_DBG_STATISTICS:                  ");
 8006daa:	4842      	ldr	r0, [pc, #264]	; (8006eb4 <rt_test_001_003_execute+0x2b4>)
 8006dac:	f7ff fbd0 	bl	8006550 <test_print>
    test_printn(CH_DBG_STATISTICS);
 8006db0:	2000      	movs	r0, #0
 8006db2:	f7ff fe75 	bl	8006aa0 <test_printn>
    test_println("");
 8006db6:	4620      	mov	r0, r4
 8006db8:	f7ff fbe2 	bl	8006580 <test_println>
    test_print("--- CH_DBG_SYSTEM_STATE_CHECK:          ");
 8006dbc:	483e      	ldr	r0, [pc, #248]	; (8006eb8 <rt_test_001_003_execute+0x2b8>)
 8006dbe:	f7ff fbc7 	bl	8006550 <test_print>
 8006dc2:	4628      	mov	r0, r5
 8006dc4:	f7ff fe3c 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_SYSTEM_STATE_CHECK);
    test_println("");
 8006dc8:	4620      	mov	r0, r4
 8006dca:	f7ff fbd9 	bl	8006580 <test_println>
    test_print("--- CH_DBG_ENABLE_CHECKS:               ");
 8006dce:	483b      	ldr	r0, [pc, #236]	; (8006ebc <rt_test_001_003_execute+0x2bc>)
 8006dd0:	f7ff fbbe 	bl	8006550 <test_print>
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	f7ff fe33 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_CHECKS);
    test_println("");
 8006dda:	4620      	mov	r0, r4
 8006ddc:	f7ff fbd0 	bl	8006580 <test_println>
    test_print("--- CH_DBG_ENABLE_ASSERTS:              ");
 8006de0:	4837      	ldr	r0, [pc, #220]	; (8006ec0 <rt_test_001_003_execute+0x2c0>)
 8006de2:	f7ff fbb5 	bl	8006550 <test_print>
 8006de6:	4628      	mov	r0, r5
 8006de8:	f7ff fe2a 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_ASSERTS);
    test_println("");
 8006dec:	4620      	mov	r0, r4
 8006dee:	f7ff fbc7 	bl	8006580 <test_println>
    test_print("--- CH_DBG_TRACE_MASK:                  ");
 8006df2:	4834      	ldr	r0, [pc, #208]	; (8006ec4 <rt_test_001_003_execute+0x2c4>)
 8006df4:	f7ff fbac 	bl	8006550 <test_print>
 8006df8:	200f      	movs	r0, #15
 8006dfa:	f7ff fe21 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_MASK);
    test_println("");
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f7ff fbbe 	bl	8006580 <test_println>
    test_print("--- CH_DBG_TRACE_BUFFER_SIZE:           ");
 8006e04:	4830      	ldr	r0, [pc, #192]	; (8006ec8 <rt_test_001_003_execute+0x2c8>)
 8006e06:	f7ff fba3 	bl	8006550 <test_print>
 8006e0a:	2080      	movs	r0, #128	; 0x80
 8006e0c:	f7ff fe18 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_TRACE_BUFFER_SIZE);
    test_println("");
 8006e10:	4620      	mov	r0, r4
 8006e12:	f7ff fbb5 	bl	8006580 <test_println>
    test_print("--- CH_DBG_ENABLE_STACK_CHECK:          ");
 8006e16:	482d      	ldr	r0, [pc, #180]	; (8006ecc <rt_test_001_003_execute+0x2cc>)
 8006e18:	f7ff fb9a 	bl	8006550 <test_print>
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f7ff fe0f 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_ENABLE_STACK_CHECK);
    test_println("");
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fbac 	bl	8006580 <test_println>
    test_print("--- CH_DBG_FILL_THREADS:                ");
 8006e28:	4829      	ldr	r0, [pc, #164]	; (8006ed0 <rt_test_001_003_execute+0x2d0>)
 8006e2a:	f7ff fb91 	bl	8006550 <test_print>
 8006e2e:	4628      	mov	r0, r5
 8006e30:	f7ff fe06 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_DBG_FILL_THREADS);
    test_println("");
 8006e34:	4620      	mov	r0, r4
 8006e36:	f7ff fba3 	bl	8006580 <test_println>
    test_print("--- CH_DBG_THREADS_PROFILING:           ");
 8006e3a:	4826      	ldr	r0, [pc, #152]	; (8006ed4 <rt_test_001_003_execute+0x2d4>)
 8006e3c:	f7ff fb88 	bl	8006550 <test_print>
    test_printn(CH_DBG_THREADS_PROFILING);
 8006e40:	2000      	movs	r0, #0
 8006e42:	f7ff fe2d 	bl	8006aa0 <test_printn>
    test_println("");
 8006e46:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8006e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8006e4c:	f7ff bb98 	b.w	8006580 <test_println>
 8006e50:	20001d3c 	.word	0x20001d3c
 8006e54:	0800f35c 	.word	0x0800f35c
 8006e58:	0800f9e4 	.word	0x0800f9e4
 8006e5c:	0800fa10 	.word	0x0800fa10
 8006e60:	0800fa3c 	.word	0x0800fa3c
 8006e64:	0800fa68 	.word	0x0800fa68
 8006e68:	0800fa94 	.word	0x0800fa94
 8006e6c:	0800fac0 	.word	0x0800fac0
 8006e70:	0800faec 	.word	0x0800faec
 8006e74:	0800fb18 	.word	0x0800fb18
 8006e78:	0800fb44 	.word	0x0800fb44
 8006e7c:	0800fb70 	.word	0x0800fb70
 8006e80:	0800fb9c 	.word	0x0800fb9c
 8006e84:	0800fbc8 	.word	0x0800fbc8
 8006e88:	0800fbf4 	.word	0x0800fbf4
 8006e8c:	0800fc20 	.word	0x0800fc20
 8006e90:	0800fc4c 	.word	0x0800fc4c
 8006e94:	0800fc78 	.word	0x0800fc78
 8006e98:	0800fca4 	.word	0x0800fca4
 8006e9c:	0800fcd0 	.word	0x0800fcd0
 8006ea0:	0800fcfc 	.word	0x0800fcfc
 8006ea4:	0800fd28 	.word	0x0800fd28
 8006ea8:	0800fd54 	.word	0x0800fd54
 8006eac:	0800fd80 	.word	0x0800fd80
 8006eb0:	0800fdac 	.word	0x0800fdac
 8006eb4:	0800fdd8 	.word	0x0800fdd8
 8006eb8:	0800fe04 	.word	0x0800fe04
 8006ebc:	0800fe30 	.word	0x0800fe30
 8006ec0:	0800fe5c 	.word	0x0800fe5c
 8006ec4:	0800fe88 	.word	0x0800fe88
 8006ec8:	0800feb4 	.word	0x0800feb4
 8006ecc:	0800fee0 	.word	0x0800fee0
 8006ed0:	0800ff0c 	.word	0x0800ff0c
 8006ed4:	0800ff38 	.word	0x0800ff38
	...

08006ee0 <test_wait_threads>:
void test_wait_threads(void) {
 8006ee0:	b570      	push	{r4, r5, r6, lr}
      threads[i] = NULL;
 8006ee2:	2600      	movs	r6, #0
 8006ee4:	4c06      	ldr	r4, [pc, #24]	; (8006f00 <test_wait_threads+0x20>)
 8006ee6:	f104 0514 	add.w	r5, r4, #20
    if (threads[i] != NULL) {
 8006eea:	f854 0b04 	ldr.w	r0, [r4], #4
 8006eee:	b118      	cbz	r0, 8006ef8 <test_wait_threads+0x18>
      chThdWait(threads[i]);
 8006ef0:	f7fd fb1e 	bl	8004530 <chThdWait>
      threads[i] = NULL;
 8006ef4:	f844 6c04 	str.w	r6, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 8006ef8:	42ac      	cmp	r4, r5
 8006efa:	d1f6      	bne.n	8006eea <test_wait_threads+0xa>
    }
}
 8006efc:	bd70      	pop	{r4, r5, r6, pc}
 8006efe:	bf00      	nop
 8006f00:	20001d54 	.word	0x20001d54
	...

08006f10 <rt_test_004_002_execute>:
static void rt_test_004_002_execute(void) {
 8006f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8006f12:	2701      	movs	r7, #1
 8006f14:	4d59      	ldr	r5, [pc, #356]	; (800707c <rt_test_004_002_execute+0x16c>)
 8006f16:	4e5a      	ldr	r6, [pc, #360]	; (8007080 <rt_test_004_002_execute+0x170>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8006f18:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006f1a:	4b5a      	ldr	r3, [pc, #360]	; (8007084 <rt_test_004_002_execute+0x174>)
 8006f1c:	6891      	ldr	r1, [r2, #8]
 8006f1e:	485a      	ldr	r0, [pc, #360]	; (8007088 <rt_test_004_002_execute+0x178>)
 8006f20:	4a5a      	ldr	r2, [pc, #360]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006f22:	3905      	subs	r1, #5
  test_set_step(1);
 8006f24:	6037      	str	r7, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006f26:	f006 f8eb 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	69ab      	ldr	r3, [r5, #24]
 8006f2e:	4c58      	ldr	r4, [pc, #352]	; (8007090 <rt_test_004_002_execute+0x180>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006f30:	6899      	ldr	r1, [r3, #8]
 8006f32:	4a56      	ldr	r2, [pc, #344]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006f34:	4b57      	ldr	r3, [pc, #348]	; (8007094 <rt_test_004_002_execute+0x184>)
 8006f36:	3904      	subs	r1, #4
 8006f38:	4857      	ldr	r0, [pc, #348]	; (8007098 <rt_test_004_002_execute+0x188>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006f3a:	6027      	str	r7, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006f3c:	f006 f8e0 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006f40:	4607      	mov	r7, r0
 8006f42:	69ab      	ldr	r3, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006f44:	4a51      	ldr	r2, [pc, #324]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006f46:	6899      	ldr	r1, [r3, #8]
 8006f48:	4854      	ldr	r0, [pc, #336]	; (800709c <rt_test_004_002_execute+0x18c>)
 8006f4a:	4b55      	ldr	r3, [pc, #340]	; (80070a0 <rt_test_004_002_execute+0x190>)
 8006f4c:	3903      	subs	r1, #3
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006f4e:	6067      	str	r7, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006f50:	f006 f8d6 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006f54:	4607      	mov	r7, r0
 8006f56:	69ab      	ldr	r3, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006f58:	4a4c      	ldr	r2, [pc, #304]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006f5a:	6899      	ldr	r1, [r3, #8]
 8006f5c:	4851      	ldr	r0, [pc, #324]	; (80070a4 <rt_test_004_002_execute+0x194>)
 8006f5e:	4b52      	ldr	r3, [pc, #328]	; (80070a8 <rt_test_004_002_execute+0x198>)
 8006f60:	3902      	subs	r1, #2
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006f62:	60a7      	str	r7, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006f64:	f006 f8cc 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006f68:	4607      	mov	r7, r0
 8006f6a:	69ab      	ldr	r3, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006f6c:	4a47      	ldr	r2, [pc, #284]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006f6e:	6899      	ldr	r1, [r3, #8]
 8006f70:	484e      	ldr	r0, [pc, #312]	; (80070ac <rt_test_004_002_execute+0x19c>)
 8006f72:	3901      	subs	r1, #1
 8006f74:	4b4e      	ldr	r3, [pc, #312]	; (80070b0 <rt_test_004_002_execute+0x1a0>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006f76:	60e7      	str	r7, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006f78:	f006 f8c2 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006f7c:	6120      	str	r0, [r4, #16]
    test_wait_threads();
 8006f7e:	f7ff ffaf 	bl	8006ee0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006f82:	494c      	ldr	r1, [pc, #304]	; (80070b4 <rt_test_004_002_execute+0x1a4>)
 8006f84:	484c      	ldr	r0, [pc, #304]	; (80070b8 <rt_test_004_002_execute+0x1a8>)
 8006f86:	f7ff fa8b 	bl	80064a0 <_test_assert_sequence>
 8006f8a:	b100      	cbz	r0, 8006f8e <rt_test_004_002_execute+0x7e>
}
 8006f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_set_step(2);
 8006f8e:	2702      	movs	r7, #2
 8006f90:	69ab      	ldr	r3, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006f92:	4a3e      	ldr	r2, [pc, #248]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006f94:	6899      	ldr	r1, [r3, #8]
 8006f96:	4845      	ldr	r0, [pc, #276]	; (80070ac <rt_test_004_002_execute+0x19c>)
 8006f98:	4b45      	ldr	r3, [pc, #276]	; (80070b0 <rt_test_004_002_execute+0x1a0>)
 8006f9a:	3901      	subs	r1, #1
  test_set_step(2);
 8006f9c:	6037      	str	r7, [r6, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006f9e:	f006 f8af 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006fa2:	4607      	mov	r7, r0
 8006fa4:	69ab      	ldr	r3, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006fa6:	4a39      	ldr	r2, [pc, #228]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	483e      	ldr	r0, [pc, #248]	; (80070a4 <rt_test_004_002_execute+0x194>)
 8006fac:	4b3e      	ldr	r3, [pc, #248]	; (80070a8 <rt_test_004_002_execute+0x198>)
 8006fae:	3902      	subs	r1, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8006fb0:	6127      	str	r7, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006fb2:	f006 f8a5 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	69ab      	ldr	r3, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006fba:	4a34      	ldr	r2, [pc, #208]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006fbc:	6899      	ldr	r1, [r3, #8]
 8006fbe:	4837      	ldr	r0, [pc, #220]	; (800709c <rt_test_004_002_execute+0x18c>)
 8006fc0:	4b37      	ldr	r3, [pc, #220]	; (80070a0 <rt_test_004_002_execute+0x190>)
 8006fc2:	3903      	subs	r1, #3
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8006fc4:	60e7      	str	r7, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006fc6:	f006 f89b 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006fca:	4607      	mov	r7, r0
 8006fcc:	69ab      	ldr	r3, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006fce:	4a2f      	ldr	r2, [pc, #188]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006fd0:	6899      	ldr	r1, [r3, #8]
 8006fd2:	4831      	ldr	r0, [pc, #196]	; (8007098 <rt_test_004_002_execute+0x188>)
 8006fd4:	4b2f      	ldr	r3, [pc, #188]	; (8007094 <rt_test_004_002_execute+0x184>)
 8006fd6:	3904      	subs	r1, #4
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8006fd8:	60a7      	str	r7, [r4, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006fda:	f006 f891 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006fde:	4607      	mov	r7, r0
 8006fe0:	69ab      	ldr	r3, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006fe2:	4a2a      	ldr	r2, [pc, #168]	; (800708c <rt_test_004_002_execute+0x17c>)
 8006fe4:	6899      	ldr	r1, [r3, #8]
 8006fe6:	4828      	ldr	r0, [pc, #160]	; (8007088 <rt_test_004_002_execute+0x178>)
 8006fe8:	3905      	subs	r1, #5
 8006fea:	4b26      	ldr	r3, [pc, #152]	; (8007084 <rt_test_004_002_execute+0x174>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8006fec:	6067      	str	r7, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8006fee:	f006 f887 	bl	800d100 <chThdCreateStatic.constprop.0>
 8006ff2:	6020      	str	r0, [r4, #0]
    test_wait_threads();
 8006ff4:	f7ff ff74 	bl	8006ee0 <test_wait_threads>
    test_assert_sequence("ABCDE", "invalid sequence");
 8006ff8:	492e      	ldr	r1, [pc, #184]	; (80070b4 <rt_test_004_002_execute+0x1a4>)
 8006ffa:	482f      	ldr	r0, [pc, #188]	; (80070b8 <rt_test_004_002_execute+0x1a8>)
 8006ffc:	f7ff fa50 	bl	80064a0 <_test_assert_sequence>
 8007000:	2800      	cmp	r0, #0
 8007002:	d1c3      	bne.n	8006f8c <rt_test_004_002_execute+0x7c>
  test_set_step(3);
 8007004:	2703      	movs	r7, #3
 8007006:	69ab      	ldr	r3, [r5, #24]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007008:	4a20      	ldr	r2, [pc, #128]	; (800708c <rt_test_004_002_execute+0x17c>)
 800700a:	6899      	ldr	r1, [r3, #8]
 800700c:	4822      	ldr	r0, [pc, #136]	; (8007098 <rt_test_004_002_execute+0x188>)
 800700e:	4b21      	ldr	r3, [pc, #132]	; (8007094 <rt_test_004_002_execute+0x184>)
 8007010:	3904      	subs	r1, #4
  test_set_step(3);
 8007012:	6037      	str	r7, [r6, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007014:	f006 f874 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007018:	4606      	mov	r6, r0
 800701a:	69aa      	ldr	r2, [r5, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800701c:	4b19      	ldr	r3, [pc, #100]	; (8007084 <rt_test_004_002_execute+0x174>)
 800701e:	6891      	ldr	r1, [r2, #8]
 8007020:	4819      	ldr	r0, [pc, #100]	; (8007088 <rt_test_004_002_execute+0x178>)
 8007022:	4a1a      	ldr	r2, [pc, #104]	; (800708c <rt_test_004_002_execute+0x17c>)
 8007024:	3905      	subs	r1, #5
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-4, thread, "D");
 8007026:	6066      	str	r6, [r4, #4]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 8007028:	f006 f86a 	bl	800d100 <chThdCreateStatic.constprop.0>
 800702c:	4606      	mov	r6, r0
 800702e:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 8007030:	4b1f      	ldr	r3, [pc, #124]	; (80070b0 <rt_test_004_002_execute+0x1a0>)
 8007032:	6891      	ldr	r1, [r2, #8]
 8007034:	481d      	ldr	r0, [pc, #116]	; (80070ac <rt_test_004_002_execute+0x19c>)
 8007036:	4a15      	ldr	r2, [pc, #84]	; (800708c <rt_test_004_002_execute+0x17c>)
 8007038:	3901      	subs	r1, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-5, thread, "E");
 800703a:	6026      	str	r6, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800703c:	f006 f860 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007040:	4606      	mov	r6, r0
 8007042:	69aa      	ldr	r2, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007044:	4b18      	ldr	r3, [pc, #96]	; (80070a8 <rt_test_004_002_execute+0x198>)
 8007046:	6891      	ldr	r1, [r2, #8]
 8007048:	4816      	ldr	r0, [pc, #88]	; (80070a4 <rt_test_004_002_execute+0x194>)
 800704a:	4a10      	ldr	r2, [pc, #64]	; (800708c <rt_test_004_002_execute+0x17c>)
 800704c:	3902      	subs	r1, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, thread, "A");
 800704e:	6126      	str	r6, [r4, #16]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007050:	f006 f856 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007054:	4606      	mov	r6, r0
 8007056:	69aa      	ldr	r2, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007058:	4b11      	ldr	r3, [pc, #68]	; (80070a0 <rt_test_004_002_execute+0x190>)
 800705a:	6891      	ldr	r1, [r2, #8]
 800705c:	480f      	ldr	r0, [pc, #60]	; (800709c <rt_test_004_002_execute+0x18c>)
 800705e:	3903      	subs	r1, #3
 8007060:	4a0a      	ldr	r2, [pc, #40]	; (800708c <rt_test_004_002_execute+0x17c>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-2, thread, "B");
 8007062:	60e6      	str	r6, [r4, #12]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, thread, "C");
 8007064:	f006 f84c 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007068:	60a0      	str	r0, [r4, #8]
    test_wait_threads();
 800706a:	f7ff ff39 	bl	8006ee0 <test_wait_threads>
}
 800706e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007072:	4910      	ldr	r1, [pc, #64]	; (80070b4 <rt_test_004_002_execute+0x1a4>)
 8007074:	4810      	ldr	r0, [pc, #64]	; (80070b8 <rt_test_004_002_execute+0x1a8>)
 8007076:	f7ff ba13 	b.w	80064a0 <_test_assert_sequence>
 800707a:	bf00      	nop
 800707c:	20000d70 	.word	0x20000d70
 8007080:	20001d3c 	.word	0x20001d3c
 8007084:	0800ff6c 	.word	0x0800ff6c
 8007088:	200016c8 	.word	0x200016c8
 800708c:	08006641 	.word	0x08006641
 8007090:	20001d54 	.word	0x20001d54
 8007094:	08010ad0 	.word	0x08010ad0
 8007098:	20001810 	.word	0x20001810
 800709c:	20001958 	.word	0x20001958
 80070a0:	0800ff64 	.word	0x0800ff64
 80070a4:	20001aa0 	.word	0x20001aa0
 80070a8:	0800f734 	.word	0x0800f734
 80070ac:	20001be8 	.word	0x20001be8
 80070b0:	0800f730 	.word	0x0800f730
 80070b4:	0800f788 	.word	0x0800f788
 80070b8:	0800ff68 	.word	0x0800ff68
 80070bc:	00000000 	.word	0x00000000

080070c0 <rt_test_005_001_execute>:

static void rt_test_005_001_execute(void) {
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg_t msg;

  /* [5.1.1] The function chThdSuspendTimeoutS() is invoked, the thread
     is remotely resumed with message @p MSG_OK. On return the message
     and the state of the reference are tested.*/
  test_set_step(1);
 80070c2:	2501      	movs	r5, #1
  return ch.rlist.current;
 80070c4:	4c49      	ldr	r4, [pc, #292]	; (80071ec <rt_test_005_001_execute+0x12c>)
 80070c6:	4e4a      	ldr	r6, [pc, #296]	; (80071f0 <rt_test_005_001_execute+0x130>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80070c8:	69a2      	ldr	r2, [r4, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80070ca:	4b4a      	ldr	r3, [pc, #296]	; (80071f4 <rt_test_005_001_execute+0x134>)
 80070cc:	6891      	ldr	r1, [r2, #8]
 80070ce:	484a      	ldr	r0, [pc, #296]	; (80071f8 <rt_test_005_001_execute+0x138>)
 80070d0:	4a4a      	ldr	r2, [pc, #296]	; (80071fc <rt_test_005_001_execute+0x13c>)
 80070d2:	3901      	subs	r1, #1
  test_set_step(1);
 80070d4:	6035      	str	r5, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, thread1, "A");
 80070d6:	f006 f813 	bl	800d100 <chThdCreateStatic.constprop.0>
 80070da:	4a49      	ldr	r2, [pc, #292]	; (8007200 <rt_test_005_001_execute+0x140>)
 80070dc:	2320      	movs	r3, #32
 80070de:	6010      	str	r0, [r2, #0]
 80070e0:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(*trp == NULL, "not NULL");
 80070e4:	4d47      	ldr	r5, [pc, #284]	; (8007204 <rt_test_005_001_execute+0x144>)
  _dbg_check_lock();
 80070e6:	f7f9 fb9b 	bl	8000820 <_dbg_check_lock>
 80070ea:	682b      	ldr	r3, [r5, #0]
 80070ec:	b113      	cbz	r3, 80070f4 <rt_test_005_001_execute+0x34>
 80070ee:	4846      	ldr	r0, [pc, #280]	; (8007208 <rt_test_005_001_execute+0x148>)
 80070f0:	f7f9 fb3e 	bl	8000770 <chSysHalt>
  return ch.rlist.current;
 80070f4:	69a3      	ldr	r3, [r4, #24]
  tp->u.wttrp = trp;
 80070f6:	625d      	str	r5, [r3, #36]	; 0x24
  *trp = tp;
 80070f8:	602b      	str	r3, [r5, #0]
  chDbgCheckClassS();
 80070fa:	f7f9 fb51 	bl	80007a0 <chDbgCheckClassS>
    chSchGoSleepS(newstate);
 80070fe:	2003      	movs	r0, #3
 8007100:	f7fb f8ee 	bl	80022e0 <chSchGoSleepS>
  return currp->u.rdymsg;
 8007104:	69a3      	ldr	r3, [r4, #24]
 8007106:	6a5f      	ldr	r7, [r3, #36]	; 0x24
  _dbg_check_unlock();
 8007108:	f7f9 fb9a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800710c:	6823      	ldr	r3, [r4, #0]
 800710e:	42a3      	cmp	r3, r4
 8007110:	d004      	beq.n	800711c <rt_test_005_001_execute+0x5c>
 8007112:	69a2      	ldr	r2, [r4, #24]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	6892      	ldr	r2, [r2, #8]
 8007118:	429a      	cmp	r2, r3
 800711a:	d35a      	bcc.n	80071d2 <rt_test_005_001_execute+0x112>
 800711c:	2300      	movs	r3, #0
 800711e:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8007122:	682b      	ldr	r3, [r5, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d14b      	bne.n	80071c0 <rt_test_005_001_execute+0x100>
 8007128:	2f00      	cmp	r7, #0
 800712a:	d140      	bne.n	80071ae <rt_test_005_001_execute+0xee>
    chSysLock();
    msg = chThdSuspendTimeoutS(&tr1, TIME_INFINITE);
    chSysUnlock();
    test_assert(NULL == tr1, "not NULL");
    test_assert(MSG_OK == msg,"wrong returned message");
    test_wait_threads();
 800712c:	f7ff fed8 	bl	8006ee0 <test_wait_threads>
  test_end_step(1);

  /* [5.1.2] The function chThdSuspendTimeoutS() is invoked, the thread
     is not resumed so a timeout must occur. On return the message and
     the state of the reference are tested.*/
  test_set_step(2);
 8007130:	2202      	movs	r2, #2
 8007132:	2320      	movs	r3, #32
 8007134:	6032      	str	r2, [r6, #0]
 8007136:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800713a:	f7f9 fb71 	bl	8000820 <_dbg_check_lock>
 800713e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  chDbgAssert(*trp == NULL, "not NULL");
 8007142:	682a      	ldr	r2, [r5, #0]
 8007144:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 8007146:	2a00      	cmp	r2, #0
 8007148:	d1d1      	bne.n	80070ee <rt_test_005_001_execute+0x2e>
 800714a:	69a3      	ldr	r3, [r4, #24]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 800714c:	f242 7110 	movw	r1, #10000	; 0x2710
  tp->u.wttrp = trp;
 8007150:	625d      	str	r5, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8007152:	2003      	movs	r0, #3
  *trp = tp;
 8007154:	602b      	str	r3, [r5, #0]
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8007156:	f7fb f99b 	bl	8002490 <chSchGoSleepTimeoutS>
 800715a:	4607      	mov	r7, r0
  _dbg_check_unlock();
 800715c:	f7f9 fb70 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007160:	6823      	ldr	r3, [r4, #0]
 8007162:	42a3      	cmp	r3, r4
 8007164:	d004      	beq.n	8007170 <rt_test_005_001_execute+0xb0>
 8007166:	69a2      	ldr	r2, [r4, #24]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	6892      	ldr	r2, [r2, #8]
 800716c:	429a      	cmp	r2, r3
 800716e:	d330      	bcc.n	80071d2 <rt_test_005_001_execute+0x112>
 8007170:	2300      	movs	r3, #0
 8007172:	f383 8811 	msr	BASEPRI, r3
 8007176:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800717a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800717c:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 8007180:	3b10      	subs	r3, #16
 8007182:	1b9b      	subs	r3, r3, r6
 8007184:	b29b      	uxth	r3, r3
 8007186:	2b02      	cmp	r3, #2
 8007188:	d826      	bhi.n	80071d8 <rt_test_005_001_execute+0x118>
    msg = chThdSuspendTimeoutS(&tr1, TIME_MS2I(1000));
    chSysUnlock();
    test_assert_time_window(chTimeAddX(time, TIME_MS2I(1000)),
                            chTimeAddX(time, TIME_MS2I(1000) + CH_CFG_ST_TIMEDELTA + 1),
                            "out of time window");
    test_assert(NULL == tr1, "not NULL");
 800718a:	6828      	ldr	r0, [r5, #0]
 800718c:	491f      	ldr	r1, [pc, #124]	; (800720c <rt_test_005_001_execute+0x14c>)
 800718e:	fab0 f080 	clz	r0, r0
 8007192:	0940      	lsrs	r0, r0, #5
 8007194:	f7fe fb94 	bl	80058c0 <_test_assert>
 8007198:	b988      	cbnz	r0, 80071be <rt_test_005_001_execute+0xfe>
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 800719a:	f1a7 30ff 	sub.w	r0, r7, #4294967295	; 0xffffffff
 800719e:	fab0 f080 	clz	r0, r0
  }
  test_end_step(2);
}
 80071a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(MSG_TIMEOUT == msg, "wrong returned message");
 80071a6:	491a      	ldr	r1, [pc, #104]	; (8007210 <rt_test_005_001_execute+0x150>)
 80071a8:	0940      	lsrs	r0, r0, #5
 80071aa:	f7fe bb89 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 80071ae:	2301      	movs	r3, #1
 80071b0:	4918      	ldr	r1, [pc, #96]	; (8007214 <rt_test_005_001_execute+0x154>)
  test_global_fail     = true;
 80071b2:	4a19      	ldr	r2, [pc, #100]	; (8007218 <rt_test_005_001_execute+0x158>)
  test_failure_message = msg;
 80071b4:	4819      	ldr	r0, [pc, #100]	; (800721c <rt_test_005_001_execute+0x15c>)
 80071b6:	4c16      	ldr	r4, [pc, #88]	; (8007210 <rt_test_005_001_execute+0x150>)
  test_local_fail      = true;
 80071b8:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80071ba:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80071bc:	7013      	strb	r3, [r2, #0]
}
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 80071c0:	2301      	movs	r3, #1
 80071c2:	4914      	ldr	r1, [pc, #80]	; (8007214 <rt_test_005_001_execute+0x154>)
  test_global_fail     = true;
 80071c4:	4a14      	ldr	r2, [pc, #80]	; (8007218 <rt_test_005_001_execute+0x158>)
  test_failure_message = msg;
 80071c6:	4815      	ldr	r0, [pc, #84]	; (800721c <rt_test_005_001_execute+0x15c>)
 80071c8:	4c10      	ldr	r4, [pc, #64]	; (800720c <rt_test_005_001_execute+0x14c>)
  test_local_fail      = true;
 80071ca:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80071cc:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80071ce:	7013      	strb	r3, [r2, #0]
 80071d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071d2:	4813      	ldr	r0, [pc, #76]	; (8007220 <rt_test_005_001_execute+0x160>)
 80071d4:	f7f9 facc 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 80071d8:	2301      	movs	r3, #1
 80071da:	490e      	ldr	r1, [pc, #56]	; (8007214 <rt_test_005_001_execute+0x154>)
  test_global_fail     = true;
 80071dc:	4a0e      	ldr	r2, [pc, #56]	; (8007218 <rt_test_005_001_execute+0x158>)
  test_failure_message = msg;
 80071de:	480f      	ldr	r0, [pc, #60]	; (800721c <rt_test_005_001_execute+0x15c>)
 80071e0:	4c10      	ldr	r4, [pc, #64]	; (8007224 <rt_test_005_001_execute+0x164>)
  test_local_fail      = true;
 80071e2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80071e4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80071e6:	7013      	strb	r3, [r2, #0]
 80071e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ea:	bf00      	nop
 80071ec:	20000d70 	.word	0x20000d70
 80071f0:	20001d3c 	.word	0x20001d3c
 80071f4:	0800f730 	.word	0x0800f730
 80071f8:	200016c8 	.word	0x200016c8
 80071fc:	08006651 	.word	0x08006651
 8007200:	20001d54 	.word	0x20001d54
 8007204:	20001d68 	.word	0x20001d68
 8007208:	08010ec0 	.word	0x08010ec0
 800720c:	0800ff70 	.word	0x0800ff70
 8007210:	0800f2bc 	.word	0x0800f2bc
 8007214:	20001d39 	.word	0x20001d39
 8007218:	20001d38 	.word	0x20001d38
 800721c:	20001d34 	.word	0x20001d34
 8007220:	08010d28 	.word	0x08010d28
 8007224:	0800f294 	.word	0x0800f294
	...

08007230 <rt_test_006_002_execute>:
  test_set_step(1);
 8007230:	2301      	movs	r3, #1
static void rt_test_006_002_execute(void) {
 8007232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007236:	4f2b      	ldr	r7, [pc, #172]	; (80072e4 <rt_test_006_002_execute+0xb4>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007238:	4e2b      	ldr	r6, [pc, #172]	; (80072e8 <rt_test_006_002_execute+0xb8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800723a:	69ba      	ldr	r2, [r7, #24]
 800723c:	4c2b      	ldr	r4, [pc, #172]	; (80072ec <rt_test_006_002_execute+0xbc>)
 800723e:	6891      	ldr	r1, [r2, #8]
  test_set_step(1);
 8007240:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 80072f0 <rt_test_006_002_execute+0xc0>
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 8007244:	4632      	mov	r2, r6
  test_set_step(1);
 8007246:	f8c8 3000 	str.w	r3, [r8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800724a:	4620      	mov	r0, r4
 800724c:	4b29      	ldr	r3, [pc, #164]	; (80072f4 <rt_test_006_002_execute+0xc4>)
 800724e:	3105      	adds	r1, #5
 8007250:	f005 ff56 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	4d28      	ldr	r5, [pc, #160]	; (80072f8 <rt_test_006_002_execute+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007258:	6899      	ldr	r1, [r3, #8]
 800725a:	4632      	mov	r2, r6
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, thread1, "A");
 800725c:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 800725e:	4b27      	ldr	r3, [pc, #156]	; (80072fc <rt_test_006_002_execute+0xcc>)
 8007260:	3101      	adds	r1, #1
 8007262:	f504 70a4 	add.w	r0, r4, #328	; 0x148
 8007266:	f005 ff4b 	bl	800d100 <chThdCreateStatic.constprop.0>
 800726a:	69bb      	ldr	r3, [r7, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 800726c:	4632      	mov	r2, r6
 800726e:	6899      	ldr	r1, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+1, thread1, "B");
 8007270:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8007272:	4b23      	ldr	r3, [pc, #140]	; (8007300 <rt_test_006_002_execute+0xd0>)
 8007274:	3103      	adds	r1, #3
 8007276:	f504 7024 	add.w	r0, r4, #656	; 0x290
 800727a:	f005 ff41 	bl	800d100 <chThdCreateStatic.constprop.0>
 800727e:	69bb      	ldr	r3, [r7, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007280:	4632      	mov	r2, r6
 8007282:	6899      	ldr	r1, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, thread1, "C");
 8007284:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 8007286:	4b1f      	ldr	r3, [pc, #124]	; (8007304 <rt_test_006_002_execute+0xd4>)
 8007288:	3104      	adds	r1, #4
 800728a:	f504 7076 	add.w	r0, r4, #984	; 0x3d8
 800728e:	f005 ff37 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007292:	4603      	mov	r3, r0
 8007294:	69b9      	ldr	r1, [r7, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 8007296:	4632      	mov	r2, r6
 8007298:	6889      	ldr	r1, [r1, #8]
 800729a:	f504 60a4 	add.w	r0, r4, #1312	; 0x520
 800729e:	3102      	adds	r1, #2
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+4, thread1, "D");
 80072a0:	60eb      	str	r3, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80072a2:	4b19      	ldr	r3, [pc, #100]	; (8007308 <rt_test_006_002_execute+0xd8>)
 80072a4:	f005 ff2c 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80072a8:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80072aa:	4602      	mov	r2, r0
    chSemSignal(&sem1);
 80072ac:	4c17      	ldr	r4, [pc, #92]	; (800730c <rt_test_006_002_execute+0xdc>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+2, thread1, "E");
 80072ae:	612a      	str	r2, [r5, #16]
    chSemSignal(&sem1);
 80072b0:	4620      	mov	r0, r4
  test_set_step(2);
 80072b2:	f8c8 3000 	str.w	r3, [r8]
    chSemSignal(&sem1);
 80072b6:	f7fc f9eb 	bl	8003690 <chSemSignal>
    chSemSignal(&sem1);
 80072ba:	4620      	mov	r0, r4
 80072bc:	f7fc f9e8 	bl	8003690 <chSemSignal>
    chSemSignal(&sem1);
 80072c0:	4620      	mov	r0, r4
 80072c2:	f7fc f9e5 	bl	8003690 <chSemSignal>
    chSemSignal(&sem1);
 80072c6:	4620      	mov	r0, r4
 80072c8:	f7fc f9e2 	bl	8003690 <chSemSignal>
    chSemSignal(&sem1);
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7fc f9df 	bl	8003690 <chSemSignal>
    test_wait_threads();
 80072d2:	f7ff fe05 	bl	8006ee0 <test_wait_threads>
}
 80072d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80072da:	490d      	ldr	r1, [pc, #52]	; (8007310 <rt_test_006_002_execute+0xe0>)
 80072dc:	480d      	ldr	r0, [pc, #52]	; (8007314 <rt_test_006_002_execute+0xe4>)
 80072de:	f7ff b8df 	b.w	80064a0 <_test_assert_sequence>
 80072e2:	bf00      	nop
 80072e4:	20000d70 	.word	0x20000d70
 80072e8:	080066f1 	.word	0x080066f1
 80072ec:	200016c8 	.word	0x200016c8
 80072f0:	20001d3c 	.word	0x20001d3c
 80072f4:	0800f730 	.word	0x0800f730
 80072f8:	20001d54 	.word	0x20001d54
 80072fc:	0800f734 	.word	0x0800f734
 8007300:	0800ff64 	.word	0x0800ff64
 8007304:	08010ad0 	.word	0x08010ad0
 8007308:	0800ff6c 	.word	0x0800ff6c
 800730c:	200016a8 	.word	0x200016a8
 8007310:	0800f788 	.word	0x0800f788
 8007314:	0800ff68 	.word	0x0800ff68
	...

08007320 <rt_test_006_004_execute>:
static void rt_test_006_004_execute(void) {
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8007322:	2701      	movs	r7, #1
  return ch.rlist.current;
 8007324:	4e41      	ldr	r6, [pc, #260]	; (800742c <rt_test_006_004_execute+0x10c>)
 8007326:	4c42      	ldr	r4, [pc, #264]	; (8007430 <rt_test_006_004_execute+0x110>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007328:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 800732a:	4b42      	ldr	r3, [pc, #264]	; (8007434 <rt_test_006_004_execute+0x114>)
 800732c:	6891      	ldr	r1, [r2, #8]
 800732e:	4842      	ldr	r0, [pc, #264]	; (8007438 <rt_test_006_004_execute+0x118>)
 8007330:	4a42      	ldr	r2, [pc, #264]	; (800743c <rt_test_006_004_execute+0x11c>)
 8007332:	4439      	add	r1, r7
  test_set_step(2);
 8007334:	2502      	movs	r5, #2
  test_set_step(1);
 8007336:	6027      	str	r7, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007338:	f005 fee2 	bl	800d100 <chThdCreateStatic.constprop.0>
 800733c:	4a40      	ldr	r2, [pc, #256]	; (8007440 <rt_test_006_004_execute+0x120>)
 800733e:	2320      	movs	r3, #32
  test_set_step(2);
 8007340:	6025      	str	r5, [r4, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, thread1, "A");
 8007342:	6010      	str	r0, [r2, #0]
 8007344:	f383 8811 	msr	BASEPRI, r3
 */
void chSemAddCounterI(semaphore_t *sp, cnt_t n) {

  chDbgCheckClassI();
  chDbgCheck((sp != NULL) && (n > (cnt_t)0));
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8007348:	4c3e      	ldr	r4, [pc, #248]	; (8007444 <rt_test_006_004_execute+0x124>)
  _dbg_check_lock();
 800734a:	f7f9 fa69 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800734e:	f7f9 faf7 	bl	8000940 <chDbgCheckClassI>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	6822      	ldr	r2, [r4, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	db04      	blt.n	8007364 <rt_test_006_004_execute+0x44>
 800735a:	42a2      	cmp	r2, r4
 800735c:	d004      	beq.n	8007368 <rt_test_006_004_execute+0x48>
 800735e:	483a      	ldr	r0, [pc, #232]	; (8007448 <rt_test_006_004_execute+0x128>)
 8007360:	f7f9 fa06 	bl	8000770 <chSysHalt>
 8007364:	42a2      	cmp	r2, r4
 8007366:	d0fa      	beq.n	800735e <rt_test_006_004_execute+0x3e>
              ((sp->cnt < (cnt_t)0) && ch_queue_notempty(&sp->queue)),
              "inconsistent semaphore");

  while (n > (cnt_t)0) {
    if (++sp->cnt <= (cnt_t)0) {
      chSchReadyI((thread_t *)ch_queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8007368:	2700      	movs	r7, #0
 800736a:	e003      	b.n	8007374 <rt_test_006_004_execute+0x54>
  while (n > (cnt_t)0) {
 800736c:	2d01      	cmp	r5, #1
 800736e:	d00e      	beq.n	800738e <rt_test_006_004_execute+0x6e>
    }
    n--;
 8007370:	2501      	movs	r5, #1
    if (++sp->cnt <= (cnt_t)0) {
 8007372:	68a3      	ldr	r3, [r4, #8]
 8007374:	3301      	adds	r3, #1
 8007376:	2b00      	cmp	r3, #0
 8007378:	60a3      	str	r3, [r4, #8]
 800737a:	dcf7      	bgt.n	800736c <rt_test_006_004_execute+0x4c>
  ch_queue_t *p = qp->next;
 800737c:	6820      	ldr	r0, [r4, #0]
  qp->next       = p->next;
 800737e:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007380:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007382:	6023      	str	r3, [r4, #0]
      chSchReadyI((thread_t *)ch_queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 8007384:	f7fa fec4 	bl	8002110 <chSchReadyI>
  while (n > (cnt_t)0) {
 8007388:	2d01      	cmp	r5, #1
      chSchReadyI((thread_t *)ch_queue_fifo_remove(&sp->queue))->u.rdymsg = MSG_OK;
 800738a:	6247      	str	r7, [r0, #36]	; 0x24
  while (n > (cnt_t)0) {
 800738c:	d1f0      	bne.n	8007370 <rt_test_006_004_execute+0x50>
    chSchRescheduleS();
 800738e:	f7fb fc5f 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 8007392:	f7f9 fa55 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007396:	6833      	ldr	r3, [r6, #0]
 8007398:	42b3      	cmp	r3, r6
 800739a:	d004      	beq.n	80073a6 <rt_test_006_004_execute+0x86>
 800739c:	69b2      	ldr	r2, [r6, #24]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	6892      	ldr	r2, [r2, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d318      	bcc.n	80073d8 <rt_test_006_004_execute+0xb8>
 80073a6:	2300      	movs	r3, #0
 80073a8:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80073ac:	f7ff fd98 	bl	8006ee0 <test_wait_threads>
 80073b0:	2320      	movs	r3, #32
 80073b2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80073b6:	f7f9 fa33 	bl	8000820 <_dbg_check_lock>
 80073ba:	f7f9 fac1 	bl	8000940 <chDbgCheckClassI>
  if (!condition)
 80073be:	68a3      	ldr	r3, [r4, #8]
 80073c0:	2b01      	cmp	r3, #1
 80073c2:	d115      	bne.n	80073f0 <rt_test_006_004_execute+0xd0>
  _dbg_check_unlock();
 80073c4:	f7f9 fa3c 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80073c8:	6833      	ldr	r3, [r6, #0]
 80073ca:	42b3      	cmp	r3, r6
 80073cc:	d007      	beq.n	80073de <rt_test_006_004_execute+0xbe>
 80073ce:	69b2      	ldr	r2, [r6, #24]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	6892      	ldr	r2, [r2, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d202      	bcs.n	80073de <rt_test_006_004_execute+0xbe>
 80073d8:	481c      	ldr	r0, [pc, #112]	; (800744c <rt_test_006_004_execute+0x12c>)
 80073da:	f7f9 f9c9 	bl	8000770 <chSysHalt>
 80073de:	2300      	movs	r3, #0
 80073e0:	f383 8811 	msr	BASEPRI, r3
}
 80073e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("A", "invalid sequence");
 80073e8:	4919      	ldr	r1, [pc, #100]	; (8007450 <rt_test_006_004_execute+0x130>)
 80073ea:	4812      	ldr	r0, [pc, #72]	; (8007434 <rt_test_006_004_execute+0x114>)
 80073ec:	f7ff b858 	b.w	80064a0 <_test_assert_sequence>
  test_local_fail      = true;
 80073f0:	2301      	movs	r3, #1
  test_failure_message = msg;
 80073f2:	4a18      	ldr	r2, [pc, #96]	; (8007454 <rt_test_006_004_execute+0x134>)
 80073f4:	4c18      	ldr	r4, [pc, #96]	; (8007458 <rt_test_006_004_execute+0x138>)
  test_local_fail      = true;
 80073f6:	4819      	ldr	r0, [pc, #100]	; (800745c <rt_test_006_004_execute+0x13c>)
  test_global_fail     = true;
 80073f8:	4919      	ldr	r1, [pc, #100]	; (8007460 <rt_test_006_004_execute+0x140>)
  test_failure_message = msg;
 80073fa:	6014      	str	r4, [r2, #0]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80073fc:	6b32      	ldr	r2, [r6, #48]	; 0x30
  test_local_fail      = true;
 80073fe:	7003      	strb	r3, [r0, #0]
  test_global_fail     = true;
 8007400:	700b      	strb	r3, [r1, #0]
 8007402:	b97a      	cbnz	r2, 8007424 <rt_test_006_004_execute+0x104>
 8007404:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8007406:	2b00      	cmp	r3, #0
 8007408:	dd0c      	ble.n	8007424 <rt_test_006_004_execute+0x104>
 800740a:	6833      	ldr	r3, [r6, #0]
  _dbg_leave_lock();
 800740c:	6372      	str	r2, [r6, #52]	; 0x34
 800740e:	42b3      	cmp	r3, r6
 8007410:	d004      	beq.n	800741c <rt_test_006_004_execute+0xfc>
 8007412:	69b2      	ldr	r2, [r6, #24]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	6892      	ldr	r2, [r2, #8]
 8007418:	429a      	cmp	r2, r3
 800741a:	d3dd      	bcc.n	80073d8 <rt_test_006_004_execute+0xb8>
 800741c:	2300      	movs	r3, #0
 800741e:	f383 8811 	msr	BASEPRI, r3
}
 8007422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 8007424:	480f      	ldr	r0, [pc, #60]	; (8007464 <rt_test_006_004_execute+0x144>)
 8007426:	f7f9 f9a3 	bl	8000770 <chSysHalt>
 800742a:	bf00      	nop
 800742c:	20000d70 	.word	0x20000d70
 8007430:	20001d3c 	.word	0x20001d3c
 8007434:	0800f730 	.word	0x0800f730
 8007438:	200016c8 	.word	0x200016c8
 800743c:	080066f1 	.word	0x080066f1
 8007440:	20001d54 	.word	0x20001d54
 8007444:	200016a8 	.word	0x200016a8
 8007448:	08010dac 	.word	0x08010dac
 800744c:	08010d40 	.word	0x08010d40
 8007450:	0800f788 	.word	0x0800f788
 8007454:	20001d34 	.word	0x20001d34
 8007458:	0800ff7c 	.word	0x0800ff7c
 800745c:	20001d39 	.word	0x20001d39
 8007460:	20001d38 	.word	0x20001d38
 8007464:	0800f214 	.word	0x0800f214
	...

08007470 <rt_test_007_001_execute>:
static void rt_test_007_001_execute(void) {
 8007470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(2);
 8007472:	2302      	movs	r3, #2
  return ch.rlist.current;
 8007474:	4f29      	ldr	r7, [pc, #164]	; (800751c <rt_test_007_001_execute+0xac>)
 8007476:	4e2a      	ldr	r6, [pc, #168]	; (8007520 <rt_test_007_001_execute+0xb0>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007478:	69ba      	ldr	r2, [r7, #24]
    chMtxLock(&m1);
 800747a:	482a      	ldr	r0, [pc, #168]	; (8007524 <rt_test_007_001_execute+0xb4>)
 800747c:	6894      	ldr	r4, [r2, #8]
  test_set_step(2);
 800747e:	6033      	str	r3, [r6, #0]
    chMtxLock(&m1);
 8007480:	f7fc fb2e 	bl	8003ae0 <chMtxLock>
  test_set_step(3);
 8007484:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007488:	4b27      	ldr	r3, [pc, #156]	; (8007528 <rt_test_007_001_execute+0xb8>)
 800748a:	4a28      	ldr	r2, [pc, #160]	; (800752c <rt_test_007_001_execute+0xbc>)
 800748c:	1c61      	adds	r1, r4, #1
 800748e:	4828      	ldr	r0, [pc, #160]	; (8007530 <rt_test_007_001_execute+0xc0>)
  test_set_step(3);
 8007490:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 8007494:	f005 fe34 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007498:	4684      	mov	ip, r0
 800749a:	4d26      	ldr	r5, [pc, #152]	; (8007534 <rt_test_007_001_execute+0xc4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 800749c:	4b26      	ldr	r3, [pc, #152]	; (8007538 <rt_test_007_001_execute+0xc8>)
 800749e:	4a23      	ldr	r2, [pc, #140]	; (800752c <rt_test_007_001_execute+0xbc>)
 80074a0:	1ca1      	adds	r1, r4, #2
 80074a2:	4826      	ldr	r0, [pc, #152]	; (800753c <rt_test_007_001_execute+0xcc>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread1, "E");
 80074a4:	f8c5 c000 	str.w	ip, [r5]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80074a8:	f005 fe2a 	bl	800d100 <chThdCreateStatic.constprop.0>
 80074ac:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80074ae:	4b24      	ldr	r3, [pc, #144]	; (8007540 <rt_test_007_001_execute+0xd0>)
 80074b0:	4a1e      	ldr	r2, [pc, #120]	; (800752c <rt_test_007_001_execute+0xbc>)
 80074b2:	1ce1      	adds	r1, r4, #3
 80074b4:	4823      	ldr	r0, [pc, #140]	; (8007544 <rt_test_007_001_execute+0xd4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread1, "D");
 80074b6:	f8c5 c004 	str.w	ip, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80074ba:	f005 fe21 	bl	800d100 <chThdCreateStatic.constprop.0>
 80074be:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80074c0:	4b21      	ldr	r3, [pc, #132]	; (8007548 <rt_test_007_001_execute+0xd8>)
 80074c2:	4a1a      	ldr	r2, [pc, #104]	; (800752c <rt_test_007_001_execute+0xbc>)
 80074c4:	1d21      	adds	r1, r4, #4
 80074c6:	4821      	ldr	r0, [pc, #132]	; (800754c <rt_test_007_001_execute+0xdc>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread1, "C");
 80074c8:	f8c5 c008 	str.w	ip, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80074cc:	f005 fe18 	bl	800d100 <chThdCreateStatic.constprop.0>
 80074d0:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80074d2:	1d61      	adds	r1, r4, #5
 80074d4:	4b1e      	ldr	r3, [pc, #120]	; (8007550 <rt_test_007_001_execute+0xe0>)
 80074d6:	4a15      	ldr	r2, [pc, #84]	; (800752c <rt_test_007_001_execute+0xbc>)
 80074d8:	481e      	ldr	r0, [pc, #120]	; (8007554 <rt_test_007_001_execute+0xe4>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread1, "B");
 80074da:	f8c5 c00c 	str.w	ip, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80074de:	f005 fe0f 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 80074e2:	2204      	movs	r2, #4
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80074e4:	4603      	mov	r3, r0
    chMtxUnlock(&m1);
 80074e6:	480f      	ldr	r0, [pc, #60]	; (8007524 <rt_test_007_001_execute+0xb4>)
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread1, "A");
 80074e8:	612b      	str	r3, [r5, #16]
  test_set_step(4);
 80074ea:	6032      	str	r2, [r6, #0]
    chMtxUnlock(&m1);
 80074ec:	f7fc fb68 	bl	8003bc0 <chMtxUnlock>
    test_wait_threads();
 80074f0:	f7ff fcf6 	bl	8006ee0 <test_wait_threads>
 80074f4:	69bb      	ldr	r3, [r7, #24]
  if (!condition)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	42a3      	cmp	r3, r4
 80074fa:	d105      	bne.n	8007508 <rt_test_007_001_execute+0x98>
}
 80074fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007500:	4915      	ldr	r1, [pc, #84]	; (8007558 <rt_test_007_001_execute+0xe8>)
 8007502:	4816      	ldr	r0, [pc, #88]	; (800755c <rt_test_007_001_execute+0xec>)
 8007504:	f7fe bfcc 	b.w	80064a0 <_test_assert_sequence>
  test_local_fail      = true;
 8007508:	2301      	movs	r3, #1
 800750a:	4915      	ldr	r1, [pc, #84]	; (8007560 <rt_test_007_001_execute+0xf0>)
  test_global_fail     = true;
 800750c:	4a15      	ldr	r2, [pc, #84]	; (8007564 <rt_test_007_001_execute+0xf4>)
  test_failure_message = msg;
 800750e:	4816      	ldr	r0, [pc, #88]	; (8007568 <rt_test_007_001_execute+0xf8>)
 8007510:	4c16      	ldr	r4, [pc, #88]	; (800756c <rt_test_007_001_execute+0xfc>)
  test_local_fail      = true;
 8007512:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007514:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007516:	7013      	strb	r3, [r2, #0]
}
 8007518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800751a:	bf00      	nop
 800751c:	20000d70 	.word	0x20000d70
 8007520:	20001d3c 	.word	0x20001d3c
 8007524:	20000818 	.word	0x20000818
 8007528:	0800ff6c 	.word	0x0800ff6c
 800752c:	08006711 	.word	0x08006711
 8007530:	200016c8 	.word	0x200016c8
 8007534:	20001d54 	.word	0x20001d54
 8007538:	08010ad0 	.word	0x08010ad0
 800753c:	20001810 	.word	0x20001810
 8007540:	0800ff64 	.word	0x0800ff64
 8007544:	20001958 	.word	0x20001958
 8007548:	0800f734 	.word	0x0800f734
 800754c:	20001aa0 	.word	0x20001aa0
 8007550:	0800f730 	.word	0x0800f730
 8007554:	20001be8 	.word	0x20001be8
 8007558:	0800f788 	.word	0x0800f788
 800755c:	0800ff68 	.word	0x0800ff68
 8007560:	20001d39 	.word	0x20001d39
 8007564:	20001d38 	.word	0x20001d38
 8007568:	20001d34 	.word	0x20001d34
 800756c:	0800f738 	.word	0x0800f738

08007570 <rt_test_007_007_execute>:
  test_set_step(1);
 8007570:	f04f 0c01 	mov.w	ip, #1
static void rt_test_007_007_execute(void) {
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007576:	4e4b      	ldr	r6, [pc, #300]	; (80076a4 <rt_test_007_007_execute+0x134>)
  test_set_step(1);
 8007578:	4f4b      	ldr	r7, [pc, #300]	; (80076a8 <rt_test_007_007_execute+0x138>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800757a:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800757c:	4b4b      	ldr	r3, [pc, #300]	; (80076ac <rt_test_007_007_execute+0x13c>)
 800757e:	6895      	ldr	r5, [r2, #8]
 8007580:	484b      	ldr	r0, [pc, #300]	; (80076b0 <rt_test_007_007_execute+0x140>)
 8007582:	eb05 010c 	add.w	r1, r5, ip
 8007586:	4a4b      	ldr	r2, [pc, #300]	; (80076b4 <rt_test_007_007_execute+0x144>)
  test_set_step(1);
 8007588:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800758c:	f005 fdb8 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007590:	4684      	mov	ip, r0
 8007592:	4c49      	ldr	r4, [pc, #292]	; (80076b8 <rt_test_007_007_execute+0x148>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007594:	1ca9      	adds	r1, r5, #2
 8007596:	4b49      	ldr	r3, [pc, #292]	; (80076bc <rt_test_007_007_execute+0x14c>)
 8007598:	4a46      	ldr	r2, [pc, #280]	; (80076b4 <rt_test_007_007_execute+0x144>)
 800759a:	4849      	ldr	r0, [pc, #292]	; (80076c0 <rt_test_007_007_execute+0x150>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800759c:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80075a0:	f005 fdae 	bl	800d100 <chThdCreateStatic.constprop.0>
 80075a4:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80075a6:	1ce9      	adds	r1, r5, #3
 80075a8:	4b46      	ldr	r3, [pc, #280]	; (80076c4 <rt_test_007_007_execute+0x154>)
 80075aa:	4a42      	ldr	r2, [pc, #264]	; (80076b4 <rt_test_007_007_execute+0x144>)
 80075ac:	4846      	ldr	r0, [pc, #280]	; (80076c8 <rt_test_007_007_execute+0x158>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 80075ae:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80075b2:	f005 fda5 	bl	800d100 <chThdCreateStatic.constprop.0>
 80075b6:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80075b8:	1d29      	adds	r1, r5, #4
 80075ba:	4b44      	ldr	r3, [pc, #272]	; (80076cc <rt_test_007_007_execute+0x15c>)
 80075bc:	4a3d      	ldr	r2, [pc, #244]	; (80076b4 <rt_test_007_007_execute+0x144>)
 80075be:	4844      	ldr	r0, [pc, #272]	; (80076d0 <rt_test_007_007_execute+0x160>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 80075c0:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80075c4:	f005 fd9c 	bl	800d100 <chThdCreateStatic.constprop.0>
 80075c8:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80075ca:	4b42      	ldr	r3, [pc, #264]	; (80076d4 <rt_test_007_007_execute+0x164>)
 80075cc:	4a39      	ldr	r2, [pc, #228]	; (80076b4 <rt_test_007_007_execute+0x144>)
 80075ce:	1d69      	adds	r1, r5, #5
 80075d0:	4841      	ldr	r0, [pc, #260]	; (80076d8 <rt_test_007_007_execute+0x168>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 80075d2:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80075d6:	f005 fd93 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 80075da:	2202      	movs	r2, #2
 80075dc:	2320      	movs	r3, #32
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 80075de:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 80075e0:	603a      	str	r2, [r7, #0]
 80075e2:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 80075e6:	4c3d      	ldr	r4, [pc, #244]	; (80076dc <rt_test_007_007_execute+0x16c>)
  _dbg_check_lock();
 80075e8:	f7f9 f91a 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 80075ec:	f7f9 f9a8 	bl	8000940 <chDbgCheckClassI>
 80075f0:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80075f2:	42a0      	cmp	r0, r4
 80075f4:	d04c      	beq.n	8007690 <rt_test_007_007_execute+0x120>
    tp->u.rdymsg = MSG_OK;
 80075f6:	2500      	movs	r5, #0
  qp->next       = p->next;
 80075f8:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 80075fa:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 80075fc:	6023      	str	r3, [r4, #0]
 80075fe:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8007600:	f7fa fd86 	bl	8002110 <chSchReadyI>
  chDbgCheckClassI();
 8007604:	f7f9 f99c 	bl	8000940 <chDbgCheckClassI>
  return (bool)(qp->next != qp);
 8007608:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800760a:	42a0      	cmp	r0, r4
 800760c:	d042      	beq.n	8007694 <rt_test_007_007_execute+0x124>
  qp->next       = p->next;
 800760e:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007610:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007612:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 8007614:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8007616:	f7fa fd7b 	bl	8002110 <chSchReadyI>
  chDbgCheckClassI();
 800761a:	f7f9 f991 	bl	8000940 <chDbgCheckClassI>
  return (bool)(qp->next != qp);
 800761e:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8007620:	42a0      	cmp	r0, r4
 8007622:	d039      	beq.n	8007698 <rt_test_007_007_execute+0x128>
  qp->next       = p->next;
 8007624:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007626:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007628:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 800762a:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800762c:	f7fa fd70 	bl	8002110 <chSchReadyI>
  chDbgCheckClassI();
 8007630:	f7f9 f986 	bl	8000940 <chDbgCheckClassI>
  return (bool)(qp->next != qp);
 8007634:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8007636:	42a0      	cmp	r0, r4
 8007638:	d030      	beq.n	800769c <rt_test_007_007_execute+0x12c>
  qp->next       = p->next;
 800763a:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 800763c:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 800763e:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 8007640:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8007642:	f7fa fd65 	bl	8002110 <chSchReadyI>
  chDbgCheckClassI();
 8007646:	f7f9 f97b 	bl	8000940 <chDbgCheckClassI>
  return (bool)(qp->next != qp);
 800764a:	6820      	ldr	r0, [r4, #0]
  if (ch_queue_notempty(&cp->queue)) {
 800764c:	42a0      	cmp	r0, r4
 800764e:	d005      	beq.n	800765c <rt_test_007_007_execute+0xec>
  qp->next       = p->next;
 8007650:	6803      	ldr	r3, [r0, #0]
  qp->next->prev = qp;
 8007652:	605c      	str	r4, [r3, #4]
  qp->next       = p->next;
 8007654:	6023      	str	r3, [r4, #0]
    tp->u.rdymsg = MSG_OK;
 8007656:	6245      	str	r5, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8007658:	f7fa fd5a 	bl	8002110 <chSchReadyI>
    chSchRescheduleS();
 800765c:	f7fb faf8 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 8007660:	f7f9 f8ee 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007664:	6833      	ldr	r3, [r6, #0]
 8007666:	42b3      	cmp	r3, r6
 8007668:	d004      	beq.n	8007674 <rt_test_007_007_execute+0x104>
 800766a:	69b2      	ldr	r2, [r6, #24]
 800766c:	689b      	ldr	r3, [r3, #8]
 800766e:	6892      	ldr	r2, [r2, #8]
 8007670:	429a      	cmp	r2, r3
 8007672:	d30a      	bcc.n	800768a <rt_test_007_007_execute+0x11a>
 8007674:	2300      	movs	r3, #0
 8007676:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800767a:	f7ff fc31 	bl	8006ee0 <test_wait_threads>
}
 800767e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 8007682:	4917      	ldr	r1, [pc, #92]	; (80076e0 <rt_test_007_007_execute+0x170>)
 8007684:	4817      	ldr	r0, [pc, #92]	; (80076e4 <rt_test_007_007_execute+0x174>)
 8007686:	f7fe bf0b 	b.w	80064a0 <_test_assert_sequence>
 800768a:	4817      	ldr	r0, [pc, #92]	; (80076e8 <rt_test_007_007_execute+0x178>)
 800768c:	f7f9 f870 	bl	8000770 <chSysHalt>
  chDbgCheckClassI();
 8007690:	f7f9 f956 	bl	8000940 <chDbgCheckClassI>
 8007694:	f7f9 f954 	bl	8000940 <chDbgCheckClassI>
 8007698:	f7f9 f952 	bl	8000940 <chDbgCheckClassI>
 800769c:	f7f9 f950 	bl	8000940 <chDbgCheckClassI>
 80076a0:	e7dc      	b.n	800765c <rt_test_007_007_execute+0xec>
 80076a2:	bf00      	nop
 80076a4:	20000d70 	.word	0x20000d70
 80076a8:	20001d3c 	.word	0x20001d3c
 80076ac:	0800ff6c 	.word	0x0800ff6c
 80076b0:	200016c8 	.word	0x200016c8
 80076b4:	08006791 	.word	0x08006791
 80076b8:	20001d54 	.word	0x20001d54
 80076bc:	08010ad0 	.word	0x08010ad0
 80076c0:	20001810 	.word	0x20001810
 80076c4:	0800ff64 	.word	0x0800ff64
 80076c8:	20001958 	.word	0x20001958
 80076cc:	0800f734 	.word	0x0800f734
 80076d0:	20001aa0 	.word	0x20001aa0
 80076d4:	0800f730 	.word	0x0800f730
 80076d8:	20001be8 	.word	0x20001be8
 80076dc:	20000800 	.word	0x20000800
 80076e0:	0800f788 	.word	0x0800f788
 80076e4:	0800ff68 	.word	0x0800ff68
 80076e8:	08010be0 	.word	0x08010be0
 80076ec:	00000000 	.word	0x00000000

080076f0 <rt_test_007_008_execute>:
  test_set_step(1);
 80076f0:	f04f 0c01 	mov.w	ip, #1
static void rt_test_007_008_execute(void) {
 80076f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 80076f6:	4e33      	ldr	r6, [pc, #204]	; (80077c4 <rt_test_007_008_execute+0xd4>)
  test_set_step(1);
 80076f8:	4f33      	ldr	r7, [pc, #204]	; (80077c8 <rt_test_007_008_execute+0xd8>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 80076fa:	69b2      	ldr	r2, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 80076fc:	4b33      	ldr	r3, [pc, #204]	; (80077cc <rt_test_007_008_execute+0xdc>)
 80076fe:	6895      	ldr	r5, [r2, #8]
 8007700:	4833      	ldr	r0, [pc, #204]	; (80077d0 <rt_test_007_008_execute+0xe0>)
 8007702:	eb05 010c 	add.w	r1, r5, ip
 8007706:	4a33      	ldr	r2, [pc, #204]	; (80077d4 <rt_test_007_008_execute+0xe4>)
  test_set_step(1);
 8007708:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800770c:	f005 fcf8 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007710:	4684      	mov	ip, r0
 8007712:	4c31      	ldr	r4, [pc, #196]	; (80077d8 <rt_test_007_008_execute+0xe8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007714:	1ca9      	adds	r1, r5, #2
 8007716:	4b31      	ldr	r3, [pc, #196]	; (80077dc <rt_test_007_008_execute+0xec>)
 8007718:	4a2e      	ldr	r2, [pc, #184]	; (80077d4 <rt_test_007_008_execute+0xe4>)
 800771a:	4831      	ldr	r0, [pc, #196]	; (80077e0 <rt_test_007_008_execute+0xf0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread6, "E");
 800771c:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 8007720:	f005 fcee 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007724:	4684      	mov	ip, r0
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007726:	1ce9      	adds	r1, r5, #3
 8007728:	4b2e      	ldr	r3, [pc, #184]	; (80077e4 <rt_test_007_008_execute+0xf4>)
 800772a:	4a2a      	ldr	r2, [pc, #168]	; (80077d4 <rt_test_007_008_execute+0xe4>)
 800772c:	482e      	ldr	r0, [pc, #184]	; (80077e8 <rt_test_007_008_execute+0xf8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "D");
 800772e:	f8c4 c004 	str.w	ip, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007732:	f005 fce5 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007736:	4684      	mov	ip, r0
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007738:	1d29      	adds	r1, r5, #4
 800773a:	4b2c      	ldr	r3, [pc, #176]	; (80077ec <rt_test_007_008_execute+0xfc>)
 800773c:	4a25      	ldr	r2, [pc, #148]	; (80077d4 <rt_test_007_008_execute+0xe4>)
 800773e:	482c      	ldr	r0, [pc, #176]	; (80077f0 <rt_test_007_008_execute+0x100>)
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread6, "C");
 8007740:	f8c4 c008 	str.w	ip, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007744:	f005 fcdc 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007748:	4684      	mov	ip, r0
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800774a:	4b2a      	ldr	r3, [pc, #168]	; (80077f4 <rt_test_007_008_execute+0x104>)
 800774c:	4a21      	ldr	r2, [pc, #132]	; (80077d4 <rt_test_007_008_execute+0xe4>)
 800774e:	1d69      	adds	r1, r5, #5
 8007750:	4829      	ldr	r0, [pc, #164]	; (80077f8 <rt_test_007_008_execute+0x108>)
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, prio+4, thread6, "B");
 8007752:	f8c4 c00c 	str.w	ip, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 8007756:	f005 fcd3 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800775a:	2202      	movs	r2, #2
 800775c:	2320      	movs	r3, #32
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, prio+5, thread6, "A");
 800775e:	6120      	str	r0, [r4, #16]
  test_set_step(2);
 8007760:	603a      	str	r2, [r7, #0]
 8007762:	f383 8811 	msr	BASEPRI, r3
  return (bool)(qp->next != qp);
 8007766:	4c25      	ldr	r4, [pc, #148]	; (80077fc <rt_test_007_008_execute+0x10c>)
  _dbg_check_lock();
 8007768:	f7f9 f85a 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800776c:	f7f9 f8e8 	bl	8000940 <chDbgCheckClassI>
 8007770:	6823      	ldr	r3, [r4, #0]
  while (ch_queue_notempty(&cp->queue)) {
 8007772:	42a3      	cmp	r3, r4
 8007774:	d00b      	beq.n	800778e <rt_test_007_008_execute+0x9e>
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&cp->queue))->u.rdymsg = MSG_RESET;
 8007776:	f06f 0501 	mvn.w	r5, #1
  qp->next       = p->next;
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	4618      	mov	r0, r3
  qp->next->prev = qp;
 800777e:	6054      	str	r4, [r2, #4]
  qp->next       = p->next;
 8007780:	6022      	str	r2, [r4, #0]
 8007782:	f7fa fcc5 	bl	8002110 <chSchReadyI>
  return (bool)(qp->next != qp);
 8007786:	6823      	ldr	r3, [r4, #0]
 8007788:	6245      	str	r5, [r0, #36]	; 0x24
  while (ch_queue_notempty(&cp->queue)) {
 800778a:	42a3      	cmp	r3, r4
 800778c:	d1f5      	bne.n	800777a <rt_test_007_008_execute+0x8a>
  chSchRescheduleS();
 800778e:	f7fb fa5f 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 8007792:	f7f9 f855 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007796:	6833      	ldr	r3, [r6, #0]
 8007798:	42b3      	cmp	r3, r6
 800779a:	d004      	beq.n	80077a6 <rt_test_007_008_execute+0xb6>
 800779c:	69b2      	ldr	r2, [r6, #24]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	6892      	ldr	r2, [r2, #8]
 80077a2:	429a      	cmp	r2, r3
 80077a4:	d30a      	bcc.n	80077bc <rt_test_007_008_execute+0xcc>
 80077a6:	2300      	movs	r3, #0
 80077a8:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 80077ac:	f7ff fb98 	bl	8006ee0 <test_wait_threads>
}
 80077b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABCDE", "invalid sequence");
 80077b4:	4912      	ldr	r1, [pc, #72]	; (8007800 <rt_test_007_008_execute+0x110>)
 80077b6:	4813      	ldr	r0, [pc, #76]	; (8007804 <rt_test_007_008_execute+0x114>)
 80077b8:	f7fe be72 	b.w	80064a0 <_test_assert_sequence>
 80077bc:	4812      	ldr	r0, [pc, #72]	; (8007808 <rt_test_007_008_execute+0x118>)
 80077be:	f7f8 ffd7 	bl	8000770 <chSysHalt>
 80077c2:	bf00      	nop
 80077c4:	20000d70 	.word	0x20000d70
 80077c8:	20001d3c 	.word	0x20001d3c
 80077cc:	0800ff6c 	.word	0x0800ff6c
 80077d0:	200016c8 	.word	0x200016c8
 80077d4:	08006791 	.word	0x08006791
 80077d8:	20001d54 	.word	0x20001d54
 80077dc:	08010ad0 	.word	0x08010ad0
 80077e0:	20001810 	.word	0x20001810
 80077e4:	0800ff64 	.word	0x0800ff64
 80077e8:	20001958 	.word	0x20001958
 80077ec:	0800f734 	.word	0x0800f734
 80077f0:	20001aa0 	.word	0x20001aa0
 80077f4:	0800f730 	.word	0x0800f730
 80077f8:	20001be8 	.word	0x20001be8
 80077fc:	20000800 	.word	0x20000800
 8007800:	0800f788 	.word	0x0800f788
 8007804:	0800ff68 	.word	0x0800ff68
 8007808:	08010f54 	.word	0x08010f54
 800780c:	00000000 	.word	0x00000000

08007810 <rt_test_007_009_execute>:
  }
  test_end_step(1);

  /* [7.9.2] Thread A is created at priority P(+1), it locks M2, locks
     M1 and goes to wait on C1.*/
  test_set_step(2);
 8007810:	f04f 0c02 	mov.w	ip, #2
static void rt_test_007_009_execute(void) {
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  return ch.rlist.current;
 8007816:	4c34      	ldr	r4, [pc, #208]	; (80078e8 <rt_test_007_009_execute+0xd8>)
  test_set_step(2);
 8007818:	4e34      	ldr	r6, [pc, #208]	; (80078ec <rt_test_007_009_execute+0xdc>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800781a:	69a2      	ldr	r2, [r4, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800781c:	4b34      	ldr	r3, [pc, #208]	; (80078f0 <rt_test_007_009_execute+0xe0>)
 800781e:	6897      	ldr	r7, [r2, #8]
 8007820:	4834      	ldr	r0, [pc, #208]	; (80078f4 <rt_test_007_009_execute+0xe4>)
 8007822:	1c79      	adds	r1, r7, #1
 8007824:	4a34      	ldr	r2, [pc, #208]	; (80078f8 <rt_test_007_009_execute+0xe8>)
  test_set_step(2);
 8007826:	f8c6 c000 	str.w	ip, [r6]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 800782a:	f005 fc69 	bl	800d100 <chThdCreateStatic.constprop.0>
  }
  test_end_step(2);

  /* [7.9.3] Thread C is created at priority P(+2), it enqueues on M1
     and boosts TA priority at P(+2).*/
  test_set_step(3);
 800782e:	2303      	movs	r3, #3
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007830:	4d32      	ldr	r5, [pc, #200]	; (80078fc <rt_test_007_009_execute+0xec>)
  test_set_step(3);
 8007832:	6033      	str	r3, [r6, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, prio+1, thread8, "A");
 8007834:	6028      	str	r0, [r5, #0]
  {
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007836:	1cb9      	adds	r1, r7, #2
 8007838:	4b31      	ldr	r3, [pc, #196]	; (8007900 <rt_test_007_009_execute+0xf0>)
 800783a:	4a32      	ldr	r2, [pc, #200]	; (8007904 <rt_test_007_009_execute+0xf4>)
 800783c:	4832      	ldr	r0, [pc, #200]	; (8007908 <rt_test_007_009_execute+0xf8>)
 800783e:	f005 fc5f 	bl	800d100 <chThdCreateStatic.constprop.0>
  }
  test_end_step(3);

  /* [7.9.4] Thread B is created at priority P(+3), it enqueues on M2
     and boosts TA priority at P(+3).*/
  test_set_step(4);
 8007842:	2304      	movs	r3, #4
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, prio+2, thread6, "C");
 8007844:	6068      	str	r0, [r5, #4]
  test_set_step(4);
 8007846:	6033      	str	r3, [r6, #0]
  {
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007848:	4a30      	ldr	r2, [pc, #192]	; (800790c <rt_test_007_009_execute+0xfc>)
 800784a:	4b31      	ldr	r3, [pc, #196]	; (8007910 <rt_test_007_009_execute+0x100>)
 800784c:	1cf9      	adds	r1, r7, #3
 800784e:	4831      	ldr	r0, [pc, #196]	; (8007914 <rt_test_007_009_execute+0x104>)
 8007850:	f005 fc56 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_end_step(4);

  /* [7.9.5] Signaling C1: TA wakes up, unlocks M1 and priority goes to
     P(+2). TB locks M1, unlocks M1 and completes. TA unlocks M2 and
     priority goes to P(+1). TC waits on C1. TA completes.*/
  test_set_step(5);
 8007854:	2205      	movs	r2, #5
 8007856:	2320      	movs	r3, #32
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, prio+3, thread9, "B");
 8007858:	60a8      	str	r0, [r5, #8]
  test_set_step(5);
 800785a:	6032      	str	r2, [r6, #0]
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	4d2d      	ldr	r5, [pc, #180]	; (8007918 <rt_test_007_009_execute+0x108>)
  _dbg_check_lock();
 8007862:	f7f8 ffdd 	bl	8000820 <_dbg_check_lock>
 8007866:	6828      	ldr	r0, [r5, #0]
  if (ch_queue_notempty(&cp->queue)) {
 8007868:	42a8      	cmp	r0, r5
 800786a:	d005      	beq.n	8007878 <rt_test_007_009_execute+0x68>
  qp->next       = p->next;
 800786c:	6803      	ldr	r3, [r0, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&cp->queue), MSG_OK);
 800786e:	2100      	movs	r1, #0
  qp->next->prev = qp;
 8007870:	605d      	str	r5, [r3, #4]
  qp->next       = p->next;
 8007872:	602b      	str	r3, [r5, #0]
 8007874:	f7fb f964 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 8007878:	f7f8 ffe2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	42a3      	cmp	r3, r4
 8007880:	d004      	beq.n	800788c <rt_test_007_009_execute+0x7c>
 8007882:	69a2      	ldr	r2, [r4, #24]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	6892      	ldr	r2, [r2, #8]
 8007888:	429a      	cmp	r2, r3
 800788a:	d329      	bcc.n	80078e0 <rt_test_007_009_execute+0xd0>
 800788c:	2700      	movs	r7, #0
 800788e:	f387 8811 	msr	BASEPRI, r7
    chCondSignal(&c1);
  }
  test_end_step(5);

  /* [7.9.6] Signaling C1: TC wakes up, unlocks M1 and completes.*/
  test_set_step(6);
 8007892:	2206      	movs	r2, #6
 8007894:	2320      	movs	r3, #32
 8007896:	6032      	str	r2, [r6, #0]
 8007898:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800789c:	f7f8 ffc0 	bl	8000820 <_dbg_check_lock>
  return (bool)(qp->next != qp);
 80078a0:	6828      	ldr	r0, [r5, #0]
  if (ch_queue_notempty(&cp->queue)) {
 80078a2:	42a8      	cmp	r0, r5
 80078a4:	d005      	beq.n	80078b2 <rt_test_007_009_execute+0xa2>
  qp->next       = p->next;
 80078a6:	6803      	ldr	r3, [r0, #0]
    chSchWakeupS((thread_t *)ch_queue_fifo_remove(&cp->queue), MSG_OK);
 80078a8:	4639      	mov	r1, r7
  qp->next->prev = qp;
 80078aa:	605d      	str	r5, [r3, #4]
  qp->next       = p->next;
 80078ac:	602b      	str	r3, [r5, #0]
 80078ae:	f7fb f947 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 80078b2:	f7f8 ffc5 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d004      	beq.n	80078c6 <rt_test_007_009_execute+0xb6>
 80078bc:	69a2      	ldr	r2, [r4, #24]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	6892      	ldr	r2, [r2, #8]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d30c      	bcc.n	80078e0 <rt_test_007_009_execute+0xd0>
 80078c6:	2300      	movs	r3, #0
 80078c8:	f383 8811 	msr	BASEPRI, r3
    chCondSignal(&c1);
  }
  test_end_step(6);

  /* [7.9.7] Checking the order of operations.*/
  test_set_step(7);
 80078cc:	2307      	movs	r3, #7
 80078ce:	6033      	str	r3, [r6, #0]
  {
    test_wait_threads();
 80078d0:	f7ff fb06 	bl	8006ee0 <test_wait_threads>
    test_assert_sequence("ABC", "invalid sequence");
  }
  test_end_step(7);
}
 80078d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert_sequence("ABC", "invalid sequence");
 80078d8:	4910      	ldr	r1, [pc, #64]	; (800791c <rt_test_007_009_execute+0x10c>)
 80078da:	4811      	ldr	r0, [pc, #68]	; (8007920 <rt_test_007_009_execute+0x110>)
 80078dc:	f7fe bde0 	b.w	80064a0 <_test_assert_sequence>
 80078e0:	4810      	ldr	r0, [pc, #64]	; (8007924 <rt_test_007_009_execute+0x114>)
 80078e2:	f7f8 ff45 	bl	8000770 <chSysHalt>
 80078e6:	bf00      	nop
 80078e8:	20000d70 	.word	0x20000d70
 80078ec:	20001d3c 	.word	0x20001d3c
 80078f0:	0800f730 	.word	0x0800f730
 80078f4:	200016c8 	.word	0x200016c8
 80078f8:	08006871 	.word	0x08006871
 80078fc:	20001d54 	.word	0x20001d54
 8007900:	0800ff64 	.word	0x0800ff64
 8007904:	08006791 	.word	0x08006791
 8007908:	20001810 	.word	0x20001810
 800790c:	08006981 	.word	0x08006981
 8007910:	0800f734 	.word	0x0800f734
 8007914:	20001958 	.word	0x20001958
 8007918:	20000800 	.word	0x20000800
 800791c:	0800f788 	.word	0x0800f788
 8007920:	0800f79c 	.word	0x0800f79c
 8007924:	08010f54 	.word	0x08010f54
	...

08007930 <rt_test_008_001_execute>:
 * - [8.1.1] Starting the messenger thread.
 * - [8.1.2] Waiting for four messages then testing the receive order.
 * .
 */

static void rt_test_008_001_execute(void) {
 8007930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  thread_t *tp;
  msg_t msg;

  /* [8.1.1] Starting the messenger thread.*/
  test_set_step(1);
 8007934:	2601      	movs	r6, #1
  return ch.rlist.current;
 8007936:	4c2f      	ldr	r4, [pc, #188]	; (80079f4 <rt_test_008_001_execute+0xc4>)
 8007938:	4d2f      	ldr	r5, [pc, #188]	; (80079f8 <rt_test_008_001_execute+0xc8>)
 800793a:	69a3      	ldr	r3, [r4, #24]
  {
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 800793c:	4a2f      	ldr	r2, [pc, #188]	; (80079fc <rt_test_008_001_execute+0xcc>)
 800793e:	6899      	ldr	r1, [r3, #8]
 8007940:	482f      	ldr	r0, [pc, #188]	; (8007a00 <rt_test_008_001_execute+0xd0>)
 8007942:	4431      	add	r1, r6
  test_set_step(1);
 8007944:	602e      	str	r6, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007946:	f005 fbdb 	bl	800d100 <chThdCreateStatic.constprop.0>
  }
  test_end_step(1);

  /* [8.1.2] Waiting for four messages then testing the receive
     order.*/
  test_set_step(2);
 800794a:	2302      	movs	r3, #2
 800794c:	f04f 0804 	mov.w	r8, #4
 8007950:	2720      	movs	r7, #32
 8007952:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() + 1,
 8007954:	4b2b      	ldr	r3, [pc, #172]	; (8007a04 <rt_test_008_001_execute+0xd4>)
 8007956:	6018      	str	r0, [r3, #0]
 8007958:	f387 8811 	msr	BASEPRI, r7
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800795c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8007960:	4313      	orrs	r3, r2
 8007962:	d123      	bne.n	80079ac <rt_test_008_001_execute+0x7c>
  if (!chMsgIsPendingI(currp)) {
 8007964:	69a2      	ldr	r2, [r4, #24]
  _dbg_enter_lock();
 8007966:	6366      	str	r6, [r4, #52]	; 0x34
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 8007968:	4613      	mov	r3, r2
 800796a:	f853 0f2c 	ldr.w	r0, [r3, #44]!
 800796e:	4298      	cmp	r0, r3
 8007970:	d034      	beq.n	80079dc <rt_test_008_001_execute+0xac>
  tp->state = CH_STATE_SNDMSG;
 8007972:	250d      	movs	r5, #13
 8007974:	6801      	ldr	r1, [r0, #0]
 8007976:	62d1      	str	r1, [r2, #44]	; 0x2c
  qp->next->prev = qp;
 8007978:	604b      	str	r3, [r1, #4]
 800797a:	f880 5020 	strb.w	r5, [r0, #32]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800797e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007980:	b9bb      	cbnz	r3, 80079b2 <rt_test_008_001_execute+0x82>
 8007982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007984:	2900      	cmp	r1, #0
 8007986:	dd14      	ble.n	80079b2 <rt_test_008_001_execute+0x82>
  _dbg_leave_lock();
 8007988:	6363      	str	r3, [r4, #52]	; 0x34
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	42a3      	cmp	r3, r4
 800798e:	d003      	beq.n	8007998 <rt_test_008_001_execute+0x68>
 8007990:	6892      	ldr	r2, [r2, #8]
 8007992:	689b      	ldr	r3, [r3, #8]
 8007994:	429a      	cmp	r2, r3
 8007996:	d329      	bcc.n	80079ec <rt_test_008_001_execute+0xbc>
 8007998:	2300      	movs	r3, #0
 800799a:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 800799e:	f890 3020 	ldrb.w	r3, [r0, #32]
 80079a2:	2b0d      	cmp	r3, #13
 80079a4:	d008      	beq.n	80079b8 <rt_test_008_001_execute+0x88>
 80079a6:	4818      	ldr	r0, [pc, #96]	; (8007a08 <rt_test_008_001_execute+0xd8>)
 80079a8:	f7f8 fee2 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 80079ac:	4817      	ldr	r0, [pc, #92]	; (8007a0c <rt_test_008_001_execute+0xdc>)
 80079ae:	f7f8 fedf 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 80079b2:	4817      	ldr	r0, [pc, #92]	; (8007a10 <rt_test_008_001_execute+0xe0>)
 80079b4:	f7f8 fedc 	bl	8000770 <chSysHalt>
  return tp->u.sentmsg;
 80079b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    unsigned i;

    for (i = 0; i < 4; i++) {
      tp = chMsgWait();
      msg = chMsgGet(tp);
      chMsgRelease(tp, msg);
 80079ba:	4629      	mov	r1, r5
 80079bc:	f7fc faa8 	bl	8003f10 <chMsgRelease>
      test_emit_token(msg);
 80079c0:	b2e8      	uxtb	r0, r5
 80079c2:	f7fe fdfd 	bl	80065c0 <test_emit_token>
    for (i = 0; i < 4; i++) {
 80079c6:	f1b8 0801 	subs.w	r8, r8, #1
 80079ca:	d1c5      	bne.n	8007958 <rt_test_008_001_execute+0x28>
    }
    test_wait_threads();
 80079cc:	f7ff fa88 	bl	8006ee0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
  }
  test_end_step(2);
}
 80079d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_assert_sequence("ABCD", "invalid sequence");
 80079d4:	490f      	ldr	r1, [pc, #60]	; (8007a14 <rt_test_008_001_execute+0xe4>)
 80079d6:	4810      	ldr	r0, [pc, #64]	; (8007a18 <rt_test_008_001_execute+0xe8>)
 80079d8:	f7fe bd62 	b.w	80064a0 <_test_assert_sequence>
    chSchGoSleepS(CH_STATE_WTMSG);
 80079dc:	200e      	movs	r0, #14
 80079de:	f7fa fc7f 	bl	80022e0 <chSchGoSleepS>
  tp = (thread_t *)ch_queue_fifo_remove(&currp->msgqueue);
 80079e2:	69a2      	ldr	r2, [r4, #24]
  ch_queue_t *p = qp->next;
 80079e4:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80079e6:	f102 032c 	add.w	r3, r2, #44	; 0x2c
 80079ea:	e7c2      	b.n	8007972 <rt_test_008_001_execute+0x42>
 80079ec:	480b      	ldr	r0, [pc, #44]	; (8007a1c <rt_test_008_001_execute+0xec>)
 80079ee:	f7f8 febf 	bl	8000770 <chSysHalt>
 80079f2:	bf00      	nop
 80079f4:	20000d70 	.word	0x20000d70
 80079f8:	20001d3c 	.word	0x20001d3c
 80079fc:	080023f1 	.word	0x080023f1
 8007a00:	200016c8 	.word	0x200016c8
 8007a04:	20001d54 	.word	0x20001d54
 8007a08:	08010bf8 	.word	0x08010bf8
 8007a0c:	0800f20c 	.word	0x0800f20c
 8007a10:	0800f214 	.word	0x0800f214
 8007a14:	0800f788 	.word	0x0800f788
 8007a18:	0800ff8c 	.word	0x0800ff8c
 8007a1c:	08010d4c 	.word	0x08010d4c

08007a20 <rt_test_010_001_execute>:
  test_set_step(2);
 8007a20:	2302      	movs	r3, #2
static void rt_test_010_001_execute(void) {
 8007a22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007a24:	4a44      	ldr	r2, [pc, #272]	; (8007b38 <rt_test_010_001_execute+0x118>)
 8007a26:	b087      	sub	sp, #28
  return chThdGetSelfX()->hdr.pqueue.prio;
 8007a28:	6991      	ldr	r1, [r2, #24]
  test_set_step(2);
 8007a2a:	4c44      	ldr	r4, [pc, #272]	; (8007b3c <rt_test_010_001_execute+0x11c>)
 8007a2c:	688d      	ldr	r5, [r1, #8]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007a2e:	4844      	ldr	r0, [pc, #272]	; (8007b40 <rt_test_010_001_execute+0x120>)
 8007a30:	aa04      	add	r2, sp, #16
 8007a32:	a905      	add	r1, sp, #20
  test_set_step(2);
 8007a34:	6023      	str	r3, [r4, #0]
    n1 = chHeapStatus(&heap1, &total1, &largest1);
 8007a36:	f7fc fe9b 	bl	8004770 <chHeapStatus>
  if (!condition)
 8007a3a:	2801      	cmp	r0, #1
 8007a3c:	d172      	bne.n	8007b24 <rt_test_010_001_execute+0x104>
  test_set_step(3);
 8007a3e:	f04f 0c03 	mov.w	ip, #3
    threads[0] = chThdCreateFromHeap(&heap1,
 8007a42:	4b40      	ldr	r3, [pc, #256]	; (8007b44 <rt_test_010_001_execute+0x124>)
 8007a44:	4f40      	ldr	r7, [pc, #256]	; (8007b48 <rt_test_010_001_execute+0x128>)
 8007a46:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a4a:	e9cd 7300 	strd	r7, r3, [sp]
 8007a4e:	4a3f      	ldr	r2, [pc, #252]	; (8007b4c <rt_test_010_001_execute+0x12c>)
 8007a50:	483b      	ldr	r0, [pc, #236]	; (8007b40 <rt_test_010_001_execute+0x120>)
 8007a52:	1e6b      	subs	r3, r5, #1
  test_set_step(3);
 8007a54:	f8c4 c000 	str.w	ip, [r4]
    threads[0] = chThdCreateFromHeap(&heap1,
 8007a58:	f7fc fc62 	bl	8004320 <chThdCreateFromHeap>
 8007a5c:	4e3c      	ldr	r6, [pc, #240]	; (8007b50 <rt_test_010_001_execute+0x130>)
 8007a5e:	6030      	str	r0, [r6, #0]
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d055      	beq.n	8007b10 <rt_test_010_001_execute+0xf0>
  test_set_step(4);
 8007a64:	f04f 0c04 	mov.w	ip, #4
    threads[1] = chThdCreateFromHeap(&heap1,
 8007a68:	4b3a      	ldr	r3, [pc, #232]	; (8007b54 <rt_test_010_001_execute+0x134>)
 8007a6a:	9700      	str	r7, [sp, #0]
 8007a6c:	9301      	str	r3, [sp, #4]
 8007a6e:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8007a72:	4a39      	ldr	r2, [pc, #228]	; (8007b58 <rt_test_010_001_execute+0x138>)
 8007a74:	4832      	ldr	r0, [pc, #200]	; (8007b40 <rt_test_010_001_execute+0x120>)
 8007a76:	1eab      	subs	r3, r5, #2
  test_set_step(4);
 8007a78:	f8c4 c000 	str.w	ip, [r4]
    threads[1] = chThdCreateFromHeap(&heap1,
 8007a7c:	f7fc fc50 	bl	8004320 <chThdCreateFromHeap>
 8007a80:	6070      	str	r0, [r6, #4]
 8007a82:	2800      	cmp	r0, #0
 8007a84:	d044      	beq.n	8007b10 <rt_test_010_001_execute+0xf0>
  test_set_step(5);
 8007a86:	f04f 0c05 	mov.w	ip, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8007a8a:	4934      	ldr	r1, [pc, #208]	; (8007b5c <rt_test_010_001_execute+0x13c>)
 8007a8c:	1eeb      	subs	r3, r5, #3
 8007a8e:	9101      	str	r1, [sp, #4]
 8007a90:	9700      	str	r7, [sp, #0]
 8007a92:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007a96:	4a32      	ldr	r2, [pc, #200]	; (8007b60 <rt_test_010_001_execute+0x140>)
 8007a98:	4829      	ldr	r0, [pc, #164]	; (8007b40 <rt_test_010_001_execute+0x120>)
  test_set_step(5);
 8007a9a:	f8c4 c000 	str.w	ip, [r4]
    threads[2] = chThdCreateFromHeap(&heap1,
 8007a9e:	f7fc fc3f 	bl	8004320 <chThdCreateFromHeap>
 8007aa2:	4603      	mov	r3, r0
    test_assert(threads[2] == NULL, "thread creation not failed");
 8007aa4:	fab0 f080 	clz	r0, r0
 8007aa8:	492e      	ldr	r1, [pc, #184]	; (8007b64 <rt_test_010_001_execute+0x144>)
 8007aaa:	0940      	lsrs	r0, r0, #5
    threads[2] = chThdCreateFromHeap(&heap1,
 8007aac:	60b3      	str	r3, [r6, #8]
    test_assert(threads[2] == NULL, "thread creation not failed");
 8007aae:	f7fd ff07 	bl	80058c0 <_test_assert>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d134      	bne.n	8007b20 <rt_test_010_001_execute+0x100>
  test_set_step(6);
 8007ab6:	2306      	movs	r3, #6
 8007ab8:	6023      	str	r3, [r4, #0]
    test_wait_threads();
 8007aba:	f7ff fa11 	bl	8006ee0 <test_wait_threads>
    test_assert_sequence("AB", "invalid sequence");
 8007abe:	492a      	ldr	r1, [pc, #168]	; (8007b68 <rt_test_010_001_execute+0x148>)
 8007ac0:	482a      	ldr	r0, [pc, #168]	; (8007b6c <rt_test_010_001_execute+0x14c>)
 8007ac2:	f7fe fced 	bl	80064a0 <_test_assert_sequence>
 8007ac6:	bb58      	cbnz	r0, 8007b20 <rt_test_010_001_execute+0x100>
  test_set_step(7);
 8007ac8:	2307      	movs	r3, #7
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8007aca:	a903      	add	r1, sp, #12
 8007acc:	481c      	ldr	r0, [pc, #112]	; (8007b40 <rt_test_010_001_execute+0x120>)
 8007ace:	aa02      	add	r2, sp, #8
  test_set_step(7);
 8007ad0:	6023      	str	r3, [r4, #0]
    n2 = chHeapStatus(&heap1, &total2, &largest2);
 8007ad2:	f7fc fe4d 	bl	8004770 <chHeapStatus>
    test_assert(n1 == n2, "fragmentation changed");
 8007ad6:	f1a0 0001 	sub.w	r0, r0, #1
 8007ada:	fab0 f080 	clz	r0, r0
 8007ade:	4924      	ldr	r1, [pc, #144]	; (8007b70 <rt_test_010_001_execute+0x150>)
 8007ae0:	0940      	lsrs	r0, r0, #5
 8007ae2:	f7fd feed 	bl	80058c0 <_test_assert>
 8007ae6:	b9d8      	cbnz	r0, 8007b20 <rt_test_010_001_execute+0x100>
    test_assert(total1 == total2, "total free space changed");
 8007ae8:	9805      	ldr	r0, [sp, #20]
 8007aea:	9b03      	ldr	r3, [sp, #12]
 8007aec:	4921      	ldr	r1, [pc, #132]	; (8007b74 <rt_test_010_001_execute+0x154>)
 8007aee:	1ac0      	subs	r0, r0, r3
 8007af0:	fab0 f080 	clz	r0, r0
 8007af4:	0940      	lsrs	r0, r0, #5
 8007af6:	f7fd fee3 	bl	80058c0 <_test_assert>
 8007afa:	b988      	cbnz	r0, 8007b20 <rt_test_010_001_execute+0x100>
    test_assert(largest1 == largest2, "largest fragment size changed");
 8007afc:	9804      	ldr	r0, [sp, #16]
 8007afe:	9b02      	ldr	r3, [sp, #8]
 8007b00:	491d      	ldr	r1, [pc, #116]	; (8007b78 <rt_test_010_001_execute+0x158>)
 8007b02:	1ac0      	subs	r0, r0, r3
 8007b04:	fab0 f080 	clz	r0, r0
 8007b08:	0940      	lsrs	r0, r0, #5
 8007b0a:	f7fd fed9 	bl	80058c0 <_test_assert>
 8007b0e:	e007      	b.n	8007b20 <rt_test_010_001_execute+0x100>
  test_local_fail      = true;
 8007b10:	2301      	movs	r3, #1
 8007b12:	491a      	ldr	r1, [pc, #104]	; (8007b7c <rt_test_010_001_execute+0x15c>)
  test_global_fail     = true;
 8007b14:	4a1a      	ldr	r2, [pc, #104]	; (8007b80 <rt_test_010_001_execute+0x160>)
  test_failure_message = msg;
 8007b16:	481b      	ldr	r0, [pc, #108]	; (8007b84 <rt_test_010_001_execute+0x164>)
 8007b18:	4c1b      	ldr	r4, [pc, #108]	; (8007b88 <rt_test_010_001_execute+0x168>)
  test_local_fail      = true;
 8007b1a:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007b1c:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007b1e:	7013      	strb	r3, [r2, #0]
}
 8007b20:	b007      	add	sp, #28
 8007b22:	bdf0      	pop	{r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8007b24:	2301      	movs	r3, #1
 8007b26:	4915      	ldr	r1, [pc, #84]	; (8007b7c <rt_test_010_001_execute+0x15c>)
  test_global_fail     = true;
 8007b28:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <rt_test_010_001_execute+0x160>)
  test_failure_message = msg;
 8007b2a:	4816      	ldr	r0, [pc, #88]	; (8007b84 <rt_test_010_001_execute+0x164>)
 8007b2c:	4c17      	ldr	r4, [pc, #92]	; (8007b8c <rt_test_010_001_execute+0x16c>)
  test_local_fail      = true;
 8007b2e:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007b30:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007b32:	7013      	strb	r3, [r2, #0]
 8007b34:	b007      	add	sp, #28
 8007b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b38:	20000d70 	.word	0x20000d70
 8007b3c:	20001d3c 	.word	0x20001d3c
 8007b40:	2000167c 	.word	0x2000167c
 8007b44:	0800f730 	.word	0x0800f730
 8007b48:	08006a31 	.word	0x08006a31
 8007b4c:	0800ff94 	.word	0x0800ff94
 8007b50:	20001d54 	.word	0x20001d54
 8007b54:	0800f734 	.word	0x0800f734
 8007b58:	0800ffc4 	.word	0x0800ffc4
 8007b5c:	0800ff64 	.word	0x0800ff64
 8007b60:	0800ffcc 	.word	0x0800ffcc
 8007b64:	0800ffd4 	.word	0x0800ffd4
 8007b68:	0800f788 	.word	0x0800f788
 8007b6c:	0800fff0 	.word	0x0800fff0
 8007b70:	0800fff4 	.word	0x0800fff4
 8007b74:	0801000c 	.word	0x0801000c
 8007b78:	08010028 	.word	0x08010028
 8007b7c:	20001d39 	.word	0x20001d39
 8007b80:	20001d38 	.word	0x20001d38
 8007b84:	20001d34 	.word	0x20001d34
 8007b88:	0800ffac 	.word	0x0800ffac
 8007b8c:	0800ff9c 	.word	0x0800ff9c

08007b90 <rt_test_010_002_execute>:

static void rt_test_010_002_execute(void) {
 8007b90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  unsigned i;
  tprio_t prio;

  /* [10.2.1] Adding four working areas to the pool.*/
  test_set_step(1);
 8007b94:	2301      	movs	r3, #1
 8007b96:	f04f 0820 	mov.w	r8, #32
 8007b9a:	f04f 0a00 	mov.w	sl, #0
 8007b9e:	4d6b      	ldr	r5, [pc, #428]	; (8007d4c <rt_test_010_002_execute+0x1bc>)
 8007ba0:	4e6b      	ldr	r6, [pc, #428]	; (8007d50 <rt_test_010_002_execute+0x1c0>)
 8007ba2:	4f6c      	ldr	r7, [pc, #432]	; (8007d54 <rt_test_010_002_execute+0x1c4>)
 8007ba4:	4c6c      	ldr	r4, [pc, #432]	; (8007d58 <rt_test_010_002_execute+0x1c8>)
  chDbgCheck((mp != NULL) &&
 8007ba6:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 8007d5c <rt_test_010_002_execute+0x1cc>
 8007baa:	f106 090c 	add.w	r9, r6, #12
 8007bae:	602b      	str	r3, [r5, #0]
 8007bb0:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock();
 8007bb4:	f7f8 fe34 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007bb8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8007bba:	2a00      	cmp	r2, #0
 8007bbc:	db1c      	blt.n	8007bf8 <rt_test_010_002_execute+0x68>
 8007bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dd19      	ble.n	8007bf8 <rt_test_010_002_execute+0x68>
 8007bc4:	b1df      	cbz	r7, 8007bfe <rt_test_010_002_execute+0x6e>
 8007bc6:	f8db 3008 	ldr.w	r3, [fp, #8]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	421f      	tst	r7, r3
 8007bce:	d116      	bne.n	8007bfe <rt_test_010_002_execute+0x6e>
  php->next = mp->next;
 8007bd0:	f8db 3000 	ldr.w	r3, [fp]
 8007bd4:	603b      	str	r3, [r7, #0]
  mp->next = php;
 8007bd6:	f8cb 7000 	str.w	r7, [fp]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007bda:	2a00      	cmp	r2, #0
 8007bdc:	f040 809d 	bne.w	8007d1a <rt_test_010_002_execute+0x18a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007be0:	6823      	ldr	r3, [r4, #0]
  _dbg_leave_lock();
 8007be2:	6362      	str	r2, [r4, #52]	; 0x34
 8007be4:	42a3      	cmp	r3, r4
 8007be6:	d00d      	beq.n	8007c04 <rt_test_010_002_execute+0x74>
 8007be8:	689a      	ldr	r2, [r3, #8]
 8007bea:	69a3      	ldr	r3, [r4, #24]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d208      	bcs.n	8007c04 <rt_test_010_002_execute+0x74>
 8007bf2:	485b      	ldr	r0, [pc, #364]	; (8007d60 <rt_test_010_002_execute+0x1d0>)
 8007bf4:	f7f8 fdbc 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 8007bf8:	485a      	ldr	r0, [pc, #360]	; (8007d64 <rt_test_010_002_execute+0x1d4>)
 8007bfa:	f7f8 fdb9 	bl	8000770 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 8007bfe:	485a      	ldr	r0, [pc, #360]	; (8007d68 <rt_test_010_002_execute+0x1d8>)
 8007c00:	f7f8 fdb6 	bl	8000770 <chSysHalt>
 8007c04:	f38a 8811 	msr	BASEPRI, sl
  {
    for (i = 0; i < 4; i++)
 8007c08:	45b1      	cmp	r9, r6
 8007c0a:	f040 809b 	bne.w	8007d44 <rt_test_010_002_execute+0x1b4>
    prio = chThdGetPriorityX();
  }
  test_end_step(2);

  /* [10.2.3] Creating the five threads.*/
  test_set_step(3);
 8007c0e:	2303      	movs	r3, #3
 8007c10:	69a1      	ldr	r1, [r4, #24]
  {
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c12:	4a56      	ldr	r2, [pc, #344]	; (8007d6c <rt_test_010_002_execute+0x1dc>)
 8007c14:	688f      	ldr	r7, [r1, #8]
 8007c16:	4856      	ldr	r0, [pc, #344]	; (8007d70 <rt_test_010_002_execute+0x1e0>)
 8007c18:	1e79      	subs	r1, r7, #1
  test_set_step(3);
 8007c1a:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c1c:	f005 f940 	bl	800cea0 <chThdCreateFromMemoryPool.constprop.0>
 8007c20:	4e54      	ldr	r6, [pc, #336]	; (8007d74 <rt_test_010_002_execute+0x1e4>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c22:	4a55      	ldr	r2, [pc, #340]	; (8007d78 <rt_test_010_002_execute+0x1e8>)
    threads[0] = chThdCreateFromMemoryPool(&mp1, "dyn1", prio-1, dyn_thread1, "A");
 8007c24:	6030      	str	r0, [r6, #0]
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c26:	1eb9      	subs	r1, r7, #2
 8007c28:	4854      	ldr	r0, [pc, #336]	; (8007d7c <rt_test_010_002_execute+0x1ec>)
 8007c2a:	f005 f939 	bl	800cea0 <chThdCreateFromMemoryPool.constprop.0>
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c2e:	4a54      	ldr	r2, [pc, #336]	; (8007d80 <rt_test_010_002_execute+0x1f0>)
    threads[1] = chThdCreateFromMemoryPool(&mp1, "dyn2", prio-2, dyn_thread1, "B");
 8007c30:	6070      	str	r0, [r6, #4]
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c32:	1ef9      	subs	r1, r7, #3
 8007c34:	4853      	ldr	r0, [pc, #332]	; (8007d84 <rt_test_010_002_execute+0x1f4>)
 8007c36:	f005 f933 	bl	800cea0 <chThdCreateFromMemoryPool.constprop.0>
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c3a:	4a53      	ldr	r2, [pc, #332]	; (8007d88 <rt_test_010_002_execute+0x1f8>)
    threads[2] = chThdCreateFromMemoryPool(&mp1, "dyn3", prio-3, dyn_thread1, "C");
 8007c3c:	60b0      	str	r0, [r6, #8]
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c3e:	1f39      	subs	r1, r7, #4
 8007c40:	4852      	ldr	r0, [pc, #328]	; (8007d8c <rt_test_010_002_execute+0x1fc>)
 8007c42:	f005 f92d 	bl	800cea0 <chThdCreateFromMemoryPool.constprop.0>
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c46:	4a52      	ldr	r2, [pc, #328]	; (8007d90 <rt_test_010_002_execute+0x200>)
    threads[3] = chThdCreateFromMemoryPool(&mp1, "dyn4", prio-4, dyn_thread1, "D");
 8007c48:	60f0      	str	r0, [r6, #12]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c4a:	1f79      	subs	r1, r7, #5
 8007c4c:	4851      	ldr	r0, [pc, #324]	; (8007d94 <rt_test_010_002_execute+0x204>)
 8007c4e:	f005 f927 	bl	800cea0 <chThdCreateFromMemoryPool.constprop.0>
  }
  test_end_step(3);

  /* [10.2.4] Testing that only the fifth thread creation failed.*/
  test_set_step(4);
 8007c52:	f04f 0804 	mov.w	r8, #4
  {
    test_assert((threads[0] != NULL) &&
 8007c56:	6833      	ldr	r3, [r6, #0]
  test_set_step(4);
 8007c58:	f8c5 8000 	str.w	r8, [r5]
    threads[4] = chThdCreateFromMemoryPool(&mp1, "dyn5", prio-5, dyn_thread1, "E");
 8007c5c:	6130      	str	r0, [r6, #16]
    test_assert((threads[0] != NULL) &&
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d051      	beq.n	8007d06 <rt_test_010_002_execute+0x176>
 8007c62:	6873      	ldr	r3, [r6, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d04e      	beq.n	8007d06 <rt_test_010_002_execute+0x176>
 8007c68:	68b3      	ldr	r3, [r6, #8]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d04b      	beq.n	8007d06 <rt_test_010_002_execute+0x176>
 8007c6e:	68f3      	ldr	r3, [r6, #12]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d048      	beq.n	8007d06 <rt_test_010_002_execute+0x176>
  if (!condition)
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d153      	bne.n	8007d20 <rt_test_010_002_execute+0x190>
  }
  test_end_step(4);

  /* [10.2.5] Letting them run, free the memory then checking the
     execution sequence.*/
  test_set_step(5);
 8007c78:	2305      	movs	r3, #5
 8007c7a:	602b      	str	r3, [r5, #0]
  {
    test_wait_threads();
 8007c7c:	f7ff f930 	bl	8006ee0 <test_wait_threads>
    test_assert_sequence("ABCD", "invalid sequence");
 8007c80:	4945      	ldr	r1, [pc, #276]	; (8007d98 <rt_test_010_002_execute+0x208>)
 8007c82:	4846      	ldr	r0, [pc, #280]	; (8007d9c <rt_test_010_002_execute+0x20c>)
 8007c84:	f7fe fc0c 	bl	80064a0 <_test_assert_sequence>
 8007c88:	4606      	mov	r6, r0
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	d143      	bne.n	8007d16 <rt_test_010_002_execute+0x186>
  }
  test_end_step(5);

  /* [10.2.6] Testing that the pool contains four elements again.*/
  test_set_step(6);
 8007c8e:	2306      	movs	r3, #6
 8007c90:	f04f 0920 	mov.w	r9, #32
  objp = chPoolAllocI(mp);
 8007c94:	4f31      	ldr	r7, [pc, #196]	; (8007d5c <rt_test_010_002_execute+0x1cc>)
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 8007c9c:	f7f8 fdc0 	bl	8000820 <_dbg_check_lock>
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f7fc fdb5 	bl	8004810 <chPoolAllocI>
 8007ca6:	4605      	mov	r5, r0
  _dbg_check_unlock();
 8007ca8:	f7f8 fdca 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007cac:	6823      	ldr	r3, [r4, #0]
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	d004      	beq.n	8007cbc <rt_test_010_002_execute+0x12c>
 8007cb2:	69a2      	ldr	r2, [r4, #24]
 8007cb4:	689b      	ldr	r3, [r3, #8]
 8007cb6:	6892      	ldr	r2, [r2, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d39a      	bcc.n	8007bf2 <rt_test_010_002_execute+0x62>
 8007cbc:	f386 8811 	msr	BASEPRI, r6
 8007cc0:	2d00      	cmp	r5, #0
 8007cc2:	d036      	beq.n	8007d32 <rt_test_010_002_execute+0x1a2>
  {
    for (i = 0; i < 4; i++)
 8007cc4:	f1b8 0801 	subs.w	r8, r8, #1
 8007cc8:	d1e6      	bne.n	8007c98 <rt_test_010_002_execute+0x108>
 8007cca:	2320      	movs	r3, #32
 8007ccc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007cd0:	f7f8 fda6 	bl	8000820 <_dbg_check_lock>
 8007cd4:	4821      	ldr	r0, [pc, #132]	; (8007d5c <rt_test_010_002_execute+0x1cc>)
 8007cd6:	f7fc fd9b 	bl	8004810 <chPoolAllocI>
 8007cda:	4605      	mov	r5, r0
  _dbg_check_unlock();
 8007cdc:	f7f8 fdb0 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	42a3      	cmp	r3, r4
 8007ce4:	d004      	beq.n	8007cf0 <rt_test_010_002_execute+0x160>
 8007ce6:	69a2      	ldr	r2, [r4, #24]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	6892      	ldr	r2, [r2, #8]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d380      	bcc.n	8007bf2 <rt_test_010_002_execute+0x62>
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f383 8811 	msr	BASEPRI, r3
      test_assert(chPoolAlloc(&mp1) != NULL, "pool list empty");
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007cf6:	fab5 f085 	clz	r0, r5
  }
  test_end_step(6);
}
 8007cfa:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "pool list not empty");
 8007cfe:	4928      	ldr	r1, [pc, #160]	; (8007da0 <rt_test_010_002_execute+0x210>)
 8007d00:	0940      	lsrs	r0, r0, #5
 8007d02:	f7fd bddd 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 8007d06:	2301      	movs	r3, #1
 8007d08:	4926      	ldr	r1, [pc, #152]	; (8007da4 <rt_test_010_002_execute+0x214>)
  test_global_fail     = true;
 8007d0a:	4a27      	ldr	r2, [pc, #156]	; (8007da8 <rt_test_010_002_execute+0x218>)
  test_failure_message = msg;
 8007d0c:	4827      	ldr	r0, [pc, #156]	; (8007dac <rt_test_010_002_execute+0x21c>)
 8007d0e:	4c28      	ldr	r4, [pc, #160]	; (8007db0 <rt_test_010_002_execute+0x220>)
  test_local_fail      = true;
 8007d10:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007d12:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007d14:	7013      	strb	r3, [r2, #0]
}
 8007d16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chSysHalt("SV#5");
 8007d1a:	4826      	ldr	r0, [pc, #152]	; (8007db4 <rt_test_010_002_execute+0x224>)
 8007d1c:	f7f8 fd28 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 8007d20:	2301      	movs	r3, #1
 8007d22:	4920      	ldr	r1, [pc, #128]	; (8007da4 <rt_test_010_002_execute+0x214>)
  test_global_fail     = true;
 8007d24:	4a20      	ldr	r2, [pc, #128]	; (8007da8 <rt_test_010_002_execute+0x218>)
  test_failure_message = msg;
 8007d26:	4821      	ldr	r0, [pc, #132]	; (8007dac <rt_test_010_002_execute+0x21c>)
 8007d28:	4c23      	ldr	r4, [pc, #140]	; (8007db8 <rt_test_010_002_execute+0x228>)
  test_local_fail      = true;
 8007d2a:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007d2c:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007d2e:	7013      	strb	r3, [r2, #0]
 8007d30:	e7f1      	b.n	8007d16 <rt_test_010_002_execute+0x186>
  test_local_fail      = true;
 8007d32:	2301      	movs	r3, #1
 8007d34:	491b      	ldr	r1, [pc, #108]	; (8007da4 <rt_test_010_002_execute+0x214>)
  test_global_fail     = true;
 8007d36:	4a1c      	ldr	r2, [pc, #112]	; (8007da8 <rt_test_010_002_execute+0x218>)
  test_failure_message = msg;
 8007d38:	481c      	ldr	r0, [pc, #112]	; (8007dac <rt_test_010_002_execute+0x21c>)
 8007d3a:	4c20      	ldr	r4, [pc, #128]	; (8007dbc <rt_test_010_002_execute+0x22c>)
  test_local_fail      = true;
 8007d3c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007d3e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007d40:	7013      	strb	r3, [r2, #0]
 8007d42:	e7e8      	b.n	8007d16 <rt_test_010_002_execute+0x186>
      chPoolFree(&mp1, wa[i]);
 8007d44:	f856 7b04 	ldr.w	r7, [r6], #4
 8007d48:	e732      	b.n	8007bb0 <rt_test_010_002_execute+0x20>
 8007d4a:	bf00      	nop
 8007d4c:	20001d3c 	.word	0x20001d3c
 8007d50:	08011874 	.word	0x08011874
 8007d54:	200016c8 	.word	0x200016c8
 8007d58:	20000d70 	.word	0x20000d70
 8007d5c:	20001698 	.word	0x20001698
 8007d60:	08010e40 	.word	0x08010e40
 8007d64:	0800f22c 	.word	0x0800f22c
 8007d68:	08010cf8 	.word	0x08010cf8
 8007d6c:	0800f730 	.word	0x0800f730
 8007d70:	0800ff94 	.word	0x0800ff94
 8007d74:	20001d54 	.word	0x20001d54
 8007d78:	0800f734 	.word	0x0800f734
 8007d7c:	0800ffc4 	.word	0x0800ffc4
 8007d80:	0800ff64 	.word	0x0800ff64
 8007d84:	0800ffcc 	.word	0x0800ffcc
 8007d88:	08010ad0 	.word	0x08010ad0
 8007d8c:	08010048 	.word	0x08010048
 8007d90:	0800ff6c 	.word	0x0800ff6c
 8007d94:	08010050 	.word	0x08010050
 8007d98:	0800f788 	.word	0x0800f788
 8007d9c:	0800ff8c 	.word	0x0800ff8c
 8007da0:	08010068 	.word	0x08010068
 8007da4:	20001d39 	.word	0x20001d39
 8007da8:	20001d38 	.word	0x20001d38
 8007dac:	20001d34 	.word	0x20001d34
 8007db0:	0800ffac 	.word	0x0800ffac
 8007db4:	0800f214 	.word	0x0800f214
 8007db8:	0800ffd4 	.word	0x0800ffd4
 8007dbc:	08010058 	.word	0x08010058

08007dc0 <test_wait_tick>:

/*
 * Delays execution until next system time tick.
 */
systime_t test_wait_tick(void) {
 8007dc0:	b508      	push	{r3, lr}

  chThdSleep(1);
 8007dc2:	2001      	movs	r0, #1
 8007dc4:	f7fb f92c 	bl	8003020 <chThdSleep>
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007dce:	4b0d      	ldr	r3, [pc, #52]	; (8007e04 <test_wait_tick+0x44>)
 8007dd0:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	d10f      	bne.n	8007df8 <test_wait_tick+0x38>
 8007dd8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007ddc:	681a      	ldr	r2, [r3, #0]
 8007dde:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d004      	beq.n	8007dee <test_wait_tick+0x2e>
 8007de4:	6999      	ldr	r1, [r3, #24]
 8007de6:	6893      	ldr	r3, [r2, #8]
 8007de8:	688a      	ldr	r2, [r1, #8]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d307      	bcc.n	8007dfe <test_wait_tick+0x3e>
 8007dee:	2300      	movs	r3, #0
 8007df0:	f383 8811 	msr	BASEPRI, r3
  return chVTGetSystemTime();
}
 8007df4:	b280      	uxth	r0, r0
 8007df6:	bd08      	pop	{r3, pc}
    chSysHalt("SV#4");
 8007df8:	4803      	ldr	r0, [pc, #12]	; (8007e08 <test_wait_tick+0x48>)
 8007dfa:	f7f8 fcb9 	bl	8000770 <chSysHalt>
 8007dfe:	4803      	ldr	r0, [pc, #12]	; (8007e0c <test_wait_tick+0x4c>)
 8007e00:	f7f8 fcb6 	bl	8000770 <chSysHalt>
 8007e04:	20000d70 	.word	0x20000d70
 8007e08:	0800f20c 	.word	0x0800f20c
 8007e0c:	08010bc8 	.word	0x08010bc8

08007e10 <rt_test_006_003_execute>:
  test_set_step(1);
 8007e10:	2201      	movs	r2, #1
static void rt_test_006_003_execute(void) {
 8007e12:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8007e16:	4f79      	ldr	r7, [pc, #484]	; (8007ffc <rt_test_006_003_execute+0x1ec>)
 8007e18:	2320      	movs	r3, #32
 8007e1a:	603a      	str	r2, [r7, #0]
 8007e1c:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007e20:	4c77      	ldr	r4, [pc, #476]	; (8008000 <rt_test_006_003_execute+0x1f0>)
  _dbg_check_lock();
 8007e22:	f7f8 fcfd 	bl	8000820 <_dbg_check_lock>
 8007e26:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8007e28:	b96d      	cbnz	r5, 8007e46 <rt_test_006_003_execute+0x36>
 8007e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dd0a      	ble.n	8007e46 <rt_test_006_003_execute+0x36>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8007e30:	4e74      	ldr	r6, [pc, #464]	; (8008004 <rt_test_006_003_execute+0x1f4>)
 8007e32:	68b3      	ldr	r3, [r6, #8]
  return (bool)(qp->next == qp);
 8007e34:	6832      	ldr	r2, [r6, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	f2c0 80ba 	blt.w	8007fb0 <rt_test_006_003_execute+0x1a0>
 8007e3c:	42b2      	cmp	r2, r6
 8007e3e:	d005      	beq.n	8007e4c <rt_test_006_003_execute+0x3c>
 8007e40:	4871      	ldr	r0, [pc, #452]	; (8008008 <rt_test_006_003_execute+0x1f8>)
 8007e42:	f7f8 fc95 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8007e46:	4871      	ldr	r0, [pc, #452]	; (800800c <rt_test_006_003_execute+0x1fc>)
 8007e48:	f7f8 fc92 	bl	8000770 <chSysHalt>
  if (--sp->cnt < (cnt_t)0) {
 8007e4c:	1e5a      	subs	r2, r3, #1
 8007e4e:	60b2      	str	r2, [r6, #8]
 8007e50:	3201      	adds	r2, #1
 8007e52:	f000 80b0 	beq.w	8007fb6 <rt_test_006_003_execute+0x1a6>
  _dbg_check_unlock();
 8007e56:	f7f8 fcf3 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	42a3      	cmp	r3, r4
 8007e5e:	d005      	beq.n	8007e6c <rt_test_006_003_execute+0x5c>
 8007e60:	69a2      	ldr	r2, [r4, #24]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	6892      	ldr	r2, [r2, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	f0c0 80b3 	bcc.w	8007fd2 <rt_test_006_003_execute+0x1c2>
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 8007e72:	3501      	adds	r5, #1
 8007e74:	f040 80a3 	bne.w	8007fbe <rt_test_006_003_execute+0x1ae>
 8007e78:	6833      	ldr	r3, [r6, #0]
 8007e7a:	42b3      	cmp	r3, r6
 8007e7c:	f040 80b5 	bne.w	8007fea <rt_test_006_003_execute+0x1da>
 8007e80:	68b3      	ldr	r3, [r6, #8]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f040 80a8 	bne.w	8007fd8 <rt_test_006_003_execute+0x1c8>
  test_set_step(2);
 8007e88:	2502      	movs	r5, #2
 8007e8a:	69a2      	ldr	r2, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007e8c:	4860      	ldr	r0, [pc, #384]	; (8008010 <rt_test_006_003_execute+0x200>)
 8007e8e:	6891      	ldr	r1, [r2, #8]
 8007e90:	4a60      	ldr	r2, [pc, #384]	; (8008014 <rt_test_006_003_execute+0x204>)
 8007e92:	3901      	subs	r1, #1
  test_set_step(2);
 8007e94:	603d      	str	r5, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8007e96:	f005 f933 	bl	800d100 <chThdCreateStatic.constprop.0>
 8007e9a:	4a5f      	ldr	r2, [pc, #380]	; (8008018 <rt_test_006_003_execute+0x208>)
 8007e9c:	2320      	movs	r3, #32
 8007e9e:	6010      	str	r0, [r2, #0]
 8007ea0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007ea4:	f7f8 fcbc 	bl	8000820 <_dbg_check_lock>
  msg = chSemWaitTimeoutS(sp, timeout);
 8007ea8:	f241 3188 	movw	r1, #5000	; 0x1388
 8007eac:	4630      	mov	r0, r6
 8007eae:	f7fa fe0f 	bl	8002ad0 <chSemWaitTimeoutS>
 8007eb2:	4605      	mov	r5, r0
  _dbg_check_unlock();
 8007eb4:	f7f8 fcc4 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007eb8:	6823      	ldr	r3, [r4, #0]
 8007eba:	42a3      	cmp	r3, r4
 8007ebc:	d005      	beq.n	8007eca <rt_test_006_003_execute+0xba>
 8007ebe:	69a2      	ldr	r2, [r4, #24]
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	6892      	ldr	r2, [r2, #8]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	f0c0 8084 	bcc.w	8007fd2 <rt_test_006_003_execute+0x1c2>
 8007eca:	2300      	movs	r3, #0
 8007ecc:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 8007ed0:	f7ff f806 	bl	8006ee0 <test_wait_threads>
 8007ed4:	2d00      	cmp	r5, #0
 8007ed6:	d172      	bne.n	8007fbe <rt_test_006_003_execute+0x1ae>
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	42b3      	cmp	r3, r6
 8007edc:	f040 8085 	bne.w	8007fea <rt_test_006_003_execute+0x1da>
    test_assert(sem1.cnt == 0, "counter not zero");
 8007ee0:	68b0      	ldr	r0, [r6, #8]
 8007ee2:	494e      	ldr	r1, [pc, #312]	; (800801c <rt_test_006_003_execute+0x20c>)
 8007ee4:	fab0 f080 	clz	r0, r0
 8007ee8:	0940      	lsrs	r0, r0, #5
 8007eea:	f7fd fce9 	bl	80058c0 <_test_assert>
 8007eee:	2800      	cmp	r0, #0
 8007ef0:	d16d      	bne.n	8007fce <rt_test_006_003_execute+0x1be>
  test_set_step(3);
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	603b      	str	r3, [r7, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(5 * 50));
 8007ef6:	f7ff ff63 	bl	8007dc0 <test_wait_tick>
 8007efa:	2541      	movs	r5, #65	; 0x41
 8007efc:	4683      	mov	fp, r0
 8007efe:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8008004 <rt_test_006_003_execute+0x1f4>
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8007f02:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8008020 <rt_test_006_003_execute+0x210>
      test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 8007f06:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8008024 <rt_test_006_003_execute+0x214>
      test_emit_token('A' + i);
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f7fe fb58 	bl	80065c0 <test_emit_token>
 8007f10:	2320      	movs	r3, #32
 8007f12:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007f16:	f7f8 fc83 	bl	8000820 <_dbg_check_lock>
 8007f1a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7fa fdd6 	bl	8002ad0 <chSemWaitTimeoutS>
 8007f24:	4607      	mov	r7, r0
  _dbg_check_unlock();
 8007f26:	f7f8 fc8b 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8007f2a:	6823      	ldr	r3, [r4, #0]
 8007f2c:	42a3      	cmp	r3, r4
 8007f2e:	d004      	beq.n	8007f3a <rt_test_006_003_execute+0x12a>
 8007f30:	69a2      	ldr	r2, [r4, #24]
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	6892      	ldr	r2, [r2, #8]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d34b      	bcc.n	8007fd2 <rt_test_006_003_execute+0x1c2>
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f383 8811 	msr	BASEPRI, r3
      test_assert(msg == MSG_TIMEOUT, "wrong wake-up message");
 8007f40:	f1a7 30ff 	sub.w	r0, r7, #4294967295	; 0xffffffff
 8007f44:	fab0 f080 	clz	r0, r0
 8007f48:	4651      	mov	r1, sl
 8007f4a:	0940      	lsrs	r0, r0, #5
 8007f4c:	f7fd fcb8 	bl	80058c0 <_test_assert>
 8007f50:	2800      	cmp	r0, #0
 8007f52:	d13c      	bne.n	8007fce <rt_test_006_003_execute+0x1be>
 8007f54:	6830      	ldr	r0, [r6, #0]
      test_assert(ch_queue_isempty(&sem1.queue), "queue not empty");
 8007f56:	4649      	mov	r1, r9
 8007f58:	1b80      	subs	r0, r0, r6
 8007f5a:	fab0 f080 	clz	r0, r0
 8007f5e:	0940      	lsrs	r0, r0, #5
 8007f60:	f7fd fcae 	bl	80058c0 <_test_assert>
 8007f64:	2800      	cmp	r0, #0
 8007f66:	d132      	bne.n	8007fce <rt_test_006_003_execute+0x1be>
      test_assert(sem1.cnt == 0, "counter not zero");
 8007f68:	68b0      	ldr	r0, [r6, #8]
 8007f6a:	492c      	ldr	r1, [pc, #176]	; (800801c <rt_test_006_003_execute+0x20c>)
 8007f6c:	fab0 f080 	clz	r0, r0
 8007f70:	0940      	lsrs	r0, r0, #5
 8007f72:	f7fd fca5 	bl	80058c0 <_test_assert>
 8007f76:	bb50      	cbnz	r0, 8007fce <rt_test_006_003_execute+0x1be>
    for (i = 0; i < 5; i++) {
 8007f78:	3501      	adds	r5, #1
 8007f7a:	b2ed      	uxtb	r5, r5
 8007f7c:	2d46      	cmp	r5, #70	; 0x46
 8007f7e:	d1c4      	bne.n	8007f0a <rt_test_006_003_execute+0xfa>
    test_assert_sequence("ABCDE", "invalid sequence");
 8007f80:	4929      	ldr	r1, [pc, #164]	; (8008028 <rt_test_006_003_execute+0x218>)
 8007f82:	482a      	ldr	r0, [pc, #168]	; (800802c <rt_test_006_003_execute+0x21c>)
 8007f84:	f7fe fa8c 	bl	80064a0 <_test_assert_sequence>
 8007f88:	bb08      	cbnz	r0, 8007fce <rt_test_006_003_execute+0x1be>
 8007f8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f90:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8007f94:	eba3 030b 	sub.w	r3, r3, fp
 8007f98:	b29b      	uxth	r3, r3
 8007f9a:	2b13      	cmp	r3, #19
 8007f9c:	d917      	bls.n	8007fce <rt_test_006_003_execute+0x1be>
  test_local_fail      = true;
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4923      	ldr	r1, [pc, #140]	; (8008030 <rt_test_006_003_execute+0x220>)
  test_global_fail     = true;
 8007fa2:	4a24      	ldr	r2, [pc, #144]	; (8008034 <rt_test_006_003_execute+0x224>)
  test_failure_message = msg;
 8007fa4:	4824      	ldr	r0, [pc, #144]	; (8008038 <rt_test_006_003_execute+0x228>)
 8007fa6:	4c25      	ldr	r4, [pc, #148]	; (800803c <rt_test_006_003_execute+0x22c>)
  test_local_fail      = true;
 8007fa8:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007faa:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007fac:	7013      	strb	r3, [r2, #0]
 8007fae:	e00e      	b.n	8007fce <rt_test_006_003_execute+0x1be>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 8007fb0:	42b2      	cmp	r2, r6
 8007fb2:	f43f af45 	beq.w	8007e40 <rt_test_006_003_execute+0x30>
      return MSG_TIMEOUT;
 8007fb6:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
      sp->cnt++;
 8007fba:	60b3      	str	r3, [r6, #8]
 8007fbc:	e74b      	b.n	8007e56 <rt_test_006_003_execute+0x46>
  test_local_fail      = true;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	491b      	ldr	r1, [pc, #108]	; (8008030 <rt_test_006_003_execute+0x220>)
  test_global_fail     = true;
 8007fc2:	4a1c      	ldr	r2, [pc, #112]	; (8008034 <rt_test_006_003_execute+0x224>)
  test_failure_message = msg;
 8007fc4:	481c      	ldr	r0, [pc, #112]	; (8008038 <rt_test_006_003_execute+0x228>)
 8007fc6:	4c16      	ldr	r4, [pc, #88]	; (8008020 <rt_test_006_003_execute+0x210>)
  test_local_fail      = true;
 8007fc8:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007fca:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007fcc:	7013      	strb	r3, [r2, #0]
}
 8007fce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd2:	481b      	ldr	r0, [pc, #108]	; (8008040 <rt_test_006_003_execute+0x230>)
 8007fd4:	f7f8 fbcc 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 8007fd8:	2301      	movs	r3, #1
 8007fda:	4915      	ldr	r1, [pc, #84]	; (8008030 <rt_test_006_003_execute+0x220>)
  test_global_fail     = true;
 8007fdc:	4a15      	ldr	r2, [pc, #84]	; (8008034 <rt_test_006_003_execute+0x224>)
  test_failure_message = msg;
 8007fde:	4816      	ldr	r0, [pc, #88]	; (8008038 <rt_test_006_003_execute+0x228>)
 8007fe0:	4c0e      	ldr	r4, [pc, #56]	; (800801c <rt_test_006_003_execute+0x20c>)
  test_local_fail      = true;
 8007fe2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007fe4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007fe6:	7013      	strb	r3, [r2, #0]
 8007fe8:	e7f1      	b.n	8007fce <rt_test_006_003_execute+0x1be>
  test_local_fail      = true;
 8007fea:	2301      	movs	r3, #1
 8007fec:	4910      	ldr	r1, [pc, #64]	; (8008030 <rt_test_006_003_execute+0x220>)
  test_global_fail     = true;
 8007fee:	4a11      	ldr	r2, [pc, #68]	; (8008034 <rt_test_006_003_execute+0x224>)
  test_failure_message = msg;
 8007ff0:	4811      	ldr	r0, [pc, #68]	; (8008038 <rt_test_006_003_execute+0x228>)
 8007ff2:	4c0c      	ldr	r4, [pc, #48]	; (8008024 <rt_test_006_003_execute+0x214>)
  test_local_fail      = true;
 8007ff4:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8007ff6:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8007ff8:	7013      	strb	r3, [r2, #0]
 8007ffa:	e7e8      	b.n	8007fce <rt_test_006_003_execute+0x1be>
 8007ffc:	20001d3c 	.word	0x20001d3c
 8008000:	20000d70 	.word	0x20000d70
 8008004:	200016a8 	.word	0x200016a8
 8008008:	08010f34 	.word	0x08010f34
 800800c:	0800f204 	.word	0x0800f204
 8008010:	200016c8 	.word	0x200016c8
 8008014:	08003891 	.word	0x08003891
 8008018:	20001d54 	.word	0x20001d54
 800801c:	0800f6dc 	.word	0x0800f6dc
 8008020:	0801007c 	.word	0x0801007c
 8008024:	0800f6cc 	.word	0x0800f6cc
 8008028:	0800f788 	.word	0x0800f788
 800802c:	0800ff68 	.word	0x0800ff68
 8008030:	20001d39 	.word	0x20001d39
 8008034:	20001d38 	.word	0x20001d38
 8008038:	20001d34 	.word	0x20001d34
 800803c:	0800f294 	.word	0x0800f294
 8008040:	08011028 	.word	0x08011028
	...

08008050 <rt_test_009_003_execute>:
  test_set_step(1);
 8008050:	2201      	movs	r2, #1
static void rt_test_009_003_execute(void) {
 8008052:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8008054:	4d40      	ldr	r5, [pc, #256]	; (8008158 <rt_test_009_003_execute+0x108>)
 8008056:	2320      	movs	r3, #32
 8008058:	602a      	str	r2, [r5, #0]
 800805a:	f383 8811 	msr	BASEPRI, r3
 *
 * @iclass
 */
static inline eventmask_t chEvtAddEventsI(eventmask_t events) {

  return currp->epending |= events;
 800805e:	4c3f      	ldr	r4, [pc, #252]	; (800815c <rt_test_009_003_execute+0x10c>)
  _dbg_check_lock();
 8008060:	f7f8 fbde 	bl	8000820 <_dbg_check_lock>
 8008064:	69a2      	ldr	r2, [r4, #24]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008066:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008068:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800806a:	f043 0307 	orr.w	r3, r3, #7
 800806e:	6353      	str	r3, [r2, #52]	; 0x34
 8008070:	2900      	cmp	r1, #0
 8008072:	d152      	bne.n	800811a <rt_test_009_003_execute+0xca>
 8008074:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008076:	2b00      	cmp	r3, #0
 8008078:	dd4f      	ble.n	800811a <rt_test_009_003_execute+0xca>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800807a:	6823      	ldr	r3, [r4, #0]
  _dbg_leave_lock();
 800807c:	6361      	str	r1, [r4, #52]	; 0x34
 800807e:	42a3      	cmp	r3, r4
 8008080:	d003      	beq.n	800808a <rt_test_009_003_execute+0x3a>
 8008082:	6892      	ldr	r2, [r2, #8]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	429a      	cmp	r2, r3
 8008088:	d34a      	bcc.n	8008120 <rt_test_009_003_execute+0xd0>
 800808a:	2300      	movs	r3, #0
 800808c:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 8008090:	2302      	movs	r3, #2
 8008092:	602b      	str	r3, [r5, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 8008094:	f004 ff64 	bl	800cf60 <chEvtWaitOne.constprop.0>
  if (!condition)
 8008098:	2801      	cmp	r0, #1
 800809a:	4606      	mov	r6, r0
 800809c:	d143      	bne.n	8008126 <rt_test_009_003_execute+0xd6>
    m = chEvtWaitOne(ALL_EVENTS);
 800809e:	f004 ff5f 	bl	800cf60 <chEvtWaitOne.constprop.0>
 80080a2:	2802      	cmp	r0, #2
 80080a4:	d13f      	bne.n	8008126 <rt_test_009_003_execute+0xd6>
    m = chEvtWaitOne(ALL_EVENTS);
 80080a6:	f004 ff5b 	bl	800cf60 <chEvtWaitOne.constprop.0>
 80080aa:	2804      	cmp	r0, #4
 80080ac:	4607      	mov	r7, r0
 80080ae:	d13a      	bne.n	8008126 <rt_test_009_003_execute+0xd6>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 80080b0:	f004 ff8e 	bl	800cfd0 <chEvtGetAndClearEvents.constprop.0>
 80080b4:	2800      	cmp	r0, #0
 80080b6:	d13f      	bne.n	8008138 <rt_test_009_003_execute+0xe8>
  test_set_step(3);
 80080b8:	2303      	movs	r3, #3
 80080ba:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80080bc:	f7ff fe80 	bl	8007dc0 <test_wait_tick>
 80080c0:	4684      	mov	ip, r0
  return ch.rlist.current;
 80080c2:	69a3      	ldr	r3, [r4, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80080c4:	4a26      	ldr	r2, [pc, #152]	; (8008160 <rt_test_009_003_execute+0x110>)
 80080c6:	6899      	ldr	r1, [r3, #8]
 80080c8:	4826      	ldr	r0, [pc, #152]	; (8008164 <rt_test_009_003_execute+0x114>)
 80080ca:	3901      	subs	r1, #1
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80080cc:	4664      	mov	r4, ip
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80080ce:	f005 f817 	bl	800d100 <chThdCreateStatic.constprop.0>
 80080d2:	4b25      	ldr	r3, [pc, #148]	; (8008168 <rt_test_009_003_execute+0x118>)
  test_set_step(4);
 80080d4:	602f      	str	r7, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80080d6:	6018      	str	r0, [r3, #0]
    m = chEvtWaitOne(ALL_EVENTS);
 80080d8:	f004 ff42 	bl	800cf60 <chEvtWaitOne.constprop.0>
 80080dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80080e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e2:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80080e6:	1b1b      	subs	r3, r3, r4
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	2b13      	cmp	r3, #19
 80080ec:	d82c      	bhi.n	8008148 <rt_test_009_003_execute+0xf8>
    test_assert(m == 1, "event flag error");
 80080ee:	f1a0 0001 	sub.w	r0, r0, #1
 80080f2:	fab0 f080 	clz	r0, r0
 80080f6:	491d      	ldr	r1, [pc, #116]	; (800816c <rt_test_009_003_execute+0x11c>)
 80080f8:	0940      	lsrs	r0, r0, #5
 80080fa:	f7fd fbe1 	bl	80058c0 <_test_assert>
 80080fe:	b9d0      	cbnz	r0, 8008136 <rt_test_009_003_execute+0xe6>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008100:	f004 ff66 	bl	800cfd0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8008104:	fab0 f080 	clz	r0, r0
 8008108:	4919      	ldr	r1, [pc, #100]	; (8008170 <rt_test_009_003_execute+0x120>)
 800810a:	0940      	lsrs	r0, r0, #5
 800810c:	f7fd fbd8 	bl	80058c0 <_test_assert>
 8008110:	b988      	cbnz	r0, 8008136 <rt_test_009_003_execute+0xe6>
}
 8008112:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_wait_threads();
 8008116:	f7fe bee3 	b.w	8006ee0 <test_wait_threads>
    chSysHalt("SV#5");
 800811a:	4816      	ldr	r0, [pc, #88]	; (8008174 <rt_test_009_003_execute+0x124>)
 800811c:	f7f8 fb28 	bl	8000770 <chSysHalt>
 8008120:	4815      	ldr	r0, [pc, #84]	; (8008178 <rt_test_009_003_execute+0x128>)
 8008122:	f7f8 fb25 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 8008126:	2301      	movs	r3, #1
 8008128:	4914      	ldr	r1, [pc, #80]	; (800817c <rt_test_009_003_execute+0x12c>)
  test_global_fail     = true;
 800812a:	4a15      	ldr	r2, [pc, #84]	; (8008180 <rt_test_009_003_execute+0x130>)
  test_failure_message = msg;
 800812c:	4815      	ldr	r0, [pc, #84]	; (8008184 <rt_test_009_003_execute+0x134>)
 800812e:	4c16      	ldr	r4, [pc, #88]	; (8008188 <rt_test_009_003_execute+0x138>)
  test_local_fail      = true;
 8008130:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8008132:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8008134:	7013      	strb	r3, [r2, #0]
}
 8008136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8008138:	4810      	ldr	r0, [pc, #64]	; (800817c <rt_test_009_003_execute+0x12c>)
  test_global_fail     = true;
 800813a:	4911      	ldr	r1, [pc, #68]	; (8008180 <rt_test_009_003_execute+0x130>)
  test_failure_message = msg;
 800813c:	4b11      	ldr	r3, [pc, #68]	; (8008184 <rt_test_009_003_execute+0x134>)
 800813e:	4a0c      	ldr	r2, [pc, #48]	; (8008170 <rt_test_009_003_execute+0x120>)
  test_local_fail      = true;
 8008140:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8008142:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8008144:	601a      	str	r2, [r3, #0]
 8008146:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 8008148:	480c      	ldr	r0, [pc, #48]	; (800817c <rt_test_009_003_execute+0x12c>)
  test_global_fail     = true;
 800814a:	490d      	ldr	r1, [pc, #52]	; (8008180 <rt_test_009_003_execute+0x130>)
  test_failure_message = msg;
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <rt_test_009_003_execute+0x134>)
 800814e:	4a0f      	ldr	r2, [pc, #60]	; (800818c <rt_test_009_003_execute+0x13c>)
  test_local_fail      = true;
 8008150:	7006      	strb	r6, [r0, #0]
  test_global_fail     = true;
 8008152:	700e      	strb	r6, [r1, #0]
  test_failure_message = msg;
 8008154:	601a      	str	r2, [r3, #0]
 8008156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008158:	20001d3c 	.word	0x20001d3c
 800815c:	20000d70 	.word	0x20000d70
 8008160:	08002d71 	.word	0x08002d71
 8008164:	200016c8 	.word	0x200016c8
 8008168:	20001d54 	.word	0x20001d54
 800816c:	080100b4 	.word	0x080100b4
 8008170:	080100a8 	.word	0x080100a8
 8008174:	0800f214 	.word	0x0800f214
 8008178:	08010f9c 	.word	0x08010f9c
 800817c:	20001d39 	.word	0x20001d39
 8008180:	20001d38 	.word	0x20001d38
 8008184:	20001d34 	.word	0x20001d34
 8008188:	08010094 	.word	0x08010094
 800818c:	0800f294 	.word	0x0800f294

08008190 <rt_test_009_004_execute>:
  test_set_step(1);
 8008190:	2201      	movs	r2, #1
static void rt_test_009_004_execute(void) {
 8008192:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8008194:	4d61      	ldr	r5, [pc, #388]	; (800831c <rt_test_009_004_execute+0x18c>)
 8008196:	2320      	movs	r3, #32
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	4c60      	ldr	r4, [pc, #384]	; (8008320 <rt_test_009_004_execute+0x190>)
  _dbg_check_lock();
 80081a0:	f7f8 fb3e 	bl	8000820 <_dbg_check_lock>
 80081a4:	69a2      	ldr	r2, [r4, #24]
 80081a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80081a8:	f043 0305 	orr.w	r3, r3, #5
 80081ac:	6353      	str	r3, [r2, #52]	; 0x34
  _dbg_check_unlock();
 80081ae:	f7f8 fb47 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80081b2:	6823      	ldr	r3, [r4, #0]
 80081b4:	42a3      	cmp	r3, r4
 80081b6:	d004      	beq.n	80081c2 <rt_test_009_004_execute+0x32>
 80081b8:	69a2      	ldr	r2, [r4, #24]
 80081ba:	689b      	ldr	r3, [r3, #8]
 80081bc:	6892      	ldr	r2, [r2, #8]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d375      	bcc.n	80082ae <rt_test_009_004_execute+0x11e>
 80081c2:	2300      	movs	r3, #0
 80081c4:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 80081c8:	2202      	movs	r2, #2
 80081ca:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 80081cc:	69a6      	ldr	r6, [r4, #24]
 80081ce:	602a      	str	r2, [r5, #0]
 80081d0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80081d4:	f7f8 fb24 	bl	8000820 <_dbg_check_lock>
  m = ctp->epending & events;
 80081d8:	6b77      	ldr	r7, [r6, #52]	; 0x34
  if (m == (eventmask_t)0) {
 80081da:	2f00      	cmp	r7, #0
 80081dc:	d073      	beq.n	80082c6 <rt_test_009_004_execute+0x136>
  ctp->epending &= ~m;
 80081de:	2300      	movs	r3, #0
 80081e0:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 80081e2:	f7f8 fb2d 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	42a3      	cmp	r3, r4
 80081ea:	d004      	beq.n	80081f6 <rt_test_009_004_execute+0x66>
 80081ec:	69a2      	ldr	r2, [r4, #24]
 80081ee:	689b      	ldr	r3, [r3, #8]
 80081f0:	6892      	ldr	r2, [r2, #8]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d35b      	bcc.n	80082ae <rt_test_009_004_execute+0x11e>
 80081f6:	2600      	movs	r6, #0
 80081f8:	f386 8811 	msr	BASEPRI, r6
  if (!condition)
 80081fc:	2f05      	cmp	r7, #5
 80081fe:	d159      	bne.n	80082b4 <rt_test_009_004_execute+0x124>
 8008200:	2320      	movs	r3, #32
 8008202:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008206:	f7f8 fb0b 	bl	8000820 <_dbg_check_lock>
  m = currp->epending & events;
 800820a:	69a3      	ldr	r3, [r4, #24]
 800820c:	6b5f      	ldr	r7, [r3, #52]	; 0x34
  currp->epending &= ~events;
 800820e:	635e      	str	r6, [r3, #52]	; 0x34
  _dbg_check_unlock();
 8008210:	f7f8 fb16 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8008214:	6823      	ldr	r3, [r4, #0]
 8008216:	42a3      	cmp	r3, r4
 8008218:	d004      	beq.n	8008224 <rt_test_009_004_execute+0x94>
 800821a:	69a2      	ldr	r2, [r4, #24]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	6892      	ldr	r2, [r2, #8]
 8008220:	429a      	cmp	r2, r3
 8008222:	d344      	bcc.n	80082ae <rt_test_009_004_execute+0x11e>
 8008224:	2300      	movs	r3, #0
 8008226:	f383 8811 	msr	BASEPRI, r3
 800822a:	2f00      	cmp	r7, #0
 800822c:	d153      	bne.n	80082d6 <rt_test_009_004_execute+0x146>
  test_set_step(3);
 800822e:	2303      	movs	r3, #3
 8008230:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 8008232:	f7ff fdc5 	bl	8007dc0 <test_wait_tick>
 8008236:	69a3      	ldr	r3, [r4, #24]
 8008238:	4606      	mov	r6, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800823a:	6899      	ldr	r1, [r3, #8]
 800823c:	4a39      	ldr	r2, [pc, #228]	; (8008324 <rt_test_009_004_execute+0x194>)
 800823e:	3901      	subs	r1, #1
 8008240:	4839      	ldr	r0, [pc, #228]	; (8008328 <rt_test_009_004_execute+0x198>)
 8008242:	f004 ff5d 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(4);
 8008246:	2204      	movs	r2, #4
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008248:	4b38      	ldr	r3, [pc, #224]	; (800832c <rt_test_009_004_execute+0x19c>)
  test_set_step(4);
 800824a:	602a      	str	r2, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 800824c:	6018      	str	r0, [r3, #0]
  thread_t *ctp = currp;
 800824e:	69a5      	ldr	r5, [r4, #24]
 8008250:	2320      	movs	r3, #32
 8008252:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008256:	f7f8 fae3 	bl	8000820 <_dbg_check_lock>
  m = ctp->epending & events;
 800825a:	6b6f      	ldr	r7, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800825c:	2f00      	cmp	r7, #0
 800825e:	d04c      	beq.n	80082fa <rt_test_009_004_execute+0x16a>
  ctp->epending &= ~m;
 8008260:	2300      	movs	r3, #0
 8008262:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 8008264:	f7f8 faec 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8008268:	6823      	ldr	r3, [r4, #0]
 800826a:	42a3      	cmp	r3, r4
 800826c:	d004      	beq.n	8008278 <rt_test_009_004_execute+0xe8>
 800826e:	69a2      	ldr	r2, [r4, #24]
 8008270:	689b      	ldr	r3, [r3, #8]
 8008272:	6892      	ldr	r2, [r2, #8]
 8008274:	429a      	cmp	r2, r3
 8008276:	d31a      	bcc.n	80082ae <rt_test_009_004_execute+0x11e>
 8008278:	2300      	movs	r3, #0
 800827a:	f383 8811 	msr	BASEPRI, r3
 800827e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008284:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8008288:	1b98      	subs	r0, r3, r6
 800828a:	b280      	uxth	r0, r0
 800828c:	2813      	cmp	r0, #19
 800828e:	d83c      	bhi.n	800830a <rt_test_009_004_execute+0x17a>
 8008290:	2f01      	cmp	r7, #1
 8008292:	d129      	bne.n	80082e8 <rt_test_009_004_execute+0x158>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008294:	f004 fe9c 	bl	800cfd0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8008298:	fab0 f080 	clz	r0, r0
 800829c:	4924      	ldr	r1, [pc, #144]	; (8008330 <rt_test_009_004_execute+0x1a0>)
 800829e:	0940      	lsrs	r0, r0, #5
 80082a0:	f7fd fb0e 	bl	80058c0 <_test_assert>
 80082a4:	b970      	cbnz	r0, 80082c4 <rt_test_009_004_execute+0x134>
}
 80082a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_wait_threads();
 80082aa:	f7fe be19 	b.w	8006ee0 <test_wait_threads>
 80082ae:	4821      	ldr	r0, [pc, #132]	; (8008334 <rt_test_009_004_execute+0x1a4>)
 80082b0:	f7f8 fa5e 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 80082b4:	2301      	movs	r3, #1
 80082b6:	4920      	ldr	r1, [pc, #128]	; (8008338 <rt_test_009_004_execute+0x1a8>)
  test_global_fail     = true;
 80082b8:	4a20      	ldr	r2, [pc, #128]	; (800833c <rt_test_009_004_execute+0x1ac>)
  test_failure_message = msg;
 80082ba:	4821      	ldr	r0, [pc, #132]	; (8008340 <rt_test_009_004_execute+0x1b0>)
 80082bc:	4c21      	ldr	r4, [pc, #132]	; (8008344 <rt_test_009_004_execute+0x1b4>)
  test_local_fail      = true;
 80082be:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80082c0:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80082c2:	7013      	strb	r3, [r2, #0]
}
 80082c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ctp->u.ewmask = events;
 80082c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 80082ca:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 80082cc:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 80082ce:	f7fa f807 	bl	80022e0 <chSchGoSleepS>
    m = ctp->epending & events;
 80082d2:	6b77      	ldr	r7, [r6, #52]	; 0x34
 80082d4:	e783      	b.n	80081de <rt_test_009_004_execute+0x4e>
  test_local_fail      = true;
 80082d6:	2301      	movs	r3, #1
 80082d8:	4917      	ldr	r1, [pc, #92]	; (8008338 <rt_test_009_004_execute+0x1a8>)
  test_global_fail     = true;
 80082da:	4a18      	ldr	r2, [pc, #96]	; (800833c <rt_test_009_004_execute+0x1ac>)
  test_failure_message = msg;
 80082dc:	4818      	ldr	r0, [pc, #96]	; (8008340 <rt_test_009_004_execute+0x1b0>)
 80082de:	4c14      	ldr	r4, [pc, #80]	; (8008330 <rt_test_009_004_execute+0x1a0>)
  test_local_fail      = true;
 80082e0:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80082e2:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80082e4:	7013      	strb	r3, [r2, #0]
 80082e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 80082e8:	2301      	movs	r3, #1
 80082ea:	4913      	ldr	r1, [pc, #76]	; (8008338 <rt_test_009_004_execute+0x1a8>)
  test_global_fail     = true;
 80082ec:	4a13      	ldr	r2, [pc, #76]	; (800833c <rt_test_009_004_execute+0x1ac>)
  test_failure_message = msg;
 80082ee:	4814      	ldr	r0, [pc, #80]	; (8008340 <rt_test_009_004_execute+0x1b0>)
 80082f0:	4c15      	ldr	r4, [pc, #84]	; (8008348 <rt_test_009_004_execute+0x1b8>)
  test_local_fail      = true;
 80082f2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80082f4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80082f6:	7013      	strb	r3, [r2, #0]
 80082f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ctp->u.ewmask = events;
 80082fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 80082fe:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 8008300:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 8008302:	f7f9 ffed 	bl	80022e0 <chSchGoSleepS>
    m = ctp->epending & events;
 8008306:	6b6f      	ldr	r7, [r5, #52]	; 0x34
 8008308:	e7aa      	b.n	8008260 <rt_test_009_004_execute+0xd0>
  test_local_fail      = true;
 800830a:	2301      	movs	r3, #1
 800830c:	490a      	ldr	r1, [pc, #40]	; (8008338 <rt_test_009_004_execute+0x1a8>)
  test_global_fail     = true;
 800830e:	4a0b      	ldr	r2, [pc, #44]	; (800833c <rt_test_009_004_execute+0x1ac>)
  test_failure_message = msg;
 8008310:	480b      	ldr	r0, [pc, #44]	; (8008340 <rt_test_009_004_execute+0x1b0>)
 8008312:	4c0e      	ldr	r4, [pc, #56]	; (800834c <rt_test_009_004_execute+0x1bc>)
  test_local_fail      = true;
 8008314:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8008316:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8008318:	7013      	strb	r3, [r2, #0]
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831c:	20001d3c 	.word	0x20001d3c
 8008320:	20000d70 	.word	0x20000d70
 8008324:	08002d71 	.word	0x08002d71
 8008328:	200016c8 	.word	0x200016c8
 800832c:	20001d54 	.word	0x20001d54
 8008330:	080100a8 	.word	0x080100a8
 8008334:	08010f9c 	.word	0x08010f9c
 8008338:	20001d39 	.word	0x20001d39
 800833c:	20001d38 	.word	0x20001d38
 8008340:	20001d34 	.word	0x20001d34
 8008344:	080100c8 	.word	0x080100c8
 8008348:	080100b4 	.word	0x080100b4
 800834c:	0800f294 	.word	0x0800f294

08008350 <rt_test_009_005_execute>:
  test_set_step(1);
 8008350:	2201      	movs	r2, #1
static void rt_test_009_005_execute(void) {
 8008352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 8008354:	4d65      	ldr	r5, [pc, #404]	; (80084ec <rt_test_009_005_execute+0x19c>)
 8008356:	2320      	movs	r3, #32
 8008358:	602a      	str	r2, [r5, #0]
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	4c64      	ldr	r4, [pc, #400]	; (80084f0 <rt_test_009_005_execute+0x1a0>)
  _dbg_check_lock();
 8008360:	f7f8 fa5e 	bl	8000820 <_dbg_check_lock>
 8008364:	69a2      	ldr	r2, [r4, #24]
 8008366:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008368:	f043 0305 	orr.w	r3, r3, #5
 800836c:	6353      	str	r3, [r2, #52]	; 0x34
  _dbg_check_unlock();
 800836e:	f7f8 fa67 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8008372:	6823      	ldr	r3, [r4, #0]
 8008374:	42a3      	cmp	r3, r4
 8008376:	d005      	beq.n	8008384 <rt_test_009_005_execute+0x34>
 8008378:	69a2      	ldr	r2, [r4, #24]
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	6892      	ldr	r2, [r2, #8]
 800837e:	429a      	cmp	r2, r3
 8008380:	f0c0 8092 	bcc.w	80084a8 <rt_test_009_005_execute+0x158>
 8008384:	2300      	movs	r3, #0
 8008386:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800838a:	2202      	movs	r2, #2
 800838c:	2320      	movs	r3, #32
  thread_t *ctp = currp;
 800838e:	69a6      	ldr	r6, [r4, #24]
 8008390:	602a      	str	r2, [r5, #0]
 8008392:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008396:	f7f8 fa43 	bl	8000820 <_dbg_check_lock>
  if ((ctp->epending & events) != events) {
 800839a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800839c:	f003 0205 	and.w	r2, r3, #5
 80083a0:	2a05      	cmp	r2, #5
 80083a2:	f040 8084 	bne.w	80084ae <rt_test_009_005_execute+0x15e>
  ctp->epending &= ~events;
 80083a6:	f023 0305 	bic.w	r3, r3, #5
 80083aa:	6373      	str	r3, [r6, #52]	; 0x34
  _dbg_check_unlock();
 80083ac:	f7f8 fa48 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	42a3      	cmp	r3, r4
 80083b4:	d004      	beq.n	80083c0 <rt_test_009_005_execute+0x70>
 80083b6:	69a2      	ldr	r2, [r4, #24]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	6892      	ldr	r2, [r2, #8]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d373      	bcc.n	80084a8 <rt_test_009_005_execute+0x158>
 80083c0:	2600      	movs	r6, #0
 80083c2:	f386 8811 	msr	BASEPRI, r6
 80083c6:	2320      	movs	r3, #32
 80083c8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80083cc:	f7f8 fa28 	bl	8000820 <_dbg_check_lock>
  m = currp->epending & events;
 80083d0:	69a3      	ldr	r3, [r4, #24]
 80083d2:	6b5f      	ldr	r7, [r3, #52]	; 0x34
  currp->epending &= ~events;
 80083d4:	635e      	str	r6, [r3, #52]	; 0x34
  _dbg_check_unlock();
 80083d6:	f7f8 fa33 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80083da:	6823      	ldr	r3, [r4, #0]
 80083dc:	42a3      	cmp	r3, r4
 80083de:	d004      	beq.n	80083ea <rt_test_009_005_execute+0x9a>
 80083e0:	69a2      	ldr	r2, [r4, #24]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	6892      	ldr	r2, [r2, #8]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d35e      	bcc.n	80084a8 <rt_test_009_005_execute+0x158>
 80083ea:	2300      	movs	r3, #0
 80083ec:	f383 8811 	msr	BASEPRI, r3
  if (!condition)
 80083f0:	2f00      	cmp	r7, #0
 80083f2:	d163      	bne.n	80084bc <rt_test_009_005_execute+0x16c>
  test_set_step(3);
 80083f4:	2203      	movs	r2, #3
 80083f6:	2320      	movs	r3, #32
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80083fe:	f7f8 fa0f 	bl	8000820 <_dbg_check_lock>
 8008402:	69a2      	ldr	r2, [r4, #24]
 8008404:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8008406:	f043 0304 	orr.w	r3, r3, #4
 800840a:	6353      	str	r3, [r2, #52]	; 0x34
  _dbg_check_unlock();
 800840c:	f7f8 fa18 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8008410:	6823      	ldr	r3, [r4, #0]
 8008412:	42a3      	cmp	r3, r4
 8008414:	d004      	beq.n	8008420 <rt_test_009_005_execute+0xd0>
 8008416:	69a2      	ldr	r2, [r4, #24]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	6892      	ldr	r2, [r2, #8]
 800841c:	429a      	cmp	r2, r3
 800841e:	d343      	bcc.n	80084a8 <rt_test_009_005_execute+0x158>
 8008420:	2300      	movs	r3, #0
 8008422:	f383 8811 	msr	BASEPRI, r3
  test_set_step(4);
 8008426:	2304      	movs	r3, #4
 8008428:	602b      	str	r3, [r5, #0]
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 800842a:	f7ff fcc9 	bl	8007dc0 <test_wait_tick>
 800842e:	69a3      	ldr	r3, [r4, #24]
 8008430:	4606      	mov	r6, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008432:	6899      	ldr	r1, [r3, #8]
 8008434:	4a2f      	ldr	r2, [pc, #188]	; (80084f4 <rt_test_009_005_execute+0x1a4>)
 8008436:	3901      	subs	r1, #1
 8008438:	482f      	ldr	r0, [pc, #188]	; (80084f8 <rt_test_009_005_execute+0x1a8>)
 800843a:	f004 fe61 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(5);
 800843e:	2705      	movs	r7, #5
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008440:	4b2e      	ldr	r3, [pc, #184]	; (80084fc <rt_test_009_005_execute+0x1ac>)
  test_set_step(5);
 8008442:	602f      	str	r7, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 8008444:	6018      	str	r0, [r3, #0]
  thread_t *ctp = currp;
 8008446:	69a5      	ldr	r5, [r4, #24]
 8008448:	2320      	movs	r3, #32
 800844a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800844e:	f7f8 f9e7 	bl	8000820 <_dbg_check_lock>
  if ((ctp->epending & events) != events) {
 8008452:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8008454:	ea03 0207 	and.w	r2, r3, r7
 8008458:	42ba      	cmp	r2, r7
 800845a:	d138      	bne.n	80084ce <rt_test_009_005_execute+0x17e>
  ctp->epending &= ~events;
 800845c:	f023 0305 	bic.w	r3, r3, #5
 8008460:	636b      	str	r3, [r5, #52]	; 0x34
  _dbg_check_unlock();
 8008462:	f7f8 f9ed 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	42a3      	cmp	r3, r4
 800846a:	d004      	beq.n	8008476 <rt_test_009_005_execute+0x126>
 800846c:	69a2      	ldr	r2, [r4, #24]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	6892      	ldr	r2, [r2, #8]
 8008472:	429a      	cmp	r2, r3
 8008474:	d318      	bcc.n	80084a8 <rt_test_009_005_execute+0x158>
 8008476:	2300      	movs	r3, #0
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008482:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8008486:	1b98      	subs	r0, r3, r6
 8008488:	b280      	uxth	r0, r0
 800848a:	2813      	cmp	r0, #19
 800848c:	d825      	bhi.n	80084da <rt_test_009_005_execute+0x18a>
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 800848e:	f004 fd9f 	bl	800cfd0 <chEvtGetAndClearEvents.constprop.0>
    test_assert(m == 0, "stuck event");
 8008492:	fab0 f080 	clz	r0, r0
 8008496:	491a      	ldr	r1, [pc, #104]	; (8008500 <rt_test_009_005_execute+0x1b0>)
 8008498:	0940      	lsrs	r0, r0, #5
 800849a:	f7fd fa11 	bl	80058c0 <_test_assert>
 800849e:	b9a8      	cbnz	r0, 80084cc <rt_test_009_005_execute+0x17c>
}
 80084a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_wait_threads();
 80084a4:	f7fe bd1c 	b.w	8006ee0 <test_wait_threads>
 80084a8:	4816      	ldr	r0, [pc, #88]	; (8008504 <rt_test_009_005_execute+0x1b4>)
 80084aa:	f7f8 f961 	bl	8000770 <chSysHalt>
    ctp->u.ewmask = events;
 80084ae:	2305      	movs	r3, #5
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80084b0:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 80084b2:	6273      	str	r3, [r6, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80084b4:	f7f9 ff14 	bl	80022e0 <chSchGoSleepS>
  ctp->epending &= ~events;
 80084b8:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80084ba:	e774      	b.n	80083a6 <rt_test_009_005_execute+0x56>
  test_local_fail      = true;
 80084bc:	2301      	movs	r3, #1
 80084be:	4912      	ldr	r1, [pc, #72]	; (8008508 <rt_test_009_005_execute+0x1b8>)
  test_global_fail     = true;
 80084c0:	4a12      	ldr	r2, [pc, #72]	; (800850c <rt_test_009_005_execute+0x1bc>)
  test_failure_message = msg;
 80084c2:	4813      	ldr	r0, [pc, #76]	; (8008510 <rt_test_009_005_execute+0x1c0>)
 80084c4:	4c0e      	ldr	r4, [pc, #56]	; (8008500 <rt_test_009_005_execute+0x1b0>)
  test_local_fail      = true;
 80084c6:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80084c8:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80084ca:	7013      	strb	r3, [r2, #0]
}
 80084cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80084ce:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 80084d0:	626f      	str	r7, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 80084d2:	f7f9 ff05 	bl	80022e0 <chSchGoSleepS>
  ctp->epending &= ~events;
 80084d6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80084d8:	e7c0      	b.n	800845c <rt_test_009_005_execute+0x10c>
  test_local_fail      = true;
 80084da:	2301      	movs	r3, #1
 80084dc:	490a      	ldr	r1, [pc, #40]	; (8008508 <rt_test_009_005_execute+0x1b8>)
  test_global_fail     = true;
 80084de:	4a0b      	ldr	r2, [pc, #44]	; (800850c <rt_test_009_005_execute+0x1bc>)
  test_failure_message = msg;
 80084e0:	480b      	ldr	r0, [pc, #44]	; (8008510 <rt_test_009_005_execute+0x1c0>)
 80084e2:	4c0c      	ldr	r4, [pc, #48]	; (8008514 <rt_test_009_005_execute+0x1c4>)
  test_local_fail      = true;
 80084e4:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80084e6:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80084e8:	7013      	strb	r3, [r2, #0]
 80084ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084ec:	20001d3c 	.word	0x20001d3c
 80084f0:	20000d70 	.word	0x20000d70
 80084f4:	08002d71 	.word	0x08002d71
 80084f8:	200016c8 	.word	0x200016c8
 80084fc:	20001d54 	.word	0x20001d54
 8008500:	080100a8 	.word	0x080100a8
 8008504:	08010f9c 	.word	0x08010f9c
 8008508:	20001d39 	.word	0x20001d39
 800850c:	20001d38 	.word	0x20001d38
 8008510:	20001d34 	.word	0x20001d34
 8008514:	0800f294 	.word	0x0800f294
	...

08008520 <rt_test_009_007_execute>:

static void rt_test_009_007_execute(void) {
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  event_listener_t el1, el2;
  systime_t target_time;

  /* [9.7.1] Registering on two event sources associating them with
     flags 1 and 4.*/
  test_set_step(1);
 8008524:	2401      	movs	r4, #1
 8008526:	4d61      	ldr	r5, [pc, #388]	; (80086ac <rt_test_009_007_execute+0x18c>)
 8008528:	2320      	movs	r3, #32
static void rt_test_009_007_execute(void) {
 800852a:	b08a      	sub	sp, #40	; 0x28
  test_set_step(1);
 800852c:	602c      	str	r4, [r5, #0]
 800852e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008532:	f7f8 f975 	bl	8000820 <_dbg_check_lock>
  elp->flags    = (eventflags_t)0;
 8008536:	2200      	movs	r2, #0
  elp->wflags   = wflags;
 8008538:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  elp->next     = esp->next;
 800853c:	4e5c      	ldr	r6, [pc, #368]	; (80086b0 <rt_test_009_007_execute+0x190>)
  elp->events   = events;
 800853e:	9407      	str	r4, [sp, #28]
  elp->listener = currp;
 8008540:	4c5c      	ldr	r4, [pc, #368]	; (80086b4 <rt_test_009_007_execute+0x194>)
  elp->next     = esp->next;
 8008542:	6831      	ldr	r1, [r6, #0]
  elp->wflags   = wflags;
 8008544:	e9cd 2308 	strd	r2, r3, [sp, #32]
  elp->listener = currp;
 8008548:	69a3      	ldr	r3, [r4, #24]
  esp->next     = elp;
 800854a:	f10d 0814 	add.w	r8, sp, #20
  elp->listener = currp;
 800854e:	9306      	str	r3, [sp, #24]
  elp->next     = esp->next;
 8008550:	9105      	str	r1, [sp, #20]
  esp->next     = elp;
 8008552:	f8c6 8000 	str.w	r8, [r6]
  _dbg_check_unlock();
 8008556:	f7f8 f973 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	42a3      	cmp	r3, r4
 800855e:	d004      	beq.n	800856a <rt_test_009_007_execute+0x4a>
 8008560:	69a2      	ldr	r2, [r4, #24]
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	6892      	ldr	r2, [r2, #8]
 8008566:	429a      	cmp	r2, r3
 8008568:	d377      	bcc.n	800865a <rt_test_009_007_execute+0x13a>
 800856a:	2700      	movs	r7, #0
 800856c:	f387 8811 	msr	BASEPRI, r7
 8008570:	2320      	movs	r3, #32
 8008572:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008576:	f7f8 f953 	bl	8000820 <_dbg_check_lock>
  elp->events   = events;
 800857a:	2304      	movs	r3, #4
  elp->wflags   = wflags;
 800857c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  elp->flags    = (eventflags_t)0;
 8008580:	9703      	str	r7, [sp, #12]
  elp->events   = events;
 8008582:	9302      	str	r3, [sp, #8]
  elp->next     = esp->next;
 8008584:	4f4c      	ldr	r7, [pc, #304]	; (80086b8 <rt_test_009_007_execute+0x198>)
  elp->listener = currp;
 8008586:	69a3      	ldr	r3, [r4, #24]
  elp->wflags   = wflags;
 8008588:	9204      	str	r2, [sp, #16]
  elp->listener = currp;
 800858a:	9301      	str	r3, [sp, #4]
  elp->next     = esp->next;
 800858c:	683b      	ldr	r3, [r7, #0]
  esp->next     = elp;
 800858e:	f8c7 d000 	str.w	sp, [r7]
  elp->next     = esp->next;
 8008592:	9300      	str	r3, [sp, #0]
  _dbg_check_unlock();
 8008594:	f7f8 f954 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	42a3      	cmp	r3, r4
 800859c:	d004      	beq.n	80085a8 <rt_test_009_007_execute+0x88>
 800859e:	69a2      	ldr	r2, [r4, #24]
 80085a0:	689b      	ldr	r3, [r3, #8]
 80085a2:	6892      	ldr	r2, [r2, #8]
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d358      	bcc.n	800865a <rt_test_009_007_execute+0x13a>
 80085a8:	2300      	movs	r3, #0
 80085aa:	f383 8811 	msr	BASEPRI, r3
  test_end_step(1);

  /* [9.7.2] Getting current time and starting a broadcaster thread,
     the thread broadcast the first Event Source immediately and the
     other after 50mS.*/
  test_set_step(2);
 80085ae:	2302      	movs	r3, #2
 80085b0:	602b      	str	r3, [r5, #0]
  {
    target_time = chTimeAddX(test_wait_tick(), TIME_MS2I(50));
 80085b2:	f7ff fc05 	bl	8007dc0 <test_wait_tick>
  return chThdGetSelfX()->hdr.pqueue.prio;
 80085b6:	69a3      	ldr	r3, [r4, #24]
 80085b8:	4681      	mov	r9, r0
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80085ba:	6899      	ldr	r1, [r3, #8]
 80085bc:	4a3f      	ldr	r2, [pc, #252]	; (80086bc <rt_test_009_007_execute+0x19c>)
 80085be:	4b40      	ldr	r3, [pc, #256]	; (80086c0 <rt_test_009_007_execute+0x1a0>)
 80085c0:	3901      	subs	r1, #1
 80085c2:	4840      	ldr	r0, [pc, #256]	; (80086c4 <rt_test_009_007_execute+0x1a4>)
 80085c4:	f004 fd9c 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_end_step(2);

  /* [9.7.3] Calling chEvtWaitAll() then verifying that both event
     flags have been received after 50mS and that the event flags mask
     has been emptied.*/
  test_set_step(3);
 80085c8:	2303      	movs	r3, #3
 80085ca:	602b      	str	r3, [r5, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX() - 1,
 80085cc:	4b3e      	ldr	r3, [pc, #248]	; (80086c8 <rt_test_009_007_execute+0x1a8>)
  thread_t *ctp = currp;
 80085ce:	f8d4 a018 	ldr.w	sl, [r4, #24]
 80085d2:	6018      	str	r0, [r3, #0]
 80085d4:	2320      	movs	r3, #32
 80085d6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80085da:	f7f8 f921 	bl	8000820 <_dbg_check_lock>
  if ((ctp->epending & events) != events) {
 80085de:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 80085e2:	f003 0205 	and.w	r2, r3, #5
 80085e6:	2a05      	cmp	r2, #5
 80085e8:	d13a      	bne.n	8008660 <rt_test_009_007_execute+0x140>
  ctp->epending &= ~events;
 80085ea:	f023 0305 	bic.w	r3, r3, #5
 80085ee:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
  _dbg_check_unlock();
 80085f2:	f7f8 f925 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80085f6:	6823      	ldr	r3, [r4, #0]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d004      	beq.n	8008606 <rt_test_009_007_execute+0xe6>
 80085fc:	69a2      	ldr	r2, [r4, #24]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	6892      	ldr	r2, [r2, #8]
 8008602:	429a      	cmp	r2, r3
 8008604:	d329      	bcc.n	800865a <rt_test_009_007_execute+0x13a>
 8008606:	2300      	movs	r3, #0
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8008616:	eba3 0009 	sub.w	r0, r3, r9
  if (!condition)
 800861a:	b280      	uxth	r0, r0
 800861c:	2813      	cmp	r0, #19
 800861e:	d831      	bhi.n	8008684 <rt_test_009_007_execute+0x164>
  {
    m = chEvtWaitAll(5);
    test_assert_time_window(target_time,
                            chTimeAddX(target_time, ALLOWED_DELAY),
                            "out of time window");
    m = chEvtGetAndClearEvents(ALL_EVENTS);
 8008620:	f004 fcd6 	bl	800cfd0 <chEvtGetAndClearEvents.constprop.0>
 8008624:	bb28      	cbnz	r0, 8008672 <rt_test_009_007_execute+0x152>
    test_assert(m == 0, "stuck event");
    test_wait_threads();
 8008626:	f7fe fc5b 	bl	8006ee0 <test_wait_threads>
  }
  test_end_step(3);

  /* [9.7.4] Unregistering from the Event Sources.*/
  test_set_step(4);
 800862a:	2304      	movs	r3, #4
  {
    chEvtUnregister(&es1, &el1);
 800862c:	4641      	mov	r1, r8
 800862e:	4820      	ldr	r0, [pc, #128]	; (80086b0 <rt_test_009_007_execute+0x190>)
  test_set_step(4);
 8008630:	602b      	str	r3, [r5, #0]
    chEvtUnregister(&es1, &el1);
 8008632:	f7f9 f92d 	bl	8001890 <chEvtUnregister>
    chEvtUnregister(&es2, &el2);
 8008636:	4669      	mov	r1, sp
 8008638:	481f      	ldr	r0, [pc, #124]	; (80086b8 <rt_test_009_007_execute+0x198>)
 800863a:	f7f9 f929 	bl	8001890 <chEvtUnregister>
 800863e:	6833      	ldr	r3, [r6, #0]
 8008640:	42b3      	cmp	r3, r6
 8008642:	d12a      	bne.n	800869a <rt_test_009_007_execute+0x17a>
    test_assert(!chEvtIsListeningI(&es1), "stuck listener");
    test_assert(!chEvtIsListeningI(&es2), "stuck listener");
 8008644:	6838      	ldr	r0, [r7, #0]
 8008646:	4921      	ldr	r1, [pc, #132]	; (80086cc <rt_test_009_007_execute+0x1ac>)
 8008648:	1bc0      	subs	r0, r0, r7
 800864a:	fab0 f080 	clz	r0, r0
 800864e:	0940      	lsrs	r0, r0, #5
 8008650:	f7fd f936 	bl	80058c0 <_test_assert>
  }
  test_end_step(4);
}
 8008654:	b00a      	add	sp, #40	; 0x28
 8008656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800865a:	481d      	ldr	r0, [pc, #116]	; (80086d0 <rt_test_009_007_execute+0x1b0>)
 800865c:	f7f8 f888 	bl	8000770 <chSysHalt>
    ctp->u.ewmask = events;
 8008660:	2305      	movs	r3, #5
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8008662:	200b      	movs	r0, #11
    ctp->u.ewmask = events;
 8008664:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTANDEVT);
 8008668:	f7f9 fe3a 	bl	80022e0 <chSchGoSleepS>
  ctp->epending &= ~events;
 800866c:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
 8008670:	e7bb      	b.n	80085ea <rt_test_009_007_execute+0xca>
  test_local_fail      = true;
 8008672:	2301      	movs	r3, #1
 8008674:	4917      	ldr	r1, [pc, #92]	; (80086d4 <rt_test_009_007_execute+0x1b4>)
  test_global_fail     = true;
 8008676:	4a18      	ldr	r2, [pc, #96]	; (80086d8 <rt_test_009_007_execute+0x1b8>)
  test_failure_message = msg;
 8008678:	4818      	ldr	r0, [pc, #96]	; (80086dc <rt_test_009_007_execute+0x1bc>)
 800867a:	4c19      	ldr	r4, [pc, #100]	; (80086e0 <rt_test_009_007_execute+0x1c0>)
  test_local_fail      = true;
 800867c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800867e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8008680:	7013      	strb	r3, [r2, #0]
 8008682:	e7e7      	b.n	8008654 <rt_test_009_007_execute+0x134>
  test_local_fail      = true;
 8008684:	2301      	movs	r3, #1
 8008686:	4913      	ldr	r1, [pc, #76]	; (80086d4 <rt_test_009_007_execute+0x1b4>)
  test_global_fail     = true;
 8008688:	4a13      	ldr	r2, [pc, #76]	; (80086d8 <rt_test_009_007_execute+0x1b8>)
  test_failure_message = msg;
 800868a:	4814      	ldr	r0, [pc, #80]	; (80086dc <rt_test_009_007_execute+0x1bc>)
 800868c:	4c15      	ldr	r4, [pc, #84]	; (80086e4 <rt_test_009_007_execute+0x1c4>)
  test_local_fail      = true;
 800868e:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8008690:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8008692:	7013      	strb	r3, [r2, #0]
 8008694:	b00a      	add	sp, #40	; 0x28
 8008696:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  test_local_fail      = true;
 800869a:	2301      	movs	r3, #1
 800869c:	490d      	ldr	r1, [pc, #52]	; (80086d4 <rt_test_009_007_execute+0x1b4>)
  test_global_fail     = true;
 800869e:	4a0e      	ldr	r2, [pc, #56]	; (80086d8 <rt_test_009_007_execute+0x1b8>)
  test_failure_message = msg;
 80086a0:	480e      	ldr	r0, [pc, #56]	; (80086dc <rt_test_009_007_execute+0x1bc>)
 80086a2:	4c0a      	ldr	r4, [pc, #40]	; (80086cc <rt_test_009_007_execute+0x1ac>)
  test_local_fail      = true;
 80086a4:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 80086a6:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 80086a8:	7013      	strb	r3, [r2, #0]
 80086aa:	e7d3      	b.n	8008654 <rt_test_009_007_execute+0x134>
 80086ac:	20001d3c 	.word	0x20001d3c
 80086b0:	20000808 	.word	0x20000808
 80086b4:	20000d70 	.word	0x20000d70
 80086b8:	2000080c 	.word	0x2000080c
 80086bc:	08003381 	.word	0x08003381
 80086c0:	0800f730 	.word	0x0800f730
 80086c4:	200016c8 	.word	0x200016c8
 80086c8:	20001d54 	.word	0x20001d54
 80086cc:	0800f260 	.word	0x0800f260
 80086d0:	08010f9c 	.word	0x08010f9c
 80086d4:	20001d39 	.word	0x20001d39
 80086d8:	20001d38 	.word	0x20001d38
 80086dc:	20001d34 	.word	0x20001d34
 80086e0:	080100a8 	.word	0x080100a8
 80086e4:	0800f294 	.word	0x0800f294
	...

080086f0 <msg_loop_test.lto_priv.0>:
NOINLINE static unsigned int msg_loop_test(thread_t *tp) {
 80086f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	4605      	mov	r5, r0
  start = test_wait_tick();
 80086f6:	f7ff fb63 	bl	8007dc0 <test_wait_tick>
  uint32_t n = 0;
 80086fa:	2400      	movs	r4, #0
 80086fc:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
  } while (chVTIsSystemTimeWithinX(start, end));
 8008700:	f242 770f 	movw	r7, #9999	; 0x270f
  start = test_wait_tick();
 8008704:	4606      	mov	r6, r0
    (void)chMsgSend(tp, 1);
 8008706:	2101      	movs	r1, #1
 8008708:	4628      	mov	r0, r5
 800870a:	f7f9 fe29 	bl	8002360 <chMsgSend>
 800870e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
    n++;
 8008712:	3401      	adds	r4, #1
 8008714:	1b9b      	subs	r3, r3, r6
  } while (chVTIsSystemTimeWithinX(start, end));
 8008716:	b29b      	uxth	r3, r3
 8008718:	42bb      	cmp	r3, r7
 800871a:	d9f4      	bls.n	8008706 <msg_loop_test.lto_priv.0+0x16>
  (void)chMsgSend(tp, 0);
 800871c:	2100      	movs	r1, #0
 800871e:	4628      	mov	r0, r5
 8008720:	f7f9 fe1e 	bl	8002360 <chMsgSend>
}
 8008724:	4620      	mov	r0, r4
 8008726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800872a:	bf00      	nop
 800872c:	0000      	movs	r0, r0
	...

08008730 <null_provider>:

  (void)size;
  (void)align;

  return NULL;
}
 8008730:	2000      	movs	r0, #0
 8008732:	4770      	bx	lr
	...

08008740 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 8008740:	2902      	cmp	r1, #2
 8008742:	d006      	beq.n	8008752 <get_descriptor+0x12>
 8008744:	2903      	cmp	r1, #3
 8008746:	d006      	beq.n	8008756 <get_descriptor+0x16>
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 8008748:	2901      	cmp	r1, #1
 800874a:	4807      	ldr	r0, [pc, #28]	; (8008768 <get_descriptor+0x28>)
 800874c:	bf18      	it	ne
 800874e:	2000      	movne	r0, #0
 8008750:	4770      	bx	lr
  switch (dtype) {
 8008752:	4806      	ldr	r0, [pc, #24]	; (800876c <get_descriptor+0x2c>)
 8008754:	4770      	bx	lr
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 8008756:	2a03      	cmp	r2, #3
 8008758:	d803      	bhi.n	8008762 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 800875a:	4805      	ldr	r0, [pc, #20]	; (8008770 <get_descriptor+0x30>)
 800875c:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 8008760:	4770      	bx	lr
  }
  return NULL;
 8008762:	2000      	movs	r0, #0
}
 8008764:	4770      	bx	lr
 8008766:	bf00      	nop
 8008768:	08012360 	.word	0x08012360
 800876c:	08012314 	.word	0x08012314
 8008770:	080123e8 	.word	0x080123e8
	...

08008780 <bmk_thread8>:
#endif

static THD_FUNCTION(bmk_thread8, p) {
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4604      	mov	r4, r0
 8008784:	4d08      	ldr	r5, [pc, #32]	; (80087a8 <bmk_thread8+0x28>)

  do {
    chThdYield();
 8008786:	f7fa fe53 	bl	8003430 <chThdYield>
    chThdYield();
 800878a:	f7fa fe51 	bl	8003430 <chThdYield>
    chThdYield();
 800878e:	f7fa fe4f 	bl	8003430 <chThdYield>
    chThdYield();
 8008792:	f7fa fe4d 	bl	8003430 <chThdYield>
    (*(uint32_t *)p) += 4;
 8008796:	6823      	ldr	r3, [r4, #0]
  return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 8008798:	69aa      	ldr	r2, [r5, #24]
 800879a:	3304      	adds	r3, #4
 800879c:	6023      	str	r3, [r4, #0]
#if defined(SIMULATOR)
    _sim_check_for_interrupts();
#endif
  } while(!chThdShouldTerminateX());
 800879e:	f892 3021 	ldrb.w	r3, [r2, #33]	; 0x21
 80087a2:	075b      	lsls	r3, r3, #29
 80087a4:	d5ef      	bpl.n	8008786 <bmk_thread8+0x6>
}
 80087a6:	bd38      	pop	{r3, r4, r5, pc}
 80087a8:	20000d70 	.word	0x20000d70
 80087ac:	00000000 	.word	0x00000000

080087b0 <chSysUnlock.lto_priv.29>:
static inline void chSysUnlock(void) {
 80087b0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80087b2:	4b0c      	ldr	r3, [pc, #48]	; (80087e4 <chSysUnlock.lto_priv.29+0x34>)
 80087b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087b6:	b97a      	cbnz	r2, 80087d8 <chSysUnlock.lto_priv.29+0x28>
 80087b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80087ba:	2900      	cmp	r1, #0
 80087bc:	dd0c      	ble.n	80087d8 <chSysUnlock.lto_priv.29+0x28>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80087be:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 80087c0:	635a      	str	r2, [r3, #52]	; 0x34
 80087c2:	4299      	cmp	r1, r3
 80087c4:	d004      	beq.n	80087d0 <chSysUnlock.lto_priv.29+0x20>
 80087c6:	699a      	ldr	r2, [r3, #24]
 80087c8:	688b      	ldr	r3, [r1, #8]
 80087ca:	6892      	ldr	r2, [r2, #8]
 80087cc:	429a      	cmp	r2, r3
 80087ce:	d306      	bcc.n	80087de <chSysUnlock.lto_priv.29+0x2e>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f383 8811 	msr	BASEPRI, r3
}
 80087d6:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 80087d8:	4803      	ldr	r0, [pc, #12]	; (80087e8 <chSysUnlock.lto_priv.29+0x38>)
 80087da:	f7f7 ffc9 	bl	8000770 <chSysHalt>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 80087de:	4803      	ldr	r0, [pc, #12]	; (80087ec <chSysUnlock.lto_priv.29+0x3c>)
 80087e0:	f7f7 ffc6 	bl	8000770 <chSysHalt>
 80087e4:	20000d70 	.word	0x20000d70
 80087e8:	0800f214 	.word	0x0800f214
 80087ec:	08012170 	.word	0x08012170

080087f0 <oslib_test_007_001_setup.lto_priv.0>:
  mp->next = NULL;
 80087f0:	2200      	movs	r2, #0
  mp->object_size = size;
 80087f2:	2104      	movs	r1, #4
  mp->next = NULL;
 80087f4:	4b02      	ldr	r3, [pc, #8]	; (8008800 <oslib_test_007_001_setup.lto_priv.0+0x10>)
  mp->object_size = size;
 80087f6:	e9c3 2100 	strd	r2, r1, [r3]
  mp->provider = provider;
 80087fa:	e9c3 1202 	strd	r1, r2, [r3, #8]
 * .
 */

static void oslib_test_007_001_setup(void) {
  chPoolObjectInit(&mp1, sizeof (uint32_t), NULL);
}
 80087fe:	4770      	bx	lr
 8008800:	20000c80 	.word	0x20000c80
	...

08008810 <Thread1.lto_priv.2>:

  (void)arg;

  chRegSetThreadName("blinker");
  while (true) {
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 8008810:	f640 19c4 	movw	r9, #2500	; 0x9c4
 8008814:	f241 3888 	movw	r8, #5000	; 0x1388
    palClearPad(IOPORT3, GPIOC_LED);
 8008818:	f44f 5680 	mov.w	r6, #4096	; 0x1000
 800881c:	4c2a      	ldr	r4, [pc, #168]	; (80088c8 <Thread1.lto_priv.2+0xb8>)
 800881e:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <Thread1.lto_priv.2+0xbc>)
 8008820:	69a3      	ldr	r3, [r4, #24]
static THD_FUNCTION(Thread1, arg) {
 8008822:	b580      	push	{r7, lr}
    palClearPad(IOPORT3, GPIOC_LED);
 8008824:	4d2a      	ldr	r5, [pc, #168]	; (80088d0 <Thread1.lto_priv.2+0xc0>)
 8008826:	4f2b      	ldr	r7, [pc, #172]	; (80088d4 <Thread1.lto_priv.2+0xc4>)
 8008828:	619a      	str	r2, [r3, #24]
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800882a:	783b      	ldrb	r3, [r7, #0]
    palClearPad(IOPORT3, GPIOC_LED);
 800882c:	616e      	str	r6, [r5, #20]
    systime_t time = serusbcfg.usbp->state == USB_ACTIVE ? 250 : 500;
 800882e:	2b04      	cmp	r3, #4
 8008830:	bf0c      	ite	eq
 8008832:	46ca      	moveq	sl, r9
 8008834:	46c2      	movne	sl, r8
 8008836:	2320      	movs	r3, #32
 8008838:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800883c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008840:	4313      	orrs	r3, r2
 8008842:	d137      	bne.n	80088b4 <Thread1.lto_priv.2+0xa4>
  _dbg_enter_lock();
 8008844:	2301      	movs	r3, #1
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8008846:	4651      	mov	r1, sl
 8008848:	2008      	movs	r0, #8
 800884a:	6363      	str	r3, [r4, #52]	; 0x34
 800884c:	f7f9 fe20 	bl	8002490 <chSchGoSleepTimeoutS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008850:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008852:	2a00      	cmp	r2, #0
 8008854:	d131      	bne.n	80088ba <Thread1.lto_priv.2+0xaa>
 8008856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008858:	2b00      	cmp	r3, #0
 800885a:	dd2e      	ble.n	80088ba <Thread1.lto_priv.2+0xaa>
 800885c:	6823      	ldr	r3, [r4, #0]
  _dbg_leave_lock();
 800885e:	6362      	str	r2, [r4, #52]	; 0x34
 8008860:	42a3      	cmp	r3, r4
 8008862:	d004      	beq.n	800886e <Thread1.lto_priv.2+0x5e>
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	69a3      	ldr	r3, [r4, #24]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	4293      	cmp	r3, r2
 800886c:	d328      	bcc.n	80088c0 <Thread1.lto_priv.2+0xb0>
 800886e:	2300      	movs	r3, #0
 8008870:	f383 8811 	msr	BASEPRI, r3
 8008874:	2320      	movs	r3, #32
    chThdSleepMilliseconds(time);
    palSetPad(IOPORT3, GPIOC_LED);
 8008876:	612e      	str	r6, [r5, #16]
 8008878:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800887c:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008880:	4313      	orrs	r3, r2
 8008882:	d117      	bne.n	80088b4 <Thread1.lto_priv.2+0xa4>
  _dbg_enter_lock();
 8008884:	2301      	movs	r3, #1
 8008886:	4651      	mov	r1, sl
 8008888:	2008      	movs	r0, #8
 800888a:	6363      	str	r3, [r4, #52]	; 0x34
 800888c:	f7f9 fe00 	bl	8002490 <chSchGoSleepTimeoutS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008890:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008892:	b993      	cbnz	r3, 80088ba <Thread1.lto_priv.2+0xaa>
 8008894:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008896:	2a00      	cmp	r2, #0
 8008898:	dd0f      	ble.n	80088ba <Thread1.lto_priv.2+0xaa>
  _dbg_leave_lock();
 800889a:	6363      	str	r3, [r4, #52]	; 0x34
 800889c:	6823      	ldr	r3, [r4, #0]
 800889e:	42a3      	cmp	r3, r4
 80088a0:	d004      	beq.n	80088ac <Thread1.lto_priv.2+0x9c>
 80088a2:	69a2      	ldr	r2, [r4, #24]
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	6892      	ldr	r2, [r2, #8]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d309      	bcc.n	80088c0 <Thread1.lto_priv.2+0xb0>
 80088ac:	2300      	movs	r3, #0
 80088ae:	f383 8811 	msr	BASEPRI, r3
 80088b2:	e7ba      	b.n	800882a <Thread1.lto_priv.2+0x1a>
    chSysHalt("SV#4");
 80088b4:	4808      	ldr	r0, [pc, #32]	; (80088d8 <Thread1.lto_priv.2+0xc8>)
 80088b6:	f7f7 ff5b 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 80088ba:	4808      	ldr	r0, [pc, #32]	; (80088dc <Thread1.lto_priv.2+0xcc>)
 80088bc:	f7f7 ff58 	bl	8000770 <chSysHalt>
 80088c0:	4807      	ldr	r0, [pc, #28]	; (80088e0 <Thread1.lto_priv.2+0xd0>)
 80088c2:	f7f7 ff55 	bl	8000770 <chSysHalt>
 80088c6:	bf00      	nop
 80088c8:	20000d70 	.word	0x20000d70
 80088cc:	08011888 	.word	0x08011888
 80088d0:	40011000 	.word	0x40011000
 80088d4:	20000ce8 	.word	0x20000ce8
 80088d8:	0800f20c 	.word	0x0800f20c
 80088dc:	0800f214 	.word	0x0800f214
 80088e0:	08010de4 	.word	0x08010de4
	...

080088f0 <rt_test_011_007_setup.lto_priv.0>:
  sp->cnt = n;
 80088f0:	2200      	movs	r2, #0
  qp->next = qp;
 80088f2:	4b02      	ldr	r3, [pc, #8]	; (80088fc <rt_test_011_007_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 80088f4:	e9c3 3300 	strd	r3, r3, [r3]
 80088f8:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_007_setup(void) {
  chSemObjectInit(&sem1, 0);
}
 80088fa:	4770      	bx	lr
 80088fc:	200016b4 	.word	0x200016b4

08008900 <rt_test_011_010_setup.lto_priv.0>:
 8008900:	2201      	movs	r2, #1
  qp->next = qp;
 8008902:	4b02      	ldr	r3, [pc, #8]	; (800890c <rt_test_011_010_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 8008904:	e9c3 3300 	strd	r3, r3, [r3]
 8008908:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_010_setup(void) {
  chSemObjectInit(&sem1, 1);
}
 800890a:	4770      	bx	lr
 800890c:	200016b4 	.word	0x200016b4

08008910 <rt_test_011_011_setup.lto_priv.0>:
  mp->owner = NULL;
 8008910:	2200      	movs	r2, #0
  qp->next = qp;
 8008912:	4b02      	ldr	r3, [pc, #8]	; (800891c <rt_test_011_011_setup.lto_priv.0+0xc>)
  qp->prev = qp;
 8008914:	e9c3 3300 	strd	r3, r3, [r3]
 8008918:	609a      	str	r2, [r3, #8]
 * .
 */

static void rt_test_011_011_setup(void) {
  chMtxObjectInit(&mtx1);
}
 800891a:	4770      	bx	lr
 800891c:	20002420 	.word	0x20002420

08008920 <oslib_test_002_003_setup.lto_priv.0>:
  mbp->cnt    = (size_t)0;
 8008920:	2100      	movs	r1, #0
 *   active state.
 * - [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.
 * .
 */

static void oslib_test_002_003_setup(void) {
 8008922:	b430      	push	{r4, r5}
  mbp->buffer = buf;
 8008924:	4b09      	ldr	r3, [pc, #36]	; (800894c <oslib_test_002_003_setup.lto_priv.0+0x2c>)
 8008926:	4a0a      	ldr	r2, [pc, #40]	; (8008950 <oslib_test_002_003_setup.lto_priv.0+0x30>)
  qp->next = qp;
 8008928:	f103 0418 	add.w	r4, r3, #24
  mbp->top    = &buf[n];
 800892c:	f102 0510 	add.w	r5, r2, #16
 8008930:	f103 0020 	add.w	r0, r3, #32
  mbp->buffer = buf;
 8008934:	e9c3 2500 	strd	r2, r5, [r3]
  qp->prev = qp;
 8008938:	e9c3 4406 	strd	r4, r4, [r3, #24]
  chMBObjectInit(&mb1, mb_buffer, MB_SIZE);
}
 800893c:	bc30      	pop	{r4, r5}
  mbp->wrptr  = buf;
 800893e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8008942:	e9c3 0008 	strd	r0, r0, [r3, #32]
  mbp->cnt    = (size_t)0;
 8008946:	6119      	str	r1, [r3, #16]
  mbp->reset  = false;
 8008948:	7519      	strb	r1, [r3, #20]
 800894a:	4770      	bx	lr
 800894c:	20000c58 	.word	0x20000c58
 8008950:	20002400 	.word	0x20002400
	...

08008960 <oslib_test_002_001_setup.lto_priv.0>:
 8008960:	2100      	movs	r1, #0
 8008962:	b430      	push	{r4, r5}
 8008964:	4b09      	ldr	r3, [pc, #36]	; (800898c <oslib_test_002_001_setup.lto_priv.0+0x2c>)
 8008966:	4a0a      	ldr	r2, [pc, #40]	; (8008990 <oslib_test_002_001_setup.lto_priv.0+0x30>)
 8008968:	f103 0418 	add.w	r4, r3, #24
 800896c:	f102 0510 	add.w	r5, r2, #16
 8008970:	f103 0020 	add.w	r0, r3, #32
 8008974:	e9c3 2500 	strd	r2, r5, [r3]
 8008978:	e9c3 4406 	strd	r4, r4, [r3, #24]
 800897c:	bc30      	pop	{r4, r5}
 800897e:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8008982:	e9c3 0008 	strd	r0, r0, [r3, #32]
 8008986:	6119      	str	r1, [r3, #16]
 8008988:	7519      	strb	r1, [r3, #20]
 800898a:	4770      	bx	lr
 800898c:	20000c58 	.word	0x20000c58
 8008990:	20002400 	.word	0x20002400
	...

080089a0 <oslib_test_002_002_setup.lto_priv.0>:
 80089a0:	2100      	movs	r1, #0
 80089a2:	b430      	push	{r4, r5}
 80089a4:	4b09      	ldr	r3, [pc, #36]	; (80089cc <oslib_test_002_002_setup.lto_priv.0+0x2c>)
 80089a6:	4a0a      	ldr	r2, [pc, #40]	; (80089d0 <oslib_test_002_002_setup.lto_priv.0+0x30>)
 80089a8:	f103 0418 	add.w	r4, r3, #24
 80089ac:	f102 0510 	add.w	r5, r2, #16
 80089b0:	f103 0020 	add.w	r0, r3, #32
 80089b4:	e9c3 2500 	strd	r2, r5, [r3]
 80089b8:	e9c3 4406 	strd	r4, r4, [r3, #24]
 80089bc:	bc30      	pop	{r4, r5}
 80089be:	e9c3 2202 	strd	r2, r2, [r3, #8]
 80089c2:	e9c3 0008 	strd	r0, r0, [r3, #32]
 80089c6:	6119      	str	r1, [r3, #16]
 80089c8:	7519      	strb	r1, [r3, #20]
 80089ca:	4770      	bx	lr
 80089cc:	20000c58 	.word	0x20000c58
 80089d0:	20002400 	.word	0x20002400
	...

080089e0 <oslib_test_003_001_setup.lto_priv.0>:

  pp->buffer = buf;
  pp->rdptr  = buf;
  pp->wrptr  = buf;
  pp->top    = &buf[n];
  pp->cnt    = (size_t)0;
 80089e0:	2200      	movs	r2, #0
 * - [3.1.13] Write wrapping buffer boundary.
 * - [3.1.14] Read wrapping buffer boundary.
 * .
 */

static void oslib_test_003_001_setup(void) {
 80089e2:	b430      	push	{r4, r5}
  pp->buffer = buf;
 80089e4:	490e      	ldr	r1, [pc, #56]	; (8008a20 <oslib_test_003_001_setup.lto_priv.0+0x40>)
 80089e6:	4b0f      	ldr	r3, [pc, #60]	; (8008a24 <oslib_test_003_001_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 80089e8:	f101 0510 	add.w	r5, r1, #16
  pp->buffer = buf;
 80089ec:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 80089f0:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 80089f4:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80089f8:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80089fc:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8008a00:	e9c3 4408 	strd	r4, r4, [r3, #32]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE);
}
 8008a04:	bc30      	pop	{r4, r5}
 8008a06:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8008a0a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->reset  = false;
  pp->wtr    = NULL;
  pp->rtr    = NULL;
 8008a0e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8008a12:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8008a14:	751a      	strb	r2, [r3, #20]
 8008a16:	629a      	str	r2, [r3, #40]	; 0x28
 8008a18:	639a      	str	r2, [r3, #56]	; 0x38
 8008a1a:	649a      	str	r2, [r3, #72]	; 0x48
 8008a1c:	4770      	bx	lr
 8008a1e:	bf00      	nop
 8008a20:	200021fc 	.word	0x200021fc
 8008a24:	20000c98 	.word	0x20000c98
	...

08008a30 <oslib_test_003_002_setup.lto_priv.0>:
  pp->cnt    = (size_t)0;
 8008a30:	2200      	movs	r2, #0
 * - [3.2.1] Reading while pipe is empty.
 * - [3.2.2] Writing a string larger than pipe buffer.
 * .
 */

static void oslib_test_003_002_setup(void) {
 8008a32:	b430      	push	{r4, r5}
  pp->buffer = buf;
 8008a34:	490e      	ldr	r1, [pc, #56]	; (8008a70 <oslib_test_003_002_setup.lto_priv.0+0x40>)
 8008a36:	4b0f      	ldr	r3, [pc, #60]	; (8008a74 <oslib_test_003_002_setup.lto_priv.0+0x44>)
  pp->top    = &buf[n];
 8008a38:	f101 0508 	add.w	r5, r1, #8
  pp->buffer = buf;
 8008a3c:	e9c3 1500 	strd	r1, r5, [r3]
  qp->next = qp;
 8008a40:	f103 0420 	add.w	r4, r3, #32
  pp->wrptr  = buf;
 8008a44:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8008a48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a4c:	f103 0140 	add.w	r1, r3, #64	; 0x40
  qp->prev = qp;
 8008a50:	e9c3 4408 	strd	r4, r4, [r3, #32]
  chPipeObjectInit(&pipe1, buffer, PIPE_SIZE / 2);
}
 8008a54:	bc30      	pop	{r4, r5}
 8008a56:	e9c3 000c 	strd	r0, r0, [r3, #48]	; 0x30
 8008a5a:	e9c3 1110 	strd	r1, r1, [r3, #64]	; 0x40
  pp->rtr    = NULL;
 8008a5e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  pp->cnt    = (size_t)0;
 8008a62:	611a      	str	r2, [r3, #16]
  pp->reset  = false;
 8008a64:	751a      	strb	r2, [r3, #20]
 8008a66:	629a      	str	r2, [r3, #40]	; 0x28
 8008a68:	639a      	str	r2, [r3, #56]	; 0x38
 8008a6a:	649a      	str	r2, [r3, #72]	; 0x48
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	200021fc 	.word	0x200021fc
 8008a74:	20000c98 	.word	0x20000c98
	...

08008a80 <oslib_test_007_003_setup.lto_priv.0>:
  mp->next = NULL;
 8008a80:	2200      	movs	r2, #0
  mp->object_size = size;
 8008a82:	2104      	movs	r1, #4
  mp->next = NULL;
 8008a84:	4b04      	ldr	r3, [pc, #16]	; (8008a98 <oslib_test_007_003_setup.lto_priv.0+0x18>)
 8008a86:	e9c3 3300 	strd	r3, r3, [r3]
  mp->object_size = size;
 8008a8a:	e9c3 2103 	strd	r2, r1, [r3, #12]
  mp->provider = provider;
 8008a8e:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008a92:	609a      	str	r2, [r3, #8]
 * .
 */

static void oslib_test_007_003_setup(void) {
  chGuardedPoolObjectInit(&gmp1, sizeof (uint32_t));
}
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	20000c3c 	.word	0x20000c3c
 8008a9c:	00000000 	.word	0x00000000

08008aa0 <oslib_test_007_002_setup.lto_priv.0>:
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2104      	movs	r1, #4
 8008aa4:	4b04      	ldr	r3, [pc, #16]	; (8008ab8 <oslib_test_007_002_setup.lto_priv.0+0x18>)
 8008aa6:	e9c3 3300 	strd	r3, r3, [r3]
 8008aaa:	e9c3 2103 	strd	r2, r1, [r3, #12]
 8008aae:	e9c3 1205 	strd	r1, r2, [r3, #20]
 8008ab2:	609a      	str	r2, [r3, #8]
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop
 8008ab8:	20000c3c 	.word	0x20000c3c
 8008abc:	00000000 	.word	0x00000000

08008ac0 <oslib_test_008_001_setup.lto_priv.0>:
  heapp->provider = NULL;
 8008ac0:	2000      	movs	r0, #0
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8008ac2:	4b0a      	ldr	r3, [pc, #40]	; (8008aec <oslib_test_008_001_setup.lto_priv.0+0x2c>)
  heapp->provider = NULL;
 8008ac4:	4a0a      	ldr	r2, [pc, #40]	; (8008af0 <oslib_test_008_001_setup.lto_priv.0+0x30>)
  heap_header_t *hp = (heap_header_t *)MEM_ALIGN_NEXT(buf, CH_HEAP_ALIGNMENT);
 8008ac6:	1dd9      	adds	r1, r3, #7
 8008ac8:	f021 0107 	bic.w	r1, r1, #7
  size -= (size_t)((uint8_t *)hp - (uint8_t *)buf);
 8008acc:	1acb      	subs	r3, r1, r3
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8008ace:	f1c3 0378 	rsb	r3, r3, #120	; 0x78
 8008ad2:	08db      	lsrs	r3, r3, #3
  H_NEXT(&heapp->header) = hp;
 8008ad4:	6051      	str	r1, [r2, #4]
  H_PAGES(hp) = (size - sizeof (heap_header_t)) / CH_HEAP_ALIGNMENT;
 8008ad6:	604b      	str	r3, [r1, #4]
  qp->next = qp;
 8008ad8:	f102 030c 	add.w	r3, r2, #12
  qp->prev = qp;
 8008adc:	e9c2 3303 	strd	r3, r3, [r2, #12]
  heapp->provider = NULL;
 8008ae0:	6010      	str	r0, [r2, #0]
  H_PAGES(&heapp->header) = 0;
 8008ae2:	6090      	str	r0, [r2, #8]
  H_NEXT(hp) = NULL;
 8008ae4:	6008      	str	r0, [r1, #0]
 8008ae6:	6150      	str	r0, [r2, #20]
 * .
 */

static void oslib_test_008_001_setup(void) {
  chHeapObjectInit(&test_heap, test_heap_buffer, sizeof(test_heap_buffer));
}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000254c 	.word	0x2000254c
 8008af0:	20002530 	.word	0x20002530
	...

08008b00 <rt_test_011_009_execute.lto_priv.0>:
static void rt_test_011_009_execute(void) {
 8008b00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 8008b04:	2301      	movs	r3, #1
 8008b06:	4e2e      	ldr	r6, [pc, #184]	; (8008bc0 <rt_test_011_009_execute.lto_priv.0+0xc0>)
    n = 0;
 8008b08:	f04f 0a00 	mov.w	sl, #0
  test_set_step(1);
 8008b0c:	6033      	str	r3, [r6, #0]
    start = test_wait_tick();
 8008b0e:	f7ff f957 	bl	8007dc0 <test_wait_tick>
 8008b12:	4605      	mov	r5, r0
  return systime + (systime_t)interval;
 8008b14:	4c2b      	ldr	r4, [pc, #172]	; (8008bc4 <rt_test_011_009_execute.lto_priv.0+0xc4>)
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008b16:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8008bc8 <rt_test_011_009_execute.lto_priv.0+0xc8>
 8008b1a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8008bcc <rt_test_011_009_execute.lto_priv.0+0xcc>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008b1e:	4f2c      	ldr	r7, [pc, #176]	; (8008bd0 <rt_test_011_009_execute.lto_priv.0+0xd0>)
 8008b20:	2320      	movs	r3, #32
 8008b22:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008b26:	e9d4 320c 	ldrd	r3, r2, [r4, #48]	; 0x30
 8008b2a:	ea53 0b02 	orrs.w	fp, r3, r2
 8008b2e:	d13d      	bne.n	8008bac <rt_test_011_009_execute.lto_priv.0+0xac>
  _dbg_enter_lock();
 8008b30:	2101      	movs	r1, #1
      chVTDoSetI(&vt1, 1, tmo, NULL);
 8008b32:	4640      	mov	r0, r8
 8008b34:	465b      	mov	r3, fp
 8008b36:	464a      	mov	r2, r9
 8008b38:	6361      	str	r1, [r4, #52]	; 0x34
 8008b3a:	f7f9 f9f9 	bl	8001f30 <chVTDoSetI>
      chVTDoSetI(&vt2, 10000, tmo, NULL);
 8008b3e:	465b      	mov	r3, fp
 8008b40:	464a      	mov	r2, r9
 8008b42:	f242 7110 	movw	r1, #10000	; 0x2710
 8008b46:	4638      	mov	r0, r7
 8008b48:	f7f9 f9f2 	bl	8001f30 <chVTDoSetI>
      chVTDoResetI(&vt1);
 8008b4c:	4640      	mov	r0, r8
 8008b4e:	f7f9 fa87 	bl	8002060 <chVTDoResetI>
      chVTDoResetI(&vt2);
 8008b52:	4638      	mov	r0, r7
 8008b54:	f7f9 fa84 	bl	8002060 <chVTDoResetI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008b5a:	bb53      	cbnz	r3, 8008bb2 <rt_test_011_009_execute.lto_priv.0+0xb2>
 8008b5c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008b5e:	2a00      	cmp	r2, #0
 8008b60:	dd27      	ble.n	8008bb2 <rt_test_011_009_execute.lto_priv.0+0xb2>
  _dbg_leave_lock();
 8008b62:	6363      	str	r3, [r4, #52]	; 0x34
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	42a3      	cmp	r3, r4
 8008b68:	d004      	beq.n	8008b74 <rt_test_011_009_execute.lto_priv.0+0x74>
 8008b6a:	69a2      	ldr	r2, [r4, #24]
 8008b6c:	689b      	ldr	r3, [r3, #8]
 8008b6e:	6892      	ldr	r2, [r2, #8]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d321      	bcc.n	8008bb8 <rt_test_011_009_execute.lto_priv.0+0xb8>
 8008b74:	2300      	movs	r3, #0
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008b7e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8008b84:	f10a 0a01 	add.w	sl, sl, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008b88:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d9c7      	bls.n	8008b20 <rt_test_011_009_execute.lto_priv.0+0x20>
  test_set_step(2);
 8008b90:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8008b92:	4810      	ldr	r0, [pc, #64]	; (8008bd4 <rt_test_011_009_execute.lto_priv.0+0xd4>)
  test_set_step(2);
 8008b94:	6033      	str	r3, [r6, #0]
    test_print("--- Score : ");
 8008b96:	f7fd fcdb 	bl	8006550 <test_print>
    test_printn(n * 2);
 8008b9a:	ea4f 004a 	mov.w	r0, sl, lsl #1
 8008b9e:	f7fd ff7f 	bl	8006aa0 <test_printn>
}
 8008ba2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" timers/S");
 8008ba6:	480c      	ldr	r0, [pc, #48]	; (8008bd8 <rt_test_011_009_execute.lto_priv.0+0xd8>)
 8008ba8:	f7fd bcea 	b.w	8006580 <test_println>
    chSysHalt("SV#4");
 8008bac:	480b      	ldr	r0, [pc, #44]	; (8008bdc <rt_test_011_009_execute.lto_priv.0+0xdc>)
 8008bae:	f7f7 fddf 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8008bb2:	480b      	ldr	r0, [pc, #44]	; (8008be0 <rt_test_011_009_execute.lto_priv.0+0xe0>)
 8008bb4:	f7f7 fddc 	bl	8000770 <chSysHalt>
 8008bb8:	480a      	ldr	r0, [pc, #40]	; (8008be4 <rt_test_011_009_execute.lto_priv.0+0xe4>)
 8008bba:	f7f7 fdd9 	bl	8000770 <chSysHalt>
 8008bbe:	bf00      	nop
 8008bc0:	20001d3c 	.word	0x20001d3c
 8008bc4:	20000d70 	.word	0x20000d70
 8008bc8:	080004a1 	.word	0x080004a1
 8008bcc:	200025cc 	.word	0x200025cc
 8008bd0:	200025e0 	.word	0x200025e0
 8008bd4:	08011890 	.word	0x08011890
 8008bd8:	080118a0 	.word	0x080118a0
 8008bdc:	0800f20c 	.word	0x0800f20c
 8008be0:	0800f214 	.word	0x0800f214
 8008be4:	08010d58 	.word	0x08010d58
	...

08008bf0 <rt_test_011_010_execute.lto_priv.0>:
static void rt_test_011_010_execute(void) {
 8008bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 8008bf4:	2501      	movs	r5, #1
 8008bf6:	4f57      	ldr	r7, [pc, #348]	; (8008d54 <rt_test_011_010_execute.lto_priv.0+0x164>)
    n = 0;
 8008bf8:	f04f 0900 	mov.w	r9, #0
  test_set_step(1);
 8008bfc:	603d      	str	r5, [r7, #0]
    start = test_wait_tick();
 8008bfe:	f7ff f8df 	bl	8007dc0 <test_wait_tick>
 8008c02:	2620      	movs	r6, #32
 8008c04:	4682      	mov	sl, r0
  return systime + (systime_t)interval;
 8008c06:	4c54      	ldr	r4, [pc, #336]	; (8008d58 <rt_test_011_010_execute.lto_priv.0+0x168>)
  msg = chSemWaitS(sp);
 8008c08:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008d5c <rt_test_011_010_execute.lto_priv.0+0x16c>
 8008c0c:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008c10:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008c14:	4313      	orrs	r3, r2
 8008c16:	f040 8093 	bne.w	8008d40 <rt_test_011_010_execute.lto_priv.0+0x150>
 8008c1a:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008c1c:	6365      	str	r5, [r4, #52]	; 0x34
 8008c1e:	f7fa fc8f 	bl	8003540 <chSemWaitS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f040 808e 	bne.w	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
 8008c2a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	f340 808a 	ble.w	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008c32:	6363      	str	r3, [r4, #52]	; 0x34
 8008c34:	6823      	ldr	r3, [r4, #0]
 8008c36:	42a3      	cmp	r3, r4
 8008c38:	d005      	beq.n	8008c46 <rt_test_011_010_execute.lto_priv.0+0x56>
 8008c3a:	69a2      	ldr	r2, [r4, #24]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	6892      	ldr	r2, [r2, #8]
 8008c40:	429a      	cmp	r2, r3
 8008c42:	f0c0 8083 	bcc.w	8008d4c <rt_test_011_010_execute.lto_priv.0+0x15c>
 8008c46:	2300      	movs	r3, #0
 8008c48:	f383 8811 	msr	BASEPRI, r3
      chSemSignal(&sem1);
 8008c4c:	4640      	mov	r0, r8
 8008c4e:	f7fa fd1f 	bl	8003690 <chSemSignal>
 8008c52:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008c56:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	d170      	bne.n	8008d40 <rt_test_011_010_execute.lto_priv.0+0x150>
 8008c5e:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008c60:	6365      	str	r5, [r4, #52]	; 0x34
 8008c62:	f7fa fc6d 	bl	8003540 <chSemWaitS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d16c      	bne.n	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
 8008c6c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008c6e:	2a00      	cmp	r2, #0
 8008c70:	dd69      	ble.n	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008c72:	6363      	str	r3, [r4, #52]	; 0x34
 8008c74:	6823      	ldr	r3, [r4, #0]
 8008c76:	42a3      	cmp	r3, r4
 8008c78:	d004      	beq.n	8008c84 <rt_test_011_010_execute.lto_priv.0+0x94>
 8008c7a:	69a2      	ldr	r2, [r4, #24]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	6892      	ldr	r2, [r2, #8]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d363      	bcc.n	8008d4c <rt_test_011_010_execute.lto_priv.0+0x15c>
 8008c84:	2300      	movs	r3, #0
 8008c86:	f383 8811 	msr	BASEPRI, r3
      chSemSignal(&sem1);
 8008c8a:	4640      	mov	r0, r8
 8008c8c:	f7fa fd00 	bl	8003690 <chSemSignal>
 8008c90:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008c94:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	d151      	bne.n	8008d40 <rt_test_011_010_execute.lto_priv.0+0x150>
 8008c9c:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008c9e:	6365      	str	r5, [r4, #52]	; 0x34
 8008ca0:	f7fa fc4e 	bl	8003540 <chSemWaitS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008ca4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d14d      	bne.n	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
 8008caa:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008cac:	2a00      	cmp	r2, #0
 8008cae:	dd4a      	ble.n	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008cb0:	6363      	str	r3, [r4, #52]	; 0x34
 8008cb2:	6823      	ldr	r3, [r4, #0]
 8008cb4:	42a3      	cmp	r3, r4
 8008cb6:	d004      	beq.n	8008cc2 <rt_test_011_010_execute.lto_priv.0+0xd2>
 8008cb8:	69a2      	ldr	r2, [r4, #24]
 8008cba:	689b      	ldr	r3, [r3, #8]
 8008cbc:	6892      	ldr	r2, [r2, #8]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d344      	bcc.n	8008d4c <rt_test_011_010_execute.lto_priv.0+0x15c>
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	f383 8811 	msr	BASEPRI, r3
      chSemSignal(&sem1);
 8008cc8:	4640      	mov	r0, r8
 8008cca:	f7fa fce1 	bl	8003690 <chSemSignal>
 8008cce:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008cd2:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	d132      	bne.n	8008d40 <rt_test_011_010_execute.lto_priv.0+0x150>
 8008cda:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008cdc:	6365      	str	r5, [r4, #52]	; 0x34
 8008cde:	f7fa fc2f 	bl	8003540 <chSemWaitS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008ce2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ce4:	bb7b      	cbnz	r3, 8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
 8008ce6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008ce8:	2a00      	cmp	r2, #0
 8008cea:	dd2c      	ble.n	8008d46 <rt_test_011_010_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008cec:	6363      	str	r3, [r4, #52]	; 0x34
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	42a3      	cmp	r3, r4
 8008cf2:	d004      	beq.n	8008cfe <rt_test_011_010_execute.lto_priv.0+0x10e>
 8008cf4:	69a2      	ldr	r2, [r4, #24]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	6892      	ldr	r2, [r2, #8]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	d326      	bcc.n	8008d4c <rt_test_011_010_execute.lto_priv.0+0x15c>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	f383 8811 	msr	BASEPRI, r3
      chSemSignal(&sem1);
 8008d04:	4640      	mov	r0, r8
 8008d06:	f7fa fcc3 	bl	8003690 <chSemSignal>
 8008d0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d0e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8008d14:	f109 0901 	add.w	r9, r9, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008d18:	eba3 030a 	sub.w	r3, r3, sl
    } while (chVTIsSystemTimeWithinX(start, end));
 8008d1c:	b29b      	uxth	r3, r3
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	f67f af74 	bls.w	8008c0c <rt_test_011_010_execute.lto_priv.0+0x1c>
  test_set_step(2);
 8008d24:	2302      	movs	r3, #2
    test_print("--- Score : ");
 8008d26:	480e      	ldr	r0, [pc, #56]	; (8008d60 <rt_test_011_010_execute.lto_priv.0+0x170>)
  test_set_step(2);
 8008d28:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8008d2a:	f7fd fc11 	bl	8006550 <test_print>
    test_printn(n * 4);
 8008d2e:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8008d32:	f7fd feb5 	bl	8006aa0 <test_printn>
}
 8008d36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" wait+signal/S");
 8008d3a:	480a      	ldr	r0, [pc, #40]	; (8008d64 <rt_test_011_010_execute.lto_priv.0+0x174>)
 8008d3c:	f7fd bc20 	b.w	8006580 <test_println>
    chSysHalt("SV#4");
 8008d40:	4809      	ldr	r0, [pc, #36]	; (8008d68 <rt_test_011_010_execute.lto_priv.0+0x178>)
 8008d42:	f7f7 fd15 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8008d46:	4809      	ldr	r0, [pc, #36]	; (8008d6c <rt_test_011_010_execute.lto_priv.0+0x17c>)
 8008d48:	f7f7 fd12 	bl	8000770 <chSysHalt>
 8008d4c:	4808      	ldr	r0, [pc, #32]	; (8008d70 <rt_test_011_010_execute.lto_priv.0+0x180>)
 8008d4e:	f7f7 fd0f 	bl	8000770 <chSysHalt>
 8008d52:	bf00      	nop
 8008d54:	20001d3c 	.word	0x20001d3c
 8008d58:	20000d70 	.word	0x20000d70
 8008d5c:	200016b4 	.word	0x200016b4
 8008d60:	08011890 	.word	0x08011890
 8008d64:	080118ac 	.word	0x080118ac
 8008d68:	0800f20c 	.word	0x0800f20c
 8008d6c:	0800f214 	.word	0x0800f214
 8008d70:	08011028 	.word	0x08011028
	...

08008d80 <rt_test_011_011_execute.lto_priv.0>:

static void rt_test_011_011_execute(void) {
 8008d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t n;

  /* [11.11.1] A mutex is locked and unlocked. The operation is
     repeated continuously in a one-second time window.*/
  test_set_step(1);
 8008d84:	2501      	movs	r5, #1
 8008d86:	4f57      	ldr	r7, [pc, #348]	; (8008ee4 <rt_test_011_011_execute.lto_priv.0+0x164>)
  {
    systime_t start, end;

    n = 0;
 8008d88:	f04f 0900 	mov.w	r9, #0
  test_set_step(1);
 8008d8c:	603d      	str	r5, [r7, #0]
    start = test_wait_tick();
 8008d8e:	f7ff f817 	bl	8007dc0 <test_wait_tick>
 8008d92:	2620      	movs	r6, #32
 8008d94:	4682      	mov	sl, r0
  return systime + (systime_t)interval;
 8008d96:	4c54      	ldr	r4, [pc, #336]	; (8008ee8 <rt_test_011_011_execute.lto_priv.0+0x168>)
  chMtxLockS(mp);
 8008d98:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8008eec <rt_test_011_011_execute.lto_priv.0+0x16c>
 8008d9c:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008da0:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008da4:	4313      	orrs	r3, r2
 8008da6:	f040 8093 	bne.w	8008ed0 <rt_test_011_011_execute.lto_priv.0+0x150>
 8008daa:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008dac:	6365      	str	r5, [r4, #52]	; 0x34
 8008dae:	f7fa fe17 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008db2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 808e 	bne.w	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
 8008dba:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008dbc:	2a00      	cmp	r2, #0
 8008dbe:	f340 808a 	ble.w	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008dc2:	6363      	str	r3, [r4, #52]	; 0x34
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	42a3      	cmp	r3, r4
 8008dc8:	d005      	beq.n	8008dd6 <rt_test_011_011_execute.lto_priv.0+0x56>
 8008dca:	69a2      	ldr	r2, [r4, #24]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	6892      	ldr	r2, [r2, #8]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	f0c0 8083 	bcc.w	8008edc <rt_test_011_011_execute.lto_priv.0+0x15c>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f383 8811 	msr	BASEPRI, r3
    end = chTimeAddX(start, TIME_MS2I(1000));
    do {
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008ddc:	4640      	mov	r0, r8
 8008dde:	f7fa feef 	bl	8003bc0 <chMtxUnlock>
 8008de2:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008de6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008dea:	4313      	orrs	r3, r2
 8008dec:	d170      	bne.n	8008ed0 <rt_test_011_011_execute.lto_priv.0+0x150>
 8008dee:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008df0:	6365      	str	r5, [r4, #52]	; 0x34
 8008df2:	f7fa fdf5 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008df6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d16c      	bne.n	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
 8008dfc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008dfe:	2a00      	cmp	r2, #0
 8008e00:	dd69      	ble.n	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008e02:	6363      	str	r3, [r4, #52]	; 0x34
 8008e04:	6823      	ldr	r3, [r4, #0]
 8008e06:	42a3      	cmp	r3, r4
 8008e08:	d004      	beq.n	8008e14 <rt_test_011_011_execute.lto_priv.0+0x94>
 8008e0a:	69a2      	ldr	r2, [r4, #24]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	6892      	ldr	r2, [r2, #8]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d363      	bcc.n	8008edc <rt_test_011_011_execute.lto_priv.0+0x15c>
 8008e14:	2300      	movs	r3, #0
 8008e16:	f383 8811 	msr	BASEPRI, r3
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	f7fa fed0 	bl	8003bc0 <chMtxUnlock>
 8008e20:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008e24:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	d151      	bne.n	8008ed0 <rt_test_011_011_execute.lto_priv.0+0x150>
 8008e2c:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008e2e:	6365      	str	r5, [r4, #52]	; 0x34
 8008e30:	f7fa fdd6 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008e34:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d14d      	bne.n	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
 8008e3a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008e3c:	2a00      	cmp	r2, #0
 8008e3e:	dd4a      	ble.n	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008e40:	6363      	str	r3, [r4, #52]	; 0x34
 8008e42:	6823      	ldr	r3, [r4, #0]
 8008e44:	42a3      	cmp	r3, r4
 8008e46:	d004      	beq.n	8008e52 <rt_test_011_011_execute.lto_priv.0+0xd2>
 8008e48:	69a2      	ldr	r2, [r4, #24]
 8008e4a:	689b      	ldr	r3, [r3, #8]
 8008e4c:	6892      	ldr	r2, [r2, #8]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d344      	bcc.n	8008edc <rt_test_011_011_execute.lto_priv.0+0x15c>
 8008e52:	2300      	movs	r3, #0
 8008e54:	f383 8811 	msr	BASEPRI, r3
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008e58:	4640      	mov	r0, r8
 8008e5a:	f7fa feb1 	bl	8003bc0 <chMtxUnlock>
 8008e5e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008e62:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8008e66:	4313      	orrs	r3, r2
 8008e68:	d132      	bne.n	8008ed0 <rt_test_011_011_execute.lto_priv.0+0x150>
 8008e6a:	4640      	mov	r0, r8
  _dbg_enter_lock();
 8008e6c:	6365      	str	r5, [r4, #52]	; 0x34
 8008e6e:	f7fa fdb7 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8008e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008e74:	bb7b      	cbnz	r3, 8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
 8008e76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8008e78:	2a00      	cmp	r2, #0
 8008e7a:	dd2c      	ble.n	8008ed6 <rt_test_011_011_execute.lto_priv.0+0x156>
  _dbg_leave_lock();
 8008e7c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	42a3      	cmp	r3, r4
 8008e82:	d004      	beq.n	8008e8e <rt_test_011_011_execute.lto_priv.0+0x10e>
 8008e84:	69a2      	ldr	r2, [r4, #24]
 8008e86:	689b      	ldr	r3, [r3, #8]
 8008e88:	6892      	ldr	r2, [r2, #8]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d326      	bcc.n	8008edc <rt_test_011_011_execute.lto_priv.0+0x15c>
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f383 8811 	msr	BASEPRI, r3
      chMtxLock(&mtx1);
      chMtxUnlock(&mtx1);
 8008e94:	4640      	mov	r0, r8
 8008e96:	f7fa fe93 	bl	8003bc0 <chMtxUnlock>
 8008e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
      n++;
#if defined(SIMULATOR)
      _sim_check_for_interrupts();
#endif
    } while (chVTIsSystemTimeWithinX(start, end));
 8008e9e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 8008ea4:	f109 0901 	add.w	r9, r9, #1
  return (bool)((systime_t)((systime_t)time - (systime_t)start) <
 8008ea8:	eba3 030a 	sub.w	r3, r3, sl
    } while (chVTIsSystemTimeWithinX(start, end));
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	f67f af74 	bls.w	8008d9c <rt_test_011_011_execute.lto_priv.0+0x1c>
  }
  test_end_step(1);

  /* [11.11.2] The score is printed.*/
  test_set_step(2);
 8008eb4:	2302      	movs	r3, #2
  {
    test_print("--- Score : ");
 8008eb6:	480e      	ldr	r0, [pc, #56]	; (8008ef0 <rt_test_011_011_execute.lto_priv.0+0x170>)
  test_set_step(2);
 8008eb8:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 8008eba:	f7fd fb49 	bl	8006550 <test_print>
    test_printn(n * 4);
 8008ebe:	ea4f 0089 	mov.w	r0, r9, lsl #2
 8008ec2:	f7fd fded 	bl	8006aa0 <test_printn>
    test_println(" lock+unlock/S");
  }
  test_end_step(2);
}
 8008ec6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    test_println(" lock+unlock/S");
 8008eca:	480a      	ldr	r0, [pc, #40]	; (8008ef4 <rt_test_011_011_execute.lto_priv.0+0x174>)
 8008ecc:	f7fd bb58 	b.w	8006580 <test_println>
    chSysHalt("SV#4");
 8008ed0:	4809      	ldr	r0, [pc, #36]	; (8008ef8 <rt_test_011_011_execute.lto_priv.0+0x178>)
 8008ed2:	f7f7 fc4d 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 8008ed6:	4809      	ldr	r0, [pc, #36]	; (8008efc <rt_test_011_011_execute.lto_priv.0+0x17c>)
 8008ed8:	f7f7 fc4a 	bl	8000770 <chSysHalt>
 8008edc:	4808      	ldr	r0, [pc, #32]	; (8008f00 <rt_test_011_011_execute.lto_priv.0+0x180>)
 8008ede:	f7f7 fc47 	bl	8000770 <chSysHalt>
 8008ee2:	bf00      	nop
 8008ee4:	20001d3c 	.word	0x20001d3c
 8008ee8:	20000d70 	.word	0x20000d70
 8008eec:	20002420 	.word	0x20002420
 8008ef0:	08011890 	.word	0x08011890
 8008ef4:	080118bc 	.word	0x080118bc
 8008ef8:	0800f20c 	.word	0x0800f20c
 8008efc:	0800f214 	.word	0x0800f214
 8008f00:	08010f48 	.word	0x08010f48
	...

08008f10 <rt_test_011_012_execute.lto_priv.0>:
 */

static void rt_test_011_012_execute(void) {

  /* [11.12.1] The size of the system area is printed.*/
  test_set_step(1);
 8008f10:	2301      	movs	r3, #1
static void rt_test_011_012_execute(void) {
 8008f12:	b570      	push	{r4, r5, r6, lr}
  test_set_step(1);
 8008f14:	4d33      	ldr	r5, [pc, #204]	; (8008fe4 <rt_test_011_012_execute.lto_priv.0+0xd4>)
  {
    test_print("--- System: ");
    test_printn(sizeof(ch_system_t));
    test_println(" bytes");
 8008f16:	4c34      	ldr	r4, [pc, #208]	; (8008fe8 <rt_test_011_012_execute.lto_priv.0+0xd8>)
    test_print("--- System: ");
 8008f18:	4834      	ldr	r0, [pc, #208]	; (8008fec <rt_test_011_012_execute.lto_priv.0+0xdc>)
  test_set_step(1);
 8008f1a:	602b      	str	r3, [r5, #0]
    test_print("--- System: ");
 8008f1c:	f7fd fb18 	bl	8006550 <test_print>
  if (!n)
 8008f20:	f640 0088 	movw	r0, #2184	; 0x888
 8008f24:	f7fd fd8c 	bl	8006a40 <test_printn.part.0>
    test_println(" bytes");
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f7fd fb29 	bl	8006580 <test_println>
  }
  test_end_step(1);

  /* [11.12.2] The size of a thread structure is printed.*/
  test_set_step(2);
 8008f2e:	2302      	movs	r3, #2
  {
    test_print("--- Thread: ");
 8008f30:	482f      	ldr	r0, [pc, #188]	; (8008ff0 <rt_test_011_012_execute.lto_priv.0+0xe0>)
  test_set_step(2);
 8008f32:	602b      	str	r3, [r5, #0]
    test_print("--- Thread: ");
 8008f34:	f7fd fb0c 	bl	8006550 <test_print>
 8008f38:	2044      	movs	r0, #68	; 0x44
 8008f3a:	f7fd fd81 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(thread_t));
    test_println(" bytes");
 8008f3e:	4620      	mov	r0, r4
 8008f40:	f7fd fb1e 	bl	8006580 <test_println>
  }
  test_end_step(2);

  /* [11.12.3] The size of a virtual timer structure is printed.*/
  test_set_step(3);
 8008f44:	2303      	movs	r3, #3
    test_println(" bytes");
  }
  test_end_step(3);

  /* [11.12.4] The size of a semaphore structure is printed.*/
  test_set_step(4);
 8008f46:	2604      	movs	r6, #4
    test_print("--- Timer : ");
 8008f48:	482a      	ldr	r0, [pc, #168]	; (8008ff4 <rt_test_011_012_execute.lto_priv.0+0xe4>)
  test_set_step(3);
 8008f4a:	602b      	str	r3, [r5, #0]
    test_print("--- Timer : ");
 8008f4c:	f7fd fb00 	bl	8006550 <test_print>
 8008f50:	2014      	movs	r0, #20
 8008f52:	f7fd fd75 	bl	8006a40 <test_printn.part.0>
    test_println(" bytes");
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7fd fb12 	bl	8006580 <test_println>
  {
#if CH_CFG_USE_SEMAPHORES || defined(__DOXYGEN__)
    test_print("--- Semaph: ");
 8008f5c:	4826      	ldr	r0, [pc, #152]	; (8008ff8 <rt_test_011_012_execute.lto_priv.0+0xe8>)
  test_set_step(4);
 8008f5e:	602e      	str	r6, [r5, #0]
    test_print("--- Semaph: ");
 8008f60:	f7fd faf6 	bl	8006550 <test_print>
 8008f64:	200c      	movs	r0, #12
 8008f66:	f7fd fd6b 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(semaphore_t));
    test_println(" bytes");
 8008f6a:	4620      	mov	r0, r4
 8008f6c:	f7fd fb08 	bl	8006580 <test_println>
#endif
  }
  test_end_step(4);

  /* [11.12.5] The size of a mutex is printed.*/
  test_set_step(5);
 8008f70:	2305      	movs	r3, #5
  {
#if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
    test_print("--- Mutex : ");
 8008f72:	4822      	ldr	r0, [pc, #136]	; (8008ffc <rt_test_011_012_execute.lto_priv.0+0xec>)
  test_set_step(5);
 8008f74:	602b      	str	r3, [r5, #0]
    test_print("--- Mutex : ");
 8008f76:	f7fd faeb 	bl	8006550 <test_print>
 8008f7a:	2010      	movs	r0, #16
 8008f7c:	f7fd fd60 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(mutex_t));
    test_println(" bytes");
 8008f80:	4620      	mov	r0, r4
 8008f82:	f7fd fafd 	bl	8006580 <test_println>
#endif
  }
  test_end_step(5);

  /* [11.12.6] The size of a condition variable is printed.*/
  test_set_step(6);
 8008f86:	2306      	movs	r3, #6
  {
#if CH_CFG_USE_CONDVARS || defined(__DOXYGEN__)
    test_print("--- CondV.: ");
 8008f88:	481d      	ldr	r0, [pc, #116]	; (8009000 <rt_test_011_012_execute.lto_priv.0+0xf0>)
  test_set_step(6);
 8008f8a:	602b      	str	r3, [r5, #0]
    test_print("--- CondV.: ");
 8008f8c:	f7fd fae0 	bl	8006550 <test_print>
 8008f90:	2008      	movs	r0, #8
 8008f92:	f7fd fd55 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(condition_variable_t));
    test_println(" bytes");
 8008f96:	4620      	mov	r0, r4
 8008f98:	f7fd faf2 	bl	8006580 <test_println>
#endif
  }
  test_end_step(6);

  /* [11.12.7] The size of an event source is printed.*/
  test_set_step(7);
 8008f9c:	2307      	movs	r3, #7
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventS: ");
 8008f9e:	4819      	ldr	r0, [pc, #100]	; (8009004 <rt_test_011_012_execute.lto_priv.0+0xf4>)
  test_set_step(7);
 8008fa0:	602b      	str	r3, [r5, #0]
    test_print("--- EventS: ");
 8008fa2:	f7fd fad5 	bl	8006550 <test_print>
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7fd fd4a 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(event_source_t));
    test_println(" bytes");
 8008fac:	4620      	mov	r0, r4
 8008fae:	f7fd fae7 	bl	8006580 <test_println>
#endif
  }
  test_end_step(7);

  /* [11.12.8] The size of an event listener is printed.*/
  test_set_step(8);
 8008fb2:	2308      	movs	r3, #8
  {
#if CH_CFG_USE_EVENTS || defined(__DOXYGEN__)
    test_print("--- EventL: ");
 8008fb4:	4814      	ldr	r0, [pc, #80]	; (8009008 <rt_test_011_012_execute.lto_priv.0+0xf8>)
  test_set_step(8);
 8008fb6:	602b      	str	r3, [r5, #0]
    test_print("--- EventL: ");
 8008fb8:	f7fd faca 	bl	8006550 <test_print>
 8008fbc:	2014      	movs	r0, #20
 8008fbe:	f7fd fd3f 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(event_listener_t));
    test_println(" bytes");
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	f7fd fadc 	bl	8006580 <test_println>
#endif
  }
  test_end_step(8);

  /* [11.12.9] The size of a mailbox is printed.*/
  test_set_step(9);
 8008fc8:	2309      	movs	r3, #9
  {
#if CH_CFG_USE_MAILBOXES || defined(__DOXYGEN__)
    test_print("--- MailB.: ");
 8008fca:	4810      	ldr	r0, [pc, #64]	; (800900c <rt_test_011_012_execute.lto_priv.0+0xfc>)
  test_set_step(9);
 8008fcc:	602b      	str	r3, [r5, #0]
    test_print("--- MailB.: ");
 8008fce:	f7fd fabf 	bl	8006550 <test_print>
 8008fd2:	2028      	movs	r0, #40	; 0x28
 8008fd4:	f7fd fd34 	bl	8006a40 <test_printn.part.0>
    test_printn(sizeof(mailbox_t));
    test_println(" bytes");
 8008fd8:	4620      	mov	r0, r4
#endif
  }
  test_end_step(9);
}
 8008fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_println(" bytes");
 8008fde:	f7fd bacf 	b.w	8006580 <test_println>
 8008fe2:	bf00      	nop
 8008fe4:	20001d3c 	.word	0x20001d3c
 8008fe8:	080118dc 	.word	0x080118dc
 8008fec:	080118cc 	.word	0x080118cc
 8008ff0:	080118e4 	.word	0x080118e4
 8008ff4:	080118f4 	.word	0x080118f4
 8008ff8:	08011904 	.word	0x08011904
 8008ffc:	08011914 	.word	0x08011914
 8009000:	08011924 	.word	0x08011924
 8009004:	08011934 	.word	0x08011934
 8009008:	08011944 	.word	0x08011944
 800900c:	08011954 	.word	0x08011954

08009010 <oslib_test_001_002_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.2.1] Prints the version string.
 * .
 */

static void oslib_test_001_002_execute(void) {
 8009010:	b538      	push	{r3, r4, r5, lr}

  /* [1.2.1] Prints the version string.*/
  test_set_step(1);
 8009012:	2501      	movs	r5, #1
 8009014:	4b18      	ldr	r3, [pc, #96]	; (8009078 <oslib_test_001_002_execute.lto_priv.0+0x68>)
  {
    test_println("--- Product:                            ChibiOS/LIB");
 8009016:	4819      	ldr	r0, [pc, #100]	; (800907c <oslib_test_001_002_execute.lto_priv.0+0x6c>)
  test_set_step(1);
 8009018:	601d      	str	r5, [r3, #0]
    test_print("--- Stable Flag:                        ");
    test_printn(CH_OSLIB_STABLE);
    test_println("");
 800901a:	4c19      	ldr	r4, [pc, #100]	; (8009080 <oslib_test_001_002_execute.lto_priv.0+0x70>)
    test_println("--- Product:                            ChibiOS/LIB");
 800901c:	f7fd fab0 	bl	8006580 <test_println>
    test_print("--- Stable Flag:                        ");
 8009020:	4818      	ldr	r0, [pc, #96]	; (8009084 <oslib_test_001_002_execute.lto_priv.0+0x74>)
 8009022:	f7fd fa95 	bl	8006550 <test_print>
 8009026:	4628      	mov	r0, r5
 8009028:	f7fd fd0a 	bl	8006a40 <test_printn.part.0>
    test_println("");
 800902c:	4620      	mov	r0, r4
 800902e:	f7fd faa7 	bl	8006580 <test_println>
    test_print("--- Version String:                     ");
 8009032:	4815      	ldr	r0, [pc, #84]	; (8009088 <oslib_test_001_002_execute.lto_priv.0+0x78>)
 8009034:	f7fd fa8c 	bl	8006550 <test_print>
    test_println(CH_OSLIB_VERSION);
 8009038:	4814      	ldr	r0, [pc, #80]	; (800908c <oslib_test_001_002_execute.lto_priv.0+0x7c>)
 800903a:	f7fd faa1 	bl	8006580 <test_println>
    test_print("--- Major Number:                       ");
 800903e:	4814      	ldr	r0, [pc, #80]	; (8009090 <oslib_test_001_002_execute.lto_priv.0+0x80>)
 8009040:	f7fd fa86 	bl	8006550 <test_print>
 8009044:	4628      	mov	r0, r5
 8009046:	f7fd fcfb 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_OSLIB_MAJOR);
    test_println("");
 800904a:	4620      	mov	r0, r4
 800904c:	f7fd fa98 	bl	8006580 <test_println>
    test_print("--- Minor Number:                       ");
 8009050:	4810      	ldr	r0, [pc, #64]	; (8009094 <oslib_test_001_002_execute.lto_priv.0+0x84>)
 8009052:	f7fd fa7d 	bl	8006550 <test_print>
 8009056:	2002      	movs	r0, #2
 8009058:	f7fd fcf2 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_OSLIB_MINOR);
    test_println("");
 800905c:	4620      	mov	r0, r4
 800905e:	f7fd fa8f 	bl	8006580 <test_println>
    test_print("--- Patch Number:                       ");
 8009062:	480d      	ldr	r0, [pc, #52]	; (8009098 <oslib_test_001_002_execute.lto_priv.0+0x88>)
 8009064:	f7fd fa74 	bl	8006550 <test_print>
 8009068:	4628      	mov	r0, r5
 800906a:	f7fd fce9 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_OSLIB_PATCH);
    test_println("");
 800906e:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 8009070:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 8009074:	f7fd ba84 	b.w	8006580 <test_println>
 8009078:	20001d3c 	.word	0x20001d3c
 800907c:	08011964 	.word	0x08011964
 8009080:	0800f35c 	.word	0x0800f35c
 8009084:	0800f908 	.word	0x0800f908
 8009088:	0800f934 	.word	0x0800f934
 800908c:	08011998 	.word	0x08011998
 8009090:	0800f960 	.word	0x0800f960
 8009094:	0800f98c 	.word	0x0800f98c
 8009098:	0800f9b8 	.word	0x0800f9b8
 800909c:	00000000 	.word	0x00000000

080090a0 <oslib_test_001_003_execute.lto_priv.0>:
 * <h2>Test Steps</h2>
 * - [1.3.1] Prints the configuration options settings.
 * .
 */

static void oslib_test_001_003_execute(void) {
 80090a0:	b538      	push	{r3, r4, r5, lr}

  /* [1.3.1] Prints the configuration options settings.*/
  test_set_step(1);
 80090a2:	2501      	movs	r5, #1
 80090a4:	4b4a      	ldr	r3, [pc, #296]	; (80091d0 <oslib_test_001_003_execute.lto_priv.0+0x130>)
  {
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
    test_printn(CH_CFG_USE_MAILBOXES);
    test_println("");
 80090a6:	4c4b      	ldr	r4, [pc, #300]	; (80091d4 <oslib_test_001_003_execute.lto_priv.0+0x134>)
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80090a8:	484b      	ldr	r0, [pc, #300]	; (80091d8 <oslib_test_001_003_execute.lto_priv.0+0x138>)
  test_set_step(1);
 80090aa:	601d      	str	r5, [r3, #0]
    test_print("--- CH_CFG_USE_MAILBOXES:               ");
 80090ac:	f7fd fa50 	bl	8006550 <test_print>
 80090b0:	4628      	mov	r0, r5
 80090b2:	f7fd fcc5 	bl	8006a40 <test_printn.part.0>
    test_println("");
 80090b6:	4620      	mov	r0, r4
 80090b8:	f7fd fa62 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_MEMCORE:                 ");
 80090bc:	4847      	ldr	r0, [pc, #284]	; (80091dc <oslib_test_001_003_execute.lto_priv.0+0x13c>)
 80090be:	f7fd fa47 	bl	8006550 <test_print>
 80090c2:	4628      	mov	r0, r5
 80090c4:	f7fd fcbc 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMCORE);
    test_println("");
 80090c8:	4620      	mov	r0, r4
 80090ca:	f7fd fa59 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_HEAP:                    ");
 80090ce:	4844      	ldr	r0, [pc, #272]	; (80091e0 <oslib_test_001_003_execute.lto_priv.0+0x140>)
 80090d0:	f7fd fa3e 	bl	8006550 <test_print>
 80090d4:	4628      	mov	r0, r5
 80090d6:	f7fd fcb3 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_HEAP);
    test_println("");
 80090da:	4620      	mov	r0, r4
 80090dc:	f7fd fa50 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_MEMPOOLS:                ");
 80090e0:	4840      	ldr	r0, [pc, #256]	; (80091e4 <oslib_test_001_003_execute.lto_priv.0+0x144>)
 80090e2:	f7fd fa35 	bl	8006550 <test_print>
 80090e6:	4628      	mov	r0, r5
 80090e8:	f7fd fcaa 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_MEMPOOLS);
    test_println("");
 80090ec:	4620      	mov	r0, r4
 80090ee:	f7fd fa47 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_OBJ_FIFOS:               ");
 80090f2:	483d      	ldr	r0, [pc, #244]	; (80091e8 <oslib_test_001_003_execute.lto_priv.0+0x148>)
 80090f4:	f7fd fa2c 	bl	8006550 <test_print>
 80090f8:	4628      	mov	r0, r5
 80090fa:	f7fd fca1 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_FIFOS);
    test_println("");
 80090fe:	4620      	mov	r0, r4
 8009100:	f7fd fa3e 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_PIPES:                   ");
 8009104:	4839      	ldr	r0, [pc, #228]	; (80091ec <oslib_test_001_003_execute.lto_priv.0+0x14c>)
 8009106:	f7fd fa23 	bl	8006550 <test_print>
 800910a:	4628      	mov	r0, r5
 800910c:	f7fd fc98 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_PIPES);
    test_println("");
 8009110:	4620      	mov	r0, r4
 8009112:	f7fd fa35 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_OBJ_CACHES:              ");
 8009116:	4836      	ldr	r0, [pc, #216]	; (80091f0 <oslib_test_001_003_execute.lto_priv.0+0x150>)
 8009118:	f7fd fa1a 	bl	8006550 <test_print>
 800911c:	4628      	mov	r0, r5
 800911e:	f7fd fc8f 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_OBJ_CACHES);
    test_println("");
 8009122:	4620      	mov	r0, r4
 8009124:	f7fd fa2c 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_DELEGATES:               ");
 8009128:	4832      	ldr	r0, [pc, #200]	; (80091f4 <oslib_test_001_003_execute.lto_priv.0+0x154>)
 800912a:	f7fd fa11 	bl	8006550 <test_print>
 800912e:	4628      	mov	r0, r5
 8009130:	f7fd fc86 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_DELEGATES);
    test_println("");
 8009134:	4620      	mov	r0, r4
 8009136:	f7fd fa23 	bl	8006580 <test_println>
    test_print("--- CH_CFG_USE_FACTORY:                 ");
 800913a:	482f      	ldr	r0, [pc, #188]	; (80091f8 <oslib_test_001_003_execute.lto_priv.0+0x158>)
 800913c:	f7fd fa08 	bl	8006550 <test_print>
 8009140:	4628      	mov	r0, r5
 8009142:	f7fd fc7d 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_USE_FACTORY);
    test_println("");
 8009146:	4620      	mov	r0, r4
 8009148:	f7fd fa1a 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_MAX_NAMES_LENGTH:    ");
 800914c:	482b      	ldr	r0, [pc, #172]	; (80091fc <oslib_test_001_003_execute.lto_priv.0+0x15c>)
 800914e:	f7fd f9ff 	bl	8006550 <test_print>
 8009152:	2008      	movs	r0, #8
 8009154:	f7fd fc74 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAX_NAMES_LENGTH);
    test_println("");
 8009158:	4620      	mov	r0, r4
 800915a:	f7fd fa11 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJECTS_REGISTRY:    ");
 800915e:	4828      	ldr	r0, [pc, #160]	; (8009200 <oslib_test_001_003_execute.lto_priv.0+0x160>)
 8009160:	f7fd f9f6 	bl	8006550 <test_print>
 8009164:	4628      	mov	r0, r5
 8009166:	f7fd fc6b 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJECTS_REGISTRY);
    test_println("");
 800916a:	4620      	mov	r0, r4
 800916c:	f7fd fa08 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_GENERIC_BUFFERS:     ");
 8009170:	4824      	ldr	r0, [pc, #144]	; (8009204 <oslib_test_001_003_execute.lto_priv.0+0x164>)
 8009172:	f7fd f9ed 	bl	8006550 <test_print>
 8009176:	4628      	mov	r0, r5
 8009178:	f7fd fc62 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_GENERIC_BUFFERS);
    test_println("");
 800917c:	4620      	mov	r0, r4
 800917e:	f7fd f9ff 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_SEMAPHORES:          ");
 8009182:	4821      	ldr	r0, [pc, #132]	; (8009208 <oslib_test_001_003_execute.lto_priv.0+0x168>)
 8009184:	f7fd f9e4 	bl	8006550 <test_print>
 8009188:	4628      	mov	r0, r5
 800918a:	f7fd fc59 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_SEMAPHORES);
    test_println("");
 800918e:	4620      	mov	r0, r4
 8009190:	f7fd f9f6 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_MAILBOXES:           ");
 8009194:	481d      	ldr	r0, [pc, #116]	; (800920c <oslib_test_001_003_execute.lto_priv.0+0x16c>)
 8009196:	f7fd f9db 	bl	8006550 <test_print>
 800919a:	4628      	mov	r0, r5
 800919c:	f7fd fc50 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_MAILBOXES);
    test_println("");
 80091a0:	4620      	mov	r0, r4
 80091a2:	f7fd f9ed 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_OBJ_FIFOS:           ");
 80091a6:	481a      	ldr	r0, [pc, #104]	; (8009210 <oslib_test_001_003_execute.lto_priv.0+0x170>)
 80091a8:	f7fd f9d2 	bl	8006550 <test_print>
 80091ac:	4628      	mov	r0, r5
 80091ae:	f7fd fc47 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_OBJ_FIFOS);
    test_println("");
 80091b2:	4620      	mov	r0, r4
 80091b4:	f7fd f9e4 	bl	8006580 <test_println>
    test_print("--- CH_CFG_FACTORY_PIPES:               ");
 80091b8:	4816      	ldr	r0, [pc, #88]	; (8009214 <oslib_test_001_003_execute.lto_priv.0+0x174>)
 80091ba:	f7fd f9c9 	bl	8006550 <test_print>
 80091be:	4628      	mov	r0, r5
 80091c0:	f7fd fc3e 	bl	8006a40 <test_printn.part.0>
    test_printn(CH_CFG_FACTORY_PIPES);
    test_println("");
 80091c4:	4620      	mov	r0, r4
  }
  test_end_step(1);
}
 80091c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    test_println("");
 80091ca:	f7fd b9d9 	b.w	8006580 <test_println>
 80091ce:	bf00      	nop
 80091d0:	20001d3c 	.word	0x20001d3c
 80091d4:	0800f35c 	.word	0x0800f35c
 80091d8:	080119a0 	.word	0x080119a0
 80091dc:	080119cc 	.word	0x080119cc
 80091e0:	080119f8 	.word	0x080119f8
 80091e4:	08011a24 	.word	0x08011a24
 80091e8:	08011a50 	.word	0x08011a50
 80091ec:	08011a7c 	.word	0x08011a7c
 80091f0:	08011aa8 	.word	0x08011aa8
 80091f4:	08011ad4 	.word	0x08011ad4
 80091f8:	08011b00 	.word	0x08011b00
 80091fc:	08011b2c 	.word	0x08011b2c
 8009200:	08011b58 	.word	0x08011b58
 8009204:	08011b84 	.word	0x08011b84
 8009208:	08011bb0 	.word	0x08011bb0
 800920c:	08011bdc 	.word	0x08011bdc
 8009210:	08011c08 	.word	0x08011c08
 8009214:	08011c34 	.word	0x08011c34
	...

08009220 <oslib_test_001_001_execute.lto_priv.0>:
 8009220:	f7fd bc4e 	b.w	8006ac0 <rt_test_001_001_execute.lto_priv.0>
	...

08009230 <dis_func0>:
 * Shared code.
 ****************************************************************************/

static bool exit_flag;

static int dis_func0(void) {
 8009230:	b508      	push	{r3, lr}

  test_emit_token('0');
 8009232:	2030      	movs	r0, #48	; 0x30
 8009234:	f7fd f9c4 	bl	80065c0 <test_emit_token>

  return (msg_t)0x55AA;
}
 8009238:	f245 50aa 	movw	r0, #21930	; 0x55aa
 800923c:	bd08      	pop	{r3, pc}
 800923e:	bf00      	nop

08009240 <dis_func1>:

static msg_t dis_func1(msg_t a) {
 8009240:	b510      	push	{r4, lr}
 8009242:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8009244:	b2c0      	uxtb	r0, r0
 8009246:	f7fd f9bb 	bl	80065c0 <test_emit_token>

  return (msg_t)a;
}
 800924a:	4620      	mov	r0, r4
 800924c:	bd10      	pop	{r4, pc}
 800924e:	bf00      	nop

08009250 <dis_func2>:

static msg_t dis_func2(msg_t a, msg_t b) {
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	460d      	mov	r5, r1
 8009254:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8009256:	b2c0      	uxtb	r0, r0
 8009258:	f7fd f9b2 	bl	80065c0 <test_emit_token>
  test_emit_token((char)b);
 800925c:	b2e8      	uxtb	r0, r5
 800925e:	f7fd f9af 	bl	80065c0 <test_emit_token>

  return (msg_t)a;
}
 8009262:	4620      	mov	r0, r4
 8009264:	bd38      	pop	{r3, r4, r5, pc}
 8009266:	bf00      	nop
	...

08009270 <dis_func3>:

static msg_t dis_func3(msg_t a, msg_t b, msg_t c) {
 8009270:	b570      	push	{r4, r5, r6, lr}
 8009272:	460e      	mov	r6, r1
 8009274:	4615      	mov	r5, r2
 8009276:	4604      	mov	r4, r0

  test_emit_token((char)a);
 8009278:	b2c0      	uxtb	r0, r0
 800927a:	f7fd f9a1 	bl	80065c0 <test_emit_token>
  test_emit_token((char)b);
 800927e:	b2f0      	uxtb	r0, r6
 8009280:	f7fd f99e 	bl	80065c0 <test_emit_token>
  test_emit_token((char)c);
 8009284:	b2e8      	uxtb	r0, r5
 8009286:	f7fd f99b 	bl	80065c0 <test_emit_token>

  return (msg_t)a;
}
 800928a:	4620      	mov	r0, r4
 800928c:	bd70      	pop	{r4, r5, r6, pc}
 800928e:	bf00      	nop

08009290 <dis_func4>:

static msg_t dis_func4(msg_t a, msg_t b, msg_t c, msg_t d) {
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	460f      	mov	r7, r1
 8009294:	4616      	mov	r6, r2
 8009296:	461d      	mov	r5, r3
 8009298:	4604      	mov	r4, r0

  test_emit_token((char)a);
 800929a:	b2c0      	uxtb	r0, r0
 800929c:	f7fd f990 	bl	80065c0 <test_emit_token>
  test_emit_token((char)b);
 80092a0:	b2f8      	uxtb	r0, r7
 80092a2:	f7fd f98d 	bl	80065c0 <test_emit_token>
  test_emit_token((char)c);
 80092a6:	b2f0      	uxtb	r0, r6
 80092a8:	f7fd f98a 	bl	80065c0 <test_emit_token>
  test_emit_token((char)d);
 80092ac:	b2e8      	uxtb	r0, r5
 80092ae:	f7fd f987 	bl	80065c0 <test_emit_token>

  return (msg_t)a;
}
 80092b2:	4620      	mov	r0, r4
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b6:	bf00      	nop
	...

080092c0 <dis_func_end>:

static int dis_func_end(void) {
 80092c0:	b508      	push	{r3, lr}

  test_emit_token('Z');
 80092c2:	205a      	movs	r0, #90	; 0x5a
 80092c4:	f7fd f97c 	bl	80065c0 <test_emit_token>
  exit_flag = true;
 80092c8:	2201      	movs	r2, #1
 80092ca:	4b02      	ldr	r3, [pc, #8]	; (80092d4 <dis_func_end+0x14>)

  return (msg_t)0xAA55;
}
 80092cc:	f64a 2055 	movw	r0, #43605	; 0xaa55
  exit_flag = true;
 80092d0:	701a      	strb	r2, [r3, #0]
}
 80092d2:	bd08      	pop	{r3, pc}
 80092d4:	20002358 	.word	0x20002358
	...

080092e0 <obj_write>:
  return false;
}

static bool obj_write(objects_cache_t *ocp,
                      oc_object_t *objp,
                      bool async) {
 80092e0:	b508      	push	{r3, lr}
  (void)ocp;
  (void)async;

  test_emit_token('A' + objp->obj_key);
 80092e2:	6948      	ldr	r0, [r1, #20]
 80092e4:	3041      	adds	r0, #65	; 0x41
 80092e6:	b2c0      	uxtb	r0, r0
 80092e8:	f7fd f96a 	bl	80065c0 <test_emit_token>

  return false;
}
 80092ec:	2000      	movs	r0, #0
 80092ee:	bd08      	pop	{r3, pc}

080092f0 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4604      	mov	r4, r0
  return (bool)(qp->next != qp);
 80092f4:	6800      	ldr	r0, [r0, #0]

  while (ch_queue_notempty(&tqp->queue)) {
 80092f6:	4284      	cmp	r4, r0
 80092f8:	d011      	beq.n	800931e <chThdDequeueAllI.constprop.0+0x2e>

  tp = (thread_t *)ch_queue_fifo_remove(&tqp->queue);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 80092fa:	f06f 0501 	mvn.w	r5, #1
  qp->next       = p->next;
 80092fe:	6803      	ldr	r3, [r0, #0]
 8009300:	6023      	str	r3, [r4, #0]
  qp->next->prev = qp;
 8009302:	605c      	str	r4, [r3, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8009304:	f890 3020 	ldrb.w	r3, [r0, #32]
 8009308:	2b04      	cmp	r3, #4
 800930a:	d002      	beq.n	8009312 <chThdDequeueAllI.constprop.0+0x22>
 800930c:	4804      	ldr	r0, [pc, #16]	; (8009320 <chThdDequeueAllI.constprop.0+0x30>)
 800930e:	f7f7 fa2f 	bl	8000770 <chSysHalt>
  tp->u.rdymsg = msg;
 8009312:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8009314:	f7f8 fefc 	bl	8002110 <chSchReadyI>
  return (bool)(qp->next != qp);
 8009318:	6820      	ldr	r0, [r4, #0]
 800931a:	42a0      	cmp	r0, r4
 800931c:	d1ef      	bne.n	80092fe <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800931e:	bd38      	pop	{r3, r4, r5, pc}
 8009320:	08012140 	.word	0x08012140
	...

08009330 <Thread1.lto_priv.0>:
  chThdSleepMilliseconds(10);
}

static THD_WORKING_AREA(wa1Thread1, 256);
static THD_WORKING_AREA(wa2Thread1, 256);
static THD_FUNCTION(Thread1, arg) {
 8009330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009332:	4f2e      	ldr	r7, [pc, #184]	; (80093ec <Thread1.lto_priv.0+0xbc>)
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8009334:	4e2e      	ldr	r6, [pc, #184]	; (80093f0 <Thread1.lto_priv.0+0xc0>)
 8009336:	b083      	sub	sp, #12
 */
static inline msg_t chJobDispatch(jobs_queue_t *jqp) {
  msg_t msg, jmsg;

  /* Waiting for a job.*/
  msg = chMBFetchTimeout(&jqp->mbx, &jmsg, TIME_INFINITE);
 8009338:	f107 051c 	add.w	r5, r7, #28
 800933c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009340:	4628      	mov	r0, r5
 8009342:	a901      	add	r1, sp, #4
 8009344:	f7fa ff04 	bl	8004150 <chMBFetchTimeout>
  if (msg == MSG_OK) {
 8009348:	b108      	cbz	r0, 800934e <Thread1.lto_priv.0+0x1e>
  (void)arg;

  do {
    msg = chJobDispatch(&jq);
  } while (msg == MSG_OK);
}
 800934a:	b003      	add	sp, #12
 800934c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    job_descriptor_t *jp = (job_descriptor_t *)jmsg;
 800934e:	9c01      	ldr	r4, [sp, #4]

    chDbgAssert(jp != NULL, "is NULL");
 8009350:	2c00      	cmp	r4, #0
 8009352:	d033      	beq.n	80093bc <Thread1.lto_priv.0+0x8c>

    if (jp->jobfunc != NULL) {
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d0f7      	beq.n	800934a <Thread1.lto_priv.0+0x1a>

      /* Invoking the job function.*/
      jp->jobfunc(jp->jobarg);
 800935a:	6860      	ldr	r0, [r4, #4]
 800935c:	4798      	blx	r3
 800935e:	2320      	movs	r3, #32
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
 8009368:	4313      	orrs	r3, r2
 800936a:	d002      	beq.n	8009372 <Thread1.lto_priv.0+0x42>
    chSysHalt("SV#4");
 800936c:	4821      	ldr	r0, [pc, #132]	; (80093f4 <Thread1.lto_priv.0+0xc4>)
 800936e:	f7f7 f9ff 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 8009372:	2301      	movs	r3, #1
 8009374:	6373      	str	r3, [r6, #52]	; 0x34
  chDbgCheck((mp != NULL) &&
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	3b01      	subs	r3, #1
 800937a:	4223      	tst	r3, r4
 800937c:	d121      	bne.n	80093c2 <Thread1.lto_priv.0+0x92>
  php->next = mp->next;
 800937e:	68fb      	ldr	r3, [r7, #12]
 * @iclass
 */
static inline void chGuardedPoolFreeI(guarded_memory_pool_t *gmp, void *objp) {

  chPoolFreeI(&gmp->pool, objp);
  chSemSignalI(&gmp->sem);
 8009380:	4638      	mov	r0, r7
 8009382:	6023      	str	r3, [r4, #0]
  mp->next = php;
 8009384:	60fc      	str	r4, [r7, #12]
 8009386:	f7fa fa53 	bl	8003830 <chSemSignalI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800938a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800938c:	b9e3      	cbnz	r3, 80093c8 <Thread1.lto_priv.0+0x98>
 800938e:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8009390:	2b00      	cmp	r3, #0
 8009392:	dd19      	ble.n	80093c8 <Thread1.lto_priv.0+0x98>
  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8009394:	6833      	ldr	r3, [r6, #0]
  if (chSchIsRescRequiredI()) {
 8009396:	689a      	ldr	r2, [r3, #8]
 8009398:	69b3      	ldr	r3, [r6, #24]
 800939a:	689b      	ldr	r3, [r3, #8]
 800939c:	429a      	cmp	r2, r3
 800939e:	d816      	bhi.n	80093ce <Thread1.lto_priv.0+0x9e>
  _dbg_leave_lock();
 80093a0:	2200      	movs	r2, #0
 80093a2:	6833      	ldr	r3, [r6, #0]
 80093a4:	6372      	str	r2, [r6, #52]	; 0x34
 80093a6:	42b3      	cmp	r3, r6
 80093a8:	d004      	beq.n	80093b4 <Thread1.lto_priv.0+0x84>
 80093aa:	69b2      	ldr	r2, [r6, #24]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	6892      	ldr	r2, [r2, #8]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d317      	bcc.n	80093e4 <Thread1.lto_priv.0+0xb4>
 80093b4:	2300      	movs	r3, #0
 80093b6:	f383 8811 	msr	BASEPRI, r3
  } while (msg == MSG_OK);
 80093ba:	e7bf      	b.n	800933c <Thread1.lto_priv.0+0xc>
    chDbgAssert(jp != NULL, "is NULL");
 80093bc:	480e      	ldr	r0, [pc, #56]	; (80093f8 <Thread1.lto_priv.0+0xc8>)
 80093be:	f7f7 f9d7 	bl	8000770 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 80093c2:	480e      	ldr	r0, [pc, #56]	; (80093fc <Thread1.lto_priv.0+0xcc>)
 80093c4:	f7f7 f9d4 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 80093c8:	480d      	ldr	r0, [pc, #52]	; (8009400 <Thread1.lto_priv.0+0xd0>)
 80093ca:	f7f7 f9d1 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 80093ce:	f7f9 fc07 	bl	8002be0 <chSchDoReschedule>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80093d2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80093d4:	b113      	cbz	r3, 80093dc <Thread1.lto_priv.0+0xac>
    chSysHalt("SV#5");
 80093d6:	480b      	ldr	r0, [pc, #44]	; (8009404 <Thread1.lto_priv.0+0xd4>)
 80093d8:	f7f7 f9ca 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80093dc:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80093de:	2b00      	cmp	r3, #0
 80093e0:	ddf9      	ble.n	80093d6 <Thread1.lto_priv.0+0xa6>
 80093e2:	e7dd      	b.n	80093a0 <Thread1.lto_priv.0+0x70>
 80093e4:	4808      	ldr	r0, [pc, #32]	; (8009408 <Thread1.lto_priv.0+0xd8>)
 80093e6:	f7f7 f9c3 	bl	8000770 <chSysHalt>
 80093ea:	bf00      	nop
 80093ec:	200023bc 	.word	0x200023bc
 80093f0:	20000d70 	.word	0x20000d70
 80093f4:	0800f20c 	.word	0x0800f20c
 80093f8:	08012204 	.word	0x08012204
 80093fc:	08010cf8 	.word	0x08010cf8
 8009400:	0800f204 	.word	0x0800f204
 8009404:	0800f214 	.word	0x0800f214
 8009408:	08010e40 	.word	0x08010e40
 800940c:	00000000 	.word	0x00000000

08009410 <oslib_test_007_003_execute.lto_priv.0>:

static void oslib_test_007_003_execute(void) {
 8009410:	b510      	push	{r4, lr}

  /* [7.3.1] Trying to allocate with 100mS timeout, must fail because
     the pool is empty.*/
  test_set_step(1);
 8009412:	2401      	movs	r4, #1
 8009414:	4b08      	ldr	r3, [pc, #32]	; (8009438 <oslib_test_007_003_execute.lto_priv.0+0x28>)
  {
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 8009416:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800941a:	4808      	ldr	r0, [pc, #32]	; (800943c <oslib_test_007_003_execute.lto_priv.0+0x2c>)
  test_set_step(1);
 800941c:	601c      	str	r4, [r3, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_MS2I(100)) == NULL, "list not empty");
 800941e:	f7fb fa1f 	bl	8004860 <chGuardedPoolAllocTimeout>
  if (!condition)
 8009422:	b900      	cbnz	r0, 8009426 <oslib_test_007_003_execute.lto_priv.0+0x16>
  }
  test_end_step(1);
}
 8009424:	bd10      	pop	{r4, pc}
  test_local_fail      = true;
 8009426:	4806      	ldr	r0, [pc, #24]	; (8009440 <oslib_test_007_003_execute.lto_priv.0+0x30>)
  test_global_fail     = true;
 8009428:	4906      	ldr	r1, [pc, #24]	; (8009444 <oslib_test_007_003_execute.lto_priv.0+0x34>)
  test_failure_message = msg;
 800942a:	4b07      	ldr	r3, [pc, #28]	; (8009448 <oslib_test_007_003_execute.lto_priv.0+0x38>)
 800942c:	4a07      	ldr	r2, [pc, #28]	; (800944c <oslib_test_007_003_execute.lto_priv.0+0x3c>)
  test_local_fail      = true;
 800942e:	7004      	strb	r4, [r0, #0]
  test_global_fail     = true;
 8009430:	700c      	strb	r4, [r1, #0]
  test_failure_message = msg;
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	bd10      	pop	{r4, pc}
 8009436:	bf00      	nop
 8009438:	20001d3c 	.word	0x20001d3c
 800943c:	20000c3c 	.word	0x20000c3c
 8009440:	20001d39 	.word	0x20001d39
 8009444:	20001d38 	.word	0x20001d38
 8009448:	20001d34 	.word	0x20001d34
 800944c:	08011c60 	.word	0x08011c60

08009450 <oslib_test_004_001_execute.lto_priv.0>:
  mp->next = NULL;
 8009450:	2300      	movs	r3, #0
  mp->align = align;
 8009452:	2204      	movs	r2, #4
  mp->object_size = size;
 8009454:	2108      	movs	r1, #8
 * - [4.1.3] Sending jobs with various timings.
 * - [4.1.4] Sending two null jobs to make threads exit.
 * .
 */

static void oslib_test_004_001_execute(void) {
 8009456:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  thread_t *tp1, *tp2;

  /* [4.1.1] Initializing the Jobs Queue object.*/
  test_set_step(1);
 800945a:	2501      	movs	r5, #1
 800945c:	f04f 0820 	mov.w	r8, #32
  mp->next = NULL;
 8009460:	4c6e      	ldr	r4, [pc, #440]	; (800961c <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 8009462:	4e6f      	ldr	r6, [pc, #444]	; (8009620 <oslib_test_004_001_execute.lto_priv.0+0x1d0>)
  qp->prev = qp;
 8009464:	e9c4 4400 	strd	r4, r4, [r4]
  mp->provider = provider;
 8009468:	e9c4 2305 	strd	r2, r3, [r4, #20]
  mp->object_size = size;
 800946c:	6121      	str	r1, [r4, #16]
 800946e:	4f6d      	ldr	r7, [pc, #436]	; (8009624 <oslib_test_004_001_execute.lto_priv.0+0x1d4>)
  sp->cnt = n;
 8009470:	496d      	ldr	r1, [pc, #436]	; (8009628 <oslib_test_004_001_execute.lto_priv.0+0x1d8>)
static void oslib_test_004_001_execute(void) {
 8009472:	b08f      	sub	sp, #60	; 0x3c
  test_set_step(1);
 8009474:	6035      	str	r5, [r6, #0]
  mp->next = NULL;
 8009476:	60e3      	str	r3, [r4, #12]
 8009478:	60a3      	str	r3, [r4, #8]
 800947a:	f388 8811 	msr	BASEPRI, r8
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800947e:	e9d7 030c 	ldrd	r0, r3, [r7, #48]	; 0x30
 8009482:	4303      	orrs	r3, r0
 8009484:	d002      	beq.n	800948c <oslib_test_004_001_execute.lto_priv.0+0x3c>
    chSysHalt("SV#4");
 8009486:	4869      	ldr	r0, [pc, #420]	; (800962c <oslib_test_004_001_execute.lto_priv.0+0x1dc>)
 8009488:	f7f7 f972 	bl	8000770 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 800948c:	6963      	ldr	r3, [r4, #20]
  _dbg_enter_lock();
 800948e:	637d      	str	r5, [r7, #52]	; 0x34
 8009490:	3b01      	subs	r3, #1
 8009492:	4219      	tst	r1, r3
 8009494:	f040 80a6 	bne.w	80095e4 <oslib_test_004_001_execute.lto_priv.0+0x194>
  php->next = mp->next;
 8009498:	68e3      	ldr	r3, [r4, #12]
 800949a:	4620      	mov	r0, r4
 800949c:	600b      	str	r3, [r1, #0]
  mp->next = php;
 800949e:	60e1      	str	r1, [r4, #12]
 80094a0:	9201      	str	r2, [sp, #4]
 80094a2:	9100      	str	r1, [sp, #0]
 80094a4:	f7fa f9c4 	bl	8003830 <chSemSignalI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80094a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	f040 80a0 	bne.w	80095f0 <oslib_test_004_001_execute.lto_priv.0+0x1a0>
 80094b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80094b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f340 809a 	ble.w	80095f0 <oslib_test_004_001_execute.lto_priv.0+0x1a0>
 80094bc:	683b      	ldr	r3, [r7, #0]
  if (chSchIsRescRequiredI()) {
 80094be:	6898      	ldr	r0, [r3, #8]
 80094c0:	69bb      	ldr	r3, [r7, #24]
 80094c2:	689b      	ldr	r3, [r3, #8]
 80094c4:	4298      	cmp	r0, r3
 80094c6:	f200 8096 	bhi.w	80095f6 <oslib_test_004_001_execute.lto_priv.0+0x1a6>
  _dbg_leave_lock();
 80094ca:	2300      	movs	r3, #0
 80094cc:	637b      	str	r3, [r7, #52]	; 0x34
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	42bb      	cmp	r3, r7
 80094d2:	d005      	beq.n	80094e0 <oslib_test_004_001_execute.lto_priv.0+0x90>
 80094d4:	6898      	ldr	r0, [r3, #8]
 80094d6:	69bb      	ldr	r3, [r7, #24]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	4283      	cmp	r3, r0
 80094dc:	f0c0 809a 	bcc.w	8009614 <oslib_test_004_001_execute.lto_priv.0+0x1c4>
 80094e0:	2300      	movs	r3, #0
 80094e2:	f383 8811 	msr	BASEPRI, r3
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80094e6:	6923      	ldr	r3, [r4, #16]
  while (n != 0U) {
 80094e8:	3a01      	subs	r2, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 80094ea:	4419      	add	r1, r3
  while (n != 0U) {
 80094ec:	d1c5      	bne.n	800947a <oslib_test_004_001_execute.lto_priv.0+0x2a>
  mbp->buffer = buf;
 80094ee:	4b50      	ldr	r3, [pc, #320]	; (8009630 <oslib_test_004_001_execute.lto_priv.0+0x1e0>)
  qp->next = qp;
 80094f0:	f8df b140 	ldr.w	fp, [pc, #320]	; 8009634 <oslib_test_004_001_execute.lto_priv.0+0x1e4>
  mbp->wrptr  = buf;
 80094f4:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  mbp->buffer = buf;
 80094f8:	61e3      	str	r3, [r4, #28]
  mbp->top    = &buf[n];
 80094fa:	3310      	adds	r3, #16
 80094fc:	6223      	str	r3, [r4, #32]
    chJobObjectInit(&jq, JOBS_QUEUE_SIZE, jobs, msg_queue);
  }
  test_end_step(1);

  /* [4.1.2] Starting the dispatcher threads.*/
  test_set_step(2);
 80094fe:	2302      	movs	r3, #2
 8009500:	6033      	str	r3, [r6, #0]
 8009502:	f10b 0308 	add.w	r3, fp, #8
  qp->prev = qp;
 8009506:	e9c4 bb0d 	strd	fp, fp, [r4, #52]	; 0x34
 800950a:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  return chThdGetSelfX()->hdr.pqueue.prio;
 800950e:	69b9      	ldr	r1, [r7, #24]
  mbp->cnt    = (size_t)0;
 8009510:	62e2      	str	r2, [r4, #44]	; 0x2c
  {
    thread_descriptor_t td1 = {
      .name  = "dispatcher1",
      .wbase = wa1Thread1,
      .wend  = THD_WORKING_AREA_END(wa1Thread1),
      .prio  = chThdGetPriorityX() - 1,
 8009512:	688b      	ldr	r3, [r1, #8]
  mbp->reset  = false;
 8009514:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
 8009518:	3b01      	subs	r3, #1
    thread_descriptor_t td1 = {
 800951a:	930b      	str	r3, [sp, #44]	; 0x2c
 800951c:	4b46      	ldr	r3, [pc, #280]	; (8009638 <oslib_test_004_001_execute.lto_priv.0+0x1e8>)
 800951e:	4c47      	ldr	r4, [pc, #284]	; (800963c <oslib_test_004_001_execute.lto_priv.0+0x1ec>)
 8009520:	9309      	str	r3, [sp, #36]	; 0x24
 8009522:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009526:	930a      	str	r3, [sp, #40]	; 0x28
 8009528:	4b45      	ldr	r3, [pc, #276]	; (8009640 <oslib_test_004_001_execute.lto_priv.0+0x1f0>)
      .funcp = Thread1,
      .arg   = NULL
    };
    tp1 = chThdCreate(&td1);
 800952a:	a808      	add	r0, sp, #32
    thread_descriptor_t td1 = {
 800952c:	920d      	str	r2, [sp, #52]	; 0x34
 800952e:	9200      	str	r2, [sp, #0]
 8009530:	9308      	str	r3, [sp, #32]
 8009532:	940c      	str	r4, [sp, #48]	; 0x30
    tp1 = chThdCreate(&td1);
 8009534:	f7fb f8bc 	bl	80046b0 <chThdCreate>
 8009538:	69bb      	ldr	r3, [r7, #24]

    thread_descriptor_t td2 = {
 800953a:	9a00      	ldr	r2, [sp, #0]
      .name  = "dispatcher2",
      .wbase = wa2Thread1,
      .wend  = THD_WORKING_AREA_END(wa2Thread1),
      .prio  = chThdGetPriorityX() - 2,
 800953c:	689b      	ldr	r3, [r3, #8]
    tp1 = chThdCreate(&td1);
 800953e:	4681      	mov	r9, r0
      .prio  = chThdGetPriorityX() - 2,
 8009540:	3b02      	subs	r3, #2
    thread_descriptor_t td2 = {
 8009542:	9305      	str	r3, [sp, #20]
 8009544:	4b3f      	ldr	r3, [pc, #252]	; (8009644 <oslib_test_004_001_execute.lto_priv.0+0x1f4>)
      .funcp = Thread1,
      .arg   = NULL
    };
    tp2 = chThdCreate(&td2);
 8009546:	a802      	add	r0, sp, #8
    thread_descriptor_t td2 = {
 8009548:	9303      	str	r3, [sp, #12]
 800954a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 800954e:	9304      	str	r3, [sp, #16]
 8009550:	4b3d      	ldr	r3, [pc, #244]	; (8009648 <oslib_test_004_001_execute.lto_priv.0+0x1f8>)
 8009552:	9406      	str	r4, [sp, #24]
 8009554:	9302      	str	r3, [sp, #8]
 8009556:	9207      	str	r2, [sp, #28]
    tp2 = chThdCreate(&td2);
 8009558:	f7fb f8aa 	bl	80046b0 <chThdCreate>
  }
  test_end_step(2);

  /* [4.1.3] Sending jobs with various timings.*/
  test_set_step(3);
 800955c:	2303      	movs	r3, #3
 800955e:	2561      	movs	r5, #97	; 0x61
    tp2 = chThdCreate(&td2);
 8009560:	4680      	mov	r8, r0
  test_set_step(3);
 8009562:	4f3a      	ldr	r7, [pc, #232]	; (800964c <oslib_test_004_001_execute.lto_priv.0+0x1fc>)
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8009564:	f1ab 0a34 	sub.w	sl, fp, #52	; 0x34
 8009568:	6033      	str	r3, [r6, #0]
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800956a:	f1ab 0b18 	sub.w	fp, fp, #24
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 800956e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009572:	4650      	mov	r0, sl
 8009574:	f7fb f974 	bl	8004860 <chGuardedPoolAllocTimeout>
 8009578:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 800957a:	2200      	movs	r2, #0
 800957c:	4658      	mov	r0, fp
    job_descriptor_t *jdp;

    for (i = 0; i < 8; i++) {
      jdp = chJobGet(&jq);
      jdp->jobfunc = job_slow;
      jdp->jobarg  = (void *)('a' + i);
 800957e:	e9c1 7500 	strd	r7, r5, [r1]
 8009582:	f7fa fd75 	bl	8004070 <chMBPostTimeout>
  chDbgAssert(msg == MSG_OK, "post failed");
 8009586:	bb80      	cbnz	r0, 80095ea <oslib_test_004_001_execute.lto_priv.0+0x19a>
    for (i = 0; i < 8; i++) {
 8009588:	3501      	adds	r5, #1
 800958a:	2d69      	cmp	r5, #105	; 0x69
 800958c:	d1ef      	bne.n	800956e <oslib_test_004_001_execute.lto_priv.0+0x11e>
    }
  }
  test_end_step(3);

  /* [4.1.4] Sending two null jobs to make threads exit.*/
  test_set_step(4);
 800958e:	2304      	movs	r3, #4
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 8009590:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009594:	9000      	str	r0, [sp, #0]
 8009596:	4821      	ldr	r0, [pc, #132]	; (800961c <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 8009598:	6033      	str	r3, [r6, #0]
 800959a:	f7fb f961 	bl	8004860 <chGuardedPoolAllocTimeout>
 800959e:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80095a0:	9a00      	ldr	r2, [sp, #0]
 80095a2:	482b      	ldr	r0, [pc, #172]	; (8009650 <oslib_test_004_001_execute.lto_priv.0+0x200>)
  {
    job_descriptor_t *jdp;

    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 80095a4:	e9c1 2200 	strd	r2, r2, [r1]
 80095a8:	f7fa fd62 	bl	8004070 <chMBPostTimeout>
  chDbgAssert(msg == MSG_OK, "post failed");
 80095ac:	4604      	mov	r4, r0
 80095ae:	b9e0      	cbnz	r0, 80095ea <oslib_test_004_001_execute.lto_priv.0+0x19a>
  return (job_descriptor_t *)chGuardedPoolAllocTimeout(&jqp->free, TIME_INFINITE);
 80095b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80095b4:	4819      	ldr	r0, [pc, #100]	; (800961c <oslib_test_004_001_execute.lto_priv.0+0x1cc>)
 80095b6:	f7fb f953 	bl	8004860 <chGuardedPoolAllocTimeout>
 80095ba:	4601      	mov	r1, r0
  msg = chMBPostTimeout(&jqp->mbx, (msg_t)jp, TIME_IMMEDIATE);
 80095bc:	4622      	mov	r2, r4
    chJobPost(&jq, jdp);
    jdp = chJobGet(&jq);
    jdp->jobfunc = NULL;
    jdp->jobarg  = NULL;
 80095be:	e9c1 4400 	strd	r4, r4, [r1]
 80095c2:	4823      	ldr	r0, [pc, #140]	; (8009650 <oslib_test_004_001_execute.lto_priv.0+0x200>)
 80095c4:	f7fa fd54 	bl	8004070 <chMBPostTimeout>
  chDbgAssert(msg == MSG_OK, "post failed");
 80095c8:	b978      	cbnz	r0, 80095ea <oslib_test_004_001_execute.lto_priv.0+0x19a>
    chJobPost(&jq, jdp);
    (void) chThdWait(tp1);
 80095ca:	4648      	mov	r0, r9
 80095cc:	f7fa ffb0 	bl	8004530 <chThdWait>
    (void) chThdWait(tp2);
 80095d0:	4640      	mov	r0, r8
 80095d2:	f7fa ffad 	bl	8004530 <chThdWait>
    test_assert_sequence("abcdefgh", "unexpected tokens");
 80095d6:	491f      	ldr	r1, [pc, #124]	; (8009654 <oslib_test_004_001_execute.lto_priv.0+0x204>)
 80095d8:	481f      	ldr	r0, [pc, #124]	; (8009658 <oslib_test_004_001_execute.lto_priv.0+0x208>)
  }
  test_end_step(4);
}
 80095da:	b00f      	add	sp, #60	; 0x3c
 80095dc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("abcdefgh", "unexpected tokens");
 80095e0:	f7fc bf5e 	b.w	80064a0 <_test_assert_sequence>
  chDbgCheck((mp != NULL) &&
 80095e4:	481d      	ldr	r0, [pc, #116]	; (800965c <oslib_test_004_001_execute.lto_priv.0+0x20c>)
 80095e6:	f7f7 f8c3 	bl	8000770 <chSysHalt>
 80095ea:	481d      	ldr	r0, [pc, #116]	; (8009660 <oslib_test_004_001_execute.lto_priv.0+0x210>)
 80095ec:	f7f7 f8c0 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 80095f0:	481c      	ldr	r0, [pc, #112]	; (8009664 <oslib_test_004_001_execute.lto_priv.0+0x214>)
 80095f2:	f7f7 f8bd 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 80095f6:	e9cd 2100 	strd	r2, r1, [sp]
 80095fa:	f7f9 faf1 	bl	8002be0 <chSchDoReschedule>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80095fe:	e9dd 2100 	ldrd	r2, r1, [sp]
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	b113      	cbz	r3, 800960c <oslib_test_004_001_execute.lto_priv.0+0x1bc>
    chSysHalt("SV#5");
 8009606:	4818      	ldr	r0, [pc, #96]	; (8009668 <oslib_test_004_001_execute.lto_priv.0+0x218>)
 8009608:	f7f7 f8b2 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800960c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800960e:	2b00      	cmp	r3, #0
 8009610:	ddf9      	ble.n	8009606 <oslib_test_004_001_execute.lto_priv.0+0x1b6>
 8009612:	e75a      	b.n	80094ca <oslib_test_004_001_execute.lto_priv.0+0x7a>
 8009614:	4815      	ldr	r0, [pc, #84]	; (800966c <oslib_test_004_001_execute.lto_priv.0+0x21c>)
 8009616:	f7f7 f8ab 	bl	8000770 <chSysHalt>
 800961a:	bf00      	nop
 800961c:	200023bc 	.word	0x200023bc
 8009620:	20001d3c 	.word	0x20001d3c
 8009624:	20000d70 	.word	0x20000d70
 8009628:	2000239c 	.word	0x2000239c
 800962c:	0800f20c 	.word	0x0800f20c
 8009630:	20002410 	.word	0x20002410
 8009634:	200023f0 	.word	0x200023f0
 8009638:	200025f8 	.word	0x200025f8
 800963c:	08009331 	.word	0x08009331
 8009640:	08011c70 	.word	0x08011c70
 8009644:	200027c0 	.word	0x200027c0
 8009648:	08011c7c 	.word	0x08011c7c
 800964c:	0800a031 	.word	0x0800a031
 8009650:	200023d8 	.word	0x200023d8
 8009654:	08011c88 	.word	0x08011c88
 8009658:	08011c9c 	.word	0x08011c9c
 800965c:	08010cf8 	.word	0x08010cf8
 8009660:	0801217c 	.word	0x0801217c
 8009664:	0800f204 	.word	0x0800f204
 8009668:	0800f214 	.word	0x0800f214
 800966c:	08010e40 	.word	0x08010e40

08009670 <oslib_test_005_001_execute.lto_priv.0>:
 *   emitted tokens.
 * - [5.1.3] Waiting for the thread to terminate-.
 * .
 */

static void oslib_test_005_001_execute(void) {
 8009670:	b5f0      	push	{r4, r5, r6, r7, lr}
  thread_t *tp;

  /* [5.1.1] Starting the dispatcher thread.*/
  test_set_step(1);
 8009672:	2401      	movs	r4, #1
  {
    thread_descriptor_t td = {
 8009674:	2100      	movs	r1, #0
  return ch.rlist.current;
 8009676:	4a45      	ldr	r2, [pc, #276]	; (800978c <oslib_test_005_001_execute.lto_priv.0+0x11c>)
 8009678:	4b45      	ldr	r3, [pc, #276]	; (8009790 <oslib_test_005_001_execute.lto_priv.0+0x120>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800967a:	6992      	ldr	r2, [r2, #24]
static void oslib_test_005_001_execute(void) {
 800967c:	b08b      	sub	sp, #44	; 0x2c
      .name  = "dispatcher",
      .wbase = waThread1,
      .wend  = THD_WORKING_AREA_END(waThread1),
      .prio  = chThdGetPriorityX() + 1,
 800967e:	6892      	ldr	r2, [r2, #8]
    thread_descriptor_t td = {
 8009680:	9305      	str	r3, [sp, #20]
      .prio  = chThdGetPriorityX() + 1,
 8009682:	4422      	add	r2, r4
    thread_descriptor_t td = {
 8009684:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8009688:	e9cd 3206 	strd	r3, r2, [sp, #24]
 800968c:	4b41      	ldr	r3, [pc, #260]	; (8009794 <oslib_test_005_001_execute.lto_priv.0+0x124>)
  test_set_step(1);
 800968e:	4d42      	ldr	r5, [pc, #264]	; (8009798 <oslib_test_005_001_execute.lto_priv.0+0x128>)
    thread_descriptor_t td = {
 8009690:	9308      	str	r3, [sp, #32]
 8009692:	4b42      	ldr	r3, [pc, #264]	; (800979c <oslib_test_005_001_execute.lto_priv.0+0x12c>)
      .funcp = Thread1,
      .arg   = NULL
    };
    tp = chThdCreate(&td);
 8009694:	a804      	add	r0, sp, #16
  test_set_step(1);
 8009696:	602c      	str	r4, [r5, #0]
    thread_descriptor_t td = {
 8009698:	9109      	str	r1, [sp, #36]	; 0x24
 800969a:	9304      	str	r3, [sp, #16]
    tp = chThdCreate(&td);
 800969c:	f7fb f808 	bl	80046b0 <chThdCreate>
  }
  test_end_step(1);

  /* [5.1.2] Calling the default veneers, checking the result and the
     emitted tokens.*/
  test_set_step(2);
 80096a0:	2302      	movs	r3, #2
 * @param[in] func      pointer to the function to be called
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect0(thread_t *tp, delegate_fn0_t func) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 80096a2:	4a3f      	ldr	r2, [pc, #252]	; (80097a0 <oslib_test_005_001_execute.lto_priv.0+0x130>)
 80096a4:	493f      	ldr	r1, [pc, #252]	; (80097a4 <oslib_test_005_001_execute.lto_priv.0+0x134>)
 80096a6:	602b      	str	r3, [r5, #0]
    tp = chThdCreate(&td);
 80096a8:	4604      	mov	r4, r0
 80096aa:	f7fb f961 	bl	8004970 <chDelegateCallVeneer>
  if (!condition)
 80096ae:	f245 53aa 	movw	r3, #21930	; 0x55aa
 80096b2:	4298      	cmp	r0, r3
 80096b4:	d160      	bne.n	8009778 <oslib_test_005_001_execute.lto_priv.0+0x108>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect1(thread_t *tp, delegate_fn1_t func,
                                          msg_t p1) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn1, func, p1);
 80096b6:	2341      	movs	r3, #65	; 0x41
 80096b8:	4620      	mov	r0, r4
 80096ba:	4a3b      	ldr	r2, [pc, #236]	; (80097a8 <oslib_test_005_001_execute.lto_priv.0+0x138>)
 80096bc:	493b      	ldr	r1, [pc, #236]	; (80097ac <oslib_test_005_001_execute.lto_priv.0+0x13c>)
 80096be:	f7fb f957 	bl	8004970 <chDelegateCallVeneer>
 80096c2:	2841      	cmp	r0, #65	; 0x41
 80096c4:	d158      	bne.n	8009778 <oslib_test_005_001_execute.lto_priv.0+0x108>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect2(thread_t *tp, delegate_fn2_t func,
                                          msg_t p1, msg_t p2) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn2, func, p1, p2);
 80096c6:	2643      	movs	r6, #67	; 0x43
 80096c8:	2342      	movs	r3, #66	; 0x42
 80096ca:	4620      	mov	r0, r4
 80096cc:	4a38      	ldr	r2, [pc, #224]	; (80097b0 <oslib_test_005_001_execute.lto_priv.0+0x140>)
 80096ce:	4939      	ldr	r1, [pc, #228]	; (80097b4 <oslib_test_005_001_execute.lto_priv.0+0x144>)
 80096d0:	9600      	str	r6, [sp, #0]
 80096d2:	f7fb f94d 	bl	8004970 <chDelegateCallVeneer>
 80096d6:	2842      	cmp	r0, #66	; 0x42
 80096d8:	d14e      	bne.n	8009778 <oslib_test_005_001_execute.lto_priv.0+0x108>
 * @return              The function return value as a @p msg_t.
 */
static inline msg_t chDelegateCallDirect3(thread_t *tp, delegate_fn3_t func,
                                          msg_t p1, msg_t p2, msg_t p3) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn3, func, p1, p2, p3);
 80096da:	2746      	movs	r7, #70	; 0x46
 80096dc:	2645      	movs	r6, #69	; 0x45
 80096de:	4936      	ldr	r1, [pc, #216]	; (80097b8 <oslib_test_005_001_execute.lto_priv.0+0x148>)
 80096e0:	2344      	movs	r3, #68	; 0x44
 80096e2:	4620      	mov	r0, r4
 80096e4:	e9cd 6700 	strd	r6, r7, [sp]
 80096e8:	4a34      	ldr	r2, [pc, #208]	; (80097bc <oslib_test_005_001_execute.lto_priv.0+0x14c>)
 80096ea:	f7fb f941 	bl	8004970 <chDelegateCallVeneer>

    retval = chDelegateCallDirect2(tp, (delegate_fn2_t)dis_func2, 'B', 'C');
    test_assert(retval == (int)'B', "invalid return value");

    retval = chDelegateCallDirect3(tp, (delegate_fn3_t)dis_func3, 'D', 'E', 'F');
    test_assert(retval == (int)'D', "invalid return value");
 80096ee:	f1a0 0044 	sub.w	r0, r0, #68	; 0x44
 80096f2:	fab0 f080 	clz	r0, r0
 80096f6:	4932      	ldr	r1, [pc, #200]	; (80097c0 <oslib_test_005_001_execute.lto_priv.0+0x150>)
 80096f8:	0940      	lsrs	r0, r0, #5
 80096fa:	f7fc f8e1 	bl	80058c0 <_test_assert>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d142      	bne.n	8009788 <oslib_test_005_001_execute.lto_priv.0+0x118>
 */
static inline msg_t chDelegateCallDirect4(thread_t *tp, delegate_fn4_t func,
                                          msg_t p1, msg_t p2, msg_t p3,
                                          msg_t p4) {

  return chDelegateCallVeneer(tp, __ch_delegate_fn4, func, p1, p2, p3, p4);
 8009702:	f04f 0c4a 	mov.w	ip, #74	; 0x4a
 8009706:	2749      	movs	r7, #73	; 0x49
 8009708:	2648      	movs	r6, #72	; 0x48
 800970a:	492e      	ldr	r1, [pc, #184]	; (80097c4 <oslib_test_005_001_execute.lto_priv.0+0x154>)
 800970c:	2347      	movs	r3, #71	; 0x47
 800970e:	4620      	mov	r0, r4
 8009710:	e9cd 7c01 	strd	r7, ip, [sp, #4]
 8009714:	4a2c      	ldr	r2, [pc, #176]	; (80097c8 <oslib_test_005_001_execute.lto_priv.0+0x158>)
 8009716:	9600      	str	r6, [sp, #0]
 8009718:	f7fb f92a 	bl	8004970 <chDelegateCallVeneer>

    retval = chDelegateCallDirect4(tp, (delegate_fn4_t)dis_func4, 'G', 'H', 'I', 'J');
    test_assert(retval == (int)'G', "invalid return value");
 800971c:	f1a0 0047 	sub.w	r0, r0, #71	; 0x47
 8009720:	fab0 f080 	clz	r0, r0
 8009724:	4926      	ldr	r1, [pc, #152]	; (80097c0 <oslib_test_005_001_execute.lto_priv.0+0x150>)
 8009726:	0940      	lsrs	r0, r0, #5
 8009728:	f7fc f8ca 	bl	80058c0 <_test_assert>
 800972c:	bb60      	cbnz	r0, 8009788 <oslib_test_005_001_execute.lto_priv.0+0x118>
  return chDelegateCallVeneer(tp, __ch_delegate_fn0, func);
 800972e:	491d      	ldr	r1, [pc, #116]	; (80097a4 <oslib_test_005_001_execute.lto_priv.0+0x134>)
 8009730:	4620      	mov	r0, r4
 8009732:	4a26      	ldr	r2, [pc, #152]	; (80097cc <oslib_test_005_001_execute.lto_priv.0+0x15c>)
 8009734:	f7fb f91c 	bl	8004970 <chDelegateCallVeneer>

    retval = chDelegateCallDirect0(tp, (delegate_fn0_t)dis_func_end);
    test_assert(retval == 0xAA55, "invalid return value");
 8009738:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800973c:	1ac0      	subs	r0, r0, r3
 800973e:	fab0 f080 	clz	r0, r0
 8009742:	491f      	ldr	r1, [pc, #124]	; (80097c0 <oslib_test_005_001_execute.lto_priv.0+0x150>)
 8009744:	0940      	lsrs	r0, r0, #5
 8009746:	f7fc f8bb 	bl	80058c0 <_test_assert>
 800974a:	b9e8      	cbnz	r0, 8009788 <oslib_test_005_001_execute.lto_priv.0+0x118>

    test_assert_sequence("0ABCDEFGHIJZ", "unexpected tokens");
 800974c:	4920      	ldr	r1, [pc, #128]	; (80097d0 <oslib_test_005_001_execute.lto_priv.0+0x160>)
 800974e:	4821      	ldr	r0, [pc, #132]	; (80097d4 <oslib_test_005_001_execute.lto_priv.0+0x164>)
 8009750:	f7fc fea6 	bl	80064a0 <_test_assert_sequence>
 8009754:	b9c0      	cbnz	r0, 8009788 <oslib_test_005_001_execute.lto_priv.0+0x118>
  }
  test_end_step(2);

  /* [5.1.3] Waiting for the thread to terminate-.*/
  test_set_step(3);
 8009756:	2303      	movs	r3, #3
  {
    msg_t msg = chThdWait(tp);
 8009758:	4620      	mov	r0, r4
  test_set_step(3);
 800975a:	602b      	str	r3, [r5, #0]
    msg_t msg = chThdWait(tp);
 800975c:	f7fa fee8 	bl	8004530 <chThdWait>
    test_assert(msg == 0x0FA5, "invalid exit code");
 8009760:	f640 73a5 	movw	r3, #4005	; 0xfa5
 8009764:	1ac0      	subs	r0, r0, r3
 8009766:	fab0 f080 	clz	r0, r0
 800976a:	491b      	ldr	r1, [pc, #108]	; (80097d8 <oslib_test_005_001_execute.lto_priv.0+0x168>)
 800976c:	0940      	lsrs	r0, r0, #5
  }
  test_end_step(3);
}
 800976e:	b00b      	add	sp, #44	; 0x2c
 8009770:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    test_assert(msg == 0x0FA5, "invalid exit code");
 8009774:	f7fc b8a4 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 8009778:	2301      	movs	r3, #1
 800977a:	4918      	ldr	r1, [pc, #96]	; (80097dc <oslib_test_005_001_execute.lto_priv.0+0x16c>)
  test_global_fail     = true;
 800977c:	4a18      	ldr	r2, [pc, #96]	; (80097e0 <oslib_test_005_001_execute.lto_priv.0+0x170>)
  test_failure_message = msg;
 800977e:	4819      	ldr	r0, [pc, #100]	; (80097e4 <oslib_test_005_001_execute.lto_priv.0+0x174>)
 8009780:	4c0f      	ldr	r4, [pc, #60]	; (80097c0 <oslib_test_005_001_execute.lto_priv.0+0x150>)
  test_local_fail      = true;
 8009782:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 8009784:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 8009786:	7013      	strb	r3, [r2, #0]
}
 8009788:	b00b      	add	sp, #44	; 0x2c
 800978a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800978c:	20000d70 	.word	0x20000d70
 8009790:	20002988 	.word	0x20002988
 8009794:	0800a0b1 	.word	0x0800a0b1
 8009798:	20001d3c 	.word	0x20001d3c
 800979c:	08011ca8 	.word	0x08011ca8
 80097a0:	08009231 	.word	0x08009231
 80097a4:	08000371 	.word	0x08000371
 80097a8:	08009241 	.word	0x08009241
 80097ac:	08000381 	.word	0x08000381
 80097b0:	08009251 	.word	0x08009251
 80097b4:	080003a1 	.word	0x080003a1
 80097b8:	080003c1 	.word	0x080003c1
 80097bc:	08009271 	.word	0x08009271
 80097c0:	08011cb4 	.word	0x08011cb4
 80097c4:	080003e1 	.word	0x080003e1
 80097c8:	08009291 	.word	0x08009291
 80097cc:	080092c1 	.word	0x080092c1
 80097d0:	08011c88 	.word	0x08011c88
 80097d4:	08011ccc 	.word	0x08011ccc
 80097d8:	08011cdc 	.word	0x08011cdc
 80097dc:	20001d39 	.word	0x20001d39
 80097e0:	20001d38 	.word	0x20001d38
 80097e4:	20001d34 	.word	0x20001d34
	...

080097f0 <oslib_test_008_001_execute.lto_priv.0>:

static void oslib_test_008_001_execute(void) {
 80097f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  void *p1, *p2, *p3;
  size_t n, sz;

  /* [8.1.1] Testing initial conditions, the heap must not be
     fragmented and one free block present.*/
  test_set_step(1);
 80097f4:	2501      	movs	r5, #1
static void oslib_test_008_001_execute(void) {
 80097f6:	b084      	sub	sp, #16
  test_set_step(1);
 80097f8:	4cc3      	ldr	r4, [pc, #780]	; (8009b08 <oslib_test_008_001_execute.lto_priv.0+0x318>)
  {
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 80097fa:	2200      	movs	r2, #0
 80097fc:	4669      	mov	r1, sp
 80097fe:	48c3      	ldr	r0, [pc, #780]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
  test_set_step(1);
 8009800:	6025      	str	r5, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &sz, NULL) == 1, "heap fragmented");
 8009802:	f7fa ffb5 	bl	8004770 <chHeapStatus>
  if (!condition)
 8009806:	42a8      	cmp	r0, r5
 8009808:	f040 8192 	bne.w	8009b30 <oslib_test_008_001_execute.lto_priv.0+0x340>
  }
  test_end_step(1);

  /* [8.1.2] Trying to allocate an block bigger than available space,
     an error is expected.*/
  test_set_step(2);
 800980c:	2302      	movs	r3, #2
 *
 * @api
 */
static inline void *chHeapAlloc(memory_heap_t *heapp, size_t size) {

  return chHeapAllocAligned(heapp, size, CH_HEAP_ALIGNMENT);
 800980e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009812:	2208      	movs	r2, #8
 8009814:	48bd      	ldr	r0, [pc, #756]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009816:	6023      	str	r3, [r4, #0]
 8009818:	f7fa fd02 	bl	8004220 <chHeapAllocAligned>
  {
    p1 = chHeapAlloc(&test_heap, sizeof test_heap_buffer * 2);
    test_assert(p1 == NULL, "allocation not failed");
 800981c:	fab0 f080 	clz	r0, r0
 8009820:	49bb      	ldr	r1, [pc, #748]	; (8009b10 <oslib_test_008_001_execute.lto_priv.0+0x320>)
 8009822:	0940      	lsrs	r0, r0, #5
 8009824:	f7fc f84c 	bl	80058c0 <_test_assert>
 8009828:	b110      	cbz	r0, 8009830 <oslib_test_008_001_execute.lto_priv.0+0x40>
  {
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
    test_assert(n == sz, "size changed");
  }
  test_end_step(10);
}
 800982a:	b004      	add	sp, #16
 800982c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  test_set_step(3);
 8009830:	2303      	movs	r3, #3
 8009832:	2110      	movs	r1, #16
 8009834:	2208      	movs	r2, #8
 8009836:	48b5      	ldr	r0, [pc, #724]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	f7fa fcf1 	bl	8004220 <chHeapAllocAligned>
 800983e:	4605      	mov	r5, r0
    test_assert(p1 != NULL, "allocation failed");
 8009840:	3800      	subs	r0, #0
 8009842:	bf18      	it	ne
 8009844:	2001      	movne	r0, #1
 8009846:	49b3      	ldr	r1, [pc, #716]	; (8009b14 <oslib_test_008_001_execute.lto_priv.0+0x324>)
 8009848:	f7fc f83a 	bl	80058c0 <_test_assert>
 800984c:	2800      	cmp	r0, #0
 800984e:	d1ec      	bne.n	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    chHeapFree(p1);
 8009850:	4628      	mov	r0, r5
 8009852:	f7fa fda5 	bl	80043a0 <chHeapFree>
  test_set_step(4);
 8009856:	2304      	movs	r3, #4
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8009858:	a903      	add	r1, sp, #12
 800985a:	48ac      	ldr	r0, [pc, #688]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 800985c:	aa02      	add	r2, sp, #8
  test_set_step(4);
 800985e:	6023      	str	r3, [r4, #0]
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8009860:	f7fa ff86 	bl	8004770 <chHeapStatus>
 8009864:	4603      	mov	r3, r0
    test_assert(n == 1, "missing free block");
 8009866:	f1a0 0001 	sub.w	r0, r0, #1
 800986a:	fab0 f080 	clz	r0, r0
 800986e:	49aa      	ldr	r1, [pc, #680]	; (8009b18 <oslib_test_008_001_execute.lto_priv.0+0x328>)
 8009870:	0940      	lsrs	r0, r0, #5
    n = chHeapStatus(&test_heap, &total_size, &largest_size);
 8009872:	9301      	str	r3, [sp, #4]
    test_assert(n == 1, "missing free block");
 8009874:	f7fc f824 	bl	80058c0 <_test_assert>
 8009878:	2800      	cmp	r0, #0
 800987a:	d1d6      	bne.n	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    test_assert(total_size >= ALLOC_SIZE, "unexpected heap state");
 800987c:	9803      	ldr	r0, [sp, #12]
 800987e:	49a7      	ldr	r1, [pc, #668]	; (8009b1c <oslib_test_008_001_execute.lto_priv.0+0x32c>)
 8009880:	280f      	cmp	r0, #15
 8009882:	bf94      	ite	ls
 8009884:	2000      	movls	r0, #0
 8009886:	2001      	movhi	r0, #1
 8009888:	f7fc f81a 	bl	80058c0 <_test_assert>
 800988c:	2800      	cmp	r0, #0
 800988e:	d1cc      	bne.n	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    test_assert(total_size == largest_size, "unexpected heap state");
 8009890:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
 8009894:	1ac0      	subs	r0, r0, r3
 8009896:	fab0 f080 	clz	r0, r0
 800989a:	49a0      	ldr	r1, [pc, #640]	; (8009b1c <oslib_test_008_001_execute.lto_priv.0+0x32c>)
 800989c:	0940      	lsrs	r0, r0, #5
 800989e:	f7fc f80f 	bl	80058c0 <_test_assert>
 80098a2:	4605      	mov	r5, r0
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1c0      	bne.n	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
  test_set_step(5);
 80098a8:	2305      	movs	r3, #5
 80098aa:	2208      	movs	r2, #8
 80098ac:	2110      	movs	r1, #16
 80098ae:	4897      	ldr	r0, [pc, #604]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80098b0:	6023      	str	r3, [r4, #0]
 80098b2:	f7fa fcb5 	bl	8004220 <chHeapAllocAligned>
 80098b6:	2208      	movs	r2, #8
 80098b8:	4680      	mov	r8, r0
 80098ba:	2110      	movs	r1, #16
 80098bc:	4893      	ldr	r0, [pc, #588]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80098be:	f7fa fcaf 	bl	8004220 <chHeapAllocAligned>
 80098c2:	2208      	movs	r2, #8
 80098c4:	2110      	movs	r1, #16
 80098c6:	4607      	mov	r7, r0
 80098c8:	4890      	ldr	r0, [pc, #576]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80098ca:	f7fa fca9 	bl	8004220 <chHeapAllocAligned>
 80098ce:	4606      	mov	r6, r0
    chHeapFree(p1);                                 /* Does not merge.*/
 80098d0:	4640      	mov	r0, r8
 80098d2:	f7fa fd65 	bl	80043a0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges backward.*/
 80098d6:	4638      	mov	r0, r7
 80098d8:	f7fa fd62 	bl	80043a0 <chHeapFree>
    chHeapFree(p3);                                 /* Merges both sides.*/
 80098dc:	4630      	mov	r0, r6
 80098de:	f7fa fd5f 	bl	80043a0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80098e2:	462a      	mov	r2, r5
 80098e4:	a901      	add	r1, sp, #4
 80098e6:	4889      	ldr	r0, [pc, #548]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80098e8:	f7fa ff42 	bl	8004770 <chHeapStatus>
 80098ec:	f1a0 0001 	sub.w	r0, r0, #1
 80098f0:	fab0 f080 	clz	r0, r0
 80098f4:	498a      	ldr	r1, [pc, #552]	; (8009b20 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 80098f6:	0940      	lsrs	r0, r0, #5
 80098f8:	f7fb ffe2 	bl	80058c0 <_test_assert>
 80098fc:	4605      	mov	r5, r0
 80098fe:	2800      	cmp	r0, #0
 8009900:	d193      	bne.n	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
  test_set_step(6);
 8009902:	2306      	movs	r3, #6
 8009904:	2208      	movs	r2, #8
 8009906:	2110      	movs	r1, #16
 8009908:	4880      	ldr	r0, [pc, #512]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 800990a:	6023      	str	r3, [r4, #0]
 800990c:	f7fa fc88 	bl	8004220 <chHeapAllocAligned>
 8009910:	2208      	movs	r2, #8
 8009912:	4606      	mov	r6, r0
 8009914:	2110      	movs	r1, #16
 8009916:	487d      	ldr	r0, [pc, #500]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009918:	f7fa fc82 	bl	8004220 <chHeapAllocAligned>
 800991c:	4607      	mov	r7, r0
 800991e:	2208      	movs	r2, #8
 8009920:	2110      	movs	r1, #16
 8009922:	487a      	ldr	r0, [pc, #488]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009924:	f7fa fc7c 	bl	8004220 <chHeapAllocAligned>
    chHeapFree(p3);                                 /* Merges forward.*/
 8009928:	f7fa fd3a 	bl	80043a0 <chHeapFree>
    chHeapFree(p2);                                 /* Merges forward.*/
 800992c:	4638      	mov	r0, r7
 800992e:	f7fa fd37 	bl	80043a0 <chHeapFree>
    chHeapFree(p1);                                 /* Merges forward.*/
 8009932:	4630      	mov	r0, r6
 8009934:	f7fa fd34 	bl	80043a0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8009938:	462a      	mov	r2, r5
 800993a:	a901      	add	r1, sp, #4
 800993c:	4873      	ldr	r0, [pc, #460]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 800993e:	f7fa ff17 	bl	8004770 <chHeapStatus>
 8009942:	f1a0 0001 	sub.w	r0, r0, #1
 8009946:	fab0 f080 	clz	r0, r0
 800994a:	4975      	ldr	r1, [pc, #468]	; (8009b20 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 800994c:	0940      	lsrs	r0, r0, #5
 800994e:	f7fb ffb7 	bl	80058c0 <_test_assert>
 8009952:	4605      	mov	r5, r0
 8009954:	2800      	cmp	r0, #0
 8009956:	f47f af68 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
  test_set_step(7);
 800995a:	2307      	movs	r3, #7
 800995c:	2208      	movs	r2, #8
 800995e:	2111      	movs	r1, #17
 8009960:	486a      	ldr	r0, [pc, #424]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009962:	6023      	str	r3, [r4, #0]
 8009964:	f7fa fc5c 	bl	8004220 <chHeapAllocAligned>
 8009968:	2208      	movs	r2, #8
 800996a:	4606      	mov	r6, r0
 800996c:	2110      	movs	r1, #16
 800996e:	4867      	ldr	r0, [pc, #412]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009970:	f7fa fc56 	bl	8004220 <chHeapAllocAligned>
 8009974:	4603      	mov	r3, r0
    chHeapFree(p1);
 8009976:	4630      	mov	r0, r6
 8009978:	461e      	mov	r6, r3
 800997a:	f7fa fd11 	bl	80043a0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 800997e:	462a      	mov	r2, r5
 8009980:	a901      	add	r1, sp, #4
 8009982:	4862      	ldr	r0, [pc, #392]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009984:	f7fa fef4 	bl	8004770 <chHeapStatus>
 8009988:	f1a0 0002 	sub.w	r0, r0, #2
 800998c:	fab0 f080 	clz	r0, r0
 8009990:	4964      	ldr	r1, [pc, #400]	; (8009b24 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 8009992:	0940      	lsrs	r0, r0, #5
 8009994:	f7fb ff94 	bl	80058c0 <_test_assert>
 8009998:	4605      	mov	r5, r0
 800999a:	2800      	cmp	r0, #0
 800999c:	f47f af45 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
 80099a0:	2208      	movs	r2, #8
 80099a2:	2110      	movs	r1, #16
 80099a4:	4859      	ldr	r0, [pc, #356]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80099a6:	f7fa fc3b 	bl	8004220 <chHeapAllocAligned>
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 80099aa:	462a      	mov	r2, r5
 80099ac:	4607      	mov	r7, r0
 80099ae:	a901      	add	r1, sp, #4
 80099b0:	4856      	ldr	r0, [pc, #344]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80099b2:	f7fa fedd 	bl	8004770 <chHeapStatus>
 80099b6:	2801      	cmp	r0, #1
 80099b8:	f000 80c4 	beq.w	8009b44 <oslib_test_008_001_execute.lto_priv.0+0x354>
 80099bc:	2200      	movs	r2, #0
 80099be:	4853      	ldr	r0, [pc, #332]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80099c0:	a901      	add	r1, sp, #4
 80099c2:	f7fa fed5 	bl	8004770 <chHeapStatus>
 80099c6:	f1a0 0802 	sub.w	r8, r0, #2
 80099ca:	f1d8 0000 	rsbs	r0, r8, #0
 80099ce:	eb40 0008 	adc.w	r0, r0, r8
 80099d2:	4953      	ldr	r1, [pc, #332]	; (8009b20 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 80099d4:	f7fb ff74 	bl	80058c0 <_test_assert>
 80099d8:	4605      	mov	r5, r0
 80099da:	2800      	cmp	r0, #0
 80099dc:	f47f af25 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    chHeapFree(p2);
 80099e0:	4630      	mov	r0, r6
 80099e2:	f7fa fcdd 	bl	80043a0 <chHeapFree>
    chHeapFree(p1);
 80099e6:	4638      	mov	r0, r7
 80099e8:	f7fa fcda 	bl	80043a0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 80099ec:	462a      	mov	r2, r5
 80099ee:	a901      	add	r1, sp, #4
 80099f0:	4846      	ldr	r0, [pc, #280]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 80099f2:	f7fa febd 	bl	8004770 <chHeapStatus>
 80099f6:	f100 3eff 	add.w	lr, r0, #4294967295	; 0xffffffff
 80099fa:	f1de 0000 	rsbs	r0, lr, #0
 80099fe:	4948      	ldr	r1, [pc, #288]	; (8009b20 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 8009a00:	eb40 000e 	adc.w	r0, r0, lr
 8009a04:	f7fb ff5c 	bl	80058c0 <_test_assert>
 8009a08:	4606      	mov	r6, r0
 8009a0a:	2800      	cmp	r0, #0
 8009a0c:	f47f af0d 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
  test_set_step(8);
 8009a10:	2508      	movs	r5, #8
 8009a12:	2110      	movs	r1, #16
 8009a14:	462a      	mov	r2, r5
 8009a16:	483d      	ldr	r0, [pc, #244]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009a18:	6025      	str	r5, [r4, #0]
 8009a1a:	f7fa fc01 	bl	8004220 <chHeapAllocAligned>
 8009a1e:	462a      	mov	r2, r5
 8009a20:	2110      	movs	r1, #16
 8009a22:	4680      	mov	r8, r0
 8009a24:	4839      	ldr	r0, [pc, #228]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009a26:	f7fa fbfb 	bl	8004220 <chHeapAllocAligned>
 8009a2a:	4607      	mov	r7, r0
    chHeapFree(p1);
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	f7fa fcb7 	bl	80043a0 <chHeapFree>
    test_assert( chHeapStatus(&test_heap, &n, NULL) == 2, "invalid state");
 8009a32:	4632      	mov	r2, r6
 8009a34:	a901      	add	r1, sp, #4
 8009a36:	4835      	ldr	r0, [pc, #212]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009a38:	f7fa fe9a 	bl	8004770 <chHeapStatus>
 8009a3c:	f1a0 0c02 	sub.w	ip, r0, #2
 8009a40:	f1dc 0000 	rsbs	r0, ip, #0
 8009a44:	4937      	ldr	r1, [pc, #220]	; (8009b24 <oslib_test_008_001_execute.lto_priv.0+0x334>)
 8009a46:	eb40 000c 	adc.w	r0, r0, ip
 8009a4a:	f7fb ff39 	bl	80058c0 <_test_assert>
 8009a4e:	4606      	mov	r6, r0
 8009a50:	2800      	cmp	r0, #0
 8009a52:	f47f aeea 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
 8009a56:	462a      	mov	r2, r5
 8009a58:	2120      	movs	r1, #32
 8009a5a:	482c      	ldr	r0, [pc, #176]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009a5c:	f7fa fbe0 	bl	8004220 <chHeapAllocAligned>
    chHeapFree(p1);
 8009a60:	f7fa fc9e 	bl	80043a0 <chHeapFree>
    chHeapFree(p2);
 8009a64:	4638      	mov	r0, r7
 8009a66:	f7fa fc9b 	bl	80043a0 <chHeapFree>
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	a901      	add	r1, sp, #4
 8009a6e:	4827      	ldr	r0, [pc, #156]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009a70:	f7fa fe7e 	bl	8004770 <chHeapStatus>
 8009a74:	1e46      	subs	r6, r0, #1
 8009a76:	4270      	negs	r0, r6
 8009a78:	4929      	ldr	r1, [pc, #164]	; (8009b20 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 8009a7a:	4170      	adcs	r0, r6
 8009a7c:	f7fb ff20 	bl	80058c0 <_test_assert>
 8009a80:	4602      	mov	r2, r0
 8009a82:	2800      	cmp	r0, #0
 8009a84:	f47f aed1 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
  test_set_step(9);
 8009a88:	2309      	movs	r3, #9
    (void)chHeapStatus(&test_heap, &n, NULL);
 8009a8a:	a901      	add	r1, sp, #4
 8009a8c:	481f      	ldr	r0, [pc, #124]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
  test_set_step(9);
 8009a8e:	6023      	str	r3, [r4, #0]
    (void)chHeapStatus(&test_heap, &n, NULL);
 8009a90:	f7fa fe6e 	bl	8004770 <chHeapStatus>
 8009a94:	462a      	mov	r2, r5
 8009a96:	9901      	ldr	r1, [sp, #4]
 8009a98:	481c      	ldr	r0, [pc, #112]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009a9a:	f7fa fbc1 	bl	8004220 <chHeapAllocAligned>
 8009a9e:	4606      	mov	r6, r0
    test_assert(p1 != NULL, "allocation failed");
 8009aa0:	3800      	subs	r0, #0
 8009aa2:	bf18      	it	ne
 8009aa4:	2001      	movne	r0, #1
 8009aa6:	491b      	ldr	r1, [pc, #108]	; (8009b14 <oslib_test_008_001_execute.lto_priv.0+0x324>)
 8009aa8:	f7fb ff0a 	bl	80058c0 <_test_assert>
 8009aac:	4602      	mov	r2, r0
 8009aae:	2800      	cmp	r0, #0
 8009ab0:	f47f aebb 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    test_assert(chHeapStatus(&test_heap, NULL, NULL) == 0, "not empty");
 8009ab4:	4601      	mov	r1, r0
 8009ab6:	4815      	ldr	r0, [pc, #84]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
 8009ab8:	f7fa fe5a 	bl	8004770 <chHeapStatus>
 8009abc:	fab0 f080 	clz	r0, r0
 8009ac0:	4919      	ldr	r1, [pc, #100]	; (8009b28 <oslib_test_008_001_execute.lto_priv.0+0x338>)
 8009ac2:	0940      	lsrs	r0, r0, #5
 8009ac4:	f7fb fefc 	bl	80058c0 <_test_assert>
 8009ac8:	4605      	mov	r5, r0
 8009aca:	2800      	cmp	r0, #0
 8009acc:	f47f aead 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    chHeapFree(p1);
 8009ad0:	4630      	mov	r0, r6
 8009ad2:	f7fa fc65 	bl	80043a0 <chHeapFree>
  test_set_step(10);
 8009ad6:	230a      	movs	r3, #10
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8009ad8:	462a      	mov	r2, r5
 8009ada:	a901      	add	r1, sp, #4
 8009adc:	480b      	ldr	r0, [pc, #44]	; (8009b0c <oslib_test_008_001_execute.lto_priv.0+0x31c>)
  test_set_step(10);
 8009ade:	6023      	str	r3, [r4, #0]
    test_assert(chHeapStatus(&test_heap, &n, NULL) == 1, "heap fragmented");
 8009ae0:	f7fa fe46 	bl	8004770 <chHeapStatus>
 8009ae4:	1e42      	subs	r2, r0, #1
 8009ae6:	4250      	negs	r0, r2
 8009ae8:	4150      	adcs	r0, r2
 8009aea:	490d      	ldr	r1, [pc, #52]	; (8009b20 <oslib_test_008_001_execute.lto_priv.0+0x330>)
 8009aec:	f7fb fee8 	bl	80058c0 <_test_assert>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	f47f ae9a 	bne.w	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
    test_assert(n == sz, "size changed");
 8009af6:	e9dd 3000 	ldrd	r3, r0, [sp]
 8009afa:	1ac3      	subs	r3, r0, r3
 8009afc:	4258      	negs	r0, r3
 8009afe:	490b      	ldr	r1, [pc, #44]	; (8009b2c <oslib_test_008_001_execute.lto_priv.0+0x33c>)
 8009b00:	4158      	adcs	r0, r3
 8009b02:	f7fb fedd 	bl	80058c0 <_test_assert>
 8009b06:	e690      	b.n	800982a <oslib_test_008_001_execute.lto_priv.0+0x3a>
 8009b08:	20001d3c 	.word	0x20001d3c
 8009b0c:	20002530 	.word	0x20002530
 8009b10:	08011cf0 	.word	0x08011cf0
 8009b14:	08011d08 	.word	0x08011d08
 8009b18:	08011d1c 	.word	0x08011d1c
 8009b1c:	08011d30 	.word	0x08011d30
 8009b20:	0800ff9c 	.word	0x0800ff9c
 8009b24:	08011d48 	.word	0x08011d48
 8009b28:	08011d58 	.word	0x08011d58
 8009b2c:	08011d64 	.word	0x08011d64
  test_local_fail      = true;
 8009b30:	4805      	ldr	r0, [pc, #20]	; (8009b48 <oslib_test_008_001_execute.lto_priv.0+0x358>)
  test_global_fail     = true;
 8009b32:	4906      	ldr	r1, [pc, #24]	; (8009b4c <oslib_test_008_001_execute.lto_priv.0+0x35c>)
  test_failure_message = msg;
 8009b34:	4b06      	ldr	r3, [pc, #24]	; (8009b50 <oslib_test_008_001_execute.lto_priv.0+0x360>)
 8009b36:	4a07      	ldr	r2, [pc, #28]	; (8009b54 <oslib_test_008_001_execute.lto_priv.0+0x364>)
  test_local_fail      = true;
 8009b38:	7005      	strb	r5, [r0, #0]
  test_global_fail     = true;
 8009b3a:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 8009b3c:	601a      	str	r2, [r3, #0]
}
 8009b3e:	b004      	add	sp, #16
 8009b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    test_assert((chHeapStatus(&test_heap, &n, NULL) == 1) ||
 8009b44:	2001      	movs	r0, #1
 8009b46:	e744      	b.n	80099d2 <oslib_test_008_001_execute.lto_priv.0+0x1e2>
 8009b48:	20001d39 	.word	0x20001d39
 8009b4c:	20001d38 	.word	0x20001d38
 8009b50:	20001d34 	.word	0x20001d34
 8009b54:	0800ff9c 	.word	0x0800ff9c
	...

08009b60 <chFactoryCreateObjectsFIFO.constprop.0>:
dyn_objects_fifo_t *chFactoryCreateObjectsFIFO(const char *name,
 8009b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  F_LOCK();
 8009b64:	4841      	ldr	r0, [pc, #260]	; (8009c6c <chFactoryCreateObjectsFIFO.constprop.0+0x10c>)
 8009b66:	f7f9 ffbb 	bl	8003ae0 <chMtxLock>
  dofp = (dyn_objects_fifo_t *)dyn_create_object_heap(name,
 8009b6a:	2304      	movs	r3, #4
 8009b6c:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8009b70:	493f      	ldr	r1, [pc, #252]	; (8009c70 <chFactoryCreateObjectsFIFO.constprop.0+0x110>)
 8009b72:	4840      	ldr	r0, [pc, #256]	; (8009c74 <chFactoryCreateObjectsFIFO.constprop.0+0x114>)
 8009b74:	f7fa ff14 	bl	80049a0 <dyn_create_object_heap.lto_priv.0>
  if (dofp != NULL) {
 8009b78:	4604      	mov	r4, r0
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d057      	beq.n	8009c2e <chFactoryCreateObjectsFIFO.constprop.0+0xce>
  mp->object_size = size;
 8009b7e:	2310      	movs	r3, #16
  mp->next = NULL;
 8009b80:	2500      	movs	r5, #0
  mp->align = align;
 8009b82:	2204      	movs	r2, #4
    uint8_t *objbuf = (uint8_t *)dofp + size1;
 8009b84:	f100 0794 	add.w	r7, r0, #148	; 0x94
 8009b88:	46b9      	mov	r9, r7
 8009b8a:	f04f 0820 	mov.w	r8, #32
  _dbg_enter_lock();
 8009b8e:	f04f 0b01 	mov.w	fp, #1
                                           size_t objn, unsigned objalign,
                                           void *objbuf, msg_t *msgbuf) {

  chDbgCheck((objsize >= objalign) && ((objsize % objalign) == 0U));

  chGuardedPoolObjectInitAligned(&ofp->free, objsize, objalign);
 8009b92:	18c6      	adds	r6, r0, r3
 8009b94:	e9c0 6604 	strd	r6, r6, [r0, #16]
 8009b98:	469a      	mov	sl, r3
  mp->next = NULL;
 8009b9a:	e9c0 5307 	strd	r5, r3, [r0, #28]
 8009b9e:	4b36      	ldr	r3, [pc, #216]	; (8009c78 <chFactoryCreateObjectsFIFO.constprop.0+0x118>)
  mp->align = align;
 8009ba0:	6242      	str	r2, [r0, #36]	; 0x24
  mp->provider = provider;
 8009ba2:	6285      	str	r5, [r0, #40]	; 0x28
 8009ba4:	6185      	str	r5, [r0, #24]
 8009ba6:	f388 8811 	msr	BASEPRI, r8
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8009baa:	e9d3 120c 	ldrd	r1, r2, [r3, #48]	; 0x30
 8009bae:	430a      	orrs	r2, r1
 8009bb0:	d143      	bne.n	8009c3a <chFactoryCreateObjectsFIFO.constprop.0+0xda>
  chDbgCheck((mp != NULL) &&
 8009bb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
  _dbg_enter_lock();
 8009bb4:	f8c3 b034 	str.w	fp, [r3, #52]	; 0x34
 8009bb8:	3a01      	subs	r2, #1
 8009bba:	ea19 0f02 	tst.w	r9, r2
 8009bbe:	d13f      	bne.n	8009c40 <chFactoryCreateObjectsFIFO.constprop.0+0xe0>
  php->next = mp->next;
 8009bc0:	69e2      	ldr	r2, [r4, #28]
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f8c9 2000 	str.w	r2, [r9]
  mp->next = php;
 8009bc8:	f8c4 901c 	str.w	r9, [r4, #28]
 8009bcc:	f7f9 fe30 	bl	8003830 <chSemSignalI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009bd0:	4b29      	ldr	r3, [pc, #164]	; (8009c78 <chFactoryCreateObjectsFIFO.constprop.0+0x118>)
 8009bd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009bd4:	2a00      	cmp	r2, #0
 8009bd6:	d136      	bne.n	8009c46 <chFactoryCreateObjectsFIFO.constprop.0+0xe6>
 8009bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bda:	2a00      	cmp	r2, #0
 8009bdc:	dd33      	ble.n	8009c46 <chFactoryCreateObjectsFIFO.constprop.0+0xe6>
 8009bde:	681a      	ldr	r2, [r3, #0]
  if (chSchIsRescRequiredI()) {
 8009be0:	6891      	ldr	r1, [r2, #8]
 8009be2:	699a      	ldr	r2, [r3, #24]
 8009be4:	6892      	ldr	r2, [r2, #8]
 8009be6:	4291      	cmp	r1, r2
 8009be8:	d830      	bhi.n	8009c4c <chFactoryCreateObjectsFIFO.constprop.0+0xec>
 8009bea:	681a      	ldr	r2, [r3, #0]
  _dbg_leave_lock();
 8009bec:	635d      	str	r5, [r3, #52]	; 0x34
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d004      	beq.n	8009bfc <chFactoryCreateObjectsFIFO.constprop.0+0x9c>
 8009bf2:	6891      	ldr	r1, [r2, #8]
 8009bf4:	699a      	ldr	r2, [r3, #24]
 8009bf6:	6892      	ldr	r2, [r2, #8]
 8009bf8:	428a      	cmp	r2, r1
 8009bfa:	d32f      	bcc.n	8009c5c <chFactoryCreateObjectsFIFO.constprop.0+0xfc>
 8009bfc:	f385 8811 	msr	BASEPRI, r5
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8009c00:	6a22      	ldr	r2, [r4, #32]
  while (n != 0U) {
 8009c02:	f1ba 0a01 	subs.w	sl, sl, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 8009c06:	4491      	add	r9, r2
  while (n != 0U) {
 8009c08:	d1cd      	bne.n	8009ba6 <chFactoryCreateObjectsFIFO.constprop.0+0x46>
    msg_t *msgbuf = (msg_t *)(dofp + 1);
 8009c0a:	f104 0354 	add.w	r3, r4, #84	; 0x54
  mbp->wrptr  = buf;
 8009c0e:	e9c4 330d 	strd	r3, r3, [r4, #52]	; 0x34
  ch_queue_init(&tqp->queue);
 8009c12:	f104 0244 	add.w	r2, r4, #68	; 0x44
  mbp->buffer = buf;
 8009c16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c18:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8009c1c:	e9c4 2211 	strd	r2, r2, [r4, #68]	; 0x44
 8009c20:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  mbp->top    = &buf[n];
 8009c24:	6327      	str	r7, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 8009c26:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
  mbp->reset  = false;
 8009c2a:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
  F_UNLOCK();
 8009c2e:	480f      	ldr	r0, [pc, #60]	; (8009c6c <chFactoryCreateObjectsFIFO.constprop.0+0x10c>)
 8009c30:	f7f9 ffc6 	bl	8003bc0 <chMtxUnlock>
}
 8009c34:	4620      	mov	r0, r4
 8009c36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    chSysHalt("SV#4");
 8009c3a:	4810      	ldr	r0, [pc, #64]	; (8009c7c <chFactoryCreateObjectsFIFO.constprop.0+0x11c>)
 8009c3c:	f7f6 fd98 	bl	8000770 <chSysHalt>
  chDbgCheck((mp != NULL) &&
 8009c40:	480f      	ldr	r0, [pc, #60]	; (8009c80 <chFactoryCreateObjectsFIFO.constprop.0+0x120>)
 8009c42:	f7f6 fd95 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8009c46:	480f      	ldr	r0, [pc, #60]	; (8009c84 <chFactoryCreateObjectsFIFO.constprop.0+0x124>)
 8009c48:	f7f6 fd92 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 8009c4c:	f7f8 ffc8 	bl	8002be0 <chSchDoReschedule>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009c50:	4b09      	ldr	r3, [pc, #36]	; (8009c78 <chFactoryCreateObjectsFIFO.constprop.0+0x118>)
 8009c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009c54:	b12a      	cbz	r2, 8009c62 <chFactoryCreateObjectsFIFO.constprop.0+0x102>
    chSysHalt("SV#5");
 8009c56:	480c      	ldr	r0, [pc, #48]	; (8009c88 <chFactoryCreateObjectsFIFO.constprop.0+0x128>)
 8009c58:	f7f6 fd8a 	bl	8000770 <chSysHalt>
 8009c5c:	480b      	ldr	r0, [pc, #44]	; (8009c8c <chFactoryCreateObjectsFIFO.constprop.0+0x12c>)
 8009c5e:	f7f6 fd87 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c64:	2a00      	cmp	r2, #0
 8009c66:	ddf6      	ble.n	8009c56 <chFactoryCreateObjectsFIFO.constprop.0+0xf6>
 8009c68:	e7bf      	b.n	8009bea <chFactoryCreateObjectsFIFO.constprop.0+0x8a>
 8009c6a:	bf00      	nop
 8009c6c:	200015f8 	.word	0x200015f8
 8009c70:	20001638 	.word	0x20001638
 8009c74:	08011d74 	.word	0x08011d74
 8009c78:	20000d70 	.word	0x20000d70
 8009c7c:	0800f20c 	.word	0x0800f20c
 8009c80:	08010cf8 	.word	0x08010cf8
 8009c84:	0800f204 	.word	0x0800f204
 8009c88:	0800f214 	.word	0x0800f214
 8009c8c:	08010e40 	.word	0x08010e40

08009c90 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8009c90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c94:	2320      	movs	r3, #32
 8009c96:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8009c9a:	4c30      	ldr	r4, [pc, #192]	; (8009d5c <sof_handler+0xcc>)
 8009c9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	dd01      	ble.n	8009ca6 <sof_handler+0x16>
 8009ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ca4:	b113      	cbz	r3, 8009cac <sof_handler+0x1c>
    chSysHalt("SV#6");
 8009ca6:	482e      	ldr	r0, [pc, #184]	; (8009d60 <sof_handler+0xd0>)
 8009ca8:	f7f6 fd62 	bl	8000770 <chSysHalt>
  _dbg_enter_lock();
 8009cac:	2301      	movs	r3, #1
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8009cae:	4d2d      	ldr	r5, [pc, #180]	; (8009d64 <sof_handler+0xd4>)
 8009cb0:	f8d5 248c 	ldr.w	r2, [r5, #1164]	; 0x48c
 8009cb4:	6816      	ldr	r6, [r2, #0]
 8009cb6:	6363      	str	r3, [r4, #52]	; 0x34
 8009cb8:	7831      	ldrb	r1, [r6, #0]
 8009cba:	2904      	cmp	r1, #4
 8009cbc:	d109      	bne.n	8009cd2 <sof_handler+0x42>
 8009cbe:	7a29      	ldrb	r1, [r5, #8]
 8009cc0:	2902      	cmp	r1, #2
 8009cc2:	d106      	bne.n	8009cd2 <sof_handler+0x42>
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8009cc4:	f892 8004 	ldrb.w	r8, [r2, #4]
 8009cc8:	8932      	ldrh	r2, [r6, #8]
 8009cca:	fa03 f308 	lsl.w	r3, r3, r8
 8009cce:	4213      	tst	r3, r2
 8009cd0:	d005      	beq.n	8009cde <sof_handler+0x4e>
  _dbg_leave_lock();
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8009cd6:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 8009cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 *
 * @iclass
 */
bool obqTryFlushI(output_buffers_queue_t *obqp) {

  osalDbgCheckClassI();
 8009cde:	f7f6 fe2f 	bl	8000940 <chDbgCheckClassI>

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 8009ce2:	e9d5 3715 	ldrd	r3, r7, [r5, #84]	; 0x54
 8009ce6:	42bb      	cmp	r3, r7
 8009ce8:	d1f3      	bne.n	8009cd2 <sof_handler+0x42>
 8009cea:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0f0      	beq.n	8009cd2 <sof_handler+0x42>
 8009cf0:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d0ed      	beq.n	8009cd2 <sof_handler+0x42>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 8009cf6:	3b04      	subs	r3, #4

    if (size > 0U) {
 8009cf8:	1bdb      	subs	r3, r3, r7
 8009cfa:	d0ea      	beq.n	8009cd2 <sof_handler+0x42>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 8009cfc:	603b      	str	r3, [r7, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
 8009cfe:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009d00:	3b01      	subs	r3, #1
 8009d02:	652b      	str	r3, [r5, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 8009d04:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 8009d06:	eb07 0903 	add.w	r9, r7, r3
      if (obqp->bwrptr >= obqp->btop) {
 8009d0a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
      obqp->bwrptr += obqp->bsize;
 8009d0c:	f8c5 9054 	str.w	r9, [r5, #84]	; 0x54
      if (obqp->bwrptr >= obqp->btop) {
 8009d10:	4599      	cmp	r9, r3
        obqp->bwrptr = obqp->buffers;
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 8009d12:	f04f 0300 	mov.w	r3, #0
        obqp->bwrptr = obqp->buffers;
 8009d16:	bf28      	it	cs
 8009d18:	f8d5 9068 	ldrcs.w	r9, [r5, #104]	; 0x68
      obqp->ptr = NULL;
 8009d1c:	66eb      	str	r3, [r5, #108]	; 0x6c
        obqp->bwrptr = obqp->buffers;
 8009d1e:	bf28      	it	cs
 8009d20:	f8c5 9054 	strcs.w	r9, [r5, #84]	; 0x54
  osalDbgCheckClassI();
 8009d24:	f7f6 fe0c 	bl	8000940 <chDbgCheckClassI>
  if (obqIsEmptyI(obqp)) {
 8009d28:	454f      	cmp	r7, r9
 8009d2a:	d00c      	beq.n	8009d46 <sof_handler+0xb6>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8009d2c:	463a      	mov	r2, r7
 8009d2e:	4641      	mov	r1, r8
 8009d30:	f852 3b04 	ldr.w	r3, [r2], #4
 8009d34:	4630      	mov	r0, r6
 8009d36:	f7f6 fe5b 	bl	80009f0 <usbStartTransmitI>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009d3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	dc08      	bgt.n	8009d52 <sof_handler+0xc2>
    chSysHalt("SV#7");
 8009d40:	4809      	ldr	r0, [pc, #36]	; (8009d68 <sof_handler+0xd8>)
 8009d42:	f7f6 fd15 	bl	8000770 <chSysHalt>
 8009d46:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d0ef      	beq.n	8009d2c <sof_handler+0x9c>
    osalDbgAssert(buf != NULL, "queue is empty");
 8009d4c:	4807      	ldr	r0, [pc, #28]	; (8009d6c <sof_handler+0xdc>)
 8009d4e:	f7f6 fd0f 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	ddf3      	ble.n	8009d40 <sof_handler+0xb0>
 8009d58:	e7bb      	b.n	8009cd2 <sof_handler+0x42>
 8009d5a:	bf00      	nop
 8009d5c:	20000d70 	.word	0x20000d70
 8009d60:	0800f21c 	.word	0x0800f21c
 8009d64:	20001d6c 	.word	0x20001d6c
 8009d68:	0800f224 	.word	0x0800f224
 8009d6c:	08012134 	.word	0x08012134

08009d70 <cmd_write>:
  if (argc > 0) {
 8009d70:	2900      	cmp	r1, #0
 8009d72:	dc19      	bgt.n	8009da8 <cmd_write+0x38>
static void cmd_write(BaseSequentialStream *chp, int argc, char *argv[]) {
 8009d74:	b570      	push	{r4, r5, r6, lr}
 8009d76:	4604      	mov	r4, r0
    chnWrite(&SDU1, buf, sizeof buf - 1);
 8009d78:	4e0d      	ldr	r6, [pc, #52]	; (8009db0 <cmd_write+0x40>)
 8009d7a:	4d0e      	ldr	r5, [pc, #56]	; (8009db4 <cmd_write+0x44>)
 8009d7c:	e005      	b.n	8009d8a <cmd_write+0x1a>
 8009d7e:	6833      	ldr	r3, [r6, #0]
 8009d80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009d84:	4629      	mov	r1, r5
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	4798      	blx	r3
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8009d8a:	6823      	ldr	r3, [r4, #0]
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	4620      	mov	r0, r4
 8009d92:	4798      	blx	r3
 8009d94:	4603      	mov	r3, r0
 8009d96:	3301      	adds	r3, #1
    chnWrite(&SDU1, buf, sizeof buf - 1);
 8009d98:	4805      	ldr	r0, [pc, #20]	; (8009db0 <cmd_write+0x40>)
  while (chnGetTimeout((BaseChannel *)chp, TIME_IMMEDIATE) == Q_TIMEOUT) {
 8009d9a:	d0f0      	beq.n	8009d7e <cmd_write+0xe>
  chprintf(chp, "\r\n\nstopped\r\n");
 8009d9c:	4620      	mov	r0, r4
}
 8009d9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chprintf(chp, "\r\n\nstopped\r\n");
 8009da2:	4905      	ldr	r1, [pc, #20]	; (8009db8 <cmd_write+0x48>)
 8009da4:	f7fb b814 	b.w	8004dd0 <chprintf>
    chprintf(chp, "Usage: write\r\n");
 8009da8:	4904      	ldr	r1, [pc, #16]	; (8009dbc <cmd_write+0x4c>)
 8009daa:	f7fb b811 	b.w	8004dd0 <chprintf>
 8009dae:	bf00      	nop
 8009db0:	20001d6c 	.word	0x20001d6c
 8009db4:	20000838 	.word	0x20000838
 8009db8:	08011d8c 	.word	0x08011d8c
 8009dbc:	08011d7c 	.word	0x08011d7c

08009dc0 <chMBReset.constprop.0>:
void chMBReset(mailbox_t *mbp) {
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	2320      	movs	r3, #32
 8009dc4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009dc8:	4c1f      	ldr	r4, [pc, #124]	; (8009e48 <chMBReset.constprop.0+0x88>)
  _dbg_check_lock();
 8009dca:	f7f6 fd29 	bl	8000820 <_dbg_check_lock>
 8009dce:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	db2d      	blt.n	8009e30 <chMBReset.constprop.0+0x70>
 8009dd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	dd2a      	ble.n	8009e30 <chMBReset.constprop.0+0x70>
  mbp->cnt   = (size_t)0;
 8009dda:	2100      	movs	r1, #0
  mbp->reset = true;
 8009ddc:	2201      	movs	r2, #1
  mbp->wrptr = mbp->buffer;
 8009dde:	4d1b      	ldr	r5, [pc, #108]	; (8009e4c <chMBReset.constprop.0+0x8c>)
 8009de0:	682b      	ldr	r3, [r5, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009de2:	f105 0018 	add.w	r0, r5, #24
  mbp->rdptr = mbp->buffer;
 8009de6:	e9c5 3302 	strd	r3, r3, [r5, #8]
  mbp->cnt   = (size_t)0;
 8009dea:	6129      	str	r1, [r5, #16]
  mbp->reset = true;
 8009dec:	752a      	strb	r2, [r5, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009dee:	f7ff fa7f 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8009df2:	f105 0020 	add.w	r0, r5, #32
 8009df6:	f7ff fa7b 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009dfc:	b9db      	cbnz	r3, 8009e36 <chMBReset.constprop.0+0x76>
 8009dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	dd18      	ble.n	8009e36 <chMBReset.constprop.0+0x76>
  chDbgCheckClassI();
 8009e04:	f7f6 fd9c 	bl	8000940 <chDbgCheckClassI>
  return firstprio(&ch.rlist.pqueue) > currp->hdr.pqueue.prio;
 8009e08:	6822      	ldr	r2, [r4, #0]
 8009e0a:	69a3      	ldr	r3, [r4, #24]
  if (chSchIsRescRequiredI()) {
 8009e0c:	6892      	ldr	r2, [r2, #8]
 8009e0e:	689b      	ldr	r3, [r3, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d813      	bhi.n	8009e3c <chMBReset.constprop.0+0x7c>
  _dbg_check_unlock();
 8009e14:	f7f6 fd14 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	42a3      	cmp	r3, r4
 8009e1c:	d004      	beq.n	8009e28 <chMBReset.constprop.0+0x68>
 8009e1e:	69a2      	ldr	r2, [r4, #24]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	6892      	ldr	r2, [r2, #8]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	d30c      	bcc.n	8009e42 <chMBReset.constprop.0+0x82>
 8009e28:	2300      	movs	r3, #0
 8009e2a:	f383 8811 	msr	BASEPRI, r3
}
 8009e2e:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#10");
 8009e30:	4807      	ldr	r0, [pc, #28]	; (8009e50 <chMBReset.constprop.0+0x90>)
 8009e32:	f7f6 fc9d 	bl	8000770 <chSysHalt>
    chSysHalt("SV#11");
 8009e36:	4807      	ldr	r0, [pc, #28]	; (8009e54 <chMBReset.constprop.0+0x94>)
 8009e38:	f7f6 fc9a 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 8009e3c:	f7f8 fed0 	bl	8002be0 <chSchDoReschedule>
 8009e40:	e7e8      	b.n	8009e14 <chMBReset.constprop.0+0x54>
 8009e42:	4805      	ldr	r0, [pc, #20]	; (8009e58 <chMBReset.constprop.0+0x98>)
 8009e44:	f7f6 fc94 	bl	8000770 <chSysHalt>
 8009e48:	20000d70 	.word	0x20000d70
 8009e4c:	20000c58 	.word	0x20000c58
 8009e50:	0800f22c 	.word	0x0800f22c
 8009e54:	0800f204 	.word	0x0800f204
 8009e58:	08011034 	.word	0x08011034
 8009e5c:	00000000 	.word	0x00000000

08009e60 <oslib_test_002_001_teardown.lto_priv.0>:
 8009e60:	b538      	push	{r3, r4, r5, lr}
 8009e62:	2320      	movs	r3, #32
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	4c1f      	ldr	r4, [pc, #124]	; (8009ee8 <oslib_test_002_001_teardown.lto_priv.0+0x88>)
 8009e6a:	f7f6 fcd9 	bl	8000820 <_dbg_check_lock>
 8009e6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	db2d      	blt.n	8009ed0 <oslib_test_002_001_teardown.lto_priv.0+0x70>
 8009e74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	dd2a      	ble.n	8009ed0 <oslib_test_002_001_teardown.lto_priv.0+0x70>
 8009e7a:	2100      	movs	r1, #0
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	4d1b      	ldr	r5, [pc, #108]	; (8009eec <oslib_test_002_001_teardown.lto_priv.0+0x8c>)
 8009e80:	682b      	ldr	r3, [r5, #0]
 8009e82:	f105 0018 	add.w	r0, r5, #24
 8009e86:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8009e8a:	6129      	str	r1, [r5, #16]
 8009e8c:	752a      	strb	r2, [r5, #20]
 8009e8e:	f7ff fa2f 	bl	80092f0 <chThdDequeueAllI.constprop.0>
 8009e92:	f105 0020 	add.w	r0, r5, #32
 8009e96:	f7ff fa2b 	bl	80092f0 <chThdDequeueAllI.constprop.0>
 8009e9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009e9c:	b9db      	cbnz	r3, 8009ed6 <oslib_test_002_001_teardown.lto_priv.0+0x76>
 8009e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	dd18      	ble.n	8009ed6 <oslib_test_002_001_teardown.lto_priv.0+0x76>
 8009ea4:	f7f6 fd4c 	bl	8000940 <chDbgCheckClassI>
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	69a3      	ldr	r3, [r4, #24]
 8009eac:	6892      	ldr	r2, [r2, #8]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d813      	bhi.n	8009edc <oslib_test_002_001_teardown.lto_priv.0+0x7c>
 8009eb4:	f7f6 fcc4 	bl	8000840 <_dbg_check_unlock>
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	42a3      	cmp	r3, r4
 8009ebc:	d004      	beq.n	8009ec8 <oslib_test_002_001_teardown.lto_priv.0+0x68>
 8009ebe:	69a2      	ldr	r2, [r4, #24]
 8009ec0:	689b      	ldr	r3, [r3, #8]
 8009ec2:	6892      	ldr	r2, [r2, #8]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d30c      	bcc.n	8009ee2 <oslib_test_002_001_teardown.lto_priv.0+0x82>
 8009ec8:	2300      	movs	r3, #0
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	bd38      	pop	{r3, r4, r5, pc}
 8009ed0:	4807      	ldr	r0, [pc, #28]	; (8009ef0 <oslib_test_002_001_teardown.lto_priv.0+0x90>)
 8009ed2:	f7f6 fc4d 	bl	8000770 <chSysHalt>
 8009ed6:	4807      	ldr	r0, [pc, #28]	; (8009ef4 <oslib_test_002_001_teardown.lto_priv.0+0x94>)
 8009ed8:	f7f6 fc4a 	bl	8000770 <chSysHalt>
 8009edc:	f7f8 fe80 	bl	8002be0 <chSchDoReschedule>
 8009ee0:	e7e8      	b.n	8009eb4 <oslib_test_002_001_teardown.lto_priv.0+0x54>
 8009ee2:	4805      	ldr	r0, [pc, #20]	; (8009ef8 <oslib_test_002_001_teardown.lto_priv.0+0x98>)
 8009ee4:	f7f6 fc44 	bl	8000770 <chSysHalt>
 8009ee8:	20000d70 	.word	0x20000d70
 8009eec:	20000c58 	.word	0x20000c58
 8009ef0:	0800f22c 	.word	0x0800f22c
 8009ef4:	0800f204 	.word	0x0800f204
 8009ef8:	08011034 	.word	0x08011034
 8009efc:	00000000 	.word	0x00000000

08009f00 <oslib_test_002_002_teardown.lto_priv.0>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	2320      	movs	r3, #32
 8009f04:	f383 8811 	msr	BASEPRI, r3
 8009f08:	4c1f      	ldr	r4, [pc, #124]	; (8009f88 <oslib_test_002_002_teardown.lto_priv.0+0x88>)
 8009f0a:	f7f6 fc89 	bl	8000820 <_dbg_check_lock>
 8009f0e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	db2d      	blt.n	8009f70 <oslib_test_002_002_teardown.lto_priv.0+0x70>
 8009f14:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	dd2a      	ble.n	8009f70 <oslib_test_002_002_teardown.lto_priv.0+0x70>
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4d1b      	ldr	r5, [pc, #108]	; (8009f8c <oslib_test_002_002_teardown.lto_priv.0+0x8c>)
 8009f20:	682b      	ldr	r3, [r5, #0]
 8009f22:	f105 0018 	add.w	r0, r5, #24
 8009f26:	e9c5 3302 	strd	r3, r3, [r5, #8]
 8009f2a:	6129      	str	r1, [r5, #16]
 8009f2c:	752a      	strb	r2, [r5, #20]
 8009f2e:	f7ff f9df 	bl	80092f0 <chThdDequeueAllI.constprop.0>
 8009f32:	f105 0020 	add.w	r0, r5, #32
 8009f36:	f7ff f9db 	bl	80092f0 <chThdDequeueAllI.constprop.0>
 8009f3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009f3c:	b9db      	cbnz	r3, 8009f76 <oslib_test_002_002_teardown.lto_priv.0+0x76>
 8009f3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	dd18      	ble.n	8009f76 <oslib_test_002_002_teardown.lto_priv.0+0x76>
 8009f44:	f7f6 fcfc 	bl	8000940 <chDbgCheckClassI>
 8009f48:	6822      	ldr	r2, [r4, #0]
 8009f4a:	69a3      	ldr	r3, [r4, #24]
 8009f4c:	6892      	ldr	r2, [r2, #8]
 8009f4e:	689b      	ldr	r3, [r3, #8]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d813      	bhi.n	8009f7c <oslib_test_002_002_teardown.lto_priv.0+0x7c>
 8009f54:	f7f6 fc74 	bl	8000840 <_dbg_check_unlock>
 8009f58:	6823      	ldr	r3, [r4, #0]
 8009f5a:	42a3      	cmp	r3, r4
 8009f5c:	d004      	beq.n	8009f68 <oslib_test_002_002_teardown.lto_priv.0+0x68>
 8009f5e:	69a2      	ldr	r2, [r4, #24]
 8009f60:	689b      	ldr	r3, [r3, #8]
 8009f62:	6892      	ldr	r2, [r2, #8]
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d30c      	bcc.n	8009f82 <oslib_test_002_002_teardown.lto_priv.0+0x82>
 8009f68:	2300      	movs	r3, #0
 8009f6a:	f383 8811 	msr	BASEPRI, r3
 8009f6e:	bd38      	pop	{r3, r4, r5, pc}
 8009f70:	4807      	ldr	r0, [pc, #28]	; (8009f90 <oslib_test_002_002_teardown.lto_priv.0+0x90>)
 8009f72:	f7f6 fbfd 	bl	8000770 <chSysHalt>
 8009f76:	4807      	ldr	r0, [pc, #28]	; (8009f94 <oslib_test_002_002_teardown.lto_priv.0+0x94>)
 8009f78:	f7f6 fbfa 	bl	8000770 <chSysHalt>
 8009f7c:	f7f8 fe30 	bl	8002be0 <chSchDoReschedule>
 8009f80:	e7e8      	b.n	8009f54 <oslib_test_002_002_teardown.lto_priv.0+0x54>
 8009f82:	4805      	ldr	r0, [pc, #20]	; (8009f98 <oslib_test_002_002_teardown.lto_priv.0+0x98>)
 8009f84:	f7f6 fbf4 	bl	8000770 <chSysHalt>
 8009f88:	20000d70 	.word	0x20000d70
 8009f8c:	20000c58 	.word	0x20000c58
 8009f90:	0800f22c 	.word	0x0800f22c
 8009f94:	0800f204 	.word	0x0800f204
 8009f98:	08011034 	.word	0x08011034
 8009f9c:	00000000 	.word	0x00000000

08009fa0 <oslib_test_002_003_teardown.lto_priv.0>:

static void oslib_test_002_003_teardown(void) {
 8009fa0:	b538      	push	{r3, r4, r5, lr}
 8009fa2:	2320      	movs	r3, #32
 8009fa4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009fa8:	f7f6 fc3a 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 8009fac:	f7f6 fcc8 	bl	8000940 <chDbgCheckClassI>
  mbp->cnt   = (size_t)0;
 8009fb0:	2100      	movs	r1, #0
  mbp->reset = true;
 8009fb2:	2201      	movs	r2, #1
  mbp->wrptr = mbp->buffer;
 8009fb4:	4c18      	ldr	r4, [pc, #96]	; (800a018 <oslib_test_002_003_teardown.lto_priv.0+0x78>)
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8009fb6:	4d19      	ldr	r5, [pc, #100]	; (800a01c <oslib_test_002_003_teardown.lto_priv.0+0x7c>)
 8009fb8:	6823      	ldr	r3, [r4, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009fba:	f104 0018 	add.w	r0, r4, #24
  mbp->rdptr = mbp->buffer;
 8009fbe:	e9c4 3302 	strd	r3, r3, [r4, #8]
  mbp->cnt   = (size_t)0;
 8009fc2:	6121      	str	r1, [r4, #16]
  mbp->reset = true;
 8009fc4:	7522      	strb	r2, [r4, #20]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 8009fc6:	f7ff f993 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 8009fca:	f104 0020 	add.w	r0, r4, #32
 8009fce:	f7ff f98f 	bl	80092f0 <chThdDequeueAllI.constprop.0>
 8009fd2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8009fd4:	b9b3      	cbnz	r3, 800a004 <oslib_test_002_003_teardown.lto_priv.0+0x64>
 8009fd6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	dd13      	ble.n	800a004 <oslib_test_002_003_teardown.lto_priv.0+0x64>
 8009fdc:	682a      	ldr	r2, [r5, #0]
 8009fde:	69ab      	ldr	r3, [r5, #24]
  if (chSchIsRescRequiredI()) {
 8009fe0:	6892      	ldr	r2, [r2, #8]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	429a      	cmp	r2, r3
 8009fe6:	d810      	bhi.n	800a00a <oslib_test_002_003_teardown.lto_priv.0+0x6a>
  _dbg_check_unlock();
 8009fe8:	f7f6 fc2a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 8009fec:	682b      	ldr	r3, [r5, #0]
 8009fee:	42ab      	cmp	r3, r5
 8009ff0:	d004      	beq.n	8009ffc <oslib_test_002_003_teardown.lto_priv.0+0x5c>
 8009ff2:	69aa      	ldr	r2, [r5, #24]
 8009ff4:	689b      	ldr	r3, [r3, #8]
 8009ff6:	6892      	ldr	r2, [r2, #8]
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d309      	bcc.n	800a010 <oslib_test_002_003_teardown.lto_priv.0+0x70>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f383 8811 	msr	BASEPRI, r3
  chMBReset(&mb1);
}
 800a002:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#11");
 800a004:	4806      	ldr	r0, [pc, #24]	; (800a020 <oslib_test_002_003_teardown.lto_priv.0+0x80>)
 800a006:	f7f6 fbb3 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 800a00a:	f7f8 fde9 	bl	8002be0 <chSchDoReschedule>
 800a00e:	e7eb      	b.n	8009fe8 <oslib_test_002_003_teardown.lto_priv.0+0x48>
 800a010:	4804      	ldr	r0, [pc, #16]	; (800a024 <oslib_test_002_003_teardown.lto_priv.0+0x84>)
 800a012:	f7f6 fbad 	bl	8000770 <chSysHalt>
 800a016:	bf00      	nop
 800a018:	20000c58 	.word	0x20000c58
 800a01c:	20000d70 	.word	0x20000d70
 800a020:	0800f204 	.word	0x0800f204
 800a024:	08011034 	.word	0x08011034
	...

0800a030 <job_slow>:
static void job_slow(void *arg) {
 800a030:	b510      	push	{r4, lr}
  test_emit_token((int)arg);
 800a032:	b2c0      	uxtb	r0, r0
static void job_slow(void *arg) {
 800a034:	b086      	sub	sp, #24
  test_emit_token((int)arg);
 800a036:	f7fc fac3 	bl	80065c0 <test_emit_token>
 800a03a:	2320      	movs	r3, #32
 800a03c:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a040:	4c16      	ldr	r4, [pc, #88]	; (800a09c <job_slow+0x6c>)
  _dbg_check_lock();
 800a042:	f7f6 fbed 	bl	8000820 <_dbg_check_lock>
 800a046:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a048:	bb0b      	cbnz	r3, 800a08e <job_slow+0x5e>
 800a04a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	dd1e      	ble.n	800a08e <job_slow+0x5e>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800a050:	69a3      	ldr	r3, [r4, #24]
 800a052:	2164      	movs	r1, #100	; 0x64
 800a054:	4a12      	ldr	r2, [pc, #72]	; (800a0a0 <job_slow+0x70>)
 800a056:	a801      	add	r0, sp, #4
 800a058:	f7f7 ff6a 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800a05c:	2008      	movs	r0, #8
 800a05e:	f7f8 f93f 	bl	80022e0 <chSchGoSleepS>
 800a062:	f7f6 fc6d 	bl	8000940 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 800a066:	9b04      	ldr	r3, [sp, #16]
 800a068:	b113      	cbz	r3, 800a070 <job_slow+0x40>
      chVTDoResetI(&vt);
 800a06a:	a801      	add	r0, sp, #4
 800a06c:	f7f7 fff8 	bl	8002060 <chVTDoResetI>
  _dbg_check_unlock();
 800a070:	f7f6 fbe6 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	42a3      	cmp	r3, r4
 800a078:	d004      	beq.n	800a084 <job_slow+0x54>
 800a07a:	69a2      	ldr	r2, [r4, #24]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	6892      	ldr	r2, [r2, #8]
 800a080:	429a      	cmp	r2, r3
 800a082:	d307      	bcc.n	800a094 <job_slow+0x64>
 800a084:	2300      	movs	r3, #0
 800a086:	f383 8811 	msr	BASEPRI, r3
}
 800a08a:	b006      	add	sp, #24
 800a08c:	bd10      	pop	{r4, pc}
    chSysHalt("SV#11");
 800a08e:	4805      	ldr	r0, [pc, #20]	; (800a0a4 <job_slow+0x74>)
 800a090:	f7f6 fb6e 	bl	8000770 <chSysHalt>
 800a094:	4804      	ldr	r0, [pc, #16]	; (800a0a8 <job_slow+0x78>)
 800a096:	f7f6 fb6b 	bl	8000770 <chSysHalt>
 800a09a:	bf00      	nop
 800a09c:	20000d70 	.word	0x20000d70
 800a0a0:	08002161 	.word	0x08002161
 800a0a4:	0800f204 	.word	0x0800f204
 800a0a8:	08010de4 	.word	0x08010de4
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <Thread1.lto_priv.1>:
static THD_FUNCTION(Thread1, arg) {
 800a0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  exit_flag = false;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2720      	movs	r7, #32
  tp->state = CH_STATE_SNDMSG;
 800a0b8:	f04f 080d 	mov.w	r8, #13
 800a0bc:	4e2e      	ldr	r6, [pc, #184]	; (800a178 <Thread1.lto_priv.1+0xc8>)
 800a0be:	4c2f      	ldr	r4, [pc, #188]	; (800a17c <Thread1.lto_priv.1+0xcc>)
 800a0c0:	7033      	strb	r3, [r6, #0]
 800a0c2:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 800a0c6:	f7f6 fbab 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a0ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d13c      	bne.n	800a14a <Thread1.lto_priv.1+0x9a>
 800a0d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	dd39      	ble.n	800a14a <Thread1.lto_priv.1+0x9a>
  if (!chMsgIsPendingI(currp)) {
 800a0d6:	f8d4 9018 	ldr.w	r9, [r4, #24]
  chDbgCheckClassI();
 800a0da:	f7f6 fc31 	bl	8000940 <chDbgCheckClassI>
  return (bool)(tp->msgqueue.next != &tp->msgqueue);
 800a0de:	464b      	mov	r3, r9
 800a0e0:	f853 5f2c 	ldr.w	r5, [r3, #44]!
 800a0e4:	429d      	cmp	r5, r3
 800a0e6:	d039      	beq.n	800a15c <Thread1.lto_priv.1+0xac>
  qp->next       = p->next;
 800a0e8:	682a      	ldr	r2, [r5, #0]
 800a0ea:	f8c9 202c 	str.w	r2, [r9, #44]	; 0x2c
  qp->next->prev = qp;
 800a0ee:	6053      	str	r3, [r2, #4]
  tp->state = CH_STATE_SNDMSG;
 800a0f0:	f885 8020 	strb.w	r8, [r5, #32]
  _dbg_check_unlock();
 800a0f4:	f7f6 fba4 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a0f8:	6823      	ldr	r3, [r4, #0]
 800a0fa:	42a3      	cmp	r3, r4
 800a0fc:	d004      	beq.n	800a108 <Thread1.lto_priv.1+0x58>
 800a0fe:	69a2      	ldr	r2, [r4, #24]
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	6892      	ldr	r2, [r2, #8]
 800a104:	429a      	cmp	r2, r3
 800a106:	d326      	bcc.n	800a156 <Thread1.lto_priv.1+0xa6>
 800a108:	2300      	movs	r3, #0
 800a10a:	f383 8811 	msr	BASEPRI, r3
  chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 800a10e:	f895 3020 	ldrb.w	r3, [r5, #32]
 800a112:	2b0d      	cmp	r3, #13
 800a114:	d11c      	bne.n	800a150 <Thread1.lto_priv.1+0xa0>
  thread_t *tp;
  const call_message_t *cmp;
  msg_t ret;

  tp = chMsgWait();
  cmp = (const call_message_t *)chMsgGet(tp);
 800a116:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  ret = cmp->veneer(cmp->argsp);
 800a118:	e9d3 2000 	ldrd	r2, r0, [r3]
 800a11c:	4790      	blx	r2
 800a11e:	4601      	mov	r1, r0

  chMsgRelease(tp, ret);
 800a120:	4628      	mov	r0, r5
 800a122:	f7f9 fef5 	bl	8003f10 <chMsgRelease>
  } while (!exit_flag);
 800a126:	7833      	ldrb	r3, [r6, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d0ca      	beq.n	800a0c2 <Thread1.lto_priv.1+0x12>
 800a12c:	2320      	movs	r3, #32
 800a12e:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800a132:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800a136:	4313      	orrs	r3, r2
 800a138:	d11a      	bne.n	800a170 <Thread1.lto_priv.1+0xc0>
  _dbg_enter_lock();
 800a13a:	2301      	movs	r3, #1
  chThdExitS(msg);
 800a13c:	f640 70a5 	movw	r0, #4005	; 0xfa5
 800a140:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a142:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a146:	f7f8 bf13 	b.w	8002f70 <chThdExitS>
    chSysHalt("SV#11");
 800a14a:	480d      	ldr	r0, [pc, #52]	; (800a180 <Thread1.lto_priv.1+0xd0>)
 800a14c:	f7f6 fb10 	bl	8000770 <chSysHalt>
 800a150:	480c      	ldr	r0, [pc, #48]	; (800a184 <Thread1.lto_priv.1+0xd4>)
 800a152:	f7f6 fb0d 	bl	8000770 <chSysHalt>
 800a156:	480c      	ldr	r0, [pc, #48]	; (800a188 <Thread1.lto_priv.1+0xd8>)
 800a158:	f7f6 fb0a 	bl	8000770 <chSysHalt>
    chSchGoSleepS(CH_STATE_WTMSG);
 800a15c:	200e      	movs	r0, #14
 800a15e:	f7f8 f8bf 	bl	80022e0 <chSchGoSleepS>
  tp = (thread_t *)ch_queue_fifo_remove(&currp->msgqueue);
 800a162:	f8d4 9018 	ldr.w	r9, [r4, #24]
  ch_queue_t *p = qp->next;
 800a166:	f8d9 502c 	ldr.w	r5, [r9, #44]	; 0x2c
 800a16a:	f109 032c 	add.w	r3, r9, #44	; 0x2c
 800a16e:	e7bb      	b.n	800a0e8 <Thread1.lto_priv.1+0x38>
    chSysHalt("SV#4");
 800a170:	4806      	ldr	r0, [pc, #24]	; (800a18c <Thread1.lto_priv.1+0xdc>)
 800a172:	f7f6 fafd 	bl	8000770 <chSysHalt>
 800a176:	bf00      	nop
 800a178:	20002358 	.word	0x20002358
 800a17c:	20000d70 	.word	0x20000d70
 800a180:	0800f204 	.word	0x0800f204
 800a184:	08012164 	.word	0x08012164
 800a188:	080121b0 	.word	0x080121b0
 800a18c:	0800f20c 	.word	0x0800f20c

0800a190 <obj_read>:
                     bool async) {
 800a190:	b570      	push	{r4, r5, r6, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	4615      	mov	r5, r2
  test_emit_token('a' + objp->obj_key);
 800a196:	694b      	ldr	r3, [r1, #20]
                     bool async) {
 800a198:	4606      	mov	r6, r0
  test_emit_token('a' + objp->obj_key);
 800a19a:	3361      	adds	r3, #97	; 0x61
 800a19c:	b2d8      	uxtb	r0, r3
 800a19e:	f7fc fa0f 	bl	80065c0 <test_emit_token>
  objp->obj_flags &= ~OC_FLAG_NOTSYNC;
 800a1a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a1a4:	f023 0308 	bic.w	r3, r3, #8
 800a1a8:	6263      	str	r3, [r4, #36]	; 0x24
  if (async) {
 800a1aa:	b90d      	cbnz	r5, 800a1b0 <obj_read+0x20>
}
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	2320      	movs	r3, #32
 800a1b2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a1b6:	f7f6 fb33 	bl	8000820 <_dbg_check_lock>
 */
static inline void chCacheReleaseObject(objects_cache_t *ocp,
                                        oc_object_t *objp) {

  chSysLock();
  chCacheReleaseObjectI(ocp, objp);
 800a1ba:	4621      	mov	r1, r4
 800a1bc:	4630      	mov	r0, r6
 800a1be:	f7fa fb87 	bl	80048d0 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800a1c2:	f7f8 fd45 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800a1c6:	f7f6 fb3b 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a1ca:	4b08      	ldr	r3, [pc, #32]	; (800a1ec <obj_read+0x5c>)
 800a1cc:	681a      	ldr	r2, [r3, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d004      	beq.n	800a1dc <obj_read+0x4c>
 800a1d2:	6999      	ldr	r1, [r3, #24]
 800a1d4:	6893      	ldr	r3, [r2, #8]
 800a1d6:	688a      	ldr	r2, [r1, #8]
 800a1d8:	429a      	cmp	r2, r3
 800a1da:	d304      	bcc.n	800a1e6 <obj_read+0x56>
 800a1dc:	2300      	movs	r3, #0
 800a1de:	f383 8811 	msr	BASEPRI, r3
 800a1e2:	2000      	movs	r0, #0
 800a1e4:	bd70      	pop	{r4, r5, r6, pc}
 800a1e6:	4802      	ldr	r0, [pc, #8]	; (800a1f0 <obj_read+0x60>)
 800a1e8:	f7f6 fac2 	bl	8000770 <chSysHalt>
 800a1ec:	20000d70 	.word	0x20000d70
 800a1f0:	08012188 	.word	0x08012188
	...

0800a200 <oslib_test_007_001_execute.lto_priv.0>:
static void oslib_test_007_001_execute(void) {
 800a200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800a204:	2301      	movs	r3, #1
 800a206:	f04f 0c04 	mov.w	ip, #4
 800a20a:	2120      	movs	r1, #32
 800a20c:	f04f 0e00 	mov.w	lr, #0
 800a210:	4d84      	ldr	r5, [pc, #528]	; (800a424 <oslib_test_007_001_execute.lto_priv.0+0x224>)
 800a212:	4a85      	ldr	r2, [pc, #532]	; (800a428 <oslib_test_007_001_execute.lto_priv.0+0x228>)
 800a214:	4c85      	ldr	r4, [pc, #532]	; (800a42c <oslib_test_007_001_execute.lto_priv.0+0x22c>)
 800a216:	4e86      	ldr	r6, [pc, #536]	; (800a430 <oslib_test_007_001_execute.lto_priv.0+0x230>)
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	f381 8811 	msr	BASEPRI, r1
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800a21e:	e9d4 700c 	ldrd	r7, r0, [r4, #48]	; 0x30
 800a222:	4338      	orrs	r0, r7
 800a224:	d002      	beq.n	800a22c <oslib_test_007_001_execute.lto_priv.0+0x2c>
    chSysHalt("SV#4");
 800a226:	4883      	ldr	r0, [pc, #524]	; (800a434 <oslib_test_007_001_execute.lto_priv.0+0x234>)
 800a228:	f7f6 faa2 	bl	8000770 <chSysHalt>
 800a22c:	68b0      	ldr	r0, [r6, #8]
  _dbg_enter_lock();
 800a22e:	6363      	str	r3, [r4, #52]	; 0x34
 800a230:	3801      	subs	r0, #1
 800a232:	4010      	ands	r0, r2
 800a234:	f040 80dd 	bne.w	800a3f2 <oslib_test_007_001_execute.lto_priv.0+0x1f2>
  _dbg_leave_lock();
 800a238:	6360      	str	r0, [r4, #52]	; 0x34
  php->next = mp->next;
 800a23a:	6830      	ldr	r0, [r6, #0]
  mp->next = php;
 800a23c:	6032      	str	r2, [r6, #0]
  php->next = mp->next;
 800a23e:	6010      	str	r0, [r2, #0]
 800a240:	6820      	ldr	r0, [r4, #0]
 800a242:	42a0      	cmp	r0, r4
 800a244:	d005      	beq.n	800a252 <oslib_test_007_001_execute.lto_priv.0+0x52>
 800a246:	6887      	ldr	r7, [r0, #8]
 800a248:	69a0      	ldr	r0, [r4, #24]
 800a24a:	6880      	ldr	r0, [r0, #8]
 800a24c:	42b8      	cmp	r0, r7
 800a24e:	f0c0 80d3 	bcc.w	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a252:	f38e 8811 	msr	BASEPRI, lr
    p = (void *)(((uint8_t *)p) + mp->object_size);
 800a256:	6870      	ldr	r0, [r6, #4]
  while (n != 0U) {
 800a258:	f1bc 0c01 	subs.w	ip, ip, #1
    p = (void *)(((uint8_t *)p) + mp->object_size);
 800a25c:	4402      	add	r2, r0
  while (n != 0U) {
 800a25e:	d1dc      	bne.n	800a21a <oslib_test_007_001_execute.lto_priv.0+0x1a>
  test_set_step(2);
 800a260:	2302      	movs	r3, #2
 800a262:	46e3      	mov	fp, ip
 800a264:	f04f 0804 	mov.w	r8, #4
 800a268:	f04f 0a20 	mov.w	sl, #32
  objp = chPoolAllocI(mp);
 800a26c:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 800a430 <oslib_test_007_001_execute.lto_priv.0+0x230>
 800a270:	602b      	str	r3, [r5, #0]
 800a272:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 800a276:	f7f6 fad3 	bl	8000820 <_dbg_check_lock>
 800a27a:	4648      	mov	r0, r9
 800a27c:	f7fa fac8 	bl	8004810 <chPoolAllocI>
 800a280:	4607      	mov	r7, r0
  _dbg_check_unlock();
 800a282:	f7f6 fadd 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	42a3      	cmp	r3, r4
 800a28a:	d005      	beq.n	800a298 <oslib_test_007_001_execute.lto_priv.0+0x98>
 800a28c:	689a      	ldr	r2, [r3, #8]
 800a28e:	69a3      	ldr	r3, [r4, #24]
 800a290:	689b      	ldr	r3, [r3, #8]
 800a292:	4293      	cmp	r3, r2
 800a294:	f0c0 80b0 	bcc.w	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a298:	f38b 8811 	msr	BASEPRI, fp
  if (!condition)
 800a29c:	2f00      	cmp	r7, #0
 800a29e:	f000 80ae 	beq.w	800a3fe <oslib_test_007_001_execute.lto_priv.0+0x1fe>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a2a2:	f1b8 0801 	subs.w	r8, r8, #1
 800a2a6:	d1e4      	bne.n	800a272 <oslib_test_007_001_execute.lto_priv.0+0x72>
  test_set_step(3);
 800a2a8:	2203      	movs	r2, #3
 800a2aa:	2320      	movs	r3, #32
 800a2ac:	602a      	str	r2, [r5, #0]
 800a2ae:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a2b2:	f7f6 fab5 	bl	8000820 <_dbg_check_lock>
 800a2b6:	485e      	ldr	r0, [pc, #376]	; (800a430 <oslib_test_007_001_execute.lto_priv.0+0x230>)
 800a2b8:	f7fa faaa 	bl	8004810 <chPoolAllocI>
 800a2bc:	4607      	mov	r7, r0
  _dbg_check_unlock();
 800a2be:	f7f6 fabf 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	42a3      	cmp	r3, r4
 800a2c6:	d005      	beq.n	800a2d4 <oslib_test_007_001_execute.lto_priv.0+0xd4>
 800a2c8:	69a2      	ldr	r2, [r4, #24]
 800a2ca:	689b      	ldr	r3, [r3, #8]
 800a2cc:	6892      	ldr	r2, [r2, #8]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	f0c0 8092 	bcc.w	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f383 8811 	msr	BASEPRI, r3
 800a2da:	2f00      	cmp	r7, #0
 800a2dc:	f040 8099 	bne.w	800a412 <oslib_test_007_001_execute.lto_priv.0+0x212>
  test_set_step(4);
 800a2e0:	2304      	movs	r3, #4
 800a2e2:	f04f 0820 	mov.w	r8, #32
 800a2e6:	f8df b140 	ldr.w	fp, [pc, #320]	; 800a428 <oslib_test_007_001_execute.lto_priv.0+0x228>
 800a2ea:	602b      	str	r3, [r5, #0]
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a2ec:	f10b 0a10 	add.w	sl, fp, #16
 800a2f0:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock();
 800a2f4:	f7f6 fa94 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800a2f8:	f7f6 fb22 	bl	8000940 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 800a2fc:	68b3      	ldr	r3, [r6, #8]
 800a2fe:	3b01      	subs	r3, #1
 800a300:	ea13 0f0b 	tst.w	r3, fp
 800a304:	d175      	bne.n	800a3f2 <oslib_test_007_001_execute.lto_priv.0+0x1f2>
  php->next = mp->next;
 800a306:	6833      	ldr	r3, [r6, #0]
  mp->next = php;
 800a308:	f8c6 b000 	str.w	fp, [r6]
  php->next = mp->next;
 800a30c:	f84b 3b04 	str.w	r3, [fp], #4
  _dbg_check_unlock();
 800a310:	f7f6 fa96 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	42a3      	cmp	r3, r4
 800a318:	d004      	beq.n	800a324 <oslib_test_007_001_execute.lto_priv.0+0x124>
 800a31a:	689a      	ldr	r2, [r3, #8]
 800a31c:	69a3      	ldr	r3, [r4, #24]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	4293      	cmp	r3, r2
 800a322:	d369      	bcc.n	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a324:	f387 8811 	msr	BASEPRI, r7
 800a328:	45d3      	cmp	fp, sl
 800a32a:	d1e1      	bne.n	800a2f0 <oslib_test_007_001_execute.lto_priv.0+0xf0>
  test_set_step(5);
 800a32c:	2305      	movs	r3, #5
 800a32e:	f04f 0804 	mov.w	r8, #4
 800a332:	f04f 0a20 	mov.w	sl, #32
 800a336:	f04f 0b00 	mov.w	fp, #0
  objp = chPoolAllocI(mp);
 800a33a:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 800a430 <oslib_test_007_001_execute.lto_priv.0+0x230>
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 800a344:	f7f6 fa6c 	bl	8000820 <_dbg_check_lock>
 800a348:	4648      	mov	r0, r9
 800a34a:	f7fa fa61 	bl	8004810 <chPoolAllocI>
 800a34e:	4607      	mov	r7, r0
  _dbg_check_unlock();
 800a350:	f7f6 fa76 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	42a3      	cmp	r3, r4
 800a358:	d004      	beq.n	800a364 <oslib_test_007_001_execute.lto_priv.0+0x164>
 800a35a:	689a      	ldr	r2, [r3, #8]
 800a35c:	69a3      	ldr	r3, [r4, #24]
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	4293      	cmp	r3, r2
 800a362:	d349      	bcc.n	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a364:	f38b 8811 	msr	BASEPRI, fp
 800a368:	2f00      	cmp	r7, #0
 800a36a:	d048      	beq.n	800a3fe <oslib_test_007_001_execute.lto_priv.0+0x1fe>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a36c:	f1b8 0801 	subs.w	r8, r8, #1
 800a370:	d1e6      	bne.n	800a340 <oslib_test_007_001_execute.lto_priv.0+0x140>
  test_set_step(6);
 800a372:	2206      	movs	r2, #6
 800a374:	2320      	movs	r3, #32
 800a376:	602a      	str	r2, [r5, #0]
 800a378:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a37c:	f7f6 fa50 	bl	8000820 <_dbg_check_lock>
 800a380:	482b      	ldr	r0, [pc, #172]	; (800a430 <oslib_test_007_001_execute.lto_priv.0+0x230>)
 800a382:	f7fa fa45 	bl	8004810 <chPoolAllocI>
 800a386:	4607      	mov	r7, r0
  _dbg_check_unlock();
 800a388:	f7f6 fa5a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a38c:	6823      	ldr	r3, [r4, #0]
 800a38e:	42a3      	cmp	r3, r4
 800a390:	d004      	beq.n	800a39c <oslib_test_007_001_execute.lto_priv.0+0x19c>
 800a392:	69a2      	ldr	r2, [r4, #24]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	6892      	ldr	r2, [r2, #8]
 800a398:	429a      	cmp	r2, r3
 800a39a:	d32d      	bcc.n	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a39c:	2300      	movs	r3, #0
 800a39e:	f383 8811 	msr	BASEPRI, r3
 800a3a2:	2f00      	cmp	r7, #0
 800a3a4:	d135      	bne.n	800a412 <oslib_test_007_001_execute.lto_priv.0+0x212>
  test_set_step(7);
 800a3a6:	2107      	movs	r1, #7
  mp->object_size = size;
 800a3a8:	2304      	movs	r3, #4
  mp->provider = provider;
 800a3aa:	4a23      	ldr	r2, [pc, #140]	; (800a438 <oslib_test_007_001_execute.lto_priv.0+0x238>)
  mp->align = align;
 800a3ac:	e9c6 3301 	strd	r3, r3, [r6, #4]
  mp->provider = provider;
 800a3b0:	60f2      	str	r2, [r6, #12]
  mp->next = NULL;
 800a3b2:	6037      	str	r7, [r6, #0]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	6029      	str	r1, [r5, #0]
 800a3b8:	f382 8811 	msr	BASEPRI, r2
  _dbg_check_lock();
 800a3bc:	f7f6 fa30 	bl	8000820 <_dbg_check_lock>
  objp = chPoolAllocI(mp);
 800a3c0:	481b      	ldr	r0, [pc, #108]	; (800a430 <oslib_test_007_001_execute.lto_priv.0+0x230>)
 800a3c2:	f7fa fa25 	bl	8004810 <chPoolAllocI>
 800a3c6:	4605      	mov	r5, r0
  _dbg_check_unlock();
 800a3c8:	f7f6 fa3a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a3cc:	6823      	ldr	r3, [r4, #0]
 800a3ce:	42a3      	cmp	r3, r4
 800a3d0:	d004      	beq.n	800a3dc <oslib_test_007_001_execute.lto_priv.0+0x1dc>
 800a3d2:	69a2      	ldr	r2, [r4, #24]
 800a3d4:	689b      	ldr	r3, [r3, #8]
 800a3d6:	6892      	ldr	r2, [r2, #8]
 800a3d8:	429a      	cmp	r2, r3
 800a3da:	d30d      	bcc.n	800a3f8 <oslib_test_007_001_execute.lto_priv.0+0x1f8>
 800a3dc:	2300      	movs	r3, #0
 800a3de:	f383 8811 	msr	BASEPRI, r3
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800a3e2:	fab5 f085 	clz	r0, r5
}
 800a3e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert(chPoolAlloc(&mp1) == NULL, "provider returned memory");
 800a3ea:	4914      	ldr	r1, [pc, #80]	; (800a43c <oslib_test_007_001_execute.lto_priv.0+0x23c>)
 800a3ec:	0940      	lsrs	r0, r0, #5
 800a3ee:	f7fb ba67 	b.w	80058c0 <_test_assert>
  chDbgCheck((mp != NULL) &&
 800a3f2:	4813      	ldr	r0, [pc, #76]	; (800a440 <oslib_test_007_001_execute.lto_priv.0+0x240>)
 800a3f4:	f7f6 f9bc 	bl	8000770 <chSysHalt>
 800a3f8:	4812      	ldr	r0, [pc, #72]	; (800a444 <oslib_test_007_001_execute.lto_priv.0+0x244>)
 800a3fa:	f7f6 f9b9 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800a3fe:	2301      	movs	r3, #1
 800a400:	4911      	ldr	r1, [pc, #68]	; (800a448 <oslib_test_007_001_execute.lto_priv.0+0x248>)
  test_global_fail     = true;
 800a402:	4a12      	ldr	r2, [pc, #72]	; (800a44c <oslib_test_007_001_execute.lto_priv.0+0x24c>)
  test_failure_message = msg;
 800a404:	4812      	ldr	r0, [pc, #72]	; (800a450 <oslib_test_007_001_execute.lto_priv.0+0x250>)
 800a406:	4c13      	ldr	r4, [pc, #76]	; (800a454 <oslib_test_007_001_execute.lto_priv.0+0x254>)
  test_local_fail      = true;
 800a408:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800a40a:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800a40c:	7013      	strb	r3, [r2, #0]
}
 800a40e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 800a412:	2301      	movs	r3, #1
 800a414:	490c      	ldr	r1, [pc, #48]	; (800a448 <oslib_test_007_001_execute.lto_priv.0+0x248>)
  test_global_fail     = true;
 800a416:	4a0d      	ldr	r2, [pc, #52]	; (800a44c <oslib_test_007_001_execute.lto_priv.0+0x24c>)
  test_failure_message = msg;
 800a418:	480d      	ldr	r0, [pc, #52]	; (800a450 <oslib_test_007_001_execute.lto_priv.0+0x250>)
 800a41a:	4c0f      	ldr	r4, [pc, #60]	; (800a458 <oslib_test_007_001_execute.lto_priv.0+0x258>)
  test_local_fail      = true;
 800a41c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800a41e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800a420:	7013      	strb	r3, [r2, #0]
  return true;
 800a422:	e7f4      	b.n	800a40e <oslib_test_007_001_execute.lto_priv.0+0x20e>
 800a424:	20001d3c 	.word	0x20001d3c
 800a428:	20002520 	.word	0x20002520
 800a42c:	20000d70 	.word	0x20000d70
 800a430:	20000c80 	.word	0x20000c80
 800a434:	0800f20c 	.word	0x0800f20c
 800a438:	08008731 	.word	0x08008731
 800a43c:	08011da8 	.word	0x08011da8
 800a440:	08010cf8 	.word	0x08010cf8
 800a444:	08010e40 	.word	0x08010e40
 800a448:	20001d39 	.word	0x20001d39
 800a44c:	20001d38 	.word	0x20001d38
 800a450:	20001d34 	.word	0x20001d34
 800a454:	08011d9c 	.word	0x08011d9c
 800a458:	08011c60 	.word	0x08011c60
 800a45c:	00000000 	.word	0x00000000

0800a460 <oslib_test_007_002_execute.lto_priv.0>:
static void oslib_test_007_002_execute(void) {
 800a460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800a464:	2501      	movs	r5, #1
 800a466:	f04f 0904 	mov.w	r9, #4
 800a46a:	2720      	movs	r7, #32
 800a46c:	4e65      	ldr	r6, [pc, #404]	; (800a604 <oslib_test_007_002_execute.lto_priv.0+0x1a4>)
 800a46e:	4966      	ldr	r1, [pc, #408]	; (800a608 <oslib_test_007_002_execute.lto_priv.0+0x1a8>)
 800a470:	4c66      	ldr	r4, [pc, #408]	; (800a60c <oslib_test_007_002_execute.lto_priv.0+0x1ac>)
 800a472:	f8df 819c 	ldr.w	r8, [pc, #412]	; 800a610 <oslib_test_007_002_execute.lto_priv.0+0x1b0>
static void oslib_test_007_002_execute(void) {
 800a476:	b083      	sub	sp, #12
  test_set_step(1);
 800a478:	6035      	str	r5, [r6, #0]
 800a47a:	f387 8811 	msr	BASEPRI, r7
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800a47e:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800a482:	4313      	orrs	r3, r2
 800a484:	d002      	beq.n	800a48c <oslib_test_007_002_execute.lto_priv.0+0x2c>
    chSysHalt("SV#4");
 800a486:	4863      	ldr	r0, [pc, #396]	; (800a614 <oslib_test_007_002_execute.lto_priv.0+0x1b4>)
 800a488:	f7f6 f972 	bl	8000770 <chSysHalt>
 800a48c:	f8d8 3014 	ldr.w	r3, [r8, #20]
  _dbg_enter_lock();
 800a490:	6365      	str	r5, [r4, #52]	; 0x34
 800a492:	3b01      	subs	r3, #1
 800a494:	4219      	tst	r1, r3
 800a496:	f040 808b 	bne.w	800a5b0 <oslib_test_007_002_execute.lto_priv.0+0x150>
  php->next = mp->next;
 800a49a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a49e:	4640      	mov	r0, r8
 800a4a0:	600b      	str	r3, [r1, #0]
  mp->next = php;
 800a4a2:	f8c8 100c 	str.w	r1, [r8, #12]
 800a4a6:	9101      	str	r1, [sp, #4]
 800a4a8:	f7f9 f9c2 	bl	8003830 <chSemSignalI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a4ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 8095 	bne.w	800a5de <oslib_test_007_002_execute.lto_priv.0+0x17e>
 800a4b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4b6:	9901      	ldr	r1, [sp, #4]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	f340 8090 	ble.w	800a5de <oslib_test_007_002_execute.lto_priv.0+0x17e>
 800a4be:	6823      	ldr	r3, [r4, #0]
  if (chSchIsRescRequiredI()) {
 800a4c0:	689a      	ldr	r2, [r3, #8]
 800a4c2:	69a3      	ldr	r3, [r4, #24]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	f200 808f 	bhi.w	800a5ea <oslib_test_007_002_execute.lto_priv.0+0x18a>
  _dbg_leave_lock();
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	6363      	str	r3, [r4, #52]	; 0x34
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	42a3      	cmp	r3, r4
 800a4d4:	d005      	beq.n	800a4e2 <oslib_test_007_002_execute.lto_priv.0+0x82>
 800a4d6:	689a      	ldr	r2, [r3, #8]
 800a4d8:	69a3      	ldr	r3, [r4, #24]
 800a4da:	689b      	ldr	r3, [r3, #8]
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	f0c0 8081 	bcc.w	800a5e4 <oslib_test_007_002_execute.lto_priv.0+0x184>
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	f383 8811 	msr	BASEPRI, r3
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800a4e8:	f8d8 3010 	ldr.w	r3, [r8, #16]
  while (n != 0U) {
 800a4ec:	f1b9 0901 	subs.w	r9, r9, #1
    p = (void *)(((uint8_t *)p) + gmp->pool.object_size);
 800a4f0:	4419      	add	r1, r3
  while (n != 0U) {
 800a4f2:	d1c2      	bne.n	800a47a <oslib_test_007_002_execute.lto_priv.0+0x1a>
  test_set_step(2);
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	2504      	movs	r5, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a4f8:	4f45      	ldr	r7, [pc, #276]	; (800a610 <oslib_test_007_002_execute.lto_priv.0+0x1b0>)
  test_set_step(2);
 800a4fa:	6033      	str	r3, [r6, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a4fc:	2100      	movs	r1, #0
 800a4fe:	4638      	mov	r0, r7
 800a500:	f7fa f9ae 	bl	8004860 <chGuardedPoolAllocTimeout>
  if (!condition)
 800a504:	2800      	cmp	r0, #0
 800a506:	d056      	beq.n	800a5b6 <oslib_test_007_002_execute.lto_priv.0+0x156>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a508:	3d01      	subs	r5, #1
 800a50a:	d1f7      	bne.n	800a4fc <oslib_test_007_002_execute.lto_priv.0+0x9c>
  test_set_step(3);
 800a50c:	2303      	movs	r3, #3
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a50e:	4629      	mov	r1, r5
 800a510:	483f      	ldr	r0, [pc, #252]	; (800a610 <oslib_test_007_002_execute.lto_priv.0+0x1b0>)
  test_set_step(3);
 800a512:	6033      	str	r3, [r6, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a514:	f7fa f9a4 	bl	8004860 <chGuardedPoolAllocTimeout>
 800a518:	2800      	cmp	r0, #0
 800a51a:	d157      	bne.n	800a5cc <oslib_test_007_002_execute.lto_priv.0+0x16c>
  test_set_step(4);
 800a51c:	2204      	movs	r2, #4
 800a51e:	2720      	movs	r7, #32
 800a520:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 800a608 <oslib_test_007_002_execute.lto_priv.0+0x1a8>
 800a524:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 800a610 <oslib_test_007_002_execute.lto_priv.0+0x1b0>
 800a528:	f10b 0a10 	add.w	sl, fp, #16
 800a52c:	6032      	str	r2, [r6, #0]
      chGuardedPoolFree(&gmp1, &objects[i]);
 800a52e:	f8cd b004 	str.w	fp, [sp, #4]
 800a532:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 800a536:	f7f6 f973 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800a53a:	f7f6 fa01 	bl	8000940 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) &&
 800a53e:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800a542:	3a01      	subs	r2, #1
 800a544:	ea12 0f0b 	tst.w	r2, fp
 800a548:	d132      	bne.n	800a5b0 <oslib_test_007_002_execute.lto_priv.0+0x150>
  php->next = mp->next;
 800a54a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800a54e:	4648      	mov	r0, r9
  mp->next = php;
 800a550:	f8c8 b00c 	str.w	fp, [r8, #12]
  php->next = mp->next;
 800a554:	f84b 2b04 	str.w	r2, [fp], #4
 800a558:	f7f9 f96a 	bl	8003830 <chSemSignalI>
 */
void chGuardedPoolFree(guarded_memory_pool_t *gmp, void *objp) {

  chSysLock();
  chGuardedPoolFreeI(gmp, objp);
  chSchRescheduleS();
 800a55c:	f7f8 fb78 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800a560:	f7f6 f96e 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a564:	6822      	ldr	r2, [r4, #0]
 800a566:	42a2      	cmp	r2, r4
 800a568:	d004      	beq.n	800a574 <oslib_test_007_002_execute.lto_priv.0+0x114>
 800a56a:	6891      	ldr	r1, [r2, #8]
 800a56c:	69a2      	ldr	r2, [r4, #24]
 800a56e:	6892      	ldr	r2, [r2, #8]
 800a570:	428a      	cmp	r2, r1
 800a572:	d337      	bcc.n	800a5e4 <oslib_test_007_002_execute.lto_priv.0+0x184>
 800a574:	f385 8811 	msr	BASEPRI, r5
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a578:	45da      	cmp	sl, fp
 800a57a:	d1d8      	bne.n	800a52e <oslib_test_007_002_execute.lto_priv.0+0xce>
  test_set_step(5);
 800a57c:	2305      	movs	r3, #5
 800a57e:	2404      	movs	r4, #4
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a580:	4d23      	ldr	r5, [pc, #140]	; (800a610 <oslib_test_007_002_execute.lto_priv.0+0x1b0>)
  test_set_step(5);
 800a582:	6033      	str	r3, [r6, #0]
      test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) != NULL, "list empty");
 800a584:	2100      	movs	r1, #0
 800a586:	4628      	mov	r0, r5
 800a588:	f7fa f96a 	bl	8004860 <chGuardedPoolAllocTimeout>
 800a58c:	b198      	cbz	r0, 800a5b6 <oslib_test_007_002_execute.lto_priv.0+0x156>
    for (i = 0; i < MEMORY_POOL_SIZE; i++)
 800a58e:	3c01      	subs	r4, #1
 800a590:	d1f8      	bne.n	800a584 <oslib_test_007_002_execute.lto_priv.0+0x124>
  test_set_step(6);
 800a592:	2306      	movs	r3, #6
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a594:	4621      	mov	r1, r4
 800a596:	481e      	ldr	r0, [pc, #120]	; (800a610 <oslib_test_007_002_execute.lto_priv.0+0x1b0>)
  test_set_step(6);
 800a598:	6033      	str	r3, [r6, #0]
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a59a:	f7fa f961 	bl	8004860 <chGuardedPoolAllocTimeout>
 800a59e:	fab0 f080 	clz	r0, r0
 800a5a2:	491d      	ldr	r1, [pc, #116]	; (800a618 <oslib_test_007_002_execute.lto_priv.0+0x1b8>)
 800a5a4:	0940      	lsrs	r0, r0, #5
}
 800a5a6:	b003      	add	sp, #12
 800a5a8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert(chGuardedPoolAllocTimeout(&gmp1, TIME_IMMEDIATE) == NULL, "list not empty");
 800a5ac:	f7fb b988 	b.w	80058c0 <_test_assert>
  chDbgCheck((mp != NULL) &&
 800a5b0:	481a      	ldr	r0, [pc, #104]	; (800a61c <oslib_test_007_002_execute.lto_priv.0+0x1bc>)
 800a5b2:	f7f6 f8dd 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4919      	ldr	r1, [pc, #100]	; (800a620 <oslib_test_007_002_execute.lto_priv.0+0x1c0>)
  test_global_fail     = true;
 800a5ba:	4a1a      	ldr	r2, [pc, #104]	; (800a624 <oslib_test_007_002_execute.lto_priv.0+0x1c4>)
  test_failure_message = msg;
 800a5bc:	481a      	ldr	r0, [pc, #104]	; (800a628 <oslib_test_007_002_execute.lto_priv.0+0x1c8>)
 800a5be:	4c1b      	ldr	r4, [pc, #108]	; (800a62c <oslib_test_007_002_execute.lto_priv.0+0x1cc>)
  test_local_fail      = true;
 800a5c0:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800a5c2:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800a5c4:	7013      	strb	r3, [r2, #0]
}
 800a5c6:	b003      	add	sp, #12
 800a5c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	4914      	ldr	r1, [pc, #80]	; (800a620 <oslib_test_007_002_execute.lto_priv.0+0x1c0>)
  test_global_fail     = true;
 800a5d0:	4a14      	ldr	r2, [pc, #80]	; (800a624 <oslib_test_007_002_execute.lto_priv.0+0x1c4>)
  test_failure_message = msg;
 800a5d2:	4815      	ldr	r0, [pc, #84]	; (800a628 <oslib_test_007_002_execute.lto_priv.0+0x1c8>)
 800a5d4:	4c10      	ldr	r4, [pc, #64]	; (800a618 <oslib_test_007_002_execute.lto_priv.0+0x1b8>)
  test_local_fail      = true;
 800a5d6:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800a5d8:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800a5da:	7013      	strb	r3, [r2, #0]
  return true;
 800a5dc:	e7f3      	b.n	800a5c6 <oslib_test_007_002_execute.lto_priv.0+0x166>
    chSysHalt("SV#11");
 800a5de:	4814      	ldr	r0, [pc, #80]	; (800a630 <oslib_test_007_002_execute.lto_priv.0+0x1d0>)
 800a5e0:	f7f6 f8c6 	bl	8000770 <chSysHalt>
 800a5e4:	4813      	ldr	r0, [pc, #76]	; (800a634 <oslib_test_007_002_execute.lto_priv.0+0x1d4>)
 800a5e6:	f7f6 f8c3 	bl	8000770 <chSysHalt>
    chSchDoRescheduleAhead();
 800a5ea:	9101      	str	r1, [sp, #4]
 800a5ec:	f7f8 faf8 	bl	8002be0 <chSchDoReschedule>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a5f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a5f2:	9901      	ldr	r1, [sp, #4]
 800a5f4:	b113      	cbz	r3, 800a5fc <oslib_test_007_002_execute.lto_priv.0+0x19c>
    chSysHalt("SV#5");
 800a5f6:	4810      	ldr	r0, [pc, #64]	; (800a638 <oslib_test_007_002_execute.lto_priv.0+0x1d8>)
 800a5f8:	f7f6 f8ba 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a5fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	ddf9      	ble.n	800a5f6 <oslib_test_007_002_execute.lto_priv.0+0x196>
 800a602:	e763      	b.n	800a4cc <oslib_test_007_002_execute.lto_priv.0+0x6c>
 800a604:	20001d3c 	.word	0x20001d3c
 800a608:	20002520 	.word	0x20002520
 800a60c:	20000d70 	.word	0x20000d70
 800a610:	20000c3c 	.word	0x20000c3c
 800a614:	0800f20c 	.word	0x0800f20c
 800a618:	08011c60 	.word	0x08011c60
 800a61c:	08010cf8 	.word	0x08010cf8
 800a620:	20001d39 	.word	0x20001d39
 800a624:	20001d38 	.word	0x20001d38
 800a628:	20001d34 	.word	0x20001d34
 800a62c:	08011d9c 	.word	0x08011d9c
 800a630:	0800f204 	.word	0x0800f204
 800a634:	08010e40 	.word	0x08010e40
 800a638:	0800f214 	.word	0x0800f214
 800a63c:	00000000 	.word	0x00000000

0800a640 <oslib_test_008_002_execute.lto_priv.0>:
  void *p1;
  size_t total_size, largest_size;

  /* [8.2.1] Single block allocation using chHeapAlloc() then the block
     is freed using chHeapFree(), must not fail.*/
  test_set_step(1);
 800a640:	2201      	movs	r2, #1
static void oslib_test_008_002_execute(void) {
 800a642:	b538      	push	{r3, r4, r5, lr}
  test_set_step(1);
 800a644:	4d22      	ldr	r5, [pc, #136]	; (800a6d0 <oslib_test_008_002_execute.lto_priv.0+0x90>)
 800a646:	2320      	movs	r3, #32
 800a648:	602a      	str	r2, [r5, #0]
 800a64a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a64e:	f7f6 f8e7 	bl	8000820 <_dbg_check_lock>
 800a652:	4820      	ldr	r0, [pc, #128]	; (800a6d4 <oslib_test_008_002_execute.lto_priv.0+0x94>)
 800a654:	f7f9 f9c4 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800a658:	f7f6 f8f2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <oslib_test_008_002_execute.lto_priv.0+0x98>)
 800a65e:	681a      	ldr	r2, [r3, #0]
 800a660:	429a      	cmp	r2, r3
 800a662:	d004      	beq.n	800a66e <oslib_test_008_002_execute.lto_priv.0+0x2e>
 800a664:	6999      	ldr	r1, [r3, #24]
 800a666:	6893      	ldr	r3, [r2, #8]
 800a668:	688a      	ldr	r2, [r1, #8]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d31b      	bcc.n	800a6a6 <oslib_test_008_002_execute.lto_priv.0+0x66>
 800a66e:	2300      	movs	r3, #0
 800a670:	f383 8811 	msr	BASEPRI, r3
  qp = &heapp->header;
 800a674:	4c19      	ldr	r4, [pc, #100]	; (800a6dc <oslib_test_008_002_execute.lto_priv.0+0x9c>)
  while (H_NEXT(qp) != NULL) {
 800a676:	6824      	ldr	r4, [r4, #0]
 800a678:	2c00      	cmp	r4, #0
 800a67a:	d1fc      	bne.n	800a676 <oslib_test_008_002_execute.lto_priv.0+0x36>
  H_UNLOCK(heapp);
 800a67c:	4815      	ldr	r0, [pc, #84]	; (800a6d4 <oslib_test_008_002_execute.lto_priv.0+0x94>)
 800a67e:	f7f9 fa9f 	bl	8003bc0 <chMtxUnlock>
 800a682:	2208      	movs	r2, #8
 800a684:	2110      	movs	r1, #16
 800a686:	4816      	ldr	r0, [pc, #88]	; (800a6e0 <oslib_test_008_002_execute.lto_priv.0+0xa0>)
 800a688:	f7f9 fdca 	bl	8004220 <chHeapAllocAligned>
  if (!condition)
 800a68c:	b170      	cbz	r0, 800a6ac <oslib_test_008_002_execute.lto_priv.0+0x6c>
  {
    (void)chHeapStatus(NULL, &total_size, &largest_size);
    p1 = chHeapAlloc(&test_heap, ALLOC_SIZE);
    test_assert(p1 != NULL, "allocation failed");
    chHeapFree(p1);
 800a68e:	f7f9 fe87 	bl	80043a0 <chHeapFree>
  }
  test_end_step(1);

  /* [8.2.2] Testing allocation failure.*/
  test_set_step(2);
 800a692:	2302      	movs	r3, #2
 800a694:	2208      	movs	r2, #8
 800a696:	f06f 01ff 	mvn.w	r1, #255	; 0xff
 800a69a:	4620      	mov	r0, r4
 800a69c:	602b      	str	r3, [r5, #0]
 800a69e:	f7f9 fdbf 	bl	8004220 <chHeapAllocAligned>
 800a6a2:	b960      	cbnz	r0, 800a6be <oslib_test_008_002_execute.lto_priv.0+0x7e>
  {
    p1 = chHeapAlloc(NULL, (size_t)-256);
    test_assert(p1 == NULL, "allocation not failed");
  }
  test_end_step(2);
}
 800a6a4:	bd38      	pop	{r3, r4, r5, pc}
 800a6a6:	480f      	ldr	r0, [pc, #60]	; (800a6e4 <oslib_test_008_002_execute.lto_priv.0+0xa4>)
 800a6a8:	f7f6 f862 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	490e      	ldr	r1, [pc, #56]	; (800a6e8 <oslib_test_008_002_execute.lto_priv.0+0xa8>)
  test_global_fail     = true;
 800a6b0:	4a0e      	ldr	r2, [pc, #56]	; (800a6ec <oslib_test_008_002_execute.lto_priv.0+0xac>)
  test_failure_message = msg;
 800a6b2:	480f      	ldr	r0, [pc, #60]	; (800a6f0 <oslib_test_008_002_execute.lto_priv.0+0xb0>)
 800a6b4:	4c0f      	ldr	r4, [pc, #60]	; (800a6f4 <oslib_test_008_002_execute.lto_priv.0+0xb4>)
  test_local_fail      = true;
 800a6b6:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800a6b8:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800a6ba:	7013      	strb	r3, [r2, #0]
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
  test_local_fail      = true;
 800a6be:	2301      	movs	r3, #1
 800a6c0:	4909      	ldr	r1, [pc, #36]	; (800a6e8 <oslib_test_008_002_execute.lto_priv.0+0xa8>)
  test_global_fail     = true;
 800a6c2:	4a0a      	ldr	r2, [pc, #40]	; (800a6ec <oslib_test_008_002_execute.lto_priv.0+0xac>)
  test_failure_message = msg;
 800a6c4:	480a      	ldr	r0, [pc, #40]	; (800a6f0 <oslib_test_008_002_execute.lto_priv.0+0xb0>)
 800a6c6:	4c0c      	ldr	r4, [pc, #48]	; (800a6f8 <oslib_test_008_002_execute.lto_priv.0+0xb8>)
  test_local_fail      = true;
 800a6c8:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800a6ca:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800a6cc:	7013      	strb	r3, [r2, #0]
 800a6ce:	bd38      	pop	{r3, r4, r5, pc}
 800a6d0:	20001d3c 	.word	0x20001d3c
 800a6d4:	20001654 	.word	0x20001654
 800a6d8:	20000d70 	.word	0x20000d70
 800a6dc:	2000164c 	.word	0x2000164c
 800a6e0:	20002530 	.word	0x20002530
 800a6e4:	08010f48 	.word	0x08010f48
 800a6e8:	20001d39 	.word	0x20001d39
 800a6ec:	20001d38 	.word	0x20001d38
 800a6f0:	20001d34 	.word	0x20001d34
 800a6f4:	08011d08 	.word	0x08011d08
 800a6f8:	08011cf0 	.word	0x08011cf0
 800a6fc:	00000000 	.word	0x00000000

0800a700 <oslib_test_009_001_teardown.lto_priv.0>:
 800a700:	2320      	movs	r3, #32
 * - [9.1.6] Retrieving the registered object by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_001_teardown(void) {
 800a702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	4f34      	ldr	r7, [pc, #208]	; (800a7dc <oslib_test_009_001_teardown.lto_priv.0+0xdc>)
  _dbg_check_lock();
 800a70c:	f7f6 f888 	bl	8000820 <_dbg_check_lock>
 800a710:	4833      	ldr	r0, [pc, #204]	; (800a7e0 <oslib_test_009_001_teardown.lto_priv.0+0xe0>)
 800a712:	f7f9 f965 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800a716:	f7f6 f893 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	42bb      	cmp	r3, r7
 800a71e:	d004      	beq.n	800a72a <oslib_test_009_001_teardown.lto_priv.0+0x2a>
 800a720:	69ba      	ldr	r2, [r7, #24]
 800a722:	689b      	ldr	r3, [r3, #8]
 800a724:	6892      	ldr	r2, [r2, #8]
 800a726:	429a      	cmp	r2, r3
 800a728:	d34a      	bcc.n	800a7c0 <oslib_test_009_001_teardown.lto_priv.0+0xc0>
 800a72a:	2300      	movs	r3, #0
 800a72c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a730:	4d2b      	ldr	r5, [pc, #172]	; (800a7e0 <oslib_test_009_001_teardown.lto_priv.0+0xe0>)
 800a732:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800a736:	42ac      	cmp	r4, r5
 800a738:	d048      	beq.n	800a7cc <oslib_test_009_001_teardown.lto_priv.0+0xcc>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a73a:	4e2a      	ldr	r6, [pc, #168]	; (800a7e4 <oslib_test_009_001_teardown.lto_priv.0+0xe4>)
 800a73c:	e002      	b.n	800a744 <oslib_test_009_001_teardown.lto_priv.0+0x44>
    p = p->next;
 800a73e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a740:	42ac      	cmp	r4, r5
 800a742:	d043      	beq.n	800a7cc <oslib_test_009_001_teardown.lto_priv.0+0xcc>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a744:	4631      	mov	r1, r6
 800a746:	f104 0008 	add.w	r0, r4, #8
 800a74a:	f7f5 fd94 	bl	8000276 <strcmp>
 800a74e:	2800      	cmp	r0, #0
 800a750:	d1f5      	bne.n	800a73e <oslib_test_009_001_teardown.lto_priv.0+0x3e>
  if (dep != NULL) {
 800a752:	2c00      	cmp	r4, #0
 800a754:	d03a      	beq.n	800a7cc <oslib_test_009_001_teardown.lto_priv.0+0xcc>
    dep->refs++;
 800a756:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a758:	4821      	ldr	r0, [pc, #132]	; (800a7e0 <oslib_test_009_001_teardown.lto_priv.0+0xe0>)
    dep->refs++;
 800a75a:	3301      	adds	r3, #1
 800a75c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a75e:	f7f9 fa2f 	bl	8003bc0 <chMtxUnlock>
  registered_object_t *rop;

  rop = chFactoryFindObject("myobj");
  if (rop != NULL) {
    while (rop->element.refs > 0U) {
 800a762:	6863      	ldr	r3, [r4, #4]
 800a764:	b353      	cbz	r3, 800a7bc <oslib_test_009_001_teardown.lto_priv.0+0xbc>
 800a766:	2620      	movs	r6, #32
 800a768:	4d1d      	ldr	r5, [pc, #116]	; (800a7e0 <oslib_test_009_001_teardown.lto_priv.0+0xe0>)
  dyn_release_object_pool(&rop->element,
 800a76a:	f105 0814 	add.w	r8, r5, #20
 800a76e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800a772:	e9d7 130c 	ldrd	r1, r3, [r7, #48]	; 0x30
 800a776:	430b      	orrs	r3, r1
 800a778:	d125      	bne.n	800a7c6 <oslib_test_009_001_teardown.lto_priv.0+0xc6>
  _dbg_enter_lock();
 800a77a:	2301      	movs	r3, #1
 800a77c:	4628      	mov	r0, r5
 800a77e:	637b      	str	r3, [r7, #52]	; 0x34
 800a780:	f7f9 f92e 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a784:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a786:	bb33      	cbnz	r3, 800a7d6 <oslib_test_009_001_teardown.lto_priv.0+0xd6>
 800a788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a78a:	2a00      	cmp	r2, #0
 800a78c:	dd23      	ble.n	800a7d6 <oslib_test_009_001_teardown.lto_priv.0+0xd6>
  _dbg_leave_lock();
 800a78e:	637b      	str	r3, [r7, #52]	; 0x34
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	42bb      	cmp	r3, r7
 800a794:	d004      	beq.n	800a7a0 <oslib_test_009_001_teardown.lto_priv.0+0xa0>
 800a796:	69ba      	ldr	r2, [r7, #24]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	6892      	ldr	r2, [r2, #8]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d30f      	bcc.n	800a7c0 <oslib_test_009_001_teardown.lto_priv.0+0xc0>
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	4910      	ldr	r1, [pc, #64]	; (800a7e8 <oslib_test_009_001_teardown.lto_priv.0+0xe8>)
 800a7a8:	4642      	mov	r2, r8
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7fa f958 	bl	8004a60 <dyn_release_object_pool.lto_priv.0>
  F_UNLOCK();
 800a7b0:	4628      	mov	r0, r5
 800a7b2:	f7f9 fa05 	bl	8003bc0 <chMtxUnlock>
 800a7b6:	6863      	ldr	r3, [r4, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d1d8      	bne.n	800a76e <oslib_test_009_001_teardown.lto_priv.0+0x6e>
      chFactoryReleaseObject(rop);
    }
  }
}
 800a7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7c0:	480a      	ldr	r0, [pc, #40]	; (800a7ec <oslib_test_009_001_teardown.lto_priv.0+0xec>)
 800a7c2:	f7f5 ffd5 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800a7c6:	480a      	ldr	r0, [pc, #40]	; (800a7f0 <oslib_test_009_001_teardown.lto_priv.0+0xf0>)
 800a7c8:	f7f5 ffd2 	bl	8000770 <chSysHalt>
  F_UNLOCK();
 800a7cc:	4804      	ldr	r0, [pc, #16]	; (800a7e0 <oslib_test_009_001_teardown.lto_priv.0+0xe0>)
 800a7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a7d2:	f7f9 b9f5 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#5");
 800a7d6:	4807      	ldr	r0, [pc, #28]	; (800a7f4 <oslib_test_009_001_teardown.lto_priv.0+0xf4>)
 800a7d8:	f7f5 ffca 	bl	8000770 <chSysHalt>
 800a7dc:	20000d70 	.word	0x20000d70
 800a7e0:	200015f8 	.word	0x200015f8
 800a7e4:	08011dc4 	.word	0x08011dc4
 800a7e8:	20001608 	.word	0x20001608
 800a7ec:	08010f48 	.word	0x08010f48
 800a7f0:	0800f20c 	.word	0x0800f20c
 800a7f4:	0800f214 	.word	0x0800f214
	...

0800a800 <oslib_test_009_002_teardown.lto_priv.0>:
 800a800:	2320      	movs	r3, #32
 * - [9.2.6] Retrieving the dynamic buffer by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_002_teardown(void) {
 800a802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	4f34      	ldr	r7, [pc, #208]	; (800a8dc <oslib_test_009_002_teardown.lto_priv.0+0xdc>)
  _dbg_check_lock();
 800a80c:	f7f6 f808 	bl	8000820 <_dbg_check_lock>
 800a810:	4833      	ldr	r0, [pc, #204]	; (800a8e0 <oslib_test_009_002_teardown.lto_priv.0+0xe0>)
 800a812:	f7f9 f8e5 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800a816:	f7f6 f813 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	42bb      	cmp	r3, r7
 800a81e:	d004      	beq.n	800a82a <oslib_test_009_002_teardown.lto_priv.0+0x2a>
 800a820:	69ba      	ldr	r2, [r7, #24]
 800a822:	689b      	ldr	r3, [r3, #8]
 800a824:	6892      	ldr	r2, [r2, #8]
 800a826:	429a      	cmp	r2, r3
 800a828:	d349      	bcc.n	800a8be <oslib_test_009_002_teardown.lto_priv.0+0xbe>
 800a82a:	2300      	movs	r3, #0
 800a82c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a830:	4d2b      	ldr	r5, [pc, #172]	; (800a8e0 <oslib_test_009_002_teardown.lto_priv.0+0xe0>)
 800a832:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800a836:	42ac      	cmp	r4, r5
 800a838:	d047      	beq.n	800a8ca <oslib_test_009_002_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a83a:	4e2a      	ldr	r6, [pc, #168]	; (800a8e4 <oslib_test_009_002_teardown.lto_priv.0+0xe4>)
 800a83c:	e002      	b.n	800a844 <oslib_test_009_002_teardown.lto_priv.0+0x44>
    p = p->next;
 800a83e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a840:	42ac      	cmp	r4, r5
 800a842:	d042      	beq.n	800a8ca <oslib_test_009_002_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a844:	4631      	mov	r1, r6
 800a846:	f104 0008 	add.w	r0, r4, #8
 800a84a:	f7f5 fd14 	bl	8000276 <strcmp>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d1f5      	bne.n	800a83e <oslib_test_009_002_teardown.lto_priv.0+0x3e>
  if (dep != NULL) {
 800a852:	2c00      	cmp	r4, #0
 800a854:	d039      	beq.n	800a8ca <oslib_test_009_002_teardown.lto_priv.0+0xca>
    dep->refs++;
 800a856:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a858:	4821      	ldr	r0, [pc, #132]	; (800a8e0 <oslib_test_009_002_teardown.lto_priv.0+0xe0>)
    dep->refs++;
 800a85a:	3301      	adds	r3, #1
 800a85c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a85e:	f7f9 f9af 	bl	8003bc0 <chMtxUnlock>
  dyn_buffer_t *dbp;

  dbp = chFactoryFindBuffer("mybuf");
  if (dbp != NULL) {
    while (dbp->element.refs > 0U) {
 800a862:	6863      	ldr	r3, [r4, #4]
 800a864:	b34b      	cbz	r3, 800a8ba <oslib_test_009_002_teardown.lto_priv.0+0xba>
 800a866:	2620      	movs	r6, #32
 800a868:	4d1d      	ldr	r5, [pc, #116]	; (800a8e0 <oslib_test_009_002_teardown.lto_priv.0+0xe0>)
  dyn_release_object_heap(&dbp->element, &ch_factory.buf_list);
 800a86a:	f105 0824 	add.w	r8, r5, #36	; 0x24
 800a86e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800a872:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a876:	4313      	orrs	r3, r2
 800a878:	d124      	bne.n	800a8c4 <oslib_test_009_002_teardown.lto_priv.0+0xc4>
  _dbg_enter_lock();
 800a87a:	2301      	movs	r3, #1
 800a87c:	4628      	mov	r0, r5
 800a87e:	637b      	str	r3, [r7, #52]	; 0x34
 800a880:	f7f9 f8ae 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a886:	bb2b      	cbnz	r3, 800a8d4 <oslib_test_009_002_teardown.lto_priv.0+0xd4>
 800a888:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a88a:	2a00      	cmp	r2, #0
 800a88c:	dd22      	ble.n	800a8d4 <oslib_test_009_002_teardown.lto_priv.0+0xd4>
  _dbg_leave_lock();
 800a88e:	637b      	str	r3, [r7, #52]	; 0x34
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	42bb      	cmp	r3, r7
 800a894:	d004      	beq.n	800a8a0 <oslib_test_009_002_teardown.lto_priv.0+0xa0>
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	689b      	ldr	r3, [r3, #8]
 800a89a:	6892      	ldr	r2, [r2, #8]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d30e      	bcc.n	800a8be <oslib_test_009_002_teardown.lto_priv.0+0xbe>
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f383 8811 	msr	BASEPRI, r3
 800a8a6:	4641      	mov	r1, r8
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f7fa f8b1 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>
  F_UNLOCK();
 800a8ae:	4628      	mov	r0, r5
 800a8b0:	f7f9 f986 	bl	8003bc0 <chMtxUnlock>
 800a8b4:	6863      	ldr	r3, [r4, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1d9      	bne.n	800a86e <oslib_test_009_002_teardown.lto_priv.0+0x6e>
      chFactoryReleaseBuffer(dbp);
    }
  }
}
 800a8ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8be:	480a      	ldr	r0, [pc, #40]	; (800a8e8 <oslib_test_009_002_teardown.lto_priv.0+0xe8>)
 800a8c0:	f7f5 ff56 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800a8c4:	4809      	ldr	r0, [pc, #36]	; (800a8ec <oslib_test_009_002_teardown.lto_priv.0+0xec>)
 800a8c6:	f7f5 ff53 	bl	8000770 <chSysHalt>
  F_UNLOCK();
 800a8ca:	4805      	ldr	r0, [pc, #20]	; (800a8e0 <oslib_test_009_002_teardown.lto_priv.0+0xe0>)
 800a8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8d0:	f7f9 b976 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#5");
 800a8d4:	4806      	ldr	r0, [pc, #24]	; (800a8f0 <oslib_test_009_002_teardown.lto_priv.0+0xf0>)
 800a8d6:	f7f5 ff4b 	bl	8000770 <chSysHalt>
 800a8da:	bf00      	nop
 800a8dc:	20000d70 	.word	0x20000d70
 800a8e0:	200015f8 	.word	0x200015f8
 800a8e4:	08011dcc 	.word	0x08011dcc
 800a8e8:	08010f48 	.word	0x08010f48
 800a8ec:	0800f20c 	.word	0x0800f20c
 800a8f0:	0800f214 	.word	0x0800f214
	...

0800a900 <oslib_test_009_003_teardown.lto_priv.0>:
 800a900:	2320      	movs	r3, #32
 * - [9.3.6] Retrieving the dynamic semaphore by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_003_teardown(void) {
 800a902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a906:	f383 8811 	msr	BASEPRI, r3
 800a90a:	4f34      	ldr	r7, [pc, #208]	; (800a9dc <oslib_test_009_003_teardown.lto_priv.0+0xdc>)
  _dbg_check_lock();
 800a90c:	f7f5 ff88 	bl	8000820 <_dbg_check_lock>
 800a910:	4833      	ldr	r0, [pc, #204]	; (800a9e0 <oslib_test_009_003_teardown.lto_priv.0+0xe0>)
 800a912:	f7f9 f865 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800a916:	f7f5 ff93 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	42bb      	cmp	r3, r7
 800a91e:	d004      	beq.n	800a92a <oslib_test_009_003_teardown.lto_priv.0+0x2a>
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	6892      	ldr	r2, [r2, #8]
 800a926:	429a      	cmp	r2, r3
 800a928:	d34a      	bcc.n	800a9c0 <oslib_test_009_003_teardown.lto_priv.0+0xc0>
 800a92a:	2300      	movs	r3, #0
 800a92c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800a930:	4d2b      	ldr	r5, [pc, #172]	; (800a9e0 <oslib_test_009_003_teardown.lto_priv.0+0xe0>)
 800a932:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800a936:	42ac      	cmp	r4, r5
 800a938:	d048      	beq.n	800a9cc <oslib_test_009_003_teardown.lto_priv.0+0xcc>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a93a:	4e2a      	ldr	r6, [pc, #168]	; (800a9e4 <oslib_test_009_003_teardown.lto_priv.0+0xe4>)
 800a93c:	e002      	b.n	800a944 <oslib_test_009_003_teardown.lto_priv.0+0x44>
    p = p->next;
 800a93e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800a940:	42ac      	cmp	r4, r5
 800a942:	d043      	beq.n	800a9cc <oslib_test_009_003_teardown.lto_priv.0+0xcc>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800a944:	4631      	mov	r1, r6
 800a946:	f104 0008 	add.w	r0, r4, #8
 800a94a:	f7f5 fc94 	bl	8000276 <strcmp>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d1f5      	bne.n	800a93e <oslib_test_009_003_teardown.lto_priv.0+0x3e>
  if (dep != NULL) {
 800a952:	2c00      	cmp	r4, #0
 800a954:	d03a      	beq.n	800a9cc <oslib_test_009_003_teardown.lto_priv.0+0xcc>
    dep->refs++;
 800a956:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800a958:	4821      	ldr	r0, [pc, #132]	; (800a9e0 <oslib_test_009_003_teardown.lto_priv.0+0xe0>)
    dep->refs++;
 800a95a:	3301      	adds	r3, #1
 800a95c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800a95e:	f7f9 f92f 	bl	8003bc0 <chMtxUnlock>
  dyn_semaphore_t *dsp;

  dsp = chFactoryFindSemaphore("mysem");
  if (dsp != NULL) {
    while (dsp->element.refs > 0U) {
 800a962:	6863      	ldr	r3, [r4, #4]
 800a964:	b353      	cbz	r3, 800a9bc <oslib_test_009_003_teardown.lto_priv.0+0xbc>
 800a966:	2620      	movs	r6, #32
 800a968:	4d1d      	ldr	r5, [pc, #116]	; (800a9e0 <oslib_test_009_003_teardown.lto_priv.0+0xe0>)
  dyn_release_object_pool(&dsp->element,
 800a96a:	f105 082c 	add.w	r8, r5, #44	; 0x2c
 800a96e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800a972:	e9d7 130c 	ldrd	r1, r3, [r7, #48]	; 0x30
 800a976:	430b      	orrs	r3, r1
 800a978:	d125      	bne.n	800a9c6 <oslib_test_009_003_teardown.lto_priv.0+0xc6>
  _dbg_enter_lock();
 800a97a:	2301      	movs	r3, #1
 800a97c:	4628      	mov	r0, r5
 800a97e:	637b      	str	r3, [r7, #52]	; 0x34
 800a980:	f7f9 f82e 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800a984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a986:	bb33      	cbnz	r3, 800a9d6 <oslib_test_009_003_teardown.lto_priv.0+0xd6>
 800a988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a98a:	2a00      	cmp	r2, #0
 800a98c:	dd23      	ble.n	800a9d6 <oslib_test_009_003_teardown.lto_priv.0+0xd6>
  _dbg_leave_lock();
 800a98e:	637b      	str	r3, [r7, #52]	; 0x34
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	42bb      	cmp	r3, r7
 800a994:	d004      	beq.n	800a9a0 <oslib_test_009_003_teardown.lto_priv.0+0xa0>
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	689b      	ldr	r3, [r3, #8]
 800a99a:	6892      	ldr	r2, [r2, #8]
 800a99c:	429a      	cmp	r2, r3
 800a99e:	d30f      	bcc.n	800a9c0 <oslib_test_009_003_teardown.lto_priv.0+0xc0>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f383 8811 	msr	BASEPRI, r3
 800a9a6:	4910      	ldr	r1, [pc, #64]	; (800a9e8 <oslib_test_009_003_teardown.lto_priv.0+0xe8>)
 800a9a8:	4642      	mov	r2, r8
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f7fa f858 	bl	8004a60 <dyn_release_object_pool.lto_priv.0>
  F_UNLOCK();
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	f7f9 f905 	bl	8003bc0 <chMtxUnlock>
 800a9b6:	6863      	ldr	r3, [r4, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1d8      	bne.n	800a96e <oslib_test_009_003_teardown.lto_priv.0+0x6e>
      chFactoryReleaseSemaphore(dsp);
    }
  }
}
 800a9bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9c0:	480a      	ldr	r0, [pc, #40]	; (800a9ec <oslib_test_009_003_teardown.lto_priv.0+0xec>)
 800a9c2:	f7f5 fed5 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800a9c6:	480a      	ldr	r0, [pc, #40]	; (800a9f0 <oslib_test_009_003_teardown.lto_priv.0+0xf0>)
 800a9c8:	f7f5 fed2 	bl	8000770 <chSysHalt>
  F_UNLOCK();
 800a9cc:	4804      	ldr	r0, [pc, #16]	; (800a9e0 <oslib_test_009_003_teardown.lto_priv.0+0xe0>)
 800a9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9d2:	f7f9 b8f5 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#5");
 800a9d6:	4807      	ldr	r0, [pc, #28]	; (800a9f4 <oslib_test_009_003_teardown.lto_priv.0+0xf4>)
 800a9d8:	f7f5 feca 	bl	8000770 <chSysHalt>
 800a9dc:	20000d70 	.word	0x20000d70
 800a9e0:	200015f8 	.word	0x200015f8
 800a9e4:	08011dd4 	.word	0x08011dd4
 800a9e8:	20001620 	.word	0x20001620
 800a9ec:	08010f48 	.word	0x08010f48
 800a9f0:	0800f20c 	.word	0x0800f20c
 800a9f4:	0800f214 	.word	0x0800f214
	...

0800aa00 <oslib_test_009_004_teardown.lto_priv.0>:
 800aa00:	2320      	movs	r3, #32
 * - [9.4.6] Retrieving the dynamic mailbox by name again, must not
 *   exist.
 * .
 */

static void oslib_test_009_004_teardown(void) {
 800aa02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa06:	f383 8811 	msr	BASEPRI, r3
 800aa0a:	4f34      	ldr	r7, [pc, #208]	; (800aadc <oslib_test_009_004_teardown.lto_priv.0+0xdc>)
  _dbg_check_lock();
 800aa0c:	f7f5 ff08 	bl	8000820 <_dbg_check_lock>
 800aa10:	4833      	ldr	r0, [pc, #204]	; (800aae0 <oslib_test_009_004_teardown.lto_priv.0+0xe0>)
 800aa12:	f7f8 ffe5 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800aa16:	f7f5 ff13 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	42bb      	cmp	r3, r7
 800aa1e:	d004      	beq.n	800aa2a <oslib_test_009_004_teardown.lto_priv.0+0x2a>
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	689b      	ldr	r3, [r3, #8]
 800aa24:	6892      	ldr	r2, [r2, #8]
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d349      	bcc.n	800aabe <oslib_test_009_004_teardown.lto_priv.0+0xbe>
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800aa30:	4d2b      	ldr	r5, [pc, #172]	; (800aae0 <oslib_test_009_004_teardown.lto_priv.0+0xe0>)
 800aa32:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800aa36:	42ac      	cmp	r4, r5
 800aa38:	d047      	beq.n	800aaca <oslib_test_009_004_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa3a:	4e2a      	ldr	r6, [pc, #168]	; (800aae4 <oslib_test_009_004_teardown.lto_priv.0+0xe4>)
 800aa3c:	e002      	b.n	800aa44 <oslib_test_009_004_teardown.lto_priv.0+0x44>
    p = p->next;
 800aa3e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800aa40:	42ac      	cmp	r4, r5
 800aa42:	d042      	beq.n	800aaca <oslib_test_009_004_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800aa44:	4631      	mov	r1, r6
 800aa46:	f104 0008 	add.w	r0, r4, #8
 800aa4a:	f7f5 fc14 	bl	8000276 <strcmp>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	d1f5      	bne.n	800aa3e <oslib_test_009_004_teardown.lto_priv.0+0x3e>
  if (dep != NULL) {
 800aa52:	2c00      	cmp	r4, #0
 800aa54:	d039      	beq.n	800aaca <oslib_test_009_004_teardown.lto_priv.0+0xca>
    dep->refs++;
 800aa56:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800aa58:	4821      	ldr	r0, [pc, #132]	; (800aae0 <oslib_test_009_004_teardown.lto_priv.0+0xe0>)
    dep->refs++;
 800aa5a:	3301      	adds	r3, #1
 800aa5c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800aa5e:	f7f9 f8af 	bl	8003bc0 <chMtxUnlock>
  dyn_mailbox_t *dmp;

  dmp = chFactoryFindMailbox("mymbx");
  if (dmp != NULL) {
    while (dmp->element.refs > 0U) {
 800aa62:	6863      	ldr	r3, [r4, #4]
 800aa64:	b34b      	cbz	r3, 800aaba <oslib_test_009_004_teardown.lto_priv.0+0xba>
 800aa66:	2620      	movs	r6, #32
 800aa68:	4d1d      	ldr	r5, [pc, #116]	; (800aae0 <oslib_test_009_004_teardown.lto_priv.0+0xe0>)
  dyn_release_object_heap(&dmp->element, &ch_factory.mbx_list);
 800aa6a:	f105 083c 	add.w	r8, r5, #60	; 0x3c
 800aa6e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800aa72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800aa76:	4313      	orrs	r3, r2
 800aa78:	d124      	bne.n	800aac4 <oslib_test_009_004_teardown.lto_priv.0+0xc4>
  _dbg_enter_lock();
 800aa7a:	2301      	movs	r3, #1
 800aa7c:	4628      	mov	r0, r5
 800aa7e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa80:	f7f8 ffae 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800aa84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa86:	bb2b      	cbnz	r3, 800aad4 <oslib_test_009_004_teardown.lto_priv.0+0xd4>
 800aa88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa8a:	2a00      	cmp	r2, #0
 800aa8c:	dd22      	ble.n	800aad4 <oslib_test_009_004_teardown.lto_priv.0+0xd4>
  _dbg_leave_lock();
 800aa8e:	637b      	str	r3, [r7, #52]	; 0x34
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	42bb      	cmp	r3, r7
 800aa94:	d004      	beq.n	800aaa0 <oslib_test_009_004_teardown.lto_priv.0+0xa0>
 800aa96:	69ba      	ldr	r2, [r7, #24]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	6892      	ldr	r2, [r2, #8]
 800aa9c:	429a      	cmp	r2, r3
 800aa9e:	d30e      	bcc.n	800aabe <oslib_test_009_004_teardown.lto_priv.0+0xbe>
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	f383 8811 	msr	BASEPRI, r3
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f7f9 ffb1 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>
  F_UNLOCK();
 800aaae:	4628      	mov	r0, r5
 800aab0:	f7f9 f886 	bl	8003bc0 <chMtxUnlock>
 800aab4:	6863      	ldr	r3, [r4, #4]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d1d9      	bne.n	800aa6e <oslib_test_009_004_teardown.lto_priv.0+0x6e>
      chFactoryReleaseMailbox(dmp);
    }
  }
}
 800aaba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aabe:	480a      	ldr	r0, [pc, #40]	; (800aae8 <oslib_test_009_004_teardown.lto_priv.0+0xe8>)
 800aac0:	f7f5 fe56 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800aac4:	4809      	ldr	r0, [pc, #36]	; (800aaec <oslib_test_009_004_teardown.lto_priv.0+0xec>)
 800aac6:	f7f5 fe53 	bl	8000770 <chSysHalt>
  F_UNLOCK();
 800aaca:	4805      	ldr	r0, [pc, #20]	; (800aae0 <oslib_test_009_004_teardown.lto_priv.0+0xe0>)
 800aacc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aad0:	f7f9 b876 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#5");
 800aad4:	4806      	ldr	r0, [pc, #24]	; (800aaf0 <oslib_test_009_004_teardown.lto_priv.0+0xf0>)
 800aad6:	f7f5 fe4b 	bl	8000770 <chSysHalt>
 800aada:	bf00      	nop
 800aadc:	20000d70 	.word	0x20000d70
 800aae0:	200015f8 	.word	0x200015f8
 800aae4:	08011ddc 	.word	0x08011ddc
 800aae8:	08010f48 	.word	0x08010f48
 800aaec:	0800f20c 	.word	0x0800f20c
 800aaf0:	0800f214 	.word	0x0800f214
	...

0800ab00 <oslib_test_009_005_teardown.lto_priv.0>:
 800ab00:	2320      	movs	r3, #32
 * - [9.5.6] Retrieving the dynamic objects FIFO by name again, must
 *   not exist.
 * .
 */

static void oslib_test_009_005_teardown(void) {
 800ab02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab06:	f383 8811 	msr	BASEPRI, r3
 800ab0a:	4f34      	ldr	r7, [pc, #208]	; (800abdc <oslib_test_009_005_teardown.lto_priv.0+0xdc>)
  _dbg_check_lock();
 800ab0c:	f7f5 fe88 	bl	8000820 <_dbg_check_lock>
 800ab10:	4833      	ldr	r0, [pc, #204]	; (800abe0 <oslib_test_009_005_teardown.lto_priv.0+0xe0>)
 800ab12:	f7f8 ff65 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800ab16:	f7f5 fe93 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	42bb      	cmp	r3, r7
 800ab1e:	d004      	beq.n	800ab2a <oslib_test_009_005_teardown.lto_priv.0+0x2a>
 800ab20:	69ba      	ldr	r2, [r7, #24]
 800ab22:	689b      	ldr	r3, [r3, #8]
 800ab24:	6892      	ldr	r2, [r2, #8]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d349      	bcc.n	800abbe <oslib_test_009_005_teardown.lto_priv.0+0xbe>
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ab30:	4d2b      	ldr	r5, [pc, #172]	; (800abe0 <oslib_test_009_005_teardown.lto_priv.0+0xe0>)
 800ab32:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800ab36:	42ac      	cmp	r4, r5
 800ab38:	d047      	beq.n	800abca <oslib_test_009_005_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ab3a:	4e2a      	ldr	r6, [pc, #168]	; (800abe4 <oslib_test_009_005_teardown.lto_priv.0+0xe4>)
 800ab3c:	e002      	b.n	800ab44 <oslib_test_009_005_teardown.lto_priv.0+0x44>
    p = p->next;
 800ab3e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800ab40:	42ac      	cmp	r4, r5
 800ab42:	d042      	beq.n	800abca <oslib_test_009_005_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ab44:	4631      	mov	r1, r6
 800ab46:	f104 0008 	add.w	r0, r4, #8
 800ab4a:	f7f5 fb94 	bl	8000276 <strcmp>
 800ab4e:	2800      	cmp	r0, #0
 800ab50:	d1f5      	bne.n	800ab3e <oslib_test_009_005_teardown.lto_priv.0+0x3e>
  if (dep != NULL) {
 800ab52:	2c00      	cmp	r4, #0
 800ab54:	d039      	beq.n	800abca <oslib_test_009_005_teardown.lto_priv.0+0xca>
    dep->refs++;
 800ab56:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800ab58:	4821      	ldr	r0, [pc, #132]	; (800abe0 <oslib_test_009_005_teardown.lto_priv.0+0xe0>)
    dep->refs++;
 800ab5a:	3301      	adds	r3, #1
 800ab5c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800ab5e:	f7f9 f82f 	bl	8003bc0 <chMtxUnlock>
  dyn_objects_fifo_t *dofp;

  dofp = chFactoryFindObjectsFIFO("myfifo");
  if (dofp != NULL) {
    while (dofp->element.refs > 0U) {
 800ab62:	6863      	ldr	r3, [r4, #4]
 800ab64:	b34b      	cbz	r3, 800abba <oslib_test_009_005_teardown.lto_priv.0+0xba>
 800ab66:	2620      	movs	r6, #32
 800ab68:	4d1d      	ldr	r5, [pc, #116]	; (800abe0 <oslib_test_009_005_teardown.lto_priv.0+0xe0>)
  dyn_release_object_heap(&dofp->element, &ch_factory.fifo_list);
 800ab6a:	f105 0840 	add.w	r8, r5, #64	; 0x40
 800ab6e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800ab72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ab76:	4313      	orrs	r3, r2
 800ab78:	d124      	bne.n	800abc4 <oslib_test_009_005_teardown.lto_priv.0+0xc4>
  _dbg_enter_lock();
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	4628      	mov	r0, r5
 800ab7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab80:	f7f8 ff2e 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800ab84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab86:	bb2b      	cbnz	r3, 800abd4 <oslib_test_009_005_teardown.lto_priv.0+0xd4>
 800ab88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab8a:	2a00      	cmp	r2, #0
 800ab8c:	dd22      	ble.n	800abd4 <oslib_test_009_005_teardown.lto_priv.0+0xd4>
  _dbg_leave_lock();
 800ab8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	42bb      	cmp	r3, r7
 800ab94:	d004      	beq.n	800aba0 <oslib_test_009_005_teardown.lto_priv.0+0xa0>
 800ab96:	69ba      	ldr	r2, [r7, #24]
 800ab98:	689b      	ldr	r3, [r3, #8]
 800ab9a:	6892      	ldr	r2, [r2, #8]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d30e      	bcc.n	800abbe <oslib_test_009_005_teardown.lto_priv.0+0xbe>
 800aba0:	2300      	movs	r3, #0
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	4641      	mov	r1, r8
 800aba8:	4620      	mov	r0, r4
 800abaa:	f7f9 ff31 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>
  F_UNLOCK();
 800abae:	4628      	mov	r0, r5
 800abb0:	f7f9 f806 	bl	8003bc0 <chMtxUnlock>
 800abb4:	6863      	ldr	r3, [r4, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d1d9      	bne.n	800ab6e <oslib_test_009_005_teardown.lto_priv.0+0x6e>
      chFactoryReleaseObjectsFIFO(dofp);
    }
  }
}
 800abba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abbe:	480a      	ldr	r0, [pc, #40]	; (800abe8 <oslib_test_009_005_teardown.lto_priv.0+0xe8>)
 800abc0:	f7f5 fdd6 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800abc4:	4809      	ldr	r0, [pc, #36]	; (800abec <oslib_test_009_005_teardown.lto_priv.0+0xec>)
 800abc6:	f7f5 fdd3 	bl	8000770 <chSysHalt>
  F_UNLOCK();
 800abca:	4805      	ldr	r0, [pc, #20]	; (800abe0 <oslib_test_009_005_teardown.lto_priv.0+0xe0>)
 800abcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abd0:	f7f8 bff6 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#5");
 800abd4:	4806      	ldr	r0, [pc, #24]	; (800abf0 <oslib_test_009_005_teardown.lto_priv.0+0xf0>)
 800abd6:	f7f5 fdcb 	bl	8000770 <chSysHalt>
 800abda:	bf00      	nop
 800abdc:	20000d70 	.word	0x20000d70
 800abe0:	200015f8 	.word	0x200015f8
 800abe4:	08011d74 	.word	0x08011d74
 800abe8:	08010f48 	.word	0x08010f48
 800abec:	0800f20c 	.word	0x0800f20c
 800abf0:	0800f214 	.word	0x0800f214
	...

0800ac00 <oslib_test_009_006_teardown.lto_priv.0>:
 800ac00:	2320      	movs	r3, #32
 *   trigger an assertion.
 * - [9.6.6] Retrieving the dynamic pipe by name again, must not exist.
 * .
 */

static void oslib_test_009_006_teardown(void) {
 800ac02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac06:	f383 8811 	msr	BASEPRI, r3
 800ac0a:	4f34      	ldr	r7, [pc, #208]	; (800acdc <oslib_test_009_006_teardown.lto_priv.0+0xdc>)
  _dbg_check_lock();
 800ac0c:	f7f5 fe08 	bl	8000820 <_dbg_check_lock>
 800ac10:	4833      	ldr	r0, [pc, #204]	; (800ace0 <oslib_test_009_006_teardown.lto_priv.0+0xe0>)
 800ac12:	f7f8 fee5 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800ac16:	f7f5 fe13 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	42bb      	cmp	r3, r7
 800ac1e:	d004      	beq.n	800ac2a <oslib_test_009_006_teardown.lto_priv.0+0x2a>
 800ac20:	69ba      	ldr	r2, [r7, #24]
 800ac22:	689b      	ldr	r3, [r3, #8]
 800ac24:	6892      	ldr	r2, [r2, #8]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d349      	bcc.n	800acbe <oslib_test_009_006_teardown.lto_priv.0+0xbe>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ac30:	4d2b      	ldr	r5, [pc, #172]	; (800ace0 <oslib_test_009_006_teardown.lto_priv.0+0xe0>)
 800ac32:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800ac36:	42ac      	cmp	r4, r5
 800ac38:	d047      	beq.n	800acca <oslib_test_009_006_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ac3a:	4e2a      	ldr	r6, [pc, #168]	; (800ace4 <oslib_test_009_006_teardown.lto_priv.0+0xe4>)
 800ac3c:	e002      	b.n	800ac44 <oslib_test_009_006_teardown.lto_priv.0+0x44>
    p = p->next;
 800ac3e:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800ac40:	42ac      	cmp	r4, r5
 800ac42:	d042      	beq.n	800acca <oslib_test_009_006_teardown.lto_priv.0+0xca>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ac44:	4631      	mov	r1, r6
 800ac46:	f104 0008 	add.w	r0, r4, #8
 800ac4a:	f7f5 fb14 	bl	8000276 <strcmp>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	d1f5      	bne.n	800ac3e <oslib_test_009_006_teardown.lto_priv.0+0x3e>
  if (dep != NULL) {
 800ac52:	2c00      	cmp	r4, #0
 800ac54:	d039      	beq.n	800acca <oslib_test_009_006_teardown.lto_priv.0+0xca>
    dep->refs++;
 800ac56:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800ac58:	4821      	ldr	r0, [pc, #132]	; (800ace0 <oslib_test_009_006_teardown.lto_priv.0+0xe0>)
    dep->refs++;
 800ac5a:	3301      	adds	r3, #1
 800ac5c:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800ac5e:	f7f8 ffaf 	bl	8003bc0 <chMtxUnlock>
  dyn_pipe_t *dpp;

  dpp = chFactoryFindPipe("mypipe");
  if (dpp != NULL) {
    while (dpp->element.refs > 0U) {
 800ac62:	6863      	ldr	r3, [r4, #4]
 800ac64:	b34b      	cbz	r3, 800acba <oslib_test_009_006_teardown.lto_priv.0+0xba>
 800ac66:	2620      	movs	r6, #32
 800ac68:	4d1d      	ldr	r5, [pc, #116]	; (800ace0 <oslib_test_009_006_teardown.lto_priv.0+0xe0>)
  dyn_release_object_heap(&dpp->element, &ch_factory.pipe_list);
 800ac6a:	f105 0844 	add.w	r8, r5, #68	; 0x44
 800ac6e:	f386 8811 	msr	BASEPRI, r6
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800ac72:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ac76:	4313      	orrs	r3, r2
 800ac78:	d124      	bne.n	800acc4 <oslib_test_009_006_teardown.lto_priv.0+0xc4>
  _dbg_enter_lock();
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac80:	f7f8 feae 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac86:	bb2b      	cbnz	r3, 800acd4 <oslib_test_009_006_teardown.lto_priv.0+0xd4>
 800ac88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac8a:	2a00      	cmp	r2, #0
 800ac8c:	dd22      	ble.n	800acd4 <oslib_test_009_006_teardown.lto_priv.0+0xd4>
  _dbg_leave_lock();
 800ac8e:	637b      	str	r3, [r7, #52]	; 0x34
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	42bb      	cmp	r3, r7
 800ac94:	d004      	beq.n	800aca0 <oslib_test_009_006_teardown.lto_priv.0+0xa0>
 800ac96:	69ba      	ldr	r2, [r7, #24]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	6892      	ldr	r2, [r2, #8]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d30e      	bcc.n	800acbe <oslib_test_009_006_teardown.lto_priv.0+0xbe>
 800aca0:	2300      	movs	r3, #0
 800aca2:	f383 8811 	msr	BASEPRI, r3
 800aca6:	4641      	mov	r1, r8
 800aca8:	4620      	mov	r0, r4
 800acaa:	f7f9 feb1 	bl	8004a10 <dyn_release_object_heap.lto_priv.0>
  F_UNLOCK();
 800acae:	4628      	mov	r0, r5
 800acb0:	f7f8 ff86 	bl	8003bc0 <chMtxUnlock>
 800acb4:	6863      	ldr	r3, [r4, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d1d9      	bne.n	800ac6e <oslib_test_009_006_teardown.lto_priv.0+0x6e>
      chFactoryReleasePipe(dpp);
    }
  }
}
 800acba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acbe:	480a      	ldr	r0, [pc, #40]	; (800ace8 <oslib_test_009_006_teardown.lto_priv.0+0xe8>)
 800acc0:	f7f5 fd56 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800acc4:	4809      	ldr	r0, [pc, #36]	; (800acec <oslib_test_009_006_teardown.lto_priv.0+0xec>)
 800acc6:	f7f5 fd53 	bl	8000770 <chSysHalt>
  F_UNLOCK();
 800acca:	4805      	ldr	r0, [pc, #20]	; (800ace0 <oslib_test_009_006_teardown.lto_priv.0+0xe0>)
 800accc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acd0:	f7f8 bf76 	b.w	8003bc0 <chMtxUnlock>
    chSysHalt("SV#5");
 800acd4:	4806      	ldr	r0, [pc, #24]	; (800acf0 <oslib_test_009_006_teardown.lto_priv.0+0xf0>)
 800acd6:	f7f5 fd4b 	bl	8000770 <chSysHalt>
 800acda:	bf00      	nop
 800acdc:	20000d70 	.word	0x20000d70
 800ace0:	200015f8 	.word	0x200015f8
 800ace4:	08011de4 	.word	0x08011de4
 800ace8:	08010f48 	.word	0x08010f48
 800acec:	0800f20c 	.word	0x0800f20c
 800acf0:	0800f214 	.word	0x0800f214
	...

0800ad00 <chFactoryFindPipe.constprop.0>:
 800ad00:	2320      	movs	r3, #32
dyn_pipe_t *chFactoryFindPipe(const char *name) {
 800ad02:	b570      	push	{r4, r5, r6, lr}
 800ad04:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800ad08:	f7f5 fd8a 	bl	8000820 <_dbg_check_lock>
 800ad0c:	481e      	ldr	r0, [pc, #120]	; (800ad88 <chFactoryFindPipe.constprop.0+0x88>)
 800ad0e:	f7f8 fe67 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800ad12:	4b1e      	ldr	r3, [pc, #120]	; (800ad8c <chFactoryFindPipe.constprop.0+0x8c>)
 800ad14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad16:	bb42      	cbnz	r2, 800ad6a <chFactoryFindPipe.constprop.0+0x6a>
 800ad18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800ad1a:	2900      	cmp	r1, #0
 800ad1c:	dd25      	ble.n	800ad6a <chFactoryFindPipe.constprop.0+0x6a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800ad1e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800ad20:	635a      	str	r2, [r3, #52]	; 0x34
 800ad22:	4299      	cmp	r1, r3
 800ad24:	d004      	beq.n	800ad30 <chFactoryFindPipe.constprop.0+0x30>
 800ad26:	699a      	ldr	r2, [r3, #24]
 800ad28:	688b      	ldr	r3, [r1, #8]
 800ad2a:	6892      	ldr	r2, [r2, #8]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d31f      	bcc.n	800ad70 <chFactoryFindPipe.constprop.0+0x70>
 800ad30:	2300      	movs	r3, #0
 800ad32:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ad36:	4d14      	ldr	r5, [pc, #80]	; (800ad88 <chFactoryFindPipe.constprop.0+0x88>)
 800ad38:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800ad3c:	42ac      	cmp	r4, r5
 800ad3e:	d020      	beq.n	800ad82 <chFactoryFindPipe.constprop.0+0x82>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ad40:	4e13      	ldr	r6, [pc, #76]	; (800ad90 <chFactoryFindPipe.constprop.0+0x90>)
 800ad42:	e002      	b.n	800ad4a <chFactoryFindPipe.constprop.0+0x4a>
    p = p->next;
 800ad44:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800ad46:	42ac      	cmp	r4, r5
 800ad48:	d015      	beq.n	800ad76 <chFactoryFindPipe.constprop.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ad4a:	4631      	mov	r1, r6
 800ad4c:	f104 0008 	add.w	r0, r4, #8
 800ad50:	f7f5 fa91 	bl	8000276 <strcmp>
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d1f5      	bne.n	800ad44 <chFactoryFindPipe.constprop.0+0x44>
  if (dep != NULL) {
 800ad58:	b114      	cbz	r4, 800ad60 <chFactoryFindPipe.constprop.0+0x60>
    dep->refs++;
 800ad5a:	6863      	ldr	r3, [r4, #4]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800ad60:	4809      	ldr	r0, [pc, #36]	; (800ad88 <chFactoryFindPipe.constprop.0+0x88>)
 800ad62:	f7f8 ff2d 	bl	8003bc0 <chMtxUnlock>
}
 800ad66:	4620      	mov	r0, r4
 800ad68:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 800ad6a:	480a      	ldr	r0, [pc, #40]	; (800ad94 <chFactoryFindPipe.constprop.0+0x94>)
 800ad6c:	f7f5 fd00 	bl	8000770 <chSysHalt>
 800ad70:	4809      	ldr	r0, [pc, #36]	; (800ad98 <chFactoryFindPipe.constprop.0+0x98>)
 800ad72:	f7f5 fcfd 	bl	8000770 <chSysHalt>
  return NULL;
 800ad76:	2400      	movs	r4, #0
  F_UNLOCK();
 800ad78:	4803      	ldr	r0, [pc, #12]	; (800ad88 <chFactoryFindPipe.constprop.0+0x88>)
 800ad7a:	f7f8 ff21 	bl	8003bc0 <chMtxUnlock>
}
 800ad7e:	4620      	mov	r0, r4
 800ad80:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800ad82:	461c      	mov	r4, r3
 800ad84:	e7ec      	b.n	800ad60 <chFactoryFindPipe.constprop.0+0x60>
 800ad86:	bf00      	nop
 800ad88:	200015f8 	.word	0x200015f8
 800ad8c:	20000d70 	.word	0x20000d70
 800ad90:	08011de4 	.word	0x08011de4
 800ad94:	0800f214 	.word	0x0800f214
 800ad98:	08010f48 	.word	0x08010f48
 800ad9c:	00000000 	.word	0x00000000

0800ada0 <chFactoryCreatePipe.constprop.0>:
dyn_pipe_t *chFactoryCreatePipe(const char *name, size_t size) {
 800ada0:	b538      	push	{r3, r4, r5, lr}
 800ada2:	2320      	movs	r3, #32
 800ada4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800ada8:	f7f5 fd3a 	bl	8000820 <_dbg_check_lock>
 800adac:	481d      	ldr	r0, [pc, #116]	; (800ae24 <chFactoryCreatePipe.constprop.0+0x84>)
 800adae:	f7f8 fe17 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800adb2:	f7f5 fd45 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800adb6:	4b1c      	ldr	r3, [pc, #112]	; (800ae28 <chFactoryCreatePipe.constprop.0+0x88>)
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d004      	beq.n	800adc8 <chFactoryCreatePipe.constprop.0+0x28>
 800adbe:	6999      	ldr	r1, [r3, #24]
 800adc0:	6893      	ldr	r3, [r2, #8]
 800adc2:	688a      	ldr	r2, [r1, #8]
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d32a      	bcc.n	800ae1e <chFactoryCreatePipe.constprop.0+0x7e>
 800adc8:	2500      	movs	r5, #0
 800adca:	f385 8811 	msr	BASEPRI, r5
  dpp = (dyn_pipe_t *)dyn_create_object_heap(name,
 800adce:	2308      	movs	r3, #8
 800add0:	2270      	movs	r2, #112	; 0x70
 800add2:	4916      	ldr	r1, [pc, #88]	; (800ae2c <chFactoryCreatePipe.constprop.0+0x8c>)
 800add4:	4816      	ldr	r0, [pc, #88]	; (800ae30 <chFactoryCreatePipe.constprop.0+0x90>)
 800add6:	f7f9 fde3 	bl	80049a0 <dyn_create_object_heap.lto_priv.0>
  if (dpp != NULL) {
 800adda:	4604      	mov	r4, r0
 800addc:	b1d0      	cbz	r0, 800ae14 <chFactoryCreatePipe.constprop.0+0x74>
    chPipeObjectInit(&dpp->pipe, (uint8_t *)(dpp + 1), size);
 800adde:	f100 0360 	add.w	r3, r0, #96	; 0x60
  PC_INIT(pp);
 800ade2:	f100 0130 	add.w	r1, r0, #48	; 0x30
  PW_INIT(pp);
 800ade6:	f100 0240 	add.w	r2, r0, #64	; 0x40
  pp->top    = &buf[n];
 800adea:	3070      	adds	r0, #112	; 0x70
  pp->buffer = buf;
 800adec:	e9c4 3004 	strd	r3, r0, [r4, #16]
  pp->wrptr  = buf;
 800adf0:	e9c4 3306 	strd	r3, r3, [r4, #24]
  PR_INIT(pp);
 800adf4:	f104 0350 	add.w	r3, r4, #80	; 0x50
  pp->rtr    = NULL;
 800adf8:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
  qp->prev = qp;
 800adfc:	e9c4 110c 	strd	r1, r1, [r4, #48]	; 0x30
 800ae00:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
 800ae04:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
  pp->cnt    = (size_t)0;
 800ae08:	6225      	str	r5, [r4, #32]
  pp->reset  = false;
 800ae0a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  mp->owner = NULL;
 800ae0e:	63a5      	str	r5, [r4, #56]	; 0x38
 800ae10:	64a5      	str	r5, [r4, #72]	; 0x48
 800ae12:	65a5      	str	r5, [r4, #88]	; 0x58
  F_UNLOCK();
 800ae14:	4803      	ldr	r0, [pc, #12]	; (800ae24 <chFactoryCreatePipe.constprop.0+0x84>)
 800ae16:	f7f8 fed3 	bl	8003bc0 <chMtxUnlock>
}
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	bd38      	pop	{r3, r4, r5, pc}
 800ae1e:	4805      	ldr	r0, [pc, #20]	; (800ae34 <chFactoryCreatePipe.constprop.0+0x94>)
 800ae20:	f7f5 fca6 	bl	8000770 <chSysHalt>
 800ae24:	200015f8 	.word	0x200015f8
 800ae28:	20000d70 	.word	0x20000d70
 800ae2c:	2000163c 	.word	0x2000163c
 800ae30:	08011de4 	.word	0x08011de4
 800ae34:	08010f48 	.word	0x08010f48
	...

0800ae40 <oslib_test_009_006_execute.lto_priv.0>:

static void oslib_test_009_006_execute(void) {
  dyn_pipe_t *dpp;

  /* [9.6.1] Retrieving a dynamic pipe by name, must not exist.*/
  test_set_step(1);
 800ae40:	2201      	movs	r2, #1
static void oslib_test_009_006_execute(void) {
 800ae42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800ae44:	4f5e      	ldr	r7, [pc, #376]	; (800afc0 <oslib_test_009_006_execute.lto_priv.0+0x180>)
 800ae46:	2320      	movs	r3, #32
 800ae48:	603a      	str	r2, [r7, #0]
 800ae4a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800ae4e:	f7f5 fce7 	bl	8000820 <_dbg_check_lock>
  chMtxLockS(mp);
 800ae52:	485c      	ldr	r0, [pc, #368]	; (800afc4 <oslib_test_009_006_execute.lto_priv.0+0x184>)
 800ae54:	f7f8 fdc4 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800ae58:	f7f5 fcf2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800ae5c:	4b5a      	ldr	r3, [pc, #360]	; (800afc8 <oslib_test_009_006_execute.lto_priv.0+0x188>)
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	429a      	cmp	r2, r3
 800ae62:	d005      	beq.n	800ae70 <oslib_test_009_006_execute.lto_priv.0+0x30>
 800ae64:	6999      	ldr	r1, [r3, #24]
 800ae66:	6893      	ldr	r3, [r2, #8]
 800ae68:	688a      	ldr	r2, [r1, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	f0c0 8089 	bcc.w	800af82 <oslib_test_009_006_execute.lto_priv.0+0x142>
 800ae70:	2300      	movs	r3, #0
 800ae72:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800ae76:	4d53      	ldr	r5, [pc, #332]	; (800afc4 <oslib_test_009_006_execute.lto_priv.0+0x184>)
 800ae78:	f855 4f44 	ldr.w	r4, [r5, #68]!
  while (p != (dyn_element_t *)dlp) {
 800ae7c:	42ac      	cmp	r4, r5
 800ae7e:	d01b      	beq.n	800aeb8 <oslib_test_009_006_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ae80:	4e52      	ldr	r6, [pc, #328]	; (800afcc <oslib_test_009_006_execute.lto_priv.0+0x18c>)
 800ae82:	e002      	b.n	800ae8a <oslib_test_009_006_execute.lto_priv.0+0x4a>
    p = p->next;
 800ae84:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800ae86:	42ac      	cmp	r4, r5
 800ae88:	d016      	beq.n	800aeb8 <oslib_test_009_006_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800ae8a:	4631      	mov	r1, r6
 800ae8c:	f104 0008 	add.w	r0, r4, #8
 800ae90:	f7f5 f9f1 	bl	8000276 <strcmp>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	d1f5      	bne.n	800ae84 <oslib_test_009_006_execute.lto_priv.0+0x44>
  if (dep != NULL) {
 800ae98:	b174      	cbz	r4, 800aeb8 <oslib_test_009_006_execute.lto_priv.0+0x78>
    dep->refs++;
 800ae9a:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800ae9c:	4849      	ldr	r0, [pc, #292]	; (800afc4 <oslib_test_009_006_execute.lto_priv.0+0x184>)
    dep->refs++;
 800ae9e:	3301      	adds	r3, #1
 800aea0:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800aea2:	f7f8 fe8d 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800aea6:	2301      	movs	r3, #1
 800aea8:	4949      	ldr	r1, [pc, #292]	; (800afd0 <oslib_test_009_006_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800aeaa:	4a4a      	ldr	r2, [pc, #296]	; (800afd4 <oslib_test_009_006_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800aeac:	484a      	ldr	r0, [pc, #296]	; (800afd8 <oslib_test_009_006_execute.lto_priv.0+0x198>)
 800aeae:	4c4b      	ldr	r4, [pc, #300]	; (800afdc <oslib_test_009_006_execute.lto_priv.0+0x19c>)
  test_local_fail      = true;
 800aeb0:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800aeb2:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800aeb4:	7013      	strb	r3, [r2, #0]
  {
    dpp = chFactoryFindPipe("mypipe");
    test_assert(dpp == NULL, "found");
  }
  test_end_step(6);
}
 800aeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb8:	4842      	ldr	r0, [pc, #264]	; (800afc4 <oslib_test_009_006_execute.lto_priv.0+0x184>)
 800aeba:	f7f8 fe81 	bl	8003bc0 <chMtxUnlock>
  test_set_step(2);
 800aebe:	2302      	movs	r3, #2
 800aec0:	603b      	str	r3, [r7, #0]
    dpp = chFactoryCreatePipe("mypipe", 16U);
 800aec2:	f7ff ff6d 	bl	800ada0 <chFactoryCreatePipe.constprop.0>
  if (!condition)
 800aec6:	4604      	mov	r4, r0
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d05d      	beq.n	800af88 <oslib_test_009_006_execute.lto_priv.0+0x148>
  test_set_step(3);
 800aecc:	2303      	movs	r3, #3
 800aece:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryCreatePipe("mypipe", 16U);
 800aed0:	f7ff ff66 	bl	800ada0 <chFactoryCreatePipe.constprop.0>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d160      	bne.n	800af9a <oslib_test_009_006_execute.lto_priv.0+0x15a>
  test_set_step(4);
 800aed8:	2304      	movs	r3, #4
 800aeda:	603b      	str	r3, [r7, #0]
    dpp1 = chFactoryFindPipe("mypipe");
 800aedc:	f7ff ff10 	bl	800ad00 <chFactoryFindPipe.constprop.0>
 800aee0:	4605      	mov	r5, r0
 800aee2:	2800      	cmp	r0, #0
 800aee4:	d062      	beq.n	800afac <oslib_test_009_006_execute.lto_priv.0+0x16c>
    test_assert(dpp == dpp1, "object reference mismatch");
 800aee6:	1a20      	subs	r0, r4, r0
 800aee8:	fab0 f080 	clz	r0, r0
 800aeec:	493c      	ldr	r1, [pc, #240]	; (800afe0 <oslib_test_009_006_execute.lto_priv.0+0x1a0>)
 800aeee:	0940      	lsrs	r0, r0, #5
 800aef0:	f7fa fce6 	bl	80058c0 <_test_assert>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d1de      	bne.n	800aeb6 <oslib_test_009_006_execute.lto_priv.0+0x76>
    test_assert(dpp1->element.refs == 2, "object reference mismatch");
 800aef8:	6868      	ldr	r0, [r5, #4]
 800aefa:	4939      	ldr	r1, [pc, #228]	; (800afe0 <oslib_test_009_006_execute.lto_priv.0+0x1a0>)
 800aefc:	f1a0 0002 	sub.w	r0, r0, #2
 800af00:	fab0 f080 	clz	r0, r0
 800af04:	0940      	lsrs	r0, r0, #5
 800af06:	f7fa fcdb 	bl	80058c0 <_test_assert>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	d1d3      	bne.n	800aeb6 <oslib_test_009_006_execute.lto_priv.0+0x76>
 *
 * @api
 */
static inline dyn_element_t *chFactoryDuplicateReference(dyn_element_t *dep) {

  dep->refs++;
 800af0e:	6868      	ldr	r0, [r5, #4]
    test_assert(dpp2->element.refs == 3, "object reference mismatch");
 800af10:	4933      	ldr	r1, [pc, #204]	; (800afe0 <oslib_test_009_006_execute.lto_priv.0+0x1a0>)
 800af12:	3001      	adds	r0, #1
 800af14:	6068      	str	r0, [r5, #4]
 800af16:	f1a0 0003 	sub.w	r0, r0, #3
 800af1a:	fab0 f080 	clz	r0, r0
 800af1e:	0940      	lsrs	r0, r0, #5
 800af20:	f7fa fcce 	bl	80058c0 <_test_assert>
 800af24:	2800      	cmp	r0, #0
 800af26:	d1c6      	bne.n	800aeb6 <oslib_test_009_006_execute.lto_priv.0+0x76>
    chFactoryReleasePipe(dpp2);
 800af28:	4628      	mov	r0, r5
 800af2a:	f7f9 ff01 	bl	8004d30 <chFactoryReleasePipe>
    test_assert(dpp1->element.refs == 2, "references mismatch");
 800af2e:	6868      	ldr	r0, [r5, #4]
 800af30:	492c      	ldr	r1, [pc, #176]	; (800afe4 <oslib_test_009_006_execute.lto_priv.0+0x1a4>)
 800af32:	f1a0 0002 	sub.w	r0, r0, #2
 800af36:	fab0 f080 	clz	r0, r0
 800af3a:	0940      	lsrs	r0, r0, #5
 800af3c:	f7fa fcc0 	bl	80058c0 <_test_assert>
 800af40:	2800      	cmp	r0, #0
 800af42:	d1b8      	bne.n	800aeb6 <oslib_test_009_006_execute.lto_priv.0+0x76>
    chFactoryReleasePipe(dpp1);
 800af44:	4628      	mov	r0, r5
 800af46:	f7f9 fef3 	bl	8004d30 <chFactoryReleasePipe>
    test_assert(dpp->element.refs == 1, "references mismatch");
 800af4a:	6860      	ldr	r0, [r4, #4]
 800af4c:	4925      	ldr	r1, [pc, #148]	; (800afe4 <oslib_test_009_006_execute.lto_priv.0+0x1a4>)
 800af4e:	f1a0 0001 	sub.w	r0, r0, #1
 800af52:	fab0 f080 	clz	r0, r0
 800af56:	0940      	lsrs	r0, r0, #5
 800af58:	f7fa fcb2 	bl	80058c0 <_test_assert>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1aa      	bne.n	800aeb6 <oslib_test_009_006_execute.lto_priv.0+0x76>
  test_set_step(5);
 800af60:	2305      	movs	r3, #5
    chFactoryReleasePipe(dpp);
 800af62:	4620      	mov	r0, r4
  test_set_step(5);
 800af64:	603b      	str	r3, [r7, #0]
    chFactoryReleasePipe(dpp);
 800af66:	f7f9 fee3 	bl	8004d30 <chFactoryReleasePipe>
  test_set_step(6);
 800af6a:	2306      	movs	r3, #6
 800af6c:	603b      	str	r3, [r7, #0]
    dpp = chFactoryFindPipe("mypipe");
 800af6e:	f7ff fec7 	bl	800ad00 <chFactoryFindPipe.constprop.0>
}
 800af72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dpp == NULL, "found");
 800af76:	fab0 f080 	clz	r0, r0
 800af7a:	4918      	ldr	r1, [pc, #96]	; (800afdc <oslib_test_009_006_execute.lto_priv.0+0x19c>)
 800af7c:	0940      	lsrs	r0, r0, #5
 800af7e:	f7fa bc9f 	b.w	80058c0 <_test_assert>
 800af82:	4819      	ldr	r0, [pc, #100]	; (800afe8 <oslib_test_009_006_execute.lto_priv.0+0x1a8>)
 800af84:	f7f5 fbf4 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800af88:	2301      	movs	r3, #1
 800af8a:	4911      	ldr	r1, [pc, #68]	; (800afd0 <oslib_test_009_006_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800af8c:	4a11      	ldr	r2, [pc, #68]	; (800afd4 <oslib_test_009_006_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800af8e:	4812      	ldr	r0, [pc, #72]	; (800afd8 <oslib_test_009_006_execute.lto_priv.0+0x198>)
 800af90:	4c16      	ldr	r4, [pc, #88]	; (800afec <oslib_test_009_006_execute.lto_priv.0+0x1ac>)
  test_local_fail      = true;
 800af92:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800af94:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800af96:	7013      	strb	r3, [r2, #0]
}
 800af98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800af9a:	2301      	movs	r3, #1
 800af9c:	490c      	ldr	r1, [pc, #48]	; (800afd0 <oslib_test_009_006_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800af9e:	4a0d      	ldr	r2, [pc, #52]	; (800afd4 <oslib_test_009_006_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800afa0:	480d      	ldr	r0, [pc, #52]	; (800afd8 <oslib_test_009_006_execute.lto_priv.0+0x198>)
 800afa2:	4c13      	ldr	r4, [pc, #76]	; (800aff0 <oslib_test_009_006_execute.lto_priv.0+0x1b0>)
  test_local_fail      = true;
 800afa4:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800afa6:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800afa8:	7013      	strb	r3, [r2, #0]
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800afac:	2301      	movs	r3, #1
 800afae:	4908      	ldr	r1, [pc, #32]	; (800afd0 <oslib_test_009_006_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800afb0:	4a08      	ldr	r2, [pc, #32]	; (800afd4 <oslib_test_009_006_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800afb2:	4809      	ldr	r0, [pc, #36]	; (800afd8 <oslib_test_009_006_execute.lto_priv.0+0x198>)
 800afb4:	4c0f      	ldr	r4, [pc, #60]	; (800aff4 <oslib_test_009_006_execute.lto_priv.0+0x1b4>)
  test_local_fail      = true;
 800afb6:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800afb8:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800afba:	7013      	strb	r3, [r2, #0]
 800afbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	20001d3c 	.word	0x20001d3c
 800afc4:	200015f8 	.word	0x200015f8
 800afc8:	20000d70 	.word	0x20000d70
 800afcc:	08011de4 	.word	0x08011de4
 800afd0:	20001d39 	.word	0x20001d39
 800afd4:	20001d38 	.word	0x20001d38
 800afd8:	20001d34 	.word	0x20001d34
 800afdc:	08011e0c 	.word	0x08011e0c
 800afe0:	08011e14 	.word	0x08011e14
 800afe4:	08011e30 	.word	0x08011e30
 800afe8:	08010f48 	.word	0x08010f48
 800afec:	08011dec 	.word	0x08011dec
 800aff0:	08011dfc 	.word	0x08011dfc
 800aff4:	08011e08 	.word	0x08011e08
	...

0800b000 <chFactoryFindObjectsFIFO.constprop.0>:
 800b000:	2320      	movs	r3, #32
dyn_objects_fifo_t *chFactoryFindObjectsFIFO(const char *name) {
 800b002:	b570      	push	{r4, r5, r6, lr}
 800b004:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b008:	f7f5 fc0a 	bl	8000820 <_dbg_check_lock>
 800b00c:	481e      	ldr	r0, [pc, #120]	; (800b088 <chFactoryFindObjectsFIFO.constprop.0+0x88>)
 800b00e:	f7f8 fce7 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800b012:	4b1e      	ldr	r3, [pc, #120]	; (800b08c <chFactoryFindObjectsFIFO.constprop.0+0x8c>)
 800b014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b016:	bb42      	cbnz	r2, 800b06a <chFactoryFindObjectsFIFO.constprop.0+0x6a>
 800b018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b01a:	2900      	cmp	r1, #0
 800b01c:	dd25      	ble.n	800b06a <chFactoryFindObjectsFIFO.constprop.0+0x6a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b01e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800b020:	635a      	str	r2, [r3, #52]	; 0x34
 800b022:	4299      	cmp	r1, r3
 800b024:	d004      	beq.n	800b030 <chFactoryFindObjectsFIFO.constprop.0+0x30>
 800b026:	699a      	ldr	r2, [r3, #24]
 800b028:	688b      	ldr	r3, [r1, #8]
 800b02a:	6892      	ldr	r2, [r2, #8]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d31f      	bcc.n	800b070 <chFactoryFindObjectsFIFO.constprop.0+0x70>
 800b030:	2300      	movs	r3, #0
 800b032:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b036:	4d14      	ldr	r5, [pc, #80]	; (800b088 <chFactoryFindObjectsFIFO.constprop.0+0x88>)
 800b038:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800b03c:	42ac      	cmp	r4, r5
 800b03e:	d020      	beq.n	800b082 <chFactoryFindObjectsFIFO.constprop.0+0x82>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b040:	4e13      	ldr	r6, [pc, #76]	; (800b090 <chFactoryFindObjectsFIFO.constprop.0+0x90>)
 800b042:	e002      	b.n	800b04a <chFactoryFindObjectsFIFO.constprop.0+0x4a>
    p = p->next;
 800b044:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b046:	42ac      	cmp	r4, r5
 800b048:	d015      	beq.n	800b076 <chFactoryFindObjectsFIFO.constprop.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b04a:	4631      	mov	r1, r6
 800b04c:	f104 0008 	add.w	r0, r4, #8
 800b050:	f7f5 f911 	bl	8000276 <strcmp>
 800b054:	2800      	cmp	r0, #0
 800b056:	d1f5      	bne.n	800b044 <chFactoryFindObjectsFIFO.constprop.0+0x44>
  if (dep != NULL) {
 800b058:	b114      	cbz	r4, 800b060 <chFactoryFindObjectsFIFO.constprop.0+0x60>
    dep->refs++;
 800b05a:	6863      	ldr	r3, [r4, #4]
 800b05c:	3301      	adds	r3, #1
 800b05e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b060:	4809      	ldr	r0, [pc, #36]	; (800b088 <chFactoryFindObjectsFIFO.constprop.0+0x88>)
 800b062:	f7f8 fdad 	bl	8003bc0 <chMtxUnlock>
}
 800b066:	4620      	mov	r0, r4
 800b068:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 800b06a:	480a      	ldr	r0, [pc, #40]	; (800b094 <chFactoryFindObjectsFIFO.constprop.0+0x94>)
 800b06c:	f7f5 fb80 	bl	8000770 <chSysHalt>
 800b070:	4809      	ldr	r0, [pc, #36]	; (800b098 <chFactoryFindObjectsFIFO.constprop.0+0x98>)
 800b072:	f7f5 fb7d 	bl	8000770 <chSysHalt>
  return NULL;
 800b076:	2400      	movs	r4, #0
  F_UNLOCK();
 800b078:	4803      	ldr	r0, [pc, #12]	; (800b088 <chFactoryFindObjectsFIFO.constprop.0+0x88>)
 800b07a:	f7f8 fda1 	bl	8003bc0 <chMtxUnlock>
}
 800b07e:	4620      	mov	r0, r4
 800b080:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800b082:	461c      	mov	r4, r3
 800b084:	e7ec      	b.n	800b060 <chFactoryFindObjectsFIFO.constprop.0+0x60>
 800b086:	bf00      	nop
 800b088:	200015f8 	.word	0x200015f8
 800b08c:	20000d70 	.word	0x20000d70
 800b090:	08011d74 	.word	0x08011d74
 800b094:	0800f214 	.word	0x0800f214
 800b098:	08010f48 	.word	0x08010f48
 800b09c:	00000000 	.word	0x00000000

0800b0a0 <oslib_test_009_005_execute.lto_priv.0>:
  test_set_step(1);
 800b0a0:	2201      	movs	r2, #1
static void oslib_test_009_005_execute(void) {
 800b0a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800b0a4:	4f5e      	ldr	r7, [pc, #376]	; (800b220 <oslib_test_009_005_execute.lto_priv.0+0x180>)
 800b0a6:	2320      	movs	r3, #32
 800b0a8:	603a      	str	r2, [r7, #0]
 800b0aa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b0ae:	f7f5 fbb7 	bl	8000820 <_dbg_check_lock>
 800b0b2:	485c      	ldr	r0, [pc, #368]	; (800b224 <oslib_test_009_005_execute.lto_priv.0+0x184>)
 800b0b4:	f7f8 fc94 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800b0b8:	f7f5 fbc2 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b0bc:	4b5a      	ldr	r3, [pc, #360]	; (800b228 <oslib_test_009_005_execute.lto_priv.0+0x188>)
 800b0be:	681a      	ldr	r2, [r3, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d005      	beq.n	800b0d0 <oslib_test_009_005_execute.lto_priv.0+0x30>
 800b0c4:	6999      	ldr	r1, [r3, #24]
 800b0c6:	6893      	ldr	r3, [r2, #8]
 800b0c8:	688a      	ldr	r2, [r1, #8]
 800b0ca:	429a      	cmp	r2, r3
 800b0cc:	f0c0 8089 	bcc.w	800b1e2 <oslib_test_009_005_execute.lto_priv.0+0x142>
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b0d6:	4d53      	ldr	r5, [pc, #332]	; (800b224 <oslib_test_009_005_execute.lto_priv.0+0x184>)
 800b0d8:	f855 4f40 	ldr.w	r4, [r5, #64]!
  while (p != (dyn_element_t *)dlp) {
 800b0dc:	42ac      	cmp	r4, r5
 800b0de:	d01b      	beq.n	800b118 <oslib_test_009_005_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b0e0:	4e52      	ldr	r6, [pc, #328]	; (800b22c <oslib_test_009_005_execute.lto_priv.0+0x18c>)
 800b0e2:	e002      	b.n	800b0ea <oslib_test_009_005_execute.lto_priv.0+0x4a>
    p = p->next;
 800b0e4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b0e6:	42ac      	cmp	r4, r5
 800b0e8:	d016      	beq.n	800b118 <oslib_test_009_005_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	f104 0008 	add.w	r0, r4, #8
 800b0f0:	f7f5 f8c1 	bl	8000276 <strcmp>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d1f5      	bne.n	800b0e4 <oslib_test_009_005_execute.lto_priv.0+0x44>
  if (dep != NULL) {
 800b0f8:	b174      	cbz	r4, 800b118 <oslib_test_009_005_execute.lto_priv.0+0x78>
    dep->refs++;
 800b0fa:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800b0fc:	4849      	ldr	r0, [pc, #292]	; (800b224 <oslib_test_009_005_execute.lto_priv.0+0x184>)
    dep->refs++;
 800b0fe:	3301      	adds	r3, #1
 800b100:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b102:	f7f8 fd5d 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800b106:	2301      	movs	r3, #1
 800b108:	4949      	ldr	r1, [pc, #292]	; (800b230 <oslib_test_009_005_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b10a:	4a4a      	ldr	r2, [pc, #296]	; (800b234 <oslib_test_009_005_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b10c:	484a      	ldr	r0, [pc, #296]	; (800b238 <oslib_test_009_005_execute.lto_priv.0+0x198>)
 800b10e:	4c4b      	ldr	r4, [pc, #300]	; (800b23c <oslib_test_009_005_execute.lto_priv.0+0x19c>)
  test_local_fail      = true;
 800b110:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b112:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b114:	7013      	strb	r3, [r2, #0]
}
 800b116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b118:	4842      	ldr	r0, [pc, #264]	; (800b224 <oslib_test_009_005_execute.lto_priv.0+0x184>)
 800b11a:	f7f8 fd51 	bl	8003bc0 <chMtxUnlock>
  test_set_step(2);
 800b11e:	2302      	movs	r3, #2
 800b120:	603b      	str	r3, [r7, #0]
    dofp = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800b122:	f7fe fd1d 	bl	8009b60 <chFactoryCreateObjectsFIFO.constprop.0>
  if (!condition)
 800b126:	4604      	mov	r4, r0
 800b128:	2800      	cmp	r0, #0
 800b12a:	d05d      	beq.n	800b1e8 <oslib_test_009_005_execute.lto_priv.0+0x148>
  test_set_step(3);
 800b12c:	2303      	movs	r3, #3
 800b12e:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryCreateObjectsFIFO("myfifo", 16U, 16U, PORT_NATURAL_ALIGN);
 800b130:	f7fe fd16 	bl	8009b60 <chFactoryCreateObjectsFIFO.constprop.0>
 800b134:	2800      	cmp	r0, #0
 800b136:	d160      	bne.n	800b1fa <oslib_test_009_005_execute.lto_priv.0+0x15a>
  test_set_step(4);
 800b138:	2304      	movs	r3, #4
 800b13a:	603b      	str	r3, [r7, #0]
    dofp1 = chFactoryFindObjectsFIFO("myfifo");
 800b13c:	f7ff ff60 	bl	800b000 <chFactoryFindObjectsFIFO.constprop.0>
 800b140:	4605      	mov	r5, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d062      	beq.n	800b20c <oslib_test_009_005_execute.lto_priv.0+0x16c>
    test_assert(dofp == dofp1, "object reference mismatch");
 800b146:	1a20      	subs	r0, r4, r0
 800b148:	fab0 f080 	clz	r0, r0
 800b14c:	493c      	ldr	r1, [pc, #240]	; (800b240 <oslib_test_009_005_execute.lto_priv.0+0x1a0>)
 800b14e:	0940      	lsrs	r0, r0, #5
 800b150:	f7fa fbb6 	bl	80058c0 <_test_assert>
 800b154:	2800      	cmp	r0, #0
 800b156:	d1de      	bne.n	800b116 <oslib_test_009_005_execute.lto_priv.0+0x76>
    test_assert(dofp1->element.refs == 2, "object reference mismatch");
 800b158:	6868      	ldr	r0, [r5, #4]
 800b15a:	4939      	ldr	r1, [pc, #228]	; (800b240 <oslib_test_009_005_execute.lto_priv.0+0x1a0>)
 800b15c:	f1a0 0002 	sub.w	r0, r0, #2
 800b160:	fab0 f080 	clz	r0, r0
 800b164:	0940      	lsrs	r0, r0, #5
 800b166:	f7fa fbab 	bl	80058c0 <_test_assert>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d1d3      	bne.n	800b116 <oslib_test_009_005_execute.lto_priv.0+0x76>
 800b16e:	6868      	ldr	r0, [r5, #4]
    test_assert(dofp2->element.refs == 3, "object reference mismatch");
 800b170:	4933      	ldr	r1, [pc, #204]	; (800b240 <oslib_test_009_005_execute.lto_priv.0+0x1a0>)
 800b172:	3001      	adds	r0, #1
 800b174:	6068      	str	r0, [r5, #4]
 800b176:	f1a0 0003 	sub.w	r0, r0, #3
 800b17a:	fab0 f080 	clz	r0, r0
 800b17e:	0940      	lsrs	r0, r0, #5
 800b180:	f7fa fb9e 	bl	80058c0 <_test_assert>
 800b184:	2800      	cmp	r0, #0
 800b186:	d1c6      	bne.n	800b116 <oslib_test_009_005_execute.lto_priv.0+0x76>
    chFactoryReleaseObjectsFIFO(dofp2);
 800b188:	4628      	mov	r0, r5
 800b18a:	f7f9 fd91 	bl	8004cb0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp1->element.refs == 2, "references mismatch");
 800b18e:	6868      	ldr	r0, [r5, #4]
 800b190:	492c      	ldr	r1, [pc, #176]	; (800b244 <oslib_test_009_005_execute.lto_priv.0+0x1a4>)
 800b192:	f1a0 0002 	sub.w	r0, r0, #2
 800b196:	fab0 f080 	clz	r0, r0
 800b19a:	0940      	lsrs	r0, r0, #5
 800b19c:	f7fa fb90 	bl	80058c0 <_test_assert>
 800b1a0:	2800      	cmp	r0, #0
 800b1a2:	d1b8      	bne.n	800b116 <oslib_test_009_005_execute.lto_priv.0+0x76>
    chFactoryReleaseObjectsFIFO(dofp1);
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	f7f9 fd83 	bl	8004cb0 <chFactoryReleaseObjectsFIFO>
    test_assert(dofp->element.refs == 1, "references mismatch");
 800b1aa:	6860      	ldr	r0, [r4, #4]
 800b1ac:	4925      	ldr	r1, [pc, #148]	; (800b244 <oslib_test_009_005_execute.lto_priv.0+0x1a4>)
 800b1ae:	f1a0 0001 	sub.w	r0, r0, #1
 800b1b2:	fab0 f080 	clz	r0, r0
 800b1b6:	0940      	lsrs	r0, r0, #5
 800b1b8:	f7fa fb82 	bl	80058c0 <_test_assert>
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d1aa      	bne.n	800b116 <oslib_test_009_005_execute.lto_priv.0+0x76>
  test_set_step(5);
 800b1c0:	2305      	movs	r3, #5
    chFactoryReleaseObjectsFIFO(dofp);
 800b1c2:	4620      	mov	r0, r4
  test_set_step(5);
 800b1c4:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObjectsFIFO(dofp);
 800b1c6:	f7f9 fd73 	bl	8004cb0 <chFactoryReleaseObjectsFIFO>
  test_set_step(6);
 800b1ca:	2306      	movs	r3, #6
 800b1cc:	603b      	str	r3, [r7, #0]
    dofp = chFactoryFindObjectsFIFO("myfifo");
 800b1ce:	f7ff ff17 	bl	800b000 <chFactoryFindObjectsFIFO.constprop.0>
}
 800b1d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dofp == NULL, "found");
 800b1d6:	fab0 f080 	clz	r0, r0
 800b1da:	4918      	ldr	r1, [pc, #96]	; (800b23c <oslib_test_009_005_execute.lto_priv.0+0x19c>)
 800b1dc:	0940      	lsrs	r0, r0, #5
 800b1de:	f7fa bb6f 	b.w	80058c0 <_test_assert>
 800b1e2:	4819      	ldr	r0, [pc, #100]	; (800b248 <oslib_test_009_005_execute.lto_priv.0+0x1a8>)
 800b1e4:	f7f5 fac4 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800b1e8:	2301      	movs	r3, #1
 800b1ea:	4911      	ldr	r1, [pc, #68]	; (800b230 <oslib_test_009_005_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b1ec:	4a11      	ldr	r2, [pc, #68]	; (800b234 <oslib_test_009_005_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b1ee:	4812      	ldr	r0, [pc, #72]	; (800b238 <oslib_test_009_005_execute.lto_priv.0+0x198>)
 800b1f0:	4c16      	ldr	r4, [pc, #88]	; (800b24c <oslib_test_009_005_execute.lto_priv.0+0x1ac>)
  test_local_fail      = true;
 800b1f2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b1f4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b1f6:	7013      	strb	r3, [r2, #0]
}
 800b1f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	490c      	ldr	r1, [pc, #48]	; (800b230 <oslib_test_009_005_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b1fe:	4a0d      	ldr	r2, [pc, #52]	; (800b234 <oslib_test_009_005_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b200:	480d      	ldr	r0, [pc, #52]	; (800b238 <oslib_test_009_005_execute.lto_priv.0+0x198>)
 800b202:	4c13      	ldr	r4, [pc, #76]	; (800b250 <oslib_test_009_005_execute.lto_priv.0+0x1b0>)
  test_local_fail      = true;
 800b204:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b206:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b208:	7013      	strb	r3, [r2, #0]
 800b20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800b20c:	2301      	movs	r3, #1
 800b20e:	4908      	ldr	r1, [pc, #32]	; (800b230 <oslib_test_009_005_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b210:	4a08      	ldr	r2, [pc, #32]	; (800b234 <oslib_test_009_005_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b212:	4809      	ldr	r0, [pc, #36]	; (800b238 <oslib_test_009_005_execute.lto_priv.0+0x198>)
 800b214:	4c0f      	ldr	r4, [pc, #60]	; (800b254 <oslib_test_009_005_execute.lto_priv.0+0x1b4>)
  test_local_fail      = true;
 800b216:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b218:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b21a:	7013      	strb	r3, [r2, #0]
 800b21c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b21e:	bf00      	nop
 800b220:	20001d3c 	.word	0x20001d3c
 800b224:	200015f8 	.word	0x200015f8
 800b228:	20000d70 	.word	0x20000d70
 800b22c:	08011d74 	.word	0x08011d74
 800b230:	20001d39 	.word	0x20001d39
 800b234:	20001d38 	.word	0x20001d38
 800b238:	20001d34 	.word	0x20001d34
 800b23c:	08011e0c 	.word	0x08011e0c
 800b240:	08011e14 	.word	0x08011e14
 800b244:	08011e30 	.word	0x08011e30
 800b248:	08010f48 	.word	0x08010f48
 800b24c:	08011dec 	.word	0x08011dec
 800b250:	08011dfc 	.word	0x08011dfc
 800b254:	08011e08 	.word	0x08011e08
	...

0800b260 <chFactoryFindMailbox.constprop.0>:
 800b260:	2320      	movs	r3, #32
dyn_mailbox_t *chFactoryFindMailbox(const char *name) {
 800b262:	b570      	push	{r4, r5, r6, lr}
 800b264:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b268:	f7f5 fada 	bl	8000820 <_dbg_check_lock>
 800b26c:	481e      	ldr	r0, [pc, #120]	; (800b2e8 <chFactoryFindMailbox.constprop.0+0x88>)
 800b26e:	f7f8 fbb7 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800b272:	4b1e      	ldr	r3, [pc, #120]	; (800b2ec <chFactoryFindMailbox.constprop.0+0x8c>)
 800b274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b276:	bb42      	cbnz	r2, 800b2ca <chFactoryFindMailbox.constprop.0+0x6a>
 800b278:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b27a:	2900      	cmp	r1, #0
 800b27c:	dd25      	ble.n	800b2ca <chFactoryFindMailbox.constprop.0+0x6a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b27e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800b280:	635a      	str	r2, [r3, #52]	; 0x34
 800b282:	4299      	cmp	r1, r3
 800b284:	d004      	beq.n	800b290 <chFactoryFindMailbox.constprop.0+0x30>
 800b286:	699a      	ldr	r2, [r3, #24]
 800b288:	688b      	ldr	r3, [r1, #8]
 800b28a:	6892      	ldr	r2, [r2, #8]
 800b28c:	429a      	cmp	r2, r3
 800b28e:	d31f      	bcc.n	800b2d0 <chFactoryFindMailbox.constprop.0+0x70>
 800b290:	2300      	movs	r3, #0
 800b292:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b296:	4d14      	ldr	r5, [pc, #80]	; (800b2e8 <chFactoryFindMailbox.constprop.0+0x88>)
 800b298:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800b29c:	42ac      	cmp	r4, r5
 800b29e:	d020      	beq.n	800b2e2 <chFactoryFindMailbox.constprop.0+0x82>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b2a0:	4e13      	ldr	r6, [pc, #76]	; (800b2f0 <chFactoryFindMailbox.constprop.0+0x90>)
 800b2a2:	e002      	b.n	800b2aa <chFactoryFindMailbox.constprop.0+0x4a>
    p = p->next;
 800b2a4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b2a6:	42ac      	cmp	r4, r5
 800b2a8:	d015      	beq.n	800b2d6 <chFactoryFindMailbox.constprop.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	f104 0008 	add.w	r0, r4, #8
 800b2b0:	f7f4 ffe1 	bl	8000276 <strcmp>
 800b2b4:	2800      	cmp	r0, #0
 800b2b6:	d1f5      	bne.n	800b2a4 <chFactoryFindMailbox.constprop.0+0x44>
  if (dep != NULL) {
 800b2b8:	b114      	cbz	r4, 800b2c0 <chFactoryFindMailbox.constprop.0+0x60>
    dep->refs++;
 800b2ba:	6863      	ldr	r3, [r4, #4]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b2c0:	4809      	ldr	r0, [pc, #36]	; (800b2e8 <chFactoryFindMailbox.constprop.0+0x88>)
 800b2c2:	f7f8 fc7d 	bl	8003bc0 <chMtxUnlock>
}
 800b2c6:	4620      	mov	r0, r4
 800b2c8:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 800b2ca:	480a      	ldr	r0, [pc, #40]	; (800b2f4 <chFactoryFindMailbox.constprop.0+0x94>)
 800b2cc:	f7f5 fa50 	bl	8000770 <chSysHalt>
 800b2d0:	4809      	ldr	r0, [pc, #36]	; (800b2f8 <chFactoryFindMailbox.constprop.0+0x98>)
 800b2d2:	f7f5 fa4d 	bl	8000770 <chSysHalt>
  return NULL;
 800b2d6:	2400      	movs	r4, #0
  F_UNLOCK();
 800b2d8:	4803      	ldr	r0, [pc, #12]	; (800b2e8 <chFactoryFindMailbox.constprop.0+0x88>)
 800b2da:	f7f8 fc71 	bl	8003bc0 <chMtxUnlock>
}
 800b2de:	4620      	mov	r0, r4
 800b2e0:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800b2e2:	461c      	mov	r4, r3
 800b2e4:	e7ec      	b.n	800b2c0 <chFactoryFindMailbox.constprop.0+0x60>
 800b2e6:	bf00      	nop
 800b2e8:	200015f8 	.word	0x200015f8
 800b2ec:	20000d70 	.word	0x20000d70
 800b2f0:	08011ddc 	.word	0x08011ddc
 800b2f4:	0800f214 	.word	0x0800f214
 800b2f8:	08010f48 	.word	0x08010f48
 800b2fc:	00000000 	.word	0x00000000

0800b300 <chFactoryCreateMailbox.constprop.0>:
dyn_mailbox_t *chFactoryCreateMailbox(const char *name, size_t n) {
 800b300:	b538      	push	{r3, r4, r5, lr}
 800b302:	2320      	movs	r3, #32
 800b304:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b308:	f7f5 fa8a 	bl	8000820 <_dbg_check_lock>
 800b30c:	481c      	ldr	r0, [pc, #112]	; (800b380 <chFactoryCreateMailbox.constprop.0+0x80>)
 800b30e:	f7f8 fb67 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800b312:	4b1c      	ldr	r3, [pc, #112]	; (800b384 <chFactoryCreateMailbox.constprop.0+0x84>)
 800b314:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b316:	bb6a      	cbnz	r2, 800b374 <chFactoryCreateMailbox.constprop.0+0x74>
 800b318:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b31a:	2900      	cmp	r1, #0
 800b31c:	dd2a      	ble.n	800b374 <chFactoryCreateMailbox.constprop.0+0x74>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b31e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800b320:	635a      	str	r2, [r3, #52]	; 0x34
 800b322:	4299      	cmp	r1, r3
 800b324:	d004      	beq.n	800b330 <chFactoryCreateMailbox.constprop.0+0x30>
 800b326:	699a      	ldr	r2, [r3, #24]
 800b328:	688b      	ldr	r3, [r1, #8]
 800b32a:	6892      	ldr	r2, [r2, #8]
 800b32c:	429a      	cmp	r2, r3
 800b32e:	d324      	bcc.n	800b37a <chFactoryCreateMailbox.constprop.0+0x7a>
 800b330:	2500      	movs	r5, #0
 800b332:	f385 8811 	msr	BASEPRI, r5
  dmp = (dyn_mailbox_t *)dyn_create_object_heap(name,
 800b336:	2308      	movs	r3, #8
 800b338:	2278      	movs	r2, #120	; 0x78
 800b33a:	4913      	ldr	r1, [pc, #76]	; (800b388 <chFactoryCreateMailbox.constprop.0+0x88>)
 800b33c:	4813      	ldr	r0, [pc, #76]	; (800b38c <chFactoryCreateMailbox.constprop.0+0x8c>)
 800b33e:	f7f9 fb2f 	bl	80049a0 <dyn_create_object_heap.lto_priv.0>
  if (dmp != NULL) {
 800b342:	4604      	mov	r4, r0
 800b344:	b188      	cbz	r0, 800b36a <chFactoryCreateMailbox.constprop.0+0x6a>
    chMBObjectInit(&dmp->mbx, (msg_t *)(dmp + 1), n);
 800b346:	f100 0338 	add.w	r3, r0, #56	; 0x38
 800b34a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 800b34e:	f100 0230 	add.w	r2, r0, #48	; 0x30
  mbp->top    = &buf[n];
 800b352:	3078      	adds	r0, #120	; 0x78
  mbp->buffer = buf;
 800b354:	e9c4 3004 	strd	r3, r0, [r4, #16]
  mbp->wrptr  = buf;
 800b358:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800b35c:	e9c4 110a 	strd	r1, r1, [r4, #40]	; 0x28
 800b360:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  mbp->cnt    = (size_t)0;
 800b364:	6225      	str	r5, [r4, #32]
  mbp->reset  = false;
 800b366:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
  F_UNLOCK();
 800b36a:	4805      	ldr	r0, [pc, #20]	; (800b380 <chFactoryCreateMailbox.constprop.0+0x80>)
 800b36c:	f7f8 fc28 	bl	8003bc0 <chMtxUnlock>
}
 800b370:	4620      	mov	r0, r4
 800b372:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#5");
 800b374:	4806      	ldr	r0, [pc, #24]	; (800b390 <chFactoryCreateMailbox.constprop.0+0x90>)
 800b376:	f7f5 f9fb 	bl	8000770 <chSysHalt>
 800b37a:	4806      	ldr	r0, [pc, #24]	; (800b394 <chFactoryCreateMailbox.constprop.0+0x94>)
 800b37c:	f7f5 f9f8 	bl	8000770 <chSysHalt>
 800b380:	200015f8 	.word	0x200015f8
 800b384:	20000d70 	.word	0x20000d70
 800b388:	20001634 	.word	0x20001634
 800b38c:	08011ddc 	.word	0x08011ddc
 800b390:	0800f214 	.word	0x0800f214
 800b394:	08010f48 	.word	0x08010f48
	...

0800b3a0 <oslib_test_009_004_execute.lto_priv.0>:
  test_set_step(1);
 800b3a0:	2201      	movs	r2, #1
static void oslib_test_009_004_execute(void) {
 800b3a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800b3a4:	4f5e      	ldr	r7, [pc, #376]	; (800b520 <oslib_test_009_004_execute.lto_priv.0+0x180>)
 800b3a6:	2320      	movs	r3, #32
 800b3a8:	603a      	str	r2, [r7, #0]
 800b3aa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b3ae:	f7f5 fa37 	bl	8000820 <_dbg_check_lock>
 800b3b2:	485c      	ldr	r0, [pc, #368]	; (800b524 <oslib_test_009_004_execute.lto_priv.0+0x184>)
 800b3b4:	f7f8 fb14 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800b3b8:	f7f5 fa42 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b3bc:	4b5a      	ldr	r3, [pc, #360]	; (800b528 <oslib_test_009_004_execute.lto_priv.0+0x188>)
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	429a      	cmp	r2, r3
 800b3c2:	d005      	beq.n	800b3d0 <oslib_test_009_004_execute.lto_priv.0+0x30>
 800b3c4:	6999      	ldr	r1, [r3, #24]
 800b3c6:	6893      	ldr	r3, [r2, #8]
 800b3c8:	688a      	ldr	r2, [r1, #8]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	f0c0 8089 	bcc.w	800b4e2 <oslib_test_009_004_execute.lto_priv.0+0x142>
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b3d6:	4d53      	ldr	r5, [pc, #332]	; (800b524 <oslib_test_009_004_execute.lto_priv.0+0x184>)
 800b3d8:	f855 4f3c 	ldr.w	r4, [r5, #60]!
  while (p != (dyn_element_t *)dlp) {
 800b3dc:	42ac      	cmp	r4, r5
 800b3de:	d01b      	beq.n	800b418 <oslib_test_009_004_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b3e0:	4e52      	ldr	r6, [pc, #328]	; (800b52c <oslib_test_009_004_execute.lto_priv.0+0x18c>)
 800b3e2:	e002      	b.n	800b3ea <oslib_test_009_004_execute.lto_priv.0+0x4a>
    p = p->next;
 800b3e4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b3e6:	42ac      	cmp	r4, r5
 800b3e8:	d016      	beq.n	800b418 <oslib_test_009_004_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b3ea:	4631      	mov	r1, r6
 800b3ec:	f104 0008 	add.w	r0, r4, #8
 800b3f0:	f7f4 ff41 	bl	8000276 <strcmp>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d1f5      	bne.n	800b3e4 <oslib_test_009_004_execute.lto_priv.0+0x44>
  if (dep != NULL) {
 800b3f8:	b174      	cbz	r4, 800b418 <oslib_test_009_004_execute.lto_priv.0+0x78>
    dep->refs++;
 800b3fa:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800b3fc:	4849      	ldr	r0, [pc, #292]	; (800b524 <oslib_test_009_004_execute.lto_priv.0+0x184>)
    dep->refs++;
 800b3fe:	3301      	adds	r3, #1
 800b400:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b402:	f7f8 fbdd 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800b406:	2301      	movs	r3, #1
 800b408:	4949      	ldr	r1, [pc, #292]	; (800b530 <oslib_test_009_004_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b40a:	4a4a      	ldr	r2, [pc, #296]	; (800b534 <oslib_test_009_004_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b40c:	484a      	ldr	r0, [pc, #296]	; (800b538 <oslib_test_009_004_execute.lto_priv.0+0x198>)
 800b40e:	4c4b      	ldr	r4, [pc, #300]	; (800b53c <oslib_test_009_004_execute.lto_priv.0+0x19c>)
  test_local_fail      = true;
 800b410:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b412:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b414:	7013      	strb	r3, [r2, #0]
}
 800b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b418:	4842      	ldr	r0, [pc, #264]	; (800b524 <oslib_test_009_004_execute.lto_priv.0+0x184>)
 800b41a:	f7f8 fbd1 	bl	8003bc0 <chMtxUnlock>
  test_set_step(2);
 800b41e:	2302      	movs	r3, #2
 800b420:	603b      	str	r3, [r7, #0]
    dmp = chFactoryCreateMailbox("mymbx", 16U);
 800b422:	f7ff ff6d 	bl	800b300 <chFactoryCreateMailbox.constprop.0>
  if (!condition)
 800b426:	4604      	mov	r4, r0
 800b428:	2800      	cmp	r0, #0
 800b42a:	d05d      	beq.n	800b4e8 <oslib_test_009_004_execute.lto_priv.0+0x148>
  test_set_step(3);
 800b42c:	2303      	movs	r3, #3
 800b42e:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryCreateMailbox("mymbx", 16U);
 800b430:	f7ff ff66 	bl	800b300 <chFactoryCreateMailbox.constprop.0>
 800b434:	2800      	cmp	r0, #0
 800b436:	d160      	bne.n	800b4fa <oslib_test_009_004_execute.lto_priv.0+0x15a>
  test_set_step(4);
 800b438:	2304      	movs	r3, #4
 800b43a:	603b      	str	r3, [r7, #0]
    dmp1 = chFactoryFindMailbox("mymbx");
 800b43c:	f7ff ff10 	bl	800b260 <chFactoryFindMailbox.constprop.0>
 800b440:	4605      	mov	r5, r0
 800b442:	2800      	cmp	r0, #0
 800b444:	d062      	beq.n	800b50c <oslib_test_009_004_execute.lto_priv.0+0x16c>
    test_assert(dmp == dmp1, "object reference mismatch");
 800b446:	1a20      	subs	r0, r4, r0
 800b448:	fab0 f080 	clz	r0, r0
 800b44c:	493c      	ldr	r1, [pc, #240]	; (800b540 <oslib_test_009_004_execute.lto_priv.0+0x1a0>)
 800b44e:	0940      	lsrs	r0, r0, #5
 800b450:	f7fa fa36 	bl	80058c0 <_test_assert>
 800b454:	2800      	cmp	r0, #0
 800b456:	d1de      	bne.n	800b416 <oslib_test_009_004_execute.lto_priv.0+0x76>
    test_assert(dmp1->element.refs == 2, "object reference mismatch");
 800b458:	6868      	ldr	r0, [r5, #4]
 800b45a:	4939      	ldr	r1, [pc, #228]	; (800b540 <oslib_test_009_004_execute.lto_priv.0+0x1a0>)
 800b45c:	f1a0 0002 	sub.w	r0, r0, #2
 800b460:	fab0 f080 	clz	r0, r0
 800b464:	0940      	lsrs	r0, r0, #5
 800b466:	f7fa fa2b 	bl	80058c0 <_test_assert>
 800b46a:	2800      	cmp	r0, #0
 800b46c:	d1d3      	bne.n	800b416 <oslib_test_009_004_execute.lto_priv.0+0x76>
 800b46e:	6868      	ldr	r0, [r5, #4]
    test_assert(dmp2->element.refs == 3, "object reference mismatch");
 800b470:	4933      	ldr	r1, [pc, #204]	; (800b540 <oslib_test_009_004_execute.lto_priv.0+0x1a0>)
 800b472:	3001      	adds	r0, #1
 800b474:	6068      	str	r0, [r5, #4]
 800b476:	f1a0 0003 	sub.w	r0, r0, #3
 800b47a:	fab0 f080 	clz	r0, r0
 800b47e:	0940      	lsrs	r0, r0, #5
 800b480:	f7fa fa1e 	bl	80058c0 <_test_assert>
 800b484:	2800      	cmp	r0, #0
 800b486:	d1c6      	bne.n	800b416 <oslib_test_009_004_execute.lto_priv.0+0x76>
    chFactoryReleaseMailbox(dmp2);
 800b488:	4628      	mov	r0, r5
 800b48a:	f7f9 fbd1 	bl	8004c30 <chFactoryReleaseMailbox>
    test_assert(dmp1->element.refs == 2, "references mismatch");
 800b48e:	6868      	ldr	r0, [r5, #4]
 800b490:	492c      	ldr	r1, [pc, #176]	; (800b544 <oslib_test_009_004_execute.lto_priv.0+0x1a4>)
 800b492:	f1a0 0002 	sub.w	r0, r0, #2
 800b496:	fab0 f080 	clz	r0, r0
 800b49a:	0940      	lsrs	r0, r0, #5
 800b49c:	f7fa fa10 	bl	80058c0 <_test_assert>
 800b4a0:	2800      	cmp	r0, #0
 800b4a2:	d1b8      	bne.n	800b416 <oslib_test_009_004_execute.lto_priv.0+0x76>
    chFactoryReleaseMailbox(dmp1);
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	f7f9 fbc3 	bl	8004c30 <chFactoryReleaseMailbox>
    test_assert(dmp->element.refs == 1, "references mismatch");
 800b4aa:	6860      	ldr	r0, [r4, #4]
 800b4ac:	4925      	ldr	r1, [pc, #148]	; (800b544 <oslib_test_009_004_execute.lto_priv.0+0x1a4>)
 800b4ae:	f1a0 0001 	sub.w	r0, r0, #1
 800b4b2:	fab0 f080 	clz	r0, r0
 800b4b6:	0940      	lsrs	r0, r0, #5
 800b4b8:	f7fa fa02 	bl	80058c0 <_test_assert>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	d1aa      	bne.n	800b416 <oslib_test_009_004_execute.lto_priv.0+0x76>
  test_set_step(5);
 800b4c0:	2305      	movs	r3, #5
    chFactoryReleaseMailbox(dmp);
 800b4c2:	4620      	mov	r0, r4
  test_set_step(5);
 800b4c4:	603b      	str	r3, [r7, #0]
    chFactoryReleaseMailbox(dmp);
 800b4c6:	f7f9 fbb3 	bl	8004c30 <chFactoryReleaseMailbox>
  test_set_step(6);
 800b4ca:	2306      	movs	r3, #6
 800b4cc:	603b      	str	r3, [r7, #0]
    dmp = chFactoryFindMailbox("mymbx");
 800b4ce:	f7ff fec7 	bl	800b260 <chFactoryFindMailbox.constprop.0>
}
 800b4d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dmp == NULL, "found");
 800b4d6:	fab0 f080 	clz	r0, r0
 800b4da:	4918      	ldr	r1, [pc, #96]	; (800b53c <oslib_test_009_004_execute.lto_priv.0+0x19c>)
 800b4dc:	0940      	lsrs	r0, r0, #5
 800b4de:	f7fa b9ef 	b.w	80058c0 <_test_assert>
 800b4e2:	4819      	ldr	r0, [pc, #100]	; (800b548 <oslib_test_009_004_execute.lto_priv.0+0x1a8>)
 800b4e4:	f7f5 f944 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	4911      	ldr	r1, [pc, #68]	; (800b530 <oslib_test_009_004_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b4ec:	4a11      	ldr	r2, [pc, #68]	; (800b534 <oslib_test_009_004_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b4ee:	4812      	ldr	r0, [pc, #72]	; (800b538 <oslib_test_009_004_execute.lto_priv.0+0x198>)
 800b4f0:	4c16      	ldr	r4, [pc, #88]	; (800b54c <oslib_test_009_004_execute.lto_priv.0+0x1ac>)
  test_local_fail      = true;
 800b4f2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b4f4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b4f6:	7013      	strb	r3, [r2, #0]
}
 800b4f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	490c      	ldr	r1, [pc, #48]	; (800b530 <oslib_test_009_004_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b4fe:	4a0d      	ldr	r2, [pc, #52]	; (800b534 <oslib_test_009_004_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b500:	480d      	ldr	r0, [pc, #52]	; (800b538 <oslib_test_009_004_execute.lto_priv.0+0x198>)
 800b502:	4c13      	ldr	r4, [pc, #76]	; (800b550 <oslib_test_009_004_execute.lto_priv.0+0x1b0>)
  test_local_fail      = true;
 800b504:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b506:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b508:	7013      	strb	r3, [r2, #0]
 800b50a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800b50c:	2301      	movs	r3, #1
 800b50e:	4908      	ldr	r1, [pc, #32]	; (800b530 <oslib_test_009_004_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b510:	4a08      	ldr	r2, [pc, #32]	; (800b534 <oslib_test_009_004_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b512:	4809      	ldr	r0, [pc, #36]	; (800b538 <oslib_test_009_004_execute.lto_priv.0+0x198>)
 800b514:	4c0f      	ldr	r4, [pc, #60]	; (800b554 <oslib_test_009_004_execute.lto_priv.0+0x1b4>)
  test_local_fail      = true;
 800b516:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b518:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b51a:	7013      	strb	r3, [r2, #0]
 800b51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b51e:	bf00      	nop
 800b520:	20001d3c 	.word	0x20001d3c
 800b524:	200015f8 	.word	0x200015f8
 800b528:	20000d70 	.word	0x20000d70
 800b52c:	08011ddc 	.word	0x08011ddc
 800b530:	20001d39 	.word	0x20001d39
 800b534:	20001d38 	.word	0x20001d38
 800b538:	20001d34 	.word	0x20001d34
 800b53c:	08011e0c 	.word	0x08011e0c
 800b540:	08011e14 	.word	0x08011e14
 800b544:	08011e30 	.word	0x08011e30
 800b548:	08010f48 	.word	0x08010f48
 800b54c:	08011dec 	.word	0x08011dec
 800b550:	08011dfc 	.word	0x08011dfc
 800b554:	08011e08 	.word	0x08011e08
	...

0800b560 <chFactoryFindSemaphore.constprop.0>:
 800b560:	2320      	movs	r3, #32
dyn_semaphore_t *chFactoryFindSemaphore(const char *name) {
 800b562:	b570      	push	{r4, r5, r6, lr}
 800b564:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b568:	f7f5 f95a 	bl	8000820 <_dbg_check_lock>
 800b56c:	481e      	ldr	r0, [pc, #120]	; (800b5e8 <chFactoryFindSemaphore.constprop.0+0x88>)
 800b56e:	f7f8 fa37 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800b572:	4b1e      	ldr	r3, [pc, #120]	; (800b5ec <chFactoryFindSemaphore.constprop.0+0x8c>)
 800b574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b576:	bb42      	cbnz	r2, 800b5ca <chFactoryFindSemaphore.constprop.0+0x6a>
 800b578:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b57a:	2900      	cmp	r1, #0
 800b57c:	dd25      	ble.n	800b5ca <chFactoryFindSemaphore.constprop.0+0x6a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b57e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800b580:	635a      	str	r2, [r3, #52]	; 0x34
 800b582:	4299      	cmp	r1, r3
 800b584:	d004      	beq.n	800b590 <chFactoryFindSemaphore.constprop.0+0x30>
 800b586:	699a      	ldr	r2, [r3, #24]
 800b588:	688b      	ldr	r3, [r1, #8]
 800b58a:	6892      	ldr	r2, [r2, #8]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d31f      	bcc.n	800b5d0 <chFactoryFindSemaphore.constprop.0+0x70>
 800b590:	2300      	movs	r3, #0
 800b592:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b596:	4d14      	ldr	r5, [pc, #80]	; (800b5e8 <chFactoryFindSemaphore.constprop.0+0x88>)
 800b598:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800b59c:	42ac      	cmp	r4, r5
 800b59e:	d020      	beq.n	800b5e2 <chFactoryFindSemaphore.constprop.0+0x82>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b5a0:	4e13      	ldr	r6, [pc, #76]	; (800b5f0 <chFactoryFindSemaphore.constprop.0+0x90>)
 800b5a2:	e002      	b.n	800b5aa <chFactoryFindSemaphore.constprop.0+0x4a>
    p = p->next;
 800b5a4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b5a6:	42ac      	cmp	r4, r5
 800b5a8:	d015      	beq.n	800b5d6 <chFactoryFindSemaphore.constprop.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b5aa:	4631      	mov	r1, r6
 800b5ac:	f104 0008 	add.w	r0, r4, #8
 800b5b0:	f7f4 fe61 	bl	8000276 <strcmp>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	d1f5      	bne.n	800b5a4 <chFactoryFindSemaphore.constprop.0+0x44>
  if (dep != NULL) {
 800b5b8:	b114      	cbz	r4, 800b5c0 <chFactoryFindSemaphore.constprop.0+0x60>
    dep->refs++;
 800b5ba:	6863      	ldr	r3, [r4, #4]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b5c0:	4809      	ldr	r0, [pc, #36]	; (800b5e8 <chFactoryFindSemaphore.constprop.0+0x88>)
 800b5c2:	f7f8 fafd 	bl	8003bc0 <chMtxUnlock>
}
 800b5c6:	4620      	mov	r0, r4
 800b5c8:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 800b5ca:	480a      	ldr	r0, [pc, #40]	; (800b5f4 <chFactoryFindSemaphore.constprop.0+0x94>)
 800b5cc:	f7f5 f8d0 	bl	8000770 <chSysHalt>
 800b5d0:	4809      	ldr	r0, [pc, #36]	; (800b5f8 <chFactoryFindSemaphore.constprop.0+0x98>)
 800b5d2:	f7f5 f8cd 	bl	8000770 <chSysHalt>
  return NULL;
 800b5d6:	2400      	movs	r4, #0
  F_UNLOCK();
 800b5d8:	4803      	ldr	r0, [pc, #12]	; (800b5e8 <chFactoryFindSemaphore.constprop.0+0x88>)
 800b5da:	f7f8 faf1 	bl	8003bc0 <chMtxUnlock>
}
 800b5de:	4620      	mov	r0, r4
 800b5e0:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800b5e2:	461c      	mov	r4, r3
 800b5e4:	e7ec      	b.n	800b5c0 <chFactoryFindSemaphore.constprop.0+0x60>
 800b5e6:	bf00      	nop
 800b5e8:	200015f8 	.word	0x200015f8
 800b5ec:	20000d70 	.word	0x20000d70
 800b5f0:	08011dd4 	.word	0x08011dd4
 800b5f4:	0800f214 	.word	0x0800f214
 800b5f8:	08010f48 	.word	0x08010f48
 800b5fc:	00000000 	.word	0x00000000

0800b600 <chFactoryCreateSemaphore.constprop.0>:
 800b600:	2320      	movs	r3, #32
dyn_semaphore_t *chFactoryCreateSemaphore(const char *name, cnt_t n) {
 800b602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	4f38      	ldr	r7, [pc, #224]	; (800b6ec <chFactoryCreateSemaphore.constprop.0+0xec>)
  _dbg_check_lock();
 800b60c:	f7f5 f908 	bl	8000820 <_dbg_check_lock>
 800b610:	4837      	ldr	r0, [pc, #220]	; (800b6f0 <chFactoryCreateSemaphore.constprop.0+0xf0>)
 800b612:	f7f8 f9e5 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800b616:	f7f5 f913 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	42bb      	cmp	r3, r7
 800b61e:	d004      	beq.n	800b62a <chFactoryCreateSemaphore.constprop.0+0x2a>
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	689b      	ldr	r3, [r3, #8]
 800b624:	6892      	ldr	r2, [r2, #8]
 800b626:	429a      	cmp	r2, r3
 800b628:	d31d      	bcc.n	800b666 <chFactoryCreateSemaphore.constprop.0+0x66>
 800b62a:	2300      	movs	r3, #0
 800b62c:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b630:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 800b6f0 <chFactoryCreateSemaphore.constprop.0+0xf0>
 800b634:	4645      	mov	r5, r8
 800b636:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800b63a:	42ac      	cmp	r4, r5
 800b63c:	d016      	beq.n	800b66c <chFactoryCreateSemaphore.constprop.0+0x6c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b63e:	4e2d      	ldr	r6, [pc, #180]	; (800b6f4 <chFactoryCreateSemaphore.constprop.0+0xf4>)
 800b640:	e002      	b.n	800b648 <chFactoryCreateSemaphore.constprop.0+0x48>
    p = p->next;
 800b642:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b644:	42ac      	cmp	r4, r5
 800b646:	d011      	beq.n	800b66c <chFactoryCreateSemaphore.constprop.0+0x6c>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b648:	4631      	mov	r1, r6
 800b64a:	f104 0008 	add.w	r0, r4, #8
 800b64e:	f7f4 fe12 	bl	8000276 <strcmp>
 800b652:	2800      	cmp	r0, #0
 800b654:	d1f5      	bne.n	800b642 <chFactoryCreateSemaphore.constprop.0+0x42>
  if (dep != NULL) {
 800b656:	b14c      	cbz	r4, 800b66c <chFactoryCreateSemaphore.constprop.0+0x6c>
    return NULL;
 800b658:	2400      	movs	r4, #0
  F_UNLOCK();
 800b65a:	4825      	ldr	r0, [pc, #148]	; (800b6f0 <chFactoryCreateSemaphore.constprop.0+0xf0>)
 800b65c:	f7f8 fab0 	bl	8003bc0 <chMtxUnlock>
}
 800b660:	4620      	mov	r0, r4
 800b662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b666:	4824      	ldr	r0, [pc, #144]	; (800b6f8 <chFactoryCreateSemaphore.constprop.0+0xf8>)
 800b668:	f7f5 f882 	bl	8000770 <chSysHalt>
 800b66c:	2320      	movs	r3, #32
 800b66e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b672:	f7f5 f8d5 	bl	8000820 <_dbg_check_lock>
  objp = chPoolAllocI(mp);
 800b676:	4821      	ldr	r0, [pc, #132]	; (800b6fc <chFactoryCreateSemaphore.constprop.0+0xfc>)
 800b678:	f7f9 f8ca 	bl	8004810 <chPoolAllocI>
 800b67c:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800b67e:	f7f5 f8df 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	42bb      	cmp	r3, r7
 800b686:	d004      	beq.n	800b692 <chFactoryCreateSemaphore.constprop.0+0x92>
 800b688:	69ba      	ldr	r2, [r7, #24]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	6892      	ldr	r2, [r2, #8]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d328      	bcc.n	800b6e4 <chFactoryCreateSemaphore.constprop.0+0xe4>
 800b692:	2300      	movs	r3, #0
 800b694:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800b698:	2c00      	cmp	r4, #0
 800b69a:	d0dd      	beq.n	800b658 <chFactoryCreateSemaphore.constprop.0+0x58>
    *dp++ = c;
 800b69c:	206d      	movs	r0, #109	; 0x6d
 800b69e:	2279      	movs	r2, #121	; 0x79
 800b6a0:	f104 0309 	add.w	r3, r4, #9
 800b6a4:	7220      	strb	r0, [r4, #8]
 800b6a6:	4916      	ldr	r1, [pc, #88]	; (800b700 <chFactoryCreateSemaphore.constprop.0+0x100>)
 800b6a8:	f104 0010 	add.w	r0, r4, #16
 800b6ac:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800b6b0:	b13a      	cbz	r2, 800b6c2 <chFactoryCreateSemaphore.constprop.0+0xc2>
 800b6b2:	4298      	cmp	r0, r3
 800b6b4:	d005      	beq.n	800b6c2 <chFactoryCreateSemaphore.constprop.0+0xc2>
    c = *sp++;
 800b6b6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800b6ba:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800b6be:	2a00      	cmp	r2, #0
 800b6c0:	d1f7      	bne.n	800b6b2 <chFactoryCreateSemaphore.constprop.0+0xb2>
  dep->refs = (ucnt_t)1;
 800b6c2:	2201      	movs	r2, #1
 800b6c4:	2300      	movs	r3, #0
  dep->next = dlp->next;
 800b6c6:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
  dep->refs = (ucnt_t)1;
 800b6ca:	e9c4 1200 	strd	r1, r2, [r4]
  dlp->next = (dyn_element_t *)dep;
 800b6ce:	f8c8 4028 	str.w	r4, [r8, #40]	; 0x28
 800b6d2:	e9c4 0004 	strd	r0, r0, [r4, #16]
 800b6d6:	61a3      	str	r3, [r4, #24]
  F_UNLOCK();
 800b6d8:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <chFactoryCreateSemaphore.constprop.0+0xf0>)
 800b6da:	f7f8 fa71 	bl	8003bc0 <chMtxUnlock>
}
 800b6de:	4620      	mov	r0, r4
 800b6e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6e4:	4807      	ldr	r0, [pc, #28]	; (800b704 <chFactoryCreateSemaphore.constprop.0+0x104>)
 800b6e6:	f7f5 f843 	bl	8000770 <chSysHalt>
 800b6ea:	bf00      	nop
 800b6ec:	20000d70 	.word	0x20000d70
 800b6f0:	200015f8 	.word	0x200015f8
 800b6f4:	08011dd4 	.word	0x08011dd4
 800b6f8:	08010f48 	.word	0x08010f48
 800b6fc:	20001624 	.word	0x20001624
 800b700:	08011dd5 	.word	0x08011dd5
 800b704:	08010e40 	.word	0x08010e40
	...

0800b710 <oslib_test_009_003_execute.lto_priv.0>:
  test_set_step(1);
 800b710:	2201      	movs	r2, #1
static void oslib_test_009_003_execute(void) {
 800b712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800b714:	4f5e      	ldr	r7, [pc, #376]	; (800b890 <oslib_test_009_003_execute.lto_priv.0+0x180>)
 800b716:	2320      	movs	r3, #32
 800b718:	603a      	str	r2, [r7, #0]
 800b71a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b71e:	f7f5 f87f 	bl	8000820 <_dbg_check_lock>
 800b722:	485c      	ldr	r0, [pc, #368]	; (800b894 <oslib_test_009_003_execute.lto_priv.0+0x184>)
 800b724:	f7f8 f95c 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800b728:	f7f5 f88a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b72c:	4b5a      	ldr	r3, [pc, #360]	; (800b898 <oslib_test_009_003_execute.lto_priv.0+0x188>)
 800b72e:	681a      	ldr	r2, [r3, #0]
 800b730:	429a      	cmp	r2, r3
 800b732:	d005      	beq.n	800b740 <oslib_test_009_003_execute.lto_priv.0+0x30>
 800b734:	6999      	ldr	r1, [r3, #24]
 800b736:	6893      	ldr	r3, [r2, #8]
 800b738:	688a      	ldr	r2, [r1, #8]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	f0c0 8089 	bcc.w	800b852 <oslib_test_009_003_execute.lto_priv.0+0x142>
 800b740:	2300      	movs	r3, #0
 800b742:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b746:	4d53      	ldr	r5, [pc, #332]	; (800b894 <oslib_test_009_003_execute.lto_priv.0+0x184>)
 800b748:	f855 4f28 	ldr.w	r4, [r5, #40]!
  while (p != (dyn_element_t *)dlp) {
 800b74c:	42ac      	cmp	r4, r5
 800b74e:	d01b      	beq.n	800b788 <oslib_test_009_003_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b750:	4e52      	ldr	r6, [pc, #328]	; (800b89c <oslib_test_009_003_execute.lto_priv.0+0x18c>)
 800b752:	e002      	b.n	800b75a <oslib_test_009_003_execute.lto_priv.0+0x4a>
    p = p->next;
 800b754:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b756:	42ac      	cmp	r4, r5
 800b758:	d016      	beq.n	800b788 <oslib_test_009_003_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b75a:	4631      	mov	r1, r6
 800b75c:	f104 0008 	add.w	r0, r4, #8
 800b760:	f7f4 fd89 	bl	8000276 <strcmp>
 800b764:	2800      	cmp	r0, #0
 800b766:	d1f5      	bne.n	800b754 <oslib_test_009_003_execute.lto_priv.0+0x44>
  if (dep != NULL) {
 800b768:	b174      	cbz	r4, 800b788 <oslib_test_009_003_execute.lto_priv.0+0x78>
    dep->refs++;
 800b76a:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800b76c:	4849      	ldr	r0, [pc, #292]	; (800b894 <oslib_test_009_003_execute.lto_priv.0+0x184>)
    dep->refs++;
 800b76e:	3301      	adds	r3, #1
 800b770:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b772:	f7f8 fa25 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800b776:	2301      	movs	r3, #1
 800b778:	4949      	ldr	r1, [pc, #292]	; (800b8a0 <oslib_test_009_003_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b77a:	4a4a      	ldr	r2, [pc, #296]	; (800b8a4 <oslib_test_009_003_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b77c:	484a      	ldr	r0, [pc, #296]	; (800b8a8 <oslib_test_009_003_execute.lto_priv.0+0x198>)
 800b77e:	4c4b      	ldr	r4, [pc, #300]	; (800b8ac <oslib_test_009_003_execute.lto_priv.0+0x19c>)
  test_local_fail      = true;
 800b780:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b782:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b784:	7013      	strb	r3, [r2, #0]
}
 800b786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b788:	4842      	ldr	r0, [pc, #264]	; (800b894 <oslib_test_009_003_execute.lto_priv.0+0x184>)
 800b78a:	f7f8 fa19 	bl	8003bc0 <chMtxUnlock>
  test_set_step(2);
 800b78e:	2302      	movs	r3, #2
 800b790:	603b      	str	r3, [r7, #0]
    dsp = chFactoryCreateSemaphore("mysem", 0);
 800b792:	f7ff ff35 	bl	800b600 <chFactoryCreateSemaphore.constprop.0>
  if (!condition)
 800b796:	4604      	mov	r4, r0
 800b798:	2800      	cmp	r0, #0
 800b79a:	d05d      	beq.n	800b858 <oslib_test_009_003_execute.lto_priv.0+0x148>
  test_set_step(3);
 800b79c:	2303      	movs	r3, #3
 800b79e:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryCreateSemaphore("mysem", 0);
 800b7a0:	f7ff ff2e 	bl	800b600 <chFactoryCreateSemaphore.constprop.0>
 800b7a4:	2800      	cmp	r0, #0
 800b7a6:	d160      	bne.n	800b86a <oslib_test_009_003_execute.lto_priv.0+0x15a>
  test_set_step(4);
 800b7a8:	2304      	movs	r3, #4
 800b7aa:	603b      	str	r3, [r7, #0]
    dsp1 = chFactoryFindSemaphore("mysem");
 800b7ac:	f7ff fed8 	bl	800b560 <chFactoryFindSemaphore.constprop.0>
 800b7b0:	4605      	mov	r5, r0
 800b7b2:	2800      	cmp	r0, #0
 800b7b4:	d062      	beq.n	800b87c <oslib_test_009_003_execute.lto_priv.0+0x16c>
    test_assert(dsp == dsp1, "object reference mismatch");
 800b7b6:	1a20      	subs	r0, r4, r0
 800b7b8:	fab0 f080 	clz	r0, r0
 800b7bc:	493c      	ldr	r1, [pc, #240]	; (800b8b0 <oslib_test_009_003_execute.lto_priv.0+0x1a0>)
 800b7be:	0940      	lsrs	r0, r0, #5
 800b7c0:	f7fa f87e 	bl	80058c0 <_test_assert>
 800b7c4:	2800      	cmp	r0, #0
 800b7c6:	d1de      	bne.n	800b786 <oslib_test_009_003_execute.lto_priv.0+0x76>
    test_assert(dsp1->element.refs == 2, "object reference mismatch");
 800b7c8:	6868      	ldr	r0, [r5, #4]
 800b7ca:	4939      	ldr	r1, [pc, #228]	; (800b8b0 <oslib_test_009_003_execute.lto_priv.0+0x1a0>)
 800b7cc:	f1a0 0002 	sub.w	r0, r0, #2
 800b7d0:	fab0 f080 	clz	r0, r0
 800b7d4:	0940      	lsrs	r0, r0, #5
 800b7d6:	f7fa f873 	bl	80058c0 <_test_assert>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d1d3      	bne.n	800b786 <oslib_test_009_003_execute.lto_priv.0+0x76>
 800b7de:	6868      	ldr	r0, [r5, #4]
    test_assert(dsp2->element.refs == 3, "object reference mismatch");
 800b7e0:	4933      	ldr	r1, [pc, #204]	; (800b8b0 <oslib_test_009_003_execute.lto_priv.0+0x1a0>)
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	6068      	str	r0, [r5, #4]
 800b7e6:	f1a0 0003 	sub.w	r0, r0, #3
 800b7ea:	fab0 f080 	clz	r0, r0
 800b7ee:	0940      	lsrs	r0, r0, #5
 800b7f0:	f7fa f866 	bl	80058c0 <_test_assert>
 800b7f4:	2800      	cmp	r0, #0
 800b7f6:	d1c6      	bne.n	800b786 <oslib_test_009_003_execute.lto_priv.0+0x76>
    chFactoryReleaseSemaphore(dsp2);
 800b7f8:	4628      	mov	r0, r5
 800b7fa:	f7f9 f9d9 	bl	8004bb0 <chFactoryReleaseSemaphore>
    test_assert(dsp1->element.refs == 2, "references mismatch");
 800b7fe:	6868      	ldr	r0, [r5, #4]
 800b800:	492c      	ldr	r1, [pc, #176]	; (800b8b4 <oslib_test_009_003_execute.lto_priv.0+0x1a4>)
 800b802:	f1a0 0002 	sub.w	r0, r0, #2
 800b806:	fab0 f080 	clz	r0, r0
 800b80a:	0940      	lsrs	r0, r0, #5
 800b80c:	f7fa f858 	bl	80058c0 <_test_assert>
 800b810:	2800      	cmp	r0, #0
 800b812:	d1b8      	bne.n	800b786 <oslib_test_009_003_execute.lto_priv.0+0x76>
    chFactoryReleaseSemaphore(dsp1);
 800b814:	4628      	mov	r0, r5
 800b816:	f7f9 f9cb 	bl	8004bb0 <chFactoryReleaseSemaphore>
    test_assert(dsp->element.refs == 1, "references mismatch");
 800b81a:	6860      	ldr	r0, [r4, #4]
 800b81c:	4925      	ldr	r1, [pc, #148]	; (800b8b4 <oslib_test_009_003_execute.lto_priv.0+0x1a4>)
 800b81e:	f1a0 0001 	sub.w	r0, r0, #1
 800b822:	fab0 f080 	clz	r0, r0
 800b826:	0940      	lsrs	r0, r0, #5
 800b828:	f7fa f84a 	bl	80058c0 <_test_assert>
 800b82c:	2800      	cmp	r0, #0
 800b82e:	d1aa      	bne.n	800b786 <oslib_test_009_003_execute.lto_priv.0+0x76>
  test_set_step(5);
 800b830:	2305      	movs	r3, #5
    chFactoryReleaseSemaphore(dsp);
 800b832:	4620      	mov	r0, r4
  test_set_step(5);
 800b834:	603b      	str	r3, [r7, #0]
    chFactoryReleaseSemaphore(dsp);
 800b836:	f7f9 f9bb 	bl	8004bb0 <chFactoryReleaseSemaphore>
  test_set_step(6);
 800b83a:	2306      	movs	r3, #6
 800b83c:	603b      	str	r3, [r7, #0]
    dsp = chFactoryFindSemaphore("mysem");
 800b83e:	f7ff fe8f 	bl	800b560 <chFactoryFindSemaphore.constprop.0>
}
 800b842:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dsp == NULL, "found");
 800b846:	fab0 f080 	clz	r0, r0
 800b84a:	4918      	ldr	r1, [pc, #96]	; (800b8ac <oslib_test_009_003_execute.lto_priv.0+0x19c>)
 800b84c:	0940      	lsrs	r0, r0, #5
 800b84e:	f7fa b837 	b.w	80058c0 <_test_assert>
 800b852:	4819      	ldr	r0, [pc, #100]	; (800b8b8 <oslib_test_009_003_execute.lto_priv.0+0x1a8>)
 800b854:	f7f4 ff8c 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800b858:	2301      	movs	r3, #1
 800b85a:	4911      	ldr	r1, [pc, #68]	; (800b8a0 <oslib_test_009_003_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b85c:	4a11      	ldr	r2, [pc, #68]	; (800b8a4 <oslib_test_009_003_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b85e:	4812      	ldr	r0, [pc, #72]	; (800b8a8 <oslib_test_009_003_execute.lto_priv.0+0x198>)
 800b860:	4c16      	ldr	r4, [pc, #88]	; (800b8bc <oslib_test_009_003_execute.lto_priv.0+0x1ac>)
  test_local_fail      = true;
 800b862:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b864:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b866:	7013      	strb	r3, [r2, #0]
}
 800b868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800b86a:	2301      	movs	r3, #1
 800b86c:	490c      	ldr	r1, [pc, #48]	; (800b8a0 <oslib_test_009_003_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b86e:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <oslib_test_009_003_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b870:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <oslib_test_009_003_execute.lto_priv.0+0x198>)
 800b872:	4c13      	ldr	r4, [pc, #76]	; (800b8c0 <oslib_test_009_003_execute.lto_priv.0+0x1b0>)
  test_local_fail      = true;
 800b874:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b876:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b878:	7013      	strb	r3, [r2, #0]
 800b87a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800b87c:	2301      	movs	r3, #1
 800b87e:	4908      	ldr	r1, [pc, #32]	; (800b8a0 <oslib_test_009_003_execute.lto_priv.0+0x190>)
  test_global_fail     = true;
 800b880:	4a08      	ldr	r2, [pc, #32]	; (800b8a4 <oslib_test_009_003_execute.lto_priv.0+0x194>)
  test_failure_message = msg;
 800b882:	4809      	ldr	r0, [pc, #36]	; (800b8a8 <oslib_test_009_003_execute.lto_priv.0+0x198>)
 800b884:	4c0f      	ldr	r4, [pc, #60]	; (800b8c4 <oslib_test_009_003_execute.lto_priv.0+0x1b4>)
  test_local_fail      = true;
 800b886:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b888:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b88a:	7013      	strb	r3, [r2, #0]
 800b88c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b88e:	bf00      	nop
 800b890:	20001d3c 	.word	0x20001d3c
 800b894:	200015f8 	.word	0x200015f8
 800b898:	20000d70 	.word	0x20000d70
 800b89c:	08011dd4 	.word	0x08011dd4
 800b8a0:	20001d39 	.word	0x20001d39
 800b8a4:	20001d38 	.word	0x20001d38
 800b8a8:	20001d34 	.word	0x20001d34
 800b8ac:	08011e0c 	.word	0x08011e0c
 800b8b0:	08011e14 	.word	0x08011e14
 800b8b4:	08011e30 	.word	0x08011e30
 800b8b8:	08010f48 	.word	0x08010f48
 800b8bc:	08011dec 	.word	0x08011dec
 800b8c0:	08011dfc 	.word	0x08011dfc
 800b8c4:	08011e08 	.word	0x08011e08
	...

0800b8d0 <chFactoryFindBuffer.constprop.0>:
 800b8d0:	2320      	movs	r3, #32
dyn_buffer_t *chFactoryFindBuffer(const char *name) {
 800b8d2:	b570      	push	{r4, r5, r6, lr}
 800b8d4:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b8d8:	f7f4 ffa2 	bl	8000820 <_dbg_check_lock>
 800b8dc:	481e      	ldr	r0, [pc, #120]	; (800b958 <chFactoryFindBuffer.constprop.0+0x88>)
 800b8de:	f7f8 f87f 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800b8e2:	4b1e      	ldr	r3, [pc, #120]	; (800b95c <chFactoryFindBuffer.constprop.0+0x8c>)
 800b8e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8e6:	bb42      	cbnz	r2, 800b93a <chFactoryFindBuffer.constprop.0+0x6a>
 800b8e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b8ea:	2900      	cmp	r1, #0
 800b8ec:	dd25      	ble.n	800b93a <chFactoryFindBuffer.constprop.0+0x6a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b8ee:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800b8f0:	635a      	str	r2, [r3, #52]	; 0x34
 800b8f2:	4299      	cmp	r1, r3
 800b8f4:	d004      	beq.n	800b900 <chFactoryFindBuffer.constprop.0+0x30>
 800b8f6:	699a      	ldr	r2, [r3, #24]
 800b8f8:	688b      	ldr	r3, [r1, #8]
 800b8fa:	6892      	ldr	r2, [r2, #8]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d31f      	bcc.n	800b940 <chFactoryFindBuffer.constprop.0+0x70>
 800b900:	2300      	movs	r3, #0
 800b902:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b906:	4d14      	ldr	r5, [pc, #80]	; (800b958 <chFactoryFindBuffer.constprop.0+0x88>)
 800b908:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800b90c:	42ac      	cmp	r4, r5
 800b90e:	d020      	beq.n	800b952 <chFactoryFindBuffer.constprop.0+0x82>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b910:	4e13      	ldr	r6, [pc, #76]	; (800b960 <chFactoryFindBuffer.constprop.0+0x90>)
 800b912:	e002      	b.n	800b91a <chFactoryFindBuffer.constprop.0+0x4a>
    p = p->next;
 800b914:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b916:	42ac      	cmp	r4, r5
 800b918:	d015      	beq.n	800b946 <chFactoryFindBuffer.constprop.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b91a:	4631      	mov	r1, r6
 800b91c:	f104 0008 	add.w	r0, r4, #8
 800b920:	f7f4 fca9 	bl	8000276 <strcmp>
 800b924:	2800      	cmp	r0, #0
 800b926:	d1f5      	bne.n	800b914 <chFactoryFindBuffer.constprop.0+0x44>
  if (dep != NULL) {
 800b928:	b114      	cbz	r4, 800b930 <chFactoryFindBuffer.constprop.0+0x60>
    dep->refs++;
 800b92a:	6863      	ldr	r3, [r4, #4]
 800b92c:	3301      	adds	r3, #1
 800b92e:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b930:	4809      	ldr	r0, [pc, #36]	; (800b958 <chFactoryFindBuffer.constprop.0+0x88>)
 800b932:	f7f8 f945 	bl	8003bc0 <chMtxUnlock>
}
 800b936:	4620      	mov	r0, r4
 800b938:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 800b93a:	480a      	ldr	r0, [pc, #40]	; (800b964 <chFactoryFindBuffer.constprop.0+0x94>)
 800b93c:	f7f4 ff18 	bl	8000770 <chSysHalt>
 800b940:	4809      	ldr	r0, [pc, #36]	; (800b968 <chFactoryFindBuffer.constprop.0+0x98>)
 800b942:	f7f4 ff15 	bl	8000770 <chSysHalt>
  return NULL;
 800b946:	2400      	movs	r4, #0
  F_UNLOCK();
 800b948:	4803      	ldr	r0, [pc, #12]	; (800b958 <chFactoryFindBuffer.constprop.0+0x88>)
 800b94a:	f7f8 f939 	bl	8003bc0 <chMtxUnlock>
}
 800b94e:	4620      	mov	r0, r4
 800b950:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800b952:	461c      	mov	r4, r3
 800b954:	e7ec      	b.n	800b930 <chFactoryFindBuffer.constprop.0+0x60>
 800b956:	bf00      	nop
 800b958:	200015f8 	.word	0x200015f8
 800b95c:	20000d70 	.word	0x20000d70
 800b960:	08011dcc 	.word	0x08011dcc
 800b964:	0800f214 	.word	0x0800f214
 800b968:	08010f48 	.word	0x08010f48
 800b96c:	00000000 	.word	0x00000000

0800b970 <oslib_test_009_002_execute.lto_priv.0>:
  test_set_step(1);
 800b970:	2201      	movs	r2, #1
static void oslib_test_009_002_execute(void) {
 800b972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800b974:	4f6f      	ldr	r7, [pc, #444]	; (800bb34 <oslib_test_009_002_execute.lto_priv.0+0x1c4>)
 800b976:	2320      	movs	r3, #32
 800b978:	603a      	str	r2, [r7, #0]
 800b97a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800b97e:	f7f4 ff4f 	bl	8000820 <_dbg_check_lock>
 800b982:	486d      	ldr	r0, [pc, #436]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800b984:	f7f8 f82c 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800b988:	f7f4 ff5a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800b98c:	4b6b      	ldr	r3, [pc, #428]	; (800bb3c <oslib_test_009_002_execute.lto_priv.0+0x1cc>)
 800b98e:	681a      	ldr	r2, [r3, #0]
 800b990:	429a      	cmp	r2, r3
 800b992:	d004      	beq.n	800b99e <oslib_test_009_002_execute.lto_priv.0+0x2e>
 800b994:	6999      	ldr	r1, [r3, #24]
 800b996:	6893      	ldr	r3, [r2, #8]
 800b998:	688a      	ldr	r2, [r1, #8]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d359      	bcc.n	800ba52 <oslib_test_009_002_execute.lto_priv.0+0xe2>
 800b99e:	2300      	movs	r3, #0
 800b9a0:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800b9a4:	4d64      	ldr	r5, [pc, #400]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800b9a6:	f855 4f24 	ldr.w	r4, [r5, #36]!
  while (p != (dyn_element_t *)dlp) {
 800b9aa:	42ac      	cmp	r4, r5
 800b9ac:	d01b      	beq.n	800b9e6 <oslib_test_009_002_execute.lto_priv.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b9ae:	4e64      	ldr	r6, [pc, #400]	; (800bb40 <oslib_test_009_002_execute.lto_priv.0+0x1d0>)
 800b9b0:	e002      	b.n	800b9b8 <oslib_test_009_002_execute.lto_priv.0+0x48>
    p = p->next;
 800b9b2:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800b9b4:	42ac      	cmp	r4, r5
 800b9b6:	d016      	beq.n	800b9e6 <oslib_test_009_002_execute.lto_priv.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	f104 0008 	add.w	r0, r4, #8
 800b9be:	f7f4 fc5a 	bl	8000276 <strcmp>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d1f5      	bne.n	800b9b2 <oslib_test_009_002_execute.lto_priv.0+0x42>
  if (dep != NULL) {
 800b9c6:	b174      	cbz	r4, 800b9e6 <oslib_test_009_002_execute.lto_priv.0+0x76>
    dep->refs++;
 800b9c8:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800b9ca:	485b      	ldr	r0, [pc, #364]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
    dep->refs++;
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800b9d0:	f7f8 f8f6 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	495b      	ldr	r1, [pc, #364]	; (800bb44 <oslib_test_009_002_execute.lto_priv.0+0x1d4>)
  test_global_fail     = true;
 800b9d8:	4a5b      	ldr	r2, [pc, #364]	; (800bb48 <oslib_test_009_002_execute.lto_priv.0+0x1d8>)
  test_failure_message = msg;
 800b9da:	485c      	ldr	r0, [pc, #368]	; (800bb4c <oslib_test_009_002_execute.lto_priv.0+0x1dc>)
 800b9dc:	4c5c      	ldr	r4, [pc, #368]	; (800bb50 <oslib_test_009_002_execute.lto_priv.0+0x1e0>)
  test_local_fail      = true;
 800b9de:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800b9e0:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800b9e2:	7013      	strb	r3, [r2, #0]
}
 800b9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b9e6:	4854      	ldr	r0, [pc, #336]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800b9e8:	f7f8 f8ea 	bl	8003bc0 <chMtxUnlock>
  test_set_step(2);
 800b9ec:	2302      	movs	r3, #2
  F_LOCK();
 800b9ee:	4852      	ldr	r0, [pc, #328]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800b9f0:	603b      	str	r3, [r7, #0]
 800b9f2:	f7f8 f875 	bl	8003ae0 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800b9f6:	2308      	movs	r3, #8
 800b9f8:	2290      	movs	r2, #144	; 0x90
 800b9fa:	4956      	ldr	r1, [pc, #344]	; (800bb54 <oslib_test_009_002_execute.lto_priv.0+0x1e4>)
 800b9fc:	4850      	ldr	r0, [pc, #320]	; (800bb40 <oslib_test_009_002_execute.lto_priv.0+0x1d0>)
 800b9fe:	f7f8 ffcf 	bl	80049a0 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800ba02:	4604      	mov	r4, r0
 800ba04:	b340      	cbz	r0, 800ba58 <oslib_test_009_002_execute.lto_priv.0+0xe8>
    memset((void *)(dbp + 1), 0, size);
 800ba06:	2280      	movs	r2, #128	; 0x80
 800ba08:	2100      	movs	r1, #0
 800ba0a:	f104 0010 	add.w	r0, r4, #16
 800ba0e:	f003 fba4 	bl	800f15a <memset>
  F_UNLOCK();
 800ba12:	4849      	ldr	r0, [pc, #292]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800ba14:	f7f8 f8d4 	bl	8003bc0 <chMtxUnlock>
  test_set_step(3);
 800ba18:	2303      	movs	r3, #3
  F_LOCK();
 800ba1a:	4847      	ldr	r0, [pc, #284]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800ba1c:	603b      	str	r3, [r7, #0]
 800ba1e:	f7f8 f85f 	bl	8003ae0 <chMtxLock>
  dbp = (dyn_buffer_t *)dyn_create_object_heap(name,
 800ba22:	2308      	movs	r3, #8
 800ba24:	2290      	movs	r2, #144	; 0x90
 800ba26:	494b      	ldr	r1, [pc, #300]	; (800bb54 <oslib_test_009_002_execute.lto_priv.0+0x1e4>)
 800ba28:	4845      	ldr	r0, [pc, #276]	; (800bb40 <oslib_test_009_002_execute.lto_priv.0+0x1d0>)
 800ba2a:	f7f8 ffb9 	bl	80049a0 <dyn_create_object_heap.lto_priv.0>
  if (dbp != NULL) {
 800ba2e:	b1f8      	cbz	r0, 800ba70 <oslib_test_009_002_execute.lto_priv.0+0x100>
    memset((void *)(dbp + 1), 0, size);
 800ba30:	2280      	movs	r2, #128	; 0x80
 800ba32:	2100      	movs	r1, #0
 800ba34:	3010      	adds	r0, #16
 800ba36:	f003 fb90 	bl	800f15a <memset>
  F_UNLOCK();
 800ba3a:	483f      	ldr	r0, [pc, #252]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800ba3c:	f7f8 f8c0 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800ba40:	2301      	movs	r3, #1
 800ba42:	4940      	ldr	r1, [pc, #256]	; (800bb44 <oslib_test_009_002_execute.lto_priv.0+0x1d4>)
  test_global_fail     = true;
 800ba44:	4a40      	ldr	r2, [pc, #256]	; (800bb48 <oslib_test_009_002_execute.lto_priv.0+0x1d8>)
  test_failure_message = msg;
 800ba46:	4841      	ldr	r0, [pc, #260]	; (800bb4c <oslib_test_009_002_execute.lto_priv.0+0x1dc>)
 800ba48:	4c43      	ldr	r4, [pc, #268]	; (800bb58 <oslib_test_009_002_execute.lto_priv.0+0x1e8>)
  test_local_fail      = true;
 800ba4a:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800ba4c:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800ba4e:	7013      	strb	r3, [r2, #0]
}
 800ba50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba52:	4842      	ldr	r0, [pc, #264]	; (800bb5c <oslib_test_009_002_execute.lto_priv.0+0x1ec>)
 800ba54:	f7f4 fe8c 	bl	8000770 <chSysHalt>
 800ba58:	4837      	ldr	r0, [pc, #220]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800ba5a:	f7f8 f8b1 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800ba5e:	2301      	movs	r3, #1
 800ba60:	4938      	ldr	r1, [pc, #224]	; (800bb44 <oslib_test_009_002_execute.lto_priv.0+0x1d4>)
  test_global_fail     = true;
 800ba62:	4a39      	ldr	r2, [pc, #228]	; (800bb48 <oslib_test_009_002_execute.lto_priv.0+0x1d8>)
  test_failure_message = msg;
 800ba64:	4839      	ldr	r0, [pc, #228]	; (800bb4c <oslib_test_009_002_execute.lto_priv.0+0x1dc>)
 800ba66:	4c3e      	ldr	r4, [pc, #248]	; (800bb60 <oslib_test_009_002_execute.lto_priv.0+0x1f0>)
  test_local_fail      = true;
 800ba68:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800ba6a:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800ba6c:	7013      	strb	r3, [r2, #0]
 800ba6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba70:	4831      	ldr	r0, [pc, #196]	; (800bb38 <oslib_test_009_002_execute.lto_priv.0+0x1c8>)
 800ba72:	f7f8 f8a5 	bl	8003bc0 <chMtxUnlock>
  test_set_step(4);
 800ba76:	2304      	movs	r3, #4
 800ba78:	603b      	str	r3, [r7, #0]
    dbp1 = chFactoryFindBuffer("mybuf");
 800ba7a:	f7ff ff29 	bl	800b8d0 <chFactoryFindBuffer.constprop.0>
  if (!condition)
 800ba7e:	4605      	mov	r5, r0
 800ba80:	2800      	cmp	r0, #0
 800ba82:	d04e      	beq.n	800bb22 <oslib_test_009_002_execute.lto_priv.0+0x1b2>
    test_assert(dbp == dbp1, "object reference mismatch");
 800ba84:	1b28      	subs	r0, r5, r4
 800ba86:	fab0 f080 	clz	r0, r0
 800ba8a:	4936      	ldr	r1, [pc, #216]	; (800bb64 <oslib_test_009_002_execute.lto_priv.0+0x1f4>)
 800ba8c:	0940      	lsrs	r0, r0, #5
 800ba8e:	f7f9 ff17 	bl	80058c0 <_test_assert>
 800ba92:	2800      	cmp	r0, #0
 800ba94:	d1a6      	bne.n	800b9e4 <oslib_test_009_002_execute.lto_priv.0+0x74>
    test_assert(dbp1->element.refs == 2, "object reference mismatch");
 800ba96:	6868      	ldr	r0, [r5, #4]
 800ba98:	4932      	ldr	r1, [pc, #200]	; (800bb64 <oslib_test_009_002_execute.lto_priv.0+0x1f4>)
 800ba9a:	f1a0 0002 	sub.w	r0, r0, #2
 800ba9e:	fab0 f080 	clz	r0, r0
 800baa2:	0940      	lsrs	r0, r0, #5
 800baa4:	f7f9 ff0c 	bl	80058c0 <_test_assert>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	d19b      	bne.n	800b9e4 <oslib_test_009_002_execute.lto_priv.0+0x74>
 800baac:	6868      	ldr	r0, [r5, #4]
    test_assert(dbp2->element.refs == 3, "object reference mismatch");
 800baae:	492d      	ldr	r1, [pc, #180]	; (800bb64 <oslib_test_009_002_execute.lto_priv.0+0x1f4>)
 800bab0:	3001      	adds	r0, #1
 800bab2:	6068      	str	r0, [r5, #4]
 800bab4:	f1a0 0003 	sub.w	r0, r0, #3
 800bab8:	fab0 f080 	clz	r0, r0
 800babc:	0940      	lsrs	r0, r0, #5
 800babe:	f7f9 feff 	bl	80058c0 <_test_assert>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d18e      	bne.n	800b9e4 <oslib_test_009_002_execute.lto_priv.0+0x74>
    chFactoryReleaseBuffer(dbp2);
 800bac6:	4628      	mov	r0, r5
 800bac8:	f7f9 f832 	bl	8004b30 <chFactoryReleaseBuffer>
    test_assert(dbp1->element.refs == 2, "references mismatch");
 800bacc:	6868      	ldr	r0, [r5, #4]
 800bace:	4926      	ldr	r1, [pc, #152]	; (800bb68 <oslib_test_009_002_execute.lto_priv.0+0x1f8>)
 800bad0:	f1a0 0002 	sub.w	r0, r0, #2
 800bad4:	fab0 f080 	clz	r0, r0
 800bad8:	0940      	lsrs	r0, r0, #5
 800bada:	f7f9 fef1 	bl	80058c0 <_test_assert>
 800bade:	2800      	cmp	r0, #0
 800bae0:	d180      	bne.n	800b9e4 <oslib_test_009_002_execute.lto_priv.0+0x74>
    chFactoryReleaseBuffer(dbp1);
 800bae2:	4628      	mov	r0, r5
 800bae4:	f7f9 f824 	bl	8004b30 <chFactoryReleaseBuffer>
    test_assert(dbp->element.refs == 1, "references mismatch");
 800bae8:	6860      	ldr	r0, [r4, #4]
 800baea:	491f      	ldr	r1, [pc, #124]	; (800bb68 <oslib_test_009_002_execute.lto_priv.0+0x1f8>)
 800baec:	f1a0 0001 	sub.w	r0, r0, #1
 800baf0:	fab0 f080 	clz	r0, r0
 800baf4:	0940      	lsrs	r0, r0, #5
 800baf6:	f7f9 fee3 	bl	80058c0 <_test_assert>
 800bafa:	2800      	cmp	r0, #0
 800bafc:	f47f af72 	bne.w	800b9e4 <oslib_test_009_002_execute.lto_priv.0+0x74>
  test_set_step(5);
 800bb00:	2305      	movs	r3, #5
    chFactoryReleaseBuffer(dbp);
 800bb02:	4620      	mov	r0, r4
  test_set_step(5);
 800bb04:	603b      	str	r3, [r7, #0]
    chFactoryReleaseBuffer(dbp);
 800bb06:	f7f9 f813 	bl	8004b30 <chFactoryReleaseBuffer>
  test_set_step(6);
 800bb0a:	2306      	movs	r3, #6
 800bb0c:	603b      	str	r3, [r7, #0]
    dbp = chFactoryFindBuffer("mybuf");
 800bb0e:	f7ff fedf 	bl	800b8d0 <chFactoryFindBuffer.constprop.0>
}
 800bb12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(dbp == NULL, "found");
 800bb16:	fab0 f080 	clz	r0, r0
 800bb1a:	490d      	ldr	r1, [pc, #52]	; (800bb50 <oslib_test_009_002_execute.lto_priv.0+0x1e0>)
 800bb1c:	0940      	lsrs	r0, r0, #5
 800bb1e:	f7f9 becf 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 800bb22:	2301      	movs	r3, #1
 800bb24:	4907      	ldr	r1, [pc, #28]	; (800bb44 <oslib_test_009_002_execute.lto_priv.0+0x1d4>)
  test_global_fail     = true;
 800bb26:	4a08      	ldr	r2, [pc, #32]	; (800bb48 <oslib_test_009_002_execute.lto_priv.0+0x1d8>)
  test_failure_message = msg;
 800bb28:	4808      	ldr	r0, [pc, #32]	; (800bb4c <oslib_test_009_002_execute.lto_priv.0+0x1dc>)
 800bb2a:	4c10      	ldr	r4, [pc, #64]	; (800bb6c <oslib_test_009_002_execute.lto_priv.0+0x1fc>)
  test_local_fail      = true;
 800bb2c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800bb2e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800bb30:	7013      	strb	r3, [r2, #0]
}
 800bb32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb34:	20001d3c 	.word	0x20001d3c
 800bb38:	200015f8 	.word	0x200015f8
 800bb3c:	20000d70 	.word	0x20000d70
 800bb40:	08011dcc 	.word	0x08011dcc
 800bb44:	20001d39 	.word	0x20001d39
 800bb48:	20001d38 	.word	0x20001d38
 800bb4c:	20001d34 	.word	0x20001d34
 800bb50:	08011e0c 	.word	0x08011e0c
 800bb54:	2000161c 	.word	0x2000161c
 800bb58:	08011dfc 	.word	0x08011dfc
 800bb5c:	08010f48 	.word	0x08010f48
 800bb60:	08011dec 	.word	0x08011dec
 800bb64:	08011e14 	.word	0x08011e14
 800bb68:	08011e30 	.word	0x08011e30
 800bb6c:	08011e08 	.word	0x08011e08

0800bb70 <chFactoryFindObject.constprop.0>:
 800bb70:	2320      	movs	r3, #32
registered_object_t *chFactoryFindObject(const char *name) {
 800bb72:	b570      	push	{r4, r5, r6, lr}
 800bb74:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800bb78:	f7f4 fe52 	bl	8000820 <_dbg_check_lock>
 800bb7c:	481e      	ldr	r0, [pc, #120]	; (800bbf8 <chFactoryFindObject.constprop.0+0x88>)
 800bb7e:	f7f7 ff2f 	bl	80039e0 <chMtxLockS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800bb82:	4b1e      	ldr	r3, [pc, #120]	; (800bbfc <chFactoryFindObject.constprop.0+0x8c>)
 800bb84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb86:	bb42      	cbnz	r2, 800bbda <chFactoryFindObject.constprop.0+0x6a>
 800bb88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800bb8a:	2900      	cmp	r1, #0
 800bb8c:	dd25      	ble.n	800bbda <chFactoryFindObject.constprop.0+0x6a>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800bb8e:	6819      	ldr	r1, [r3, #0]
  _dbg_leave_lock();
 800bb90:	635a      	str	r2, [r3, #52]	; 0x34
 800bb92:	4299      	cmp	r1, r3
 800bb94:	d004      	beq.n	800bba0 <chFactoryFindObject.constprop.0+0x30>
 800bb96:	699a      	ldr	r2, [r3, #24]
 800bb98:	688b      	ldr	r3, [r1, #8]
 800bb9a:	6892      	ldr	r2, [r2, #8]
 800bb9c:	429a      	cmp	r2, r3
 800bb9e:	d31f      	bcc.n	800bbe0 <chFactoryFindObject.constprop.0+0x70>
 800bba0:	2300      	movs	r3, #0
 800bba2:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bba6:	4d14      	ldr	r5, [pc, #80]	; (800bbf8 <chFactoryFindObject.constprop.0+0x88>)
 800bba8:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800bbac:	42ac      	cmp	r4, r5
 800bbae:	d020      	beq.n	800bbf2 <chFactoryFindObject.constprop.0+0x82>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bbb0:	4e13      	ldr	r6, [pc, #76]	; (800bc00 <chFactoryFindObject.constprop.0+0x90>)
 800bbb2:	e002      	b.n	800bbba <chFactoryFindObject.constprop.0+0x4a>
    p = p->next;
 800bbb4:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bbb6:	42ac      	cmp	r4, r5
 800bbb8:	d015      	beq.n	800bbe6 <chFactoryFindObject.constprop.0+0x76>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bbba:	4631      	mov	r1, r6
 800bbbc:	f104 0008 	add.w	r0, r4, #8
 800bbc0:	f7f4 fb59 	bl	8000276 <strcmp>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	d1f5      	bne.n	800bbb4 <chFactoryFindObject.constprop.0+0x44>
  if (dep != NULL) {
 800bbc8:	b114      	cbz	r4, 800bbd0 <chFactoryFindObject.constprop.0+0x60>
    dep->refs++;
 800bbca:	6863      	ldr	r3, [r4, #4]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bbd0:	4809      	ldr	r0, [pc, #36]	; (800bbf8 <chFactoryFindObject.constprop.0+0x88>)
 800bbd2:	f7f7 fff5 	bl	8003bc0 <chMtxUnlock>
}
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	bd70      	pop	{r4, r5, r6, pc}
    chSysHalt("SV#5");
 800bbda:	480a      	ldr	r0, [pc, #40]	; (800bc04 <chFactoryFindObject.constprop.0+0x94>)
 800bbdc:	f7f4 fdc8 	bl	8000770 <chSysHalt>
 800bbe0:	4809      	ldr	r0, [pc, #36]	; (800bc08 <chFactoryFindObject.constprop.0+0x98>)
 800bbe2:	f7f4 fdc5 	bl	8000770 <chSysHalt>
  return NULL;
 800bbe6:	2400      	movs	r4, #0
  F_UNLOCK();
 800bbe8:	4803      	ldr	r0, [pc, #12]	; (800bbf8 <chFactoryFindObject.constprop.0+0x88>)
 800bbea:	f7f7 ffe9 	bl	8003bc0 <chMtxUnlock>
}
 800bbee:	4620      	mov	r0, r4
 800bbf0:	bd70      	pop	{r4, r5, r6, pc}
  return NULL;
 800bbf2:	461c      	mov	r4, r3
 800bbf4:	e7ec      	b.n	800bbd0 <chFactoryFindObject.constprop.0+0x60>
 800bbf6:	bf00      	nop
 800bbf8:	200015f8 	.word	0x200015f8
 800bbfc:	20000d70 	.word	0x20000d70
 800bc00:	08011dc4 	.word	0x08011dc4
 800bc04:	0800f214 	.word	0x0800f214
 800bc08:	08010f48 	.word	0x08010f48
 800bc0c:	00000000 	.word	0x00000000

0800bc10 <chFactoryRegisterObject.constprop.0>:
registered_object_t *chFactoryRegisterObject(const char *name,
 800bc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc14:	2320      	movs	r3, #32
 800bc16:	4680      	mov	r8, r0
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	4f36      	ldr	r7, [pc, #216]	; (800bcf8 <chFactoryRegisterObject.constprop.0+0xe8>)
  _dbg_check_lock();
 800bc1e:	f7f4 fdff 	bl	8000820 <_dbg_check_lock>
 800bc22:	4836      	ldr	r0, [pc, #216]	; (800bcfc <chFactoryRegisterObject.constprop.0+0xec>)
 800bc24:	f7f7 fedc 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800bc28:	f7f4 fe0a 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	42bb      	cmp	r3, r7
 800bc30:	d004      	beq.n	800bc3c <chFactoryRegisterObject.constprop.0+0x2c>
 800bc32:	69ba      	ldr	r2, [r7, #24]
 800bc34:	689b      	ldr	r3, [r3, #8]
 800bc36:	6892      	ldr	r2, [r2, #8]
 800bc38:	429a      	cmp	r2, r3
 800bc3a:	d31d      	bcc.n	800bc78 <chFactoryRegisterObject.constprop.0+0x68>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bc42:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 800bcfc <chFactoryRegisterObject.constprop.0+0xec>
 800bc46:	464d      	mov	r5, r9
 800bc48:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800bc4c:	42ac      	cmp	r4, r5
 800bc4e:	d016      	beq.n	800bc7e <chFactoryRegisterObject.constprop.0+0x6e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bc50:	4e2b      	ldr	r6, [pc, #172]	; (800bd00 <chFactoryRegisterObject.constprop.0+0xf0>)
 800bc52:	e002      	b.n	800bc5a <chFactoryRegisterObject.constprop.0+0x4a>
    p = p->next;
 800bc54:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bc56:	42ac      	cmp	r4, r5
 800bc58:	d011      	beq.n	800bc7e <chFactoryRegisterObject.constprop.0+0x6e>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	f104 0008 	add.w	r0, r4, #8
 800bc60:	f7f4 fb09 	bl	8000276 <strcmp>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d1f5      	bne.n	800bc54 <chFactoryRegisterObject.constprop.0+0x44>
  if (dep != NULL) {
 800bc68:	b14c      	cbz	r4, 800bc7e <chFactoryRegisterObject.constprop.0+0x6e>
    return NULL;
 800bc6a:	2400      	movs	r4, #0
  F_UNLOCK();
 800bc6c:	4823      	ldr	r0, [pc, #140]	; (800bcfc <chFactoryRegisterObject.constprop.0+0xec>)
 800bc6e:	f7f7 ffa7 	bl	8003bc0 <chMtxUnlock>
}
 800bc72:	4620      	mov	r0, r4
 800bc74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc78:	4822      	ldr	r0, [pc, #136]	; (800bd04 <chFactoryRegisterObject.constprop.0+0xf4>)
 800bc7a:	f7f4 fd79 	bl	8000770 <chSysHalt>
 800bc7e:	2320      	movs	r3, #32
 800bc80:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800bc84:	f7f4 fdcc 	bl	8000820 <_dbg_check_lock>
 800bc88:	481f      	ldr	r0, [pc, #124]	; (800bd08 <chFactoryRegisterObject.constprop.0+0xf8>)
 800bc8a:	f7f8 fdc1 	bl	8004810 <chPoolAllocI>
 800bc8e:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800bc90:	f7f4 fdd6 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	42bb      	cmp	r3, r7
 800bc98:	d004      	beq.n	800bca4 <chFactoryRegisterObject.constprop.0+0x94>
 800bc9a:	69ba      	ldr	r2, [r7, #24]
 800bc9c:	689b      	ldr	r3, [r3, #8]
 800bc9e:	6892      	ldr	r2, [r2, #8]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d326      	bcc.n	800bcf2 <chFactoryRegisterObject.constprop.0+0xe2>
 800bca4:	2300      	movs	r3, #0
 800bca6:	f383 8811 	msr	BASEPRI, r3
  if (dep == NULL) {
 800bcaa:	2c00      	cmp	r4, #0
 800bcac:	d0dd      	beq.n	800bc6a <chFactoryRegisterObject.constprop.0+0x5a>
    *dp++ = c;
 800bcae:	226d      	movs	r2, #109	; 0x6d
 800bcb0:	7222      	strb	r2, [r4, #8]
 800bcb2:	2279      	movs	r2, #121	; 0x79
 800bcb4:	f104 0309 	add.w	r3, r4, #9
 800bcb8:	4914      	ldr	r1, [pc, #80]	; (800bd0c <chFactoryRegisterObject.constprop.0+0xfc>)
 800bcba:	f104 0010 	add.w	r0, r4, #16
 800bcbe:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800bcc2:	b13a      	cbz	r2, 800bcd4 <chFactoryRegisterObject.constprop.0+0xc4>
 800bcc4:	4298      	cmp	r0, r3
 800bcc6:	d005      	beq.n	800bcd4 <chFactoryRegisterObject.constprop.0+0xc4>
    c = *sp++;
 800bcc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    *dp++ = c;
 800bccc:	f803 2b01 	strb.w	r2, [r3], #1
  } while ((c != (char)0) && (i > 0U));
 800bcd0:	2a00      	cmp	r2, #0
 800bcd2:	d1f7      	bne.n	800bcc4 <chFactoryRegisterObject.constprop.0+0xb4>
  dep->refs = (ucnt_t)1;
 800bcd4:	2301      	movs	r3, #1
  dep->next = dlp->next;
 800bcd6:	f8d9 2010 	ldr.w	r2, [r9, #16]
  F_UNLOCK();
 800bcda:	4808      	ldr	r0, [pc, #32]	; (800bcfc <chFactoryRegisterObject.constprop.0+0xec>)
  dep->refs = (ucnt_t)1;
 800bcdc:	e9c4 2300 	strd	r2, r3, [r4]
  dlp->next = (dyn_element_t *)dep;
 800bce0:	f8c9 4010 	str.w	r4, [r9, #16]
    rop->objp = objp;
 800bce4:	f8c4 8010 	str.w	r8, [r4, #16]
  F_UNLOCK();
 800bce8:	f7f7 ff6a 	bl	8003bc0 <chMtxUnlock>
}
 800bcec:	4620      	mov	r0, r4
 800bcee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcf2:	4807      	ldr	r0, [pc, #28]	; (800bd10 <chFactoryRegisterObject.constprop.0+0x100>)
 800bcf4:	f7f4 fd3c 	bl	8000770 <chSysHalt>
 800bcf8:	20000d70 	.word	0x20000d70
 800bcfc:	200015f8 	.word	0x200015f8
 800bd00:	08011dc4 	.word	0x08011dc4
 800bd04:	08010f48 	.word	0x08010f48
 800bd08:	2000160c 	.word	0x2000160c
 800bd0c:	08011dc5 	.word	0x08011dc5
 800bd10:	08010e40 	.word	0x08010e40
	...

0800bd20 <oslib_test_009_001_execute.lto_priv.0>:
  test_set_step(1);
 800bd20:	2201      	movs	r2, #1
static void oslib_test_009_001_execute(void) {
 800bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  test_set_step(1);
 800bd24:	4f69      	ldr	r7, [pc, #420]	; (800becc <oslib_test_009_001_execute.lto_priv.0+0x1ac>)
 800bd26:	2320      	movs	r3, #32
 800bd28:	603a      	str	r2, [r7, #0]
 800bd2a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800bd2e:	f7f4 fd77 	bl	8000820 <_dbg_check_lock>
 800bd32:	4867      	ldr	r0, [pc, #412]	; (800bed0 <oslib_test_009_001_execute.lto_priv.0+0x1b0>)
 800bd34:	f7f7 fe54 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800bd38:	f7f4 fd82 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800bd3c:	4b65      	ldr	r3, [pc, #404]	; (800bed4 <oslib_test_009_001_execute.lto_priv.0+0x1b4>)
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d005      	beq.n	800bd50 <oslib_test_009_001_execute.lto_priv.0+0x30>
 800bd44:	6999      	ldr	r1, [r3, #24]
 800bd46:	6893      	ldr	r3, [r2, #8]
 800bd48:	688a      	ldr	r2, [r1, #8]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	f0c0 80a0 	bcc.w	800be90 <oslib_test_009_001_execute.lto_priv.0+0x170>
 800bd50:	2300      	movs	r3, #0
 800bd52:	f383 8811 	msr	BASEPRI, r3
  dyn_element_t *p = dlp->next;
 800bd56:	4d5e      	ldr	r5, [pc, #376]	; (800bed0 <oslib_test_009_001_execute.lto_priv.0+0x1b0>)
 800bd58:	f855 4f10 	ldr.w	r4, [r5, #16]!
  while (p != (dyn_element_t *)dlp) {
 800bd5c:	42ac      	cmp	r4, r5
 800bd5e:	d01b      	beq.n	800bd98 <oslib_test_009_001_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bd60:	4e5d      	ldr	r6, [pc, #372]	; (800bed8 <oslib_test_009_001_execute.lto_priv.0+0x1b8>)
 800bd62:	e002      	b.n	800bd6a <oslib_test_009_001_execute.lto_priv.0+0x4a>
    p = p->next;
 800bd64:	6824      	ldr	r4, [r4, #0]
  while (p != (dyn_element_t *)dlp) {
 800bd66:	42ac      	cmp	r4, r5
 800bd68:	d016      	beq.n	800bd98 <oslib_test_009_001_execute.lto_priv.0+0x78>
    if (strncmp(p->name, name, CH_CFG_FACTORY_MAX_NAMES_LENGTH) == 0) {
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	f104 0008 	add.w	r0, r4, #8
 800bd70:	f7f4 fa81 	bl	8000276 <strcmp>
 800bd74:	2800      	cmp	r0, #0
 800bd76:	d1f5      	bne.n	800bd64 <oslib_test_009_001_execute.lto_priv.0+0x44>
  if (dep != NULL) {
 800bd78:	b174      	cbz	r4, 800bd98 <oslib_test_009_001_execute.lto_priv.0+0x78>
    dep->refs++;
 800bd7a:	6863      	ldr	r3, [r4, #4]
  F_UNLOCK();
 800bd7c:	4854      	ldr	r0, [pc, #336]	; (800bed0 <oslib_test_009_001_execute.lto_priv.0+0x1b0>)
    dep->refs++;
 800bd7e:	3301      	adds	r3, #1
 800bd80:	6063      	str	r3, [r4, #4]
  F_UNLOCK();
 800bd82:	f7f7 ff1d 	bl	8003bc0 <chMtxUnlock>
  test_local_fail      = true;
 800bd86:	2301      	movs	r3, #1
 800bd88:	4954      	ldr	r1, [pc, #336]	; (800bedc <oslib_test_009_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800bd8a:	4a55      	ldr	r2, [pc, #340]	; (800bee0 <oslib_test_009_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 800bd8c:	4855      	ldr	r0, [pc, #340]	; (800bee4 <oslib_test_009_001_execute.lto_priv.0+0x1c4>)
 800bd8e:	4c56      	ldr	r4, [pc, #344]	; (800bee8 <oslib_test_009_001_execute.lto_priv.0+0x1c8>)
  test_local_fail      = true;
 800bd90:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800bd92:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800bd94:	7013      	strb	r3, [r2, #0]
}
 800bd96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd98:	484d      	ldr	r0, [pc, #308]	; (800bed0 <oslib_test_009_001_execute.lto_priv.0+0x1b0>)
 800bd9a:	f7f7 ff11 	bl	8003bc0 <chMtxUnlock>
  test_set_step(2);
 800bd9e:	2302      	movs	r3, #2
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800bda0:	4852      	ldr	r0, [pc, #328]	; (800beec <oslib_test_009_001_execute.lto_priv.0+0x1cc>)
  test_set_step(2);
 800bda2:	603b      	str	r3, [r7, #0]
    rop = chFactoryRegisterObject("myobj", (void *)&myobj);
 800bda4:	f7ff ff34 	bl	800bc10 <chFactoryRegisterObject.constprop.0>
  if (!condition)
 800bda8:	4604      	mov	r4, r0
 800bdaa:	2800      	cmp	r0, #0
 800bdac:	d073      	beq.n	800be96 <oslib_test_009_001_execute.lto_priv.0+0x176>
  test_set_step(3);
 800bdae:	2303      	movs	r3, #3
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800bdb0:	484f      	ldr	r0, [pc, #316]	; (800bef0 <oslib_test_009_001_execute.lto_priv.0+0x1d0>)
  test_set_step(3);
 800bdb2:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryRegisterObject("myobj", (void *)&myobj);
 800bdb4:	f7ff ff2c 	bl	800bc10 <chFactoryRegisterObject.constprop.0>
 800bdb8:	2800      	cmp	r0, #0
 800bdba:	d175      	bne.n	800bea8 <oslib_test_009_001_execute.lto_priv.0+0x188>
  test_set_step(4);
 800bdbc:	2304      	movs	r3, #4
 800bdbe:	603b      	str	r3, [r7, #0]
    rop1 = chFactoryFindObject("myobj");
 800bdc0:	f7ff fed6 	bl	800bb70 <chFactoryFindObject.constprop.0>
 800bdc4:	4605      	mov	r5, r0
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	d077      	beq.n	800beba <oslib_test_009_001_execute.lto_priv.0+0x19a>
    test_assert(*(uint32_t *)(rop1->objp) == 0x55aa, "object mismatch");
 800bdca:	f245 56aa 	movw	r6, #21930	; 0x55aa
 800bdce:	6903      	ldr	r3, [r0, #16]
 800bdd0:	4948      	ldr	r1, [pc, #288]	; (800bef4 <oslib_test_009_001_execute.lto_priv.0+0x1d4>)
 800bdd2:	6818      	ldr	r0, [r3, #0]
 800bdd4:	1b80      	subs	r0, r0, r6
 800bdd6:	fab0 f080 	clz	r0, r0
 800bdda:	0940      	lsrs	r0, r0, #5
 800bddc:	f7f9 fd70 	bl	80058c0 <_test_assert>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d1d8      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
    test_assert(rop == rop1, "object reference mismatch");
 800bde4:	1b60      	subs	r0, r4, r5
 800bde6:	fab0 f080 	clz	r0, r0
 800bdea:	4943      	ldr	r1, [pc, #268]	; (800bef8 <oslib_test_009_001_execute.lto_priv.0+0x1d8>)
 800bdec:	0940      	lsrs	r0, r0, #5
 800bdee:	f7f9 fd67 	bl	80058c0 <_test_assert>
 800bdf2:	2800      	cmp	r0, #0
 800bdf4:	d1cf      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
    test_assert(rop1->element.refs == 2, "object reference mismatch");
 800bdf6:	6868      	ldr	r0, [r5, #4]
 800bdf8:	493f      	ldr	r1, [pc, #252]	; (800bef8 <oslib_test_009_001_execute.lto_priv.0+0x1d8>)
 800bdfa:	f1a0 0002 	sub.w	r0, r0, #2
 800bdfe:	fab0 f080 	clz	r0, r0
 800be02:	0940      	lsrs	r0, r0, #5
 800be04:	f7f9 fd5c 	bl	80058c0 <_test_assert>
 800be08:	2800      	cmp	r0, #0
 800be0a:	d1c4      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
 800be0c:	686b      	ldr	r3, [r5, #4]
    test_assert(*(uint32_t *)(rop2->objp) == 0x55aa, "object mismatch");
 800be0e:	4939      	ldr	r1, [pc, #228]	; (800bef4 <oslib_test_009_001_execute.lto_priv.0+0x1d4>)
 800be10:	3301      	adds	r3, #1
 800be12:	606b      	str	r3, [r5, #4]
 800be14:	692b      	ldr	r3, [r5, #16]
 800be16:	6818      	ldr	r0, [r3, #0]
 800be18:	1b80      	subs	r0, r0, r6
 800be1a:	fab0 f080 	clz	r0, r0
 800be1e:	0940      	lsrs	r0, r0, #5
 800be20:	f7f9 fd4e 	bl	80058c0 <_test_assert>
 800be24:	2800      	cmp	r0, #0
 800be26:	d1b6      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
    test_assert(rop2->element.refs == 3, "object reference mismatch");
 800be28:	6868      	ldr	r0, [r5, #4]
 800be2a:	4933      	ldr	r1, [pc, #204]	; (800bef8 <oslib_test_009_001_execute.lto_priv.0+0x1d8>)
 800be2c:	f1a0 0003 	sub.w	r0, r0, #3
 800be30:	fab0 f080 	clz	r0, r0
 800be34:	0940      	lsrs	r0, r0, #5
 800be36:	f7f9 fd43 	bl	80058c0 <_test_assert>
 800be3a:	2800      	cmp	r0, #0
 800be3c:	d1ab      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
    chFactoryReleaseObject(rop2);
 800be3e:	4628      	mov	r0, r5
 800be40:	f7f8 fe36 	bl	8004ab0 <chFactoryReleaseObject>
    test_assert(rop1->element.refs == 2, "references mismatch");
 800be44:	6868      	ldr	r0, [r5, #4]
 800be46:	492d      	ldr	r1, [pc, #180]	; (800befc <oslib_test_009_001_execute.lto_priv.0+0x1dc>)
 800be48:	1e82      	subs	r2, r0, #2
 800be4a:	4250      	negs	r0, r2
 800be4c:	4150      	adcs	r0, r2
 800be4e:	f7f9 fd37 	bl	80058c0 <_test_assert>
 800be52:	2800      	cmp	r0, #0
 800be54:	d19f      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
    chFactoryReleaseObject(rop1);
 800be56:	4628      	mov	r0, r5
 800be58:	f7f8 fe2a 	bl	8004ab0 <chFactoryReleaseObject>
    test_assert(rop->element.refs == 1, "references mismatch");
 800be5c:	6860      	ldr	r0, [r4, #4]
 800be5e:	4927      	ldr	r1, [pc, #156]	; (800befc <oslib_test_009_001_execute.lto_priv.0+0x1dc>)
 800be60:	1e43      	subs	r3, r0, #1
 800be62:	4258      	negs	r0, r3
 800be64:	4158      	adcs	r0, r3
 800be66:	f7f9 fd2b 	bl	80058c0 <_test_assert>
 800be6a:	2800      	cmp	r0, #0
 800be6c:	d193      	bne.n	800bd96 <oslib_test_009_001_execute.lto_priv.0+0x76>
  test_set_step(5);
 800be6e:	2305      	movs	r3, #5
    chFactoryReleaseObject(rop);
 800be70:	4620      	mov	r0, r4
  test_set_step(5);
 800be72:	603b      	str	r3, [r7, #0]
    chFactoryReleaseObject(rop);
 800be74:	f7f8 fe1c 	bl	8004ab0 <chFactoryReleaseObject>
  test_set_step(6);
 800be78:	2306      	movs	r3, #6
 800be7a:	603b      	str	r3, [r7, #0]
    rop = chFactoryFindObject("myobj");
 800be7c:	f7ff fe78 	bl	800bb70 <chFactoryFindObject.constprop.0>
}
 800be80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    test_assert(rop == NULL, "found");
 800be84:	fab0 f080 	clz	r0, r0
 800be88:	4917      	ldr	r1, [pc, #92]	; (800bee8 <oslib_test_009_001_execute.lto_priv.0+0x1c8>)
 800be8a:	0940      	lsrs	r0, r0, #5
 800be8c:	f7f9 bd18 	b.w	80058c0 <_test_assert>
 800be90:	481b      	ldr	r0, [pc, #108]	; (800bf00 <oslib_test_009_001_execute.lto_priv.0+0x1e0>)
 800be92:	f7f4 fc6d 	bl	8000770 <chSysHalt>
  test_local_fail      = true;
 800be96:	2301      	movs	r3, #1
 800be98:	4910      	ldr	r1, [pc, #64]	; (800bedc <oslib_test_009_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800be9a:	4a11      	ldr	r2, [pc, #68]	; (800bee0 <oslib_test_009_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 800be9c:	4811      	ldr	r0, [pc, #68]	; (800bee4 <oslib_test_009_001_execute.lto_priv.0+0x1c4>)
 800be9e:	4c19      	ldr	r4, [pc, #100]	; (800bf04 <oslib_test_009_001_execute.lto_priv.0+0x1e4>)
  test_local_fail      = true;
 800bea0:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800bea2:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800bea4:	7013      	strb	r3, [r2, #0]
}
 800bea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800bea8:	2301      	movs	r3, #1
 800beaa:	490c      	ldr	r1, [pc, #48]	; (800bedc <oslib_test_009_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800beac:	4a0c      	ldr	r2, [pc, #48]	; (800bee0 <oslib_test_009_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 800beae:	480d      	ldr	r0, [pc, #52]	; (800bee4 <oslib_test_009_001_execute.lto_priv.0+0x1c4>)
 800beb0:	4c15      	ldr	r4, [pc, #84]	; (800bf08 <oslib_test_009_001_execute.lto_priv.0+0x1e8>)
  test_local_fail      = true;
 800beb2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800beb4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800beb6:	7013      	strb	r3, [r2, #0]
 800beb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  test_local_fail      = true;
 800beba:	2301      	movs	r3, #1
 800bebc:	4907      	ldr	r1, [pc, #28]	; (800bedc <oslib_test_009_001_execute.lto_priv.0+0x1bc>)
  test_global_fail     = true;
 800bebe:	4a08      	ldr	r2, [pc, #32]	; (800bee0 <oslib_test_009_001_execute.lto_priv.0+0x1c0>)
  test_failure_message = msg;
 800bec0:	4808      	ldr	r0, [pc, #32]	; (800bee4 <oslib_test_009_001_execute.lto_priv.0+0x1c4>)
 800bec2:	4c12      	ldr	r4, [pc, #72]	; (800bf0c <oslib_test_009_001_execute.lto_priv.0+0x1ec>)
  test_local_fail      = true;
 800bec4:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800bec6:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800bec8:	7013      	strb	r3, [r2, #0]
 800beca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800becc:	20001d3c 	.word	0x20001d3c
 800bed0:	200015f8 	.word	0x200015f8
 800bed4:	20000d70 	.word	0x20000d70
 800bed8:	08011dc4 	.word	0x08011dc4
 800bedc:	20001d39 	.word	0x20001d39
 800bee0:	20001d38 	.word	0x20001d38
 800bee4:	20001d34 	.word	0x20001d34
 800bee8:	08011e0c 	.word	0x08011e0c
 800beec:	20000c94 	.word	0x20000c94
 800bef0:	20000c90 	.word	0x20000c90
 800bef4:	08011e64 	.word	0x08011e64
 800bef8:	08011e14 	.word	0x08011e14
 800befc:	08011e30 	.word	0x08011e30
 800bf00:	08010f48 	.word	0x08010f48
 800bf04:	08011e44 	.word	0x08011e44
 800bf08:	08011e54 	.word	0x08011e54
 800bf0c:	08011e08 	.word	0x08011e08

0800bf10 <chCacheGetObject.constprop.0>:
oc_object_t *chCacheGetObject(objects_cache_t *ocp,
 800bf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf14:	2320      	movs	r3, #32
 800bf16:	4605      	mov	r5, r0
 800bf18:	f383 8811 	msr	BASEPRI, r3
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800bf1c:	4e5e      	ldr	r6, [pc, #376]	; (800c098 <chCacheGetObject.constprop.0+0x188>)
  _dbg_check_lock();
 800bf1e:	f7f4 fc7f 	bl	8000820 <_dbg_check_lock>
 800bf22:	e9d6 3100 	ldrd	r3, r1, [r6]
 800bf26:	3b01      	subs	r3, #1
 800bf28:	402b      	ands	r3, r5
  objp = hhp->hash_next;
 800bf2a:	f851 4033 	ldr.w	r4, [r1, r3, lsl #3]
  hhp  = &ocp->hashp[OC_HASH_FUNCTION(ocp, group, key)];
 800bf2e:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
  while (objp != (oc_object_t *)hhp) {
 800bf32:	42a2      	cmp	r2, r4
 800bf34:	d103      	bne.n	800bf3e <chCacheGetObject.constprop.0+0x2e>
 800bf36:	e033      	b.n	800bfa0 <chCacheGetObject.constprop.0+0x90>
    objp = objp->hash_next;
 800bf38:	6824      	ldr	r4, [r4, #0]
  while (objp != (oc_object_t *)hhp) {
 800bf3a:	42a2      	cmp	r2, r4
 800bf3c:	d030      	beq.n	800bfa0 <chCacheGetObject.constprop.0+0x90>
    if ((objp->obj_key == key) && (objp->obj_group == group)) {
 800bf3e:	6963      	ldr	r3, [r4, #20]
 800bf40:	429d      	cmp	r5, r3
 800bf42:	d1f9      	bne.n	800bf38 <chCacheGetObject.constprop.0+0x28>
 800bf44:	6923      	ldr	r3, [r4, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d1f6      	bne.n	800bf38 <chCacheGetObject.constprop.0+0x28>
    chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
 800bf4a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800bf4c:	07ab      	lsls	r3, r5, #30
 800bf4e:	d576      	bpl.n	800c03e <chCacheGetObject.constprop.0+0x12e>
 800bf50:	f7f4 fcf6 	bl	8000940 <chDbgCheckClassI>
  return sp->cnt;
 800bf54:	6a26      	ldr	r6, [r4, #32]
      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
 800bf56:	f005 0301 	and.w	r3, r5, #1
    if (chSemGetCounterI(&objp->obj_sem) > (cnt_t)0) {
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	dd67      	ble.n	800c02e <chCacheGetObject.constprop.0+0x11e>
      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d06d      	beq.n	800c03e <chCacheGetObject.constprop.0+0x12e>
      LRU_REMOVE(objp);
 800bf62:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800bf66:	f025 0501 	bic.w	r5, r5, #1
      LRU_REMOVE(objp);
 800bf6a:	6093      	str	r3, [r2, #8]
  sp->cnt--;
 800bf6c:	3e01      	subs	r6, #1
 800bf6e:	60da      	str	r2, [r3, #12]
 800bf70:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800c09c <chCacheGetObject.constprop.0+0x18c>
      objp->obj_flags &= ~OC_FLAG_INLRU;
 800bf74:	6265      	str	r5, [r4, #36]	; 0x24
  chDbgCheckClassI();
 800bf76:	f7f4 fce3 	bl	8000940 <chDbgCheckClassI>
  sp->cnt--;
 800bf7a:	6226      	str	r6, [r4, #32]
  _dbg_check_unlock();
 800bf7c:	f7f4 fc60 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800bf80:	f8d8 3000 	ldr.w	r3, [r8]
 800bf84:	4543      	cmp	r3, r8
 800bf86:	d005      	beq.n	800bf94 <chCacheGetObject.constprop.0+0x84>
 800bf88:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800bf8c:	689b      	ldr	r3, [r3, #8]
 800bf8e:	6892      	ldr	r2, [r2, #8]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d357      	bcc.n	800c044 <chCacheGetObject.constprop.0+0x134>
 800bf94:	2300      	movs	r3, #0
 800bf96:	f383 8811 	msr	BASEPRI, r3
}
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    (void) chSemWaitS(&ocp->lru_sem);
 800bfa0:	4f3f      	ldr	r7, [pc, #252]	; (800c0a0 <chCacheGetObject.constprop.0+0x190>)
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800bfa2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800c09c <chCacheGetObject.constprop.0+0x18c>
    (void) ocp->writef(ocp, objp, true);
 800bfa6:	f1a7 0a30 	sub.w	sl, r7, #48	; 0x30
    (void) chSemWaitS(&ocp->lru_sem);
 800bfaa:	4638      	mov	r0, r7
 800bfac:	f7f7 fac8 	bl	8003540 <chSemWaitS>
    objp = ocp->lru.lru_prev;
 800bfb0:	6a34      	ldr	r4, [r6, #32]
    chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
 800bfb2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800bfb4:	07d3      	lsls	r3, r2, #31
 800bfb6:	d548      	bpl.n	800c04a <chCacheGetObject.constprop.0+0x13a>
 800bfb8:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
 800bfbc:	46c8      	mov	r8, r9
 800bfbe:	2900      	cmp	r1, #0
 800bfc0:	db46      	blt.n	800c050 <chCacheGetObject.constprop.0+0x140>
 800bfc2:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	dd42      	ble.n	800c050 <chCacheGetObject.constprop.0+0x140>
    chDbgAssert(chSemGetCounterI(&objp->obj_sem) == (cnt_t)1,
 800bfca:	6a23      	ldr	r3, [r4, #32]
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d13c      	bne.n	800c04a <chCacheGetObject.constprop.0+0x13a>
    LRU_REMOVE(objp);
 800bfd0:	e9d4 3002 	ldrd	r3, r0, [r4, #8]
 800bfd4:	f04f 0c00 	mov.w	ip, #0
 800bfd8:	6083      	str	r3, [r0, #8]
 800bfda:	60d8      	str	r0, [r3, #12]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800bfdc:	f022 0301 	bic.w	r3, r2, #1
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 800bfe0:	06d0      	lsls	r0, r2, #27
 800bfe2:	f8c4 c020 	str.w	ip, [r4, #32]
    objp->obj_flags &= ~OC_FLAG_INLRU;
 800bfe6:	6263      	str	r3, [r4, #36]	; 0x24
    if ((objp->obj_flags & OC_FLAG_LAZYWRITE) == 0U) {
 800bfe8:	d53b      	bpl.n	800c062 <chCacheGetObject.constprop.0+0x152>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800bfea:	bba1      	cbnz	r1, 800c056 <chCacheGetObject.constprop.0+0x146>
 800bfec:	f8d9 3000 	ldr.w	r3, [r9]
  _dbg_leave_lock();
 800bff0:	f8c9 1034 	str.w	r1, [r9, #52]	; 0x34
 800bff4:	454b      	cmp	r3, r9
 800bff6:	d005      	beq.n	800c004 <chCacheGetObject.constprop.0+0xf4>
 800bff8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800bffc:	689b      	ldr	r3, [r3, #8]
 800bffe:	6892      	ldr	r2, [r2, #8]
 800c000:	429a      	cmp	r2, r3
 800c002:	d31f      	bcc.n	800c044 <chCacheGetObject.constprop.0+0x134>
 800c004:	2300      	movs	r3, #0
 800c006:	f383 8811 	msr	BASEPRI, r3
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800c00a:	2322      	movs	r3, #34	; 0x22
    (void) ocp->writef(ocp, objp, true);
 800c00c:	4621      	mov	r1, r4
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_FORGET;
 800c00e:	6263      	str	r3, [r4, #36]	; 0x24
    (void) ocp->writef(ocp, objp, true);
 800c010:	2201      	movs	r2, #1
 800c012:	6c33      	ldr	r3, [r6, #64]	; 0x40
 800c014:	4650      	mov	r0, sl
 800c016:	4798      	blx	r3
 800c018:	2320      	movs	r3, #32
 800c01a:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c01e:	e9d9 230c 	ldrd	r2, r3, [r9, #48]	; 0x30
 800c022:	4313      	orrs	r3, r2
 800c024:	d11a      	bne.n	800c05c <chCacheGetObject.constprop.0+0x14c>
  _dbg_enter_lock();
 800c026:	2301      	movs	r3, #1
 800c028:	f8c9 3034 	str.w	r3, [r9, #52]	; 0x34
 800c02c:	e7bd      	b.n	800bfaa <chCacheGetObject.constprop.0+0x9a>
      chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == 0U, "in LRU");
 800c02e:	b933      	cbnz	r3, 800c03e <chCacheGetObject.constprop.0+0x12e>
      (void) chSemWaitS(&objp->obj_sem);
 800c030:	f104 0018 	add.w	r0, r4, #24
 800c034:	f7f7 fa84 	bl	8003540 <chSemWaitS>
 800c038:	f8df 8060 	ldr.w	r8, [pc, #96]	; 800c09c <chCacheGetObject.constprop.0+0x18c>
 800c03c:	e79e      	b.n	800bf7c <chCacheGetObject.constprop.0+0x6c>
    chDbgAssert((objp->obj_flags & OC_FLAG_INHASH) == OC_FLAG_INHASH,
 800c03e:	4819      	ldr	r0, [pc, #100]	; (800c0a4 <chCacheGetObject.constprop.0+0x194>)
 800c040:	f7f4 fb96 	bl	8000770 <chSysHalt>
 800c044:	4818      	ldr	r0, [pc, #96]	; (800c0a8 <chCacheGetObject.constprop.0+0x198>)
 800c046:	f7f4 fb93 	bl	8000770 <chSysHalt>
    chDbgAssert((objp->obj_flags & OC_FLAG_INLRU) == OC_FLAG_INLRU,
 800c04a:	4818      	ldr	r0, [pc, #96]	; (800c0ac <chCacheGetObject.constprop.0+0x19c>)
 800c04c:	f7f4 fb90 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 800c050:	4817      	ldr	r0, [pc, #92]	; (800c0b0 <chCacheGetObject.constprop.0+0x1a0>)
 800c052:	f7f4 fb8d 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800c056:	4817      	ldr	r0, [pc, #92]	; (800c0b4 <chCacheGetObject.constprop.0+0x1a4>)
 800c058:	f7f4 fb8a 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800c05c:	4816      	ldr	r0, [pc, #88]	; (800c0b8 <chCacheGetObject.constprop.0+0x1a8>)
 800c05e:	f7f4 fb87 	bl	8000770 <chSysHalt>
      if ((objp->obj_flags & OC_FLAG_INHASH) != 0U) {
 800c062:	0792      	lsls	r2, r2, #30
 800c064:	d504      	bpl.n	800c070 <chCacheGetObject.constprop.0+0x160>
        HASH_REMOVE(objp);
 800c066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c06a:	601a      	str	r2, [r3, #0]
 800c06c:	6822      	ldr	r2, [r4, #0]
 800c06e:	6053      	str	r3, [r2, #4]
    objp->obj_group = group;
 800c070:	2300      	movs	r3, #0
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800c072:	220a      	movs	r2, #10
    objp->obj_group = group;
 800c074:	6123      	str	r3, [r4, #16]
    objp->obj_flags = OC_FLAG_INHASH | OC_FLAG_NOTSYNC;
 800c076:	6262      	str	r2, [r4, #36]	; 0x24
    HASH_INSERT(ocp, objp, group, key);
 800c078:	e9d6 3200 	ldrd	r3, r2, [r6]
 800c07c:	3b01      	subs	r3, #1
    objp->obj_key   = key;
 800c07e:	6165      	str	r5, [r4, #20]
    HASH_INSERT(ocp, objp, group, key);
 800c080:	401d      	ands	r5, r3
 800c082:	f852 3035 	ldr.w	r3, [r2, r5, lsl #3]
 800c086:	eb02 01c5 	add.w	r1, r2, r5, lsl #3
 800c08a:	e9c4 3100 	strd	r3, r1, [r4]
 800c08e:	605c      	str	r4, [r3, #4]
 800c090:	f842 4035 	str.w	r4, [r2, r5, lsl #3]
 800c094:	e772      	b.n	800bf7c <chCacheGetObject.constprop.0+0x6c>
 800c096:	bf00      	nop
 800c098:	2000220c 	.word	0x2000220c
 800c09c:	20000d70 	.word	0x20000d70
 800c0a0:	2000223c 	.word	0x2000223c
 800c0a4:	08012214 	.word	0x08012214
 800c0a8:	080121a4 	.word	0x080121a4
 800c0ac:	080121f4 	.word	0x080121f4
 800c0b0:	0800f22c 	.word	0x0800f22c
 800c0b4:	0800f214 	.word	0x0800f214
 800c0b8:	0800f20c 	.word	0x0800f20c
 800c0bc:	00000000 	.word	0x00000000

0800c0c0 <oslib_test_006_001_execute.lto_priv.0>:
  ocp->lru.hash_next    = NULL;
 800c0c0:	2200      	movs	r2, #0
  ocp->hashn            = hashn;
 800c0c2:	2008      	movs	r0, #8
 800c0c4:	2104      	movs	r1, #4
 * - [6.1.5] Checking cached objects.
 * - [6.1.6] Checking non-cached objects.
 * .
 */

static void oslib_test_006_001_execute(void) {
 800c0c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0ca:	2501      	movs	r5, #1
  qp->next = qp;
 800c0cc:	4c13      	ldr	r4, [pc, #76]	; (800c11c <oslib_test_006_001_execute.lto_priv.0+0x5c>)
  ocp->hashp            = hashp;
 800c0ce:	4b14      	ldr	r3, [pc, #80]	; (800c120 <oslib_test_006_001_execute.lto_priv.0+0x60>)
  ocp->lru.hash_prev    = NULL;
 800c0d0:	e9c4 2205 	strd	r2, r2, [r4, #20]
  ocp->hashn            = hashn;
 800c0d4:	6020      	str	r0, [r4, #0]
 800c0d6:	f104 0224 	add.w	r2, r4, #36	; 0x24
  ocp->objvp            = objvp;
 800c0da:	4812      	ldr	r0, [pc, #72]	; (800c124 <oslib_test_006_001_execute.lto_priv.0+0x64>)
  qp->prev = qp;
 800c0dc:	e9c4 2209 	strd	r2, r2, [r4, #36]	; 0x24
 800c0e0:	63a1      	str	r1, [r4, #56]	; 0x38
  ocp->objn             = objn;
 800c0e2:	60a1      	str	r1, [r4, #8]
  qp->next = qp;
 800c0e4:	f104 0230 	add.w	r2, r4, #48	; 0x30
  ocp->readf            = readf;
 800c0e8:	490f      	ldr	r1, [pc, #60]	; (800c128 <oslib_test_006_001_execute.lto_priv.0+0x68>)
  ocp->objvp            = objvp;
 800c0ea:	6120      	str	r0, [r4, #16]
  qp->prev = qp;
 800c0ec:	e9c4 220c 	strd	r2, r2, [r4, #48]	; 0x30
  ocp->writef           = writef;
 800c0f0:	480e      	ldr	r0, [pc, #56]	; (800c12c <oslib_test_006_001_execute.lto_priv.0+0x6c>)
  ocp->readf            = readf;
 800c0f2:	63e1      	str	r1, [r4, #60]	; 0x3c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 800c0f4:	f104 0114 	add.w	r1, r4, #20
  ocp->writef           = writef;
 800c0f8:	6420      	str	r0, [r4, #64]	; 0x40
  ocp->hashp            = hashp;
 800c0fa:	6063      	str	r3, [r4, #4]
 800c0fc:	62e5      	str	r5, [r4, #44]	; 0x2c
  ocp->lru.lru_prev     = (oc_object_t *)&ocp->lru;
 800c0fe:	6221      	str	r1, [r4, #32]
 800c100:	f103 0040 	add.w	r0, r3, #64	; 0x40
    hashp->hash_prev = (oc_object_t *)hashp;
 800c104:	e9c3 3300 	strd	r3, r3, [r3]
    hashp++;
 800c108:	3308      	adds	r3, #8
  } while (hashp < &ocp->hashp[ocp->hashn]);
 800c10a:	4283      	cmp	r3, r0
 800c10c:	d1fa      	bne.n	800c104 <oslib_test_006_001_execute.lto_priv.0+0x44>
 800c10e:	4b05      	ldr	r3, [pc, #20]	; (800c124 <oslib_test_006_001_execute.lto_priv.0+0x64>)
 800c110:	2601      	movs	r6, #1
    objp->obj_group = 0U;
 800c112:	2000      	movs	r0, #0
  } while (hashp < &ocp->hashp[ocp->hashn]);
 800c114:	4a06      	ldr	r2, [pc, #24]	; (800c130 <oslib_test_006_001_execute.lto_priv.0+0x70>)
 800c116:	f103 07f0 	add.w	r7, r3, #240	; 0xf0
 800c11a:	e00c      	b.n	800c136 <oslib_test_006_001_execute.lto_priv.0+0x76>
 800c11c:	2000220c 	.word	0x2000220c
 800c120:	2000235c 	.word	0x2000235c
 800c124:	20002430 	.word	0x20002430
 800c128:	0800a191 	.word	0x0800a191
 800c12c:	080092e1 	.word	0x080092e1
 800c130:	20002220 	.word	0x20002220
  } while (objn > (ucnt_t)0);
 800c134:	462b      	mov	r3, r5
 800c136:	f103 0518 	add.w	r5, r3, #24
 800c13a:	e9c3 5506 	strd	r5, r5, [r3, #24]
    objvp = (void *)((uint8_t *)objvp + objsz);
 800c13e:	f103 053c 	add.w	r5, r3, #60	; 0x3c
  } while (objn > (ucnt_t)0);
 800c142:	42bd      	cmp	r5, r7
    LRU_INSERT_HEAD(ocp, objp);
 800c144:	609a      	str	r2, [r3, #8]
 800c146:	621e      	str	r6, [r3, #32]
 800c148:	60d9      	str	r1, [r3, #12]
 800c14a:	60d3      	str	r3, [r2, #12]
 800c14c:	461a      	mov	r2, r3
    objp->obj_key   = 0U;
 800c14e:	e9c3 0004 	strd	r0, r0, [r3, #16]
    objp->dptr      = NULL;
 800c152:	e9c3 6009 	strd	r6, r0, [r3, #36]	; 0x24
  } while (objn > (ucnt_t)0);
 800c156:	d1ed      	bne.n	800c134 <oslib_test_006_001_execute.lto_priv.0+0x74>
                      obj_write);
  }
  test_end_step(1);

  /* [6.1.2] Getting and releasing objects without initialization.*/
  test_set_step(2);
 800c158:	2302      	movs	r3, #2
  {
    uint32_t i;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800c15a:	f04f 0800 	mov.w	r8, #0
 800c15e:	f04f 0a20 	mov.w	sl, #32
 800c162:	4ab7      	ldr	r2, [pc, #732]	; (800c440 <oslib_test_006_001_execute.lto_priv.0+0x380>)
  test_set_step(2);
 800c164:	4fb7      	ldr	r7, [pc, #732]	; (800c444 <oslib_test_006_001_execute.lto_priv.0+0x384>)
  chCacheReleaseObjectI(ocp, objp);
 800c166:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 800c448 <oslib_test_006_001_execute.lto_priv.0+0x388>
 800c16a:	4db8      	ldr	r5, [pc, #736]	; (800c44c <oslib_test_006_001_execute.lto_priv.0+0x38c>)
 800c16c:	61e2      	str	r2, [r4, #28]
 800c16e:	603b      	str	r3, [r7, #0]
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 800c170:	4640      	mov	r0, r8
 800c172:	f7ff fecd 	bl	800bf10 <chCacheGetObject.constprop.0>

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c176:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t * objp = chCacheGetObject(&cache1, 0U, i);
 800c178:	4606      	mov	r6, r0
  if (!condition)
 800c17a:	079a      	lsls	r2, r3, #30
 800c17c:	f140 814a 	bpl.w	800c414 <oslib_test_006_001_execute.lto_priv.0+0x354>
 800c180:	071b      	lsls	r3, r3, #28
 800c182:	f140 8151 	bpl.w	800c428 <oslib_test_006_001_execute.lto_priv.0+0x368>
 800c186:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 800c18a:	f7f4 fb49 	bl	8000820 <_dbg_check_lock>
 800c18e:	4631      	mov	r1, r6
 800c190:	4648      	mov	r0, r9
 800c192:	f7f8 fb9d 	bl	80048d0 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800c196:	f7f6 fd5b 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800c19a:	f7f4 fb51 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c19e:	682b      	ldr	r3, [r5, #0]
 800c1a0:	42ab      	cmp	r3, r5
 800c1a2:	d005      	beq.n	800c1b0 <oslib_test_006_001_execute.lto_priv.0+0xf0>
 800c1a4:	69aa      	ldr	r2, [r5, #24]
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	6892      	ldr	r2, [r2, #8]
 800c1aa:	429a      	cmp	r2, r3
 800c1ac:	f0c0 8145 	bcc.w	800c43a <oslib_test_006_001_execute.lto_priv.0+0x37a>
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800c1b6:	f108 0801 	add.w	r8, r8, #1
 800c1ba:	f1b8 0f08 	cmp.w	r8, #8
 800c1be:	d1d7      	bne.n	800c170 <oslib_test_006_001_execute.lto_priv.0+0xb0>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "should not be in sync");

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 800c1c0:	49a3      	ldr	r1, [pc, #652]	; (800c450 <oslib_test_006_001_execute.lto_priv.0+0x390>)
 800c1c2:	48a4      	ldr	r0, [pc, #656]	; (800c454 <oslib_test_006_001_execute.lto_priv.0+0x394>)
 800c1c4:	f7fa f96c 	bl	80064a0 <_test_assert_sequence>
 800c1c8:	4606      	mov	r6, r0
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	f040 812a 	bne.w	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
  }
  test_end_step(2);

  /* [6.1.3] Getting and releasing objects with synchronous
     initialization.*/
  test_set_step(3);
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	f04f 0920 	mov.w	r9, #32
  /* Marking it as OC_FLAG_NOTSYNC because the read operation is going
     to corrupt it in case of failure. It is responsibility of the read
     implementation to clear it if the operation succeeds.*/
  objp->obj_flags |= OC_FLAG_NOTSYNC;

  return ocp->readf(ocp, objp, async);
 800c1d6:	f8df 8270 	ldr.w	r8, [pc, #624]	; 800c448 <oslib_test_006_001_execute.lto_priv.0+0x388>
 800c1da:	603b      	str	r3, [r7, #0]
  {
    uint32_t i;
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800c1dc:	4630      	mov	r0, r6
 800c1de:	f7ff fe97 	bl	800bf10 <chCacheGetObject.constprop.0>

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c1e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800c1e4:	4682      	mov	sl, r0
 800c1e6:	0798      	lsls	r0, r3, #30
 800c1e8:	f140 8114 	bpl.w	800c414 <oslib_test_006_001_execute.lto_priv.0+0x354>
 800c1ec:	0719      	lsls	r1, r3, #28
 800c1ee:	f140 8147 	bpl.w	800c480 <oslib_test_006_001_execute.lto_priv.0+0x3c0>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800c1f2:	f043 0308 	orr.w	r3, r3, #8
 800c1f6:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	4651      	mov	r1, sl
 800c1fe:	4640      	mov	r0, r8
 800c200:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c202:	4798      	blx	r3
 800c204:	2800      	cmp	r0, #0
 800c206:	f040 8144 	bne.w	800c492 <oslib_test_006_001_execute.lto_priv.0+0x3d2>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");

      error = chCacheReadObject(&cache1, objp, false);

      test_assert(error == false, "returned error");
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c20a:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800c20e:	079a      	lsls	r2, r3, #30
 800c210:	f140 8100 	bpl.w	800c414 <oslib_test_006_001_execute.lto_priv.0+0x354>
 800c214:	f013 0b08 	ands.w	fp, r3, #8
 800c218:	f040 8144 	bne.w	800c4a4 <oslib_test_006_001_execute.lto_priv.0+0x3e4>
 800c21c:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800c220:	f7f4 fafe 	bl	8000820 <_dbg_check_lock>
  chCacheReleaseObjectI(ocp, objp);
 800c224:	4651      	mov	r1, sl
 800c226:	4640      	mov	r0, r8
 800c228:	f7f8 fb52 	bl	80048d0 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800c22c:	f7f6 fd10 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800c230:	f7f4 fb06 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	42ab      	cmp	r3, r5
 800c238:	d005      	beq.n	800c246 <oslib_test_006_001_execute.lto_priv.0+0x186>
 800c23a:	69aa      	ldr	r2, [r5, #24]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	6892      	ldr	r2, [r2, #8]
 800c240:	429a      	cmp	r2, r3
 800c242:	f0c0 80fa 	bcc.w	800c43a <oslib_test_006_001_execute.lto_priv.0+0x37a>
 800c246:	2300      	movs	r3, #0
 800c248:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800c24c:	3601      	adds	r6, #1
 800c24e:	2e08      	cmp	r6, #8
 800c250:	d1c4      	bne.n	800c1dc <oslib_test_006_001_execute.lto_priv.0+0x11c>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 800c252:	497f      	ldr	r1, [pc, #508]	; (800c450 <oslib_test_006_001_execute.lto_priv.0+0x390>)
 800c254:	4880      	ldr	r0, [pc, #512]	; (800c458 <oslib_test_006_001_execute.lto_priv.0+0x398>)
 800c256:	f7fa f923 	bl	80064a0 <_test_assert_sequence>
 800c25a:	2800      	cmp	r0, #0
 800c25c:	f040 80e2 	bne.w	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
  }
  test_end_step(3);

  /* [6.1.4] Getting and releasing objects with asynchronous
     initialization.*/
  test_set_step(4);
 800c260:	2304      	movs	r3, #4
  {
    uint32_t i;
    bool error;

    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800c262:	4606      	mov	r6, r0
 800c264:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 800c448 <oslib_test_006_001_execute.lto_priv.0+0x388>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");

      error = chCacheReadObject(&cache1, objp, true);

      test_assert(error == false, "returned error");
 800c268:	f8df 91f0 	ldr.w	r9, [pc, #496]	; 800c45c <oslib_test_006_001_execute.lto_priv.0+0x39c>
  test_set_step(4);
 800c26c:	603b      	str	r3, [r7, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800c26e:	4630      	mov	r0, r6
 800c270:	f7ff fe4e 	bl	800bf10 <chCacheGetObject.constprop.0>
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c274:	6a43      	ldr	r3, [r0, #36]	; 0x24
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800c276:	4601      	mov	r1, r0
 800c278:	0798      	lsls	r0, r3, #30
 800c27a:	f140 80cb 	bpl.w	800c414 <oslib_test_006_001_execute.lto_priv.0+0x354>
 800c27e:	071a      	lsls	r2, r3, #28
 800c280:	f140 80fe 	bpl.w	800c480 <oslib_test_006_001_execute.lto_priv.0+0x3c0>
  objp->obj_flags |= OC_FLAG_NOTSYNC;
 800c284:	f043 0308 	orr.w	r3, r3, #8
 800c288:	624b      	str	r3, [r1, #36]	; 0x24
  return ocp->readf(ocp, objp, async);
 800c28a:	2201      	movs	r2, #1
 800c28c:	4640      	mov	r0, r8
 800c28e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800c290:	4798      	blx	r3
      test_assert(error == false, "returned error");
 800c292:	f080 0001 	eor.w	r0, r0, #1
 800c296:	4649      	mov	r1, r9
 800c298:	b2c0      	uxtb	r0, r0
 800c29a:	f7f9 fb11 	bl	80058c0 <_test_assert>
 800c29e:	2800      	cmp	r0, #0
 800c2a0:	f040 80c0 	bne.w	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>

      objp = chCacheGetObject(&cache1, 0U, i);
 800c2a4:	4630      	mov	r0, r6
 800c2a6:	f7ff fe33 	bl	800bf10 <chCacheGetObject.constprop.0>
 800c2aa:	4682      	mov	sl, r0

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c2ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c2ae:	496c      	ldr	r1, [pc, #432]	; (800c460 <oslib_test_006_001_execute.lto_priv.0+0x3a0>)
 800c2b0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800c2b4:	f7f9 fb04 	bl	80058c0 <_test_assert>
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	f040 80b3 	bne.w	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800c2be:	f8da 2024 	ldr.w	r2, [sl, #36]	; 0x24
 800c2c2:	4968      	ldr	r1, [pc, #416]	; (800c464 <oslib_test_006_001_execute.lto_priv.0+0x3a4>)
 800c2c4:	f082 0208 	eor.w	r2, r2, #8
 800c2c8:	f3c2 00c0 	ubfx	r0, r2, #3, #1
 800c2cc:	f7f9 faf8 	bl	80058c0 <_test_assert>
 800c2d0:	2800      	cmp	r0, #0
 800c2d2:	f040 80a7 	bne.w	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f382 8811 	msr	BASEPRI, r2
  _dbg_check_lock();
 800c2dc:	f7f4 faa0 	bl	8000820 <_dbg_check_lock>
  chCacheReleaseObjectI(ocp, objp);
 800c2e0:	4651      	mov	r1, sl
 800c2e2:	4640      	mov	r0, r8
 800c2e4:	f7f8 faf4 	bl	80048d0 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800c2e8:	f7f6 fcb2 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800c2ec:	f7f4 faa8 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c2f0:	682b      	ldr	r3, [r5, #0]
 800c2f2:	42ab      	cmp	r3, r5
 800c2f4:	d005      	beq.n	800c302 <oslib_test_006_001_execute.lto_priv.0+0x242>
 800c2f6:	69aa      	ldr	r2, [r5, #24]
 800c2f8:	689b      	ldr	r3, [r3, #8]
 800c2fa:	6892      	ldr	r2, [r2, #8]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	f0c0 809c 	bcc.w	800c43a <oslib_test_006_001_execute.lto_priv.0+0x37a>
 800c302:	2300      	movs	r3, #0
 800c304:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < (NUM_OBJECTS * 2); i++) {
 800c308:	3601      	adds	r6, #1
 800c30a:	2e08      	cmp	r6, #8
 800c30c:	d1af      	bne.n	800c26e <oslib_test_006_001_execute.lto_priv.0+0x1ae>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("abcdefgh", "unexpected tokens");
 800c30e:	4950      	ldr	r1, [pc, #320]	; (800c450 <oslib_test_006_001_execute.lto_priv.0+0x390>)
 800c310:	4851      	ldr	r0, [pc, #324]	; (800c458 <oslib_test_006_001_execute.lto_priv.0+0x398>)
 800c312:	f7fa f8c5 	bl	80064a0 <_test_assert_sequence>
 800c316:	2800      	cmp	r0, #0
 800c318:	f040 8084 	bne.w	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
  }
  test_end_step(4);

  /* [6.1.5] Checking cached objects.*/
  test_set_step(5);
 800c31c:	2305      	movs	r3, #5
  {
    uint32_t i;

    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800c31e:	2604      	movs	r6, #4
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c320:	f8df a13c 	ldr.w	sl, [pc, #316]	; 800c460 <oslib_test_006_001_execute.lto_priv.0+0x3a0>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800c324:	f8df 913c 	ldr.w	r9, [pc, #316]	; 800c464 <oslib_test_006_001_execute.lto_priv.0+0x3a4>
  chCacheReleaseObjectI(ocp, objp);
 800c328:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800c448 <oslib_test_006_001_execute.lto_priv.0+0x388>
  test_set_step(5);
 800c32c:	603b      	str	r3, [r7, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800c32e:	4630      	mov	r0, r6
 800c330:	f7ff fdee 	bl	800bf10 <chCacheGetObject.constprop.0>
 800c334:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c336:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c338:	4651      	mov	r1, sl
 800c33a:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800c33e:	f7f9 fabf 	bl	80058c0 <_test_assert>
 800c342:	2800      	cmp	r0, #0
 800c344:	d16e      	bne.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) == 0U, "not in sync");
 800c346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c348:	4649      	mov	r1, r9
 800c34a:	f083 0308 	eor.w	r3, r3, #8
 800c34e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
 800c352:	f7f9 fab5 	bl	80058c0 <_test_assert>
 800c356:	2800      	cmp	r0, #0
 800c358:	d164      	bne.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
 800c35a:	2320      	movs	r3, #32
 800c35c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800c360:	f7f4 fa5e 	bl	8000820 <_dbg_check_lock>
 800c364:	4621      	mov	r1, r4
 800c366:	4640      	mov	r0, r8
 800c368:	f7f8 fab2 	bl	80048d0 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800c36c:	f7f6 fc70 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800c370:	f7f4 fa66 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	42ab      	cmp	r3, r5
 800c378:	d004      	beq.n	800c384 <oslib_test_006_001_execute.lto_priv.0+0x2c4>
 800c37a:	69aa      	ldr	r2, [r5, #24]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	6892      	ldr	r2, [r2, #8]
 800c380:	429a      	cmp	r2, r3
 800c382:	d35a      	bcc.n	800c43a <oslib_test_006_001_execute.lto_priv.0+0x37a>
 800c384:	2300      	movs	r3, #0
 800c386:	f383 8811 	msr	BASEPRI, r3
    for (i = NUM_OBJECTS; i < (NUM_OBJECTS * 2); i++) {
 800c38a:	3601      	adds	r6, #1
 800c38c:	2e08      	cmp	r6, #8
 800c38e:	d1ce      	bne.n	800c32e <oslib_test_006_001_execute.lto_priv.0+0x26e>

      chCacheReleaseObject(&cache1, objp);
    }

    test_assert_sequence("", "unexpected tokens");
 800c390:	492f      	ldr	r1, [pc, #188]	; (800c450 <oslib_test_006_001_execute.lto_priv.0+0x390>)
 800c392:	4830      	ldr	r0, [pc, #192]	; (800c454 <oslib_test_006_001_execute.lto_priv.0+0x394>)
 800c394:	f7fa f884 	bl	80064a0 <_test_assert_sequence>
 800c398:	2800      	cmp	r0, #0
 800c39a:	d143      	bne.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
  }
  test_end_step(5);

  /* [6.1.6] Checking non-cached objects.*/
  test_set_step(6);
 800c39c:	2306      	movs	r3, #6
    uint32_t i;

    for (i = 0; i < NUM_OBJECTS; i++) {
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);

      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c39e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 800c460 <oslib_test_006_001_execute.lto_priv.0+0x3a0>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800c3a2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800c468 <oslib_test_006_001_execute.lto_priv.0+0x3a8>
  chCacheReleaseObjectI(ocp, objp);
 800c3a6:	4e28      	ldr	r6, [pc, #160]	; (800c448 <oslib_test_006_001_execute.lto_priv.0+0x388>)
  test_set_step(6);
 800c3a8:	603b      	str	r3, [r7, #0]
      oc_object_t *objp = chCacheGetObject(&cache1, 0U, i);
 800c3aa:	4658      	mov	r0, fp
 800c3ac:	f7ff fdb0 	bl	800bf10 <chCacheGetObject.constprop.0>
 800c3b0:	4604      	mov	r4, r0
      test_assert((objp->obj_flags & OC_FLAG_INHASH) != 0U, "not in hash");
 800c3b2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800c3b4:	4649      	mov	r1, r9
 800c3b6:	f3c0 0040 	ubfx	r0, r0, #1, #1
 800c3ba:	f7f9 fa81 	bl	80058c0 <_test_assert>
 800c3be:	bb88      	cbnz	r0, 800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
      test_assert((objp->obj_flags & OC_FLAG_NOTSYNC) != 0U, "in sync");
 800c3c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c3c2:	4641      	mov	r1, r8
 800c3c4:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 800c3c8:	f7f9 fa7a 	bl	80058c0 <_test_assert>
 800c3cc:	bb50      	cbnz	r0, 800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
 800c3ce:	2320      	movs	r3, #32
 800c3d0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800c3d4:	f7f4 fa24 	bl	8000820 <_dbg_check_lock>
 800c3d8:	4621      	mov	r1, r4
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7f8 fa78 	bl	80048d0 <chCacheReleaseObjectI>
  chSchRescheduleS();
 800c3e0:	f7f6 fc36 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800c3e4:	f7f4 fa2c 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c3e8:	682b      	ldr	r3, [r5, #0]
 800c3ea:	42ab      	cmp	r3, r5
 800c3ec:	d004      	beq.n	800c3f8 <oslib_test_006_001_execute.lto_priv.0+0x338>
 800c3ee:	69aa      	ldr	r2, [r5, #24]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	6892      	ldr	r2, [r2, #8]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d320      	bcc.n	800c43a <oslib_test_006_001_execute.lto_priv.0+0x37a>
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	f383 8811 	msr	BASEPRI, r3
    for (i = 0; i < NUM_OBJECTS; i++) {
 800c3fe:	f10b 0b01 	add.w	fp, fp, #1
 800c402:	f1bb 0f04 	cmp.w	fp, #4
 800c406:	d1d0      	bne.n	800c3aa <oslib_test_006_001_execute.lto_priv.0+0x2ea>
    }

    test_assert_sequence("", "unexpected tokens");
  }
  test_end_step(6);
}
 800c408:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_assert_sequence("", "unexpected tokens");
 800c40c:	4910      	ldr	r1, [pc, #64]	; (800c450 <oslib_test_006_001_execute.lto_priv.0+0x390>)
 800c40e:	4811      	ldr	r0, [pc, #68]	; (800c454 <oslib_test_006_001_execute.lto_priv.0+0x394>)
 800c410:	f7fa b846 	b.w	80064a0 <_test_assert_sequence>
  test_local_fail      = true;
 800c414:	2301      	movs	r3, #1
 800c416:	4915      	ldr	r1, [pc, #84]	; (800c46c <oslib_test_006_001_execute.lto_priv.0+0x3ac>)
  test_global_fail     = true;
 800c418:	4a15      	ldr	r2, [pc, #84]	; (800c470 <oslib_test_006_001_execute.lto_priv.0+0x3b0>)
  test_failure_message = msg;
 800c41a:	4816      	ldr	r0, [pc, #88]	; (800c474 <oslib_test_006_001_execute.lto_priv.0+0x3b4>)
 800c41c:	4c10      	ldr	r4, [pc, #64]	; (800c460 <oslib_test_006_001_execute.lto_priv.0+0x3a0>)
  test_local_fail      = true;
 800c41e:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800c420:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800c422:	7013      	strb	r3, [r2, #0]
}
 800c424:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  test_local_fail      = true;
 800c428:	2301      	movs	r3, #1
 800c42a:	4910      	ldr	r1, [pc, #64]	; (800c46c <oslib_test_006_001_execute.lto_priv.0+0x3ac>)
  test_global_fail     = true;
 800c42c:	4a10      	ldr	r2, [pc, #64]	; (800c470 <oslib_test_006_001_execute.lto_priv.0+0x3b0>)
  test_failure_message = msg;
 800c42e:	4811      	ldr	r0, [pc, #68]	; (800c474 <oslib_test_006_001_execute.lto_priv.0+0x3b4>)
 800c430:	4c11      	ldr	r4, [pc, #68]	; (800c478 <oslib_test_006_001_execute.lto_priv.0+0x3b8>)
  test_local_fail      = true;
 800c432:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800c434:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800c436:	7013      	strb	r3, [r2, #0]
  return true;
 800c438:	e7f4      	b.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
 800c43a:	4810      	ldr	r0, [pc, #64]	; (800c47c <oslib_test_006_001_execute.lto_priv.0+0x3bc>)
 800c43c:	f7f4 f998 	bl	8000770 <chSysHalt>
 800c440:	200024e4 	.word	0x200024e4
 800c444:	20001d3c 	.word	0x20001d3c
 800c448:	2000220c 	.word	0x2000220c
 800c44c:	20000d70 	.word	0x20000d70
 800c450:	08011c88 	.word	0x08011c88
 800c454:	0800f35c 	.word	0x0800f35c
 800c458:	08011c9c 	.word	0x08011c9c
 800c45c:	08011e98 	.word	0x08011e98
 800c460:	08011e74 	.word	0x08011e74
 800c464:	08011ea8 	.word	0x08011ea8
 800c468:	08011eac 	.word	0x08011eac
 800c46c:	20001d39 	.word	0x20001d39
 800c470:	20001d38 	.word	0x20001d38
 800c474:	20001d34 	.word	0x20001d34
 800c478:	08011e80 	.word	0x08011e80
 800c47c:	08012188 	.word	0x08012188
  test_local_fail      = true;
 800c480:	2301      	movs	r3, #1
 800c482:	490d      	ldr	r1, [pc, #52]	; (800c4b8 <oslib_test_006_001_execute.lto_priv.0+0x3f8>)
  test_global_fail     = true;
 800c484:	4a0d      	ldr	r2, [pc, #52]	; (800c4bc <oslib_test_006_001_execute.lto_priv.0+0x3fc>)
  test_failure_message = msg;
 800c486:	480e      	ldr	r0, [pc, #56]	; (800c4c0 <oslib_test_006_001_execute.lto_priv.0+0x400>)
 800c488:	4c0e      	ldr	r4, [pc, #56]	; (800c4c4 <oslib_test_006_001_execute.lto_priv.0+0x404>)
  test_local_fail      = true;
 800c48a:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800c48c:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800c48e:	7013      	strb	r3, [r2, #0]
  return true;
 800c490:	e7c8      	b.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
  test_local_fail      = true;
 800c492:	2301      	movs	r3, #1
 800c494:	4908      	ldr	r1, [pc, #32]	; (800c4b8 <oslib_test_006_001_execute.lto_priv.0+0x3f8>)
  test_global_fail     = true;
 800c496:	4a09      	ldr	r2, [pc, #36]	; (800c4bc <oslib_test_006_001_execute.lto_priv.0+0x3fc>)
  test_failure_message = msg;
 800c498:	4809      	ldr	r0, [pc, #36]	; (800c4c0 <oslib_test_006_001_execute.lto_priv.0+0x400>)
 800c49a:	4c0b      	ldr	r4, [pc, #44]	; (800c4c8 <oslib_test_006_001_execute.lto_priv.0+0x408>)
  test_local_fail      = true;
 800c49c:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800c49e:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800c4a0:	7013      	strb	r3, [r2, #0]
  return true;
 800c4a2:	e7bf      	b.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
  test_local_fail      = true;
 800c4a4:	2301      	movs	r3, #1
 800c4a6:	4904      	ldr	r1, [pc, #16]	; (800c4b8 <oslib_test_006_001_execute.lto_priv.0+0x3f8>)
  test_global_fail     = true;
 800c4a8:	4a04      	ldr	r2, [pc, #16]	; (800c4bc <oslib_test_006_001_execute.lto_priv.0+0x3fc>)
  test_failure_message = msg;
 800c4aa:	4805      	ldr	r0, [pc, #20]	; (800c4c0 <oslib_test_006_001_execute.lto_priv.0+0x400>)
 800c4ac:	4c07      	ldr	r4, [pc, #28]	; (800c4cc <oslib_test_006_001_execute.lto_priv.0+0x40c>)
  test_local_fail      = true;
 800c4ae:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800c4b0:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800c4b2:	7013      	strb	r3, [r2, #0]
  return true;
 800c4b4:	e7b6      	b.n	800c424 <oslib_test_006_001_execute.lto_priv.0+0x364>
 800c4b6:	bf00      	nop
 800c4b8:	20001d39 	.word	0x20001d39
 800c4bc:	20001d38 	.word	0x20001d38
 800c4c0:	20001d34 	.word	0x20001d34
 800c4c4:	08011eac 	.word	0x08011eac
 800c4c8:	08011e98 	.word	0x08011e98
 800c4cc:	08011ea8 	.word	0x08011ea8

0800c4d0 <chPipeReadTimeout.part.0.constprop.0>:
 *                      lower than @p n means that a timeout occurred or the
 *                      pipe went in reset state.
 *
 * @api
 */
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	460f      	mov	r7, r1
 800c4d6:	4606      	mov	r6, r0
  /* If the pipe is in reset state then returns immediately.*/
  if (pp->reset) {
    return (size_t)0;
  }

  PR_LOCK(pp);
 800c4d8:	485d      	ldr	r0, [pc, #372]	; (800c650 <chPipeReadTimeout.part.0.constprop.0+0x180>)
size_t chPipeReadTimeout(pipe_t *pp, uint8_t *bp,
 800c4da:	b083      	sub	sp, #12
 800c4dc:	f1a0 0820 	sub.w	r8, r0, #32
 800c4e0:	f04f 0920 	mov.w	r9, #32
  PR_LOCK(pp);
 800c4e4:	f7f7 fafc 	bl	8003ae0 <chMtxLock>
 800c4e8:	46ba      	mov	sl, r7
 800c4ea:	4d5a      	ldr	r5, [pc, #360]	; (800c654 <chPipeReadTimeout.part.0.constprop.0+0x184>)
 *
 * @api
 */
static inline size_t chPipeGetUsedCount(const pipe_t *pp) {

  return pp->cnt;
 800c4ec:	f1a8 0420 	sub.w	r4, r8, #32
 800c4f0:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800c4f4:	f7f4 f994 	bl	8000820 <_dbg_check_lock>
 800c4f8:	4640      	mov	r0, r8
 800c4fa:	f7f7 fa71 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800c4fe:	f7f4 f99f 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c502:	682b      	ldr	r3, [r5, #0]
 800c504:	42ab      	cmp	r3, r5
 800c506:	d004      	beq.n	800c512 <chPipeReadTimeout.part.0.constprop.0+0x42>
 800c508:	69aa      	ldr	r2, [r5, #24]
 800c50a:	689b      	ldr	r3, [r3, #8]
 800c50c:	6892      	ldr	r2, [r2, #8]
 800c50e:	429a      	cmp	r2, r3
 800c510:	d35a      	bcc.n	800c5c8 <chPipeReadTimeout.part.0.constprop.0+0xf8>
 800c512:	2300      	movs	r3, #0
 800c514:	f383 8811 	msr	BASEPRI, r3
  s1 = (size_t)(pp->top - pp->rdptr);
 800c518:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 800c51c:	4582      	cmp	sl, r0
 800c51e:	46d3      	mov	fp, sl
 800c520:	bf28      	it	cs
 800c522:	4683      	movcs	fp, r0
 800c524:	6862      	ldr	r2, [r4, #4]
  pp->cnt -= n;
 800c526:	eba0 000b 	sub.w	r0, r0, fp
  s1 = (size_t)(pp->top - pp->rdptr);
 800c52a:	1a52      	subs	r2, r2, r1
  if (n < s1) {
 800c52c:	4593      	cmp	fp, r2
  pp->cnt -= n;
 800c52e:	6120      	str	r0, [r4, #16]
  if (n < s1) {
 800c530:	d350      	bcc.n	800c5d4 <chPipeReadTimeout.part.0.constprop.0+0x104>
  else if (n > s1) {
 800c532:	d81b      	bhi.n	800c56c <chPipeReadTimeout.part.0.constprop.0+0x9c>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800c534:	465a      	mov	r2, fp
 800c536:	4630      	mov	r0, r6
 800c538:	f002 fe02 	bl	800f140 <memcpy>
    pp->rdptr = pp->buffer;
 800c53c:	6822      	ldr	r2, [r4, #0]
 800c53e:	60e2      	str	r2, [r4, #12]
  PC_UNLOCK(pp);
 800c540:	4640      	mov	r0, r8
 800c542:	f7f7 fb3d 	bl	8003bc0 <chMtxUnlock>

  while (n > 0U) {
    size_t done;

    done = pipe_read(pp, bp, n);
    if (done == (size_t)0) {
 800c546:	f1bb 0f00 	cmp.w	fp, #0
 800c54a:	d126      	bne.n	800c59a <chPipeReadTimeout.part.0.constprop.0+0xca>
 800c54c:	2220      	movs	r2, #32
 800c54e:	f382 8811 	msr	BASEPRI, r2
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c552:	e9d5 120c 	ldrd	r1, r2, [r5, #48]	; 0x30
 800c556:	ea51 0302 	orrs.w	r3, r1, r2
 800c55a:	d138      	bne.n	800c5ce <chPipeReadTimeout.part.0.constprop.0+0xfe>
  _dbg_enter_lock();
 800c55c:	2101      	movs	r1, #1
  chDbgAssert(*trp == NULL, "not NULL");
 800c55e:	69e2      	ldr	r2, [r4, #28]
 800c560:	6369      	str	r1, [r5, #52]	; 0x34
 800c562:	2a00      	cmp	r2, #0
 800c564:	d05e      	beq.n	800c624 <chPipeReadTimeout.part.0.constprop.0+0x154>
 800c566:	483c      	ldr	r0, [pc, #240]	; (800c658 <chPipeReadTimeout.part.0.constprop.0+0x188>)
 800c568:	f7f4 f902 	bl	8000770 <chSysHalt>
    s2 = n - s1;
 800c56c:	ebab 0302 	sub.w	r3, fp, r2
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800c570:	4630      	mov	r0, r6
    s2 = n - s1;
 800c572:	e9cd 3200 	strd	r3, r2, [sp]
    memcpy((void *)bp, (void *)pp->rdptr, s1);
 800c576:	f002 fde3 	bl	800f140 <memcpy>
    memcpy((void *)bp, (void *)pp->buffer, s2);
 800c57a:	9a01      	ldr	r2, [sp, #4]
 800c57c:	6821      	ldr	r1, [r4, #0]
 800c57e:	18b0      	adds	r0, r6, r2
 800c580:	9a00      	ldr	r2, [sp, #0]
 800c582:	f002 fddd 	bl	800f140 <memcpy>
    pp->rdptr = pp->buffer + s2;
 800c586:	6822      	ldr	r2, [r4, #0]
 800c588:	9b00      	ldr	r3, [sp, #0]
  PC_UNLOCK(pp);
 800c58a:	4640      	mov	r0, r8
    pp->rdptr = pp->buffer + s2;
 800c58c:	441a      	add	r2, r3
 800c58e:	60e2      	str	r2, [r4, #12]
  PC_UNLOCK(pp);
 800c590:	f7f7 fb16 	bl	8003bc0 <chMtxUnlock>
    if (done == (size_t)0) {
 800c594:	f1bb 0f00 	cmp.w	fp, #0
 800c598:	d0d8      	beq.n	800c54c <chPipeReadTimeout.part.0.constprop.0+0x7c>
        break;
      }
    }
    else {
      n  -= done;
      bp += done;
 800c59a:	445e      	add	r6, fp
 800c59c:	f389 8811 	msr	BASEPRI, r9
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c5a0:	e9d5 120c 	ldrd	r1, r2, [r5, #48]	; 0x30
 800c5a4:	4311      	orrs	r1, r2
 800c5a6:	d112      	bne.n	800c5ce <chPipeReadTimeout.part.0.constprop.0+0xfe>
  _dbg_enter_lock();
 800c5a8:	2201      	movs	r2, #1
  if (*trp != NULL) {
 800c5aa:	69a0      	ldr	r0, [r4, #24]
 800c5ac:	636a      	str	r2, [r5, #52]	; 0x34
 800c5ae:	b1f8      	cbz	r0, 800c5f0 <chPipeReadTimeout.part.0.constprop.0+0x120>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c5b0:	f890 2020 	ldrb.w	r2, [r0, #32]
 800c5b4:	2a03      	cmp	r2, #3
 800c5b6:	d115      	bne.n	800c5e4 <chPipeReadTimeout.part.0.constprop.0+0x114>
    *trp = NULL;
 800c5b8:	61a1      	str	r1, [r4, #24]
    chSchWakeupS(tp, msg);
 800c5ba:	f7f6 fac1 	bl	8002b40 <chSchWakeupS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c5be:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800c5c0:	b19a      	cbz	r2, 800c5ea <chPipeReadTimeout.part.0.constprop.0+0x11a>
    chSysHalt("SV#5");
 800c5c2:	4826      	ldr	r0, [pc, #152]	; (800c65c <chPipeReadTimeout.part.0.constprop.0+0x18c>)
 800c5c4:	f7f4 f8d4 	bl	8000770 <chSysHalt>
 800c5c8:	4825      	ldr	r0, [pc, #148]	; (800c660 <chPipeReadTimeout.part.0.constprop.0+0x190>)
 800c5ca:	f7f4 f8d1 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800c5ce:	4825      	ldr	r0, [pc, #148]	; (800c664 <chPipeReadTimeout.part.0.constprop.0+0x194>)
 800c5d0:	f7f4 f8ce 	bl	8000770 <chSysHalt>
    memcpy((void *)bp, (void *)pp->rdptr, n);
 800c5d4:	465a      	mov	r2, fp
 800c5d6:	4630      	mov	r0, r6
 800c5d8:	f002 fdb2 	bl	800f140 <memcpy>
    pp->rdptr += n;
 800c5dc:	68e2      	ldr	r2, [r4, #12]
 800c5de:	445a      	add	r2, fp
 800c5e0:	60e2      	str	r2, [r4, #12]
 800c5e2:	e7ad      	b.n	800c540 <chPipeReadTimeout.part.0.constprop.0+0x70>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c5e4:	4820      	ldr	r0, [pc, #128]	; (800c668 <chPipeReadTimeout.part.0.constprop.0+0x198>)
 800c5e6:	f7f4 f8c3 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c5ea:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800c5ec:	2a00      	cmp	r2, #0
 800c5ee:	dde8      	ble.n	800c5c2 <chPipeReadTimeout.part.0.constprop.0+0xf2>
  _dbg_leave_lock();
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	636a      	str	r2, [r5, #52]	; 0x34
 800c5f4:	682a      	ldr	r2, [r5, #0]
 800c5f6:	42aa      	cmp	r2, r5
 800c5f8:	d004      	beq.n	800c604 <chPipeReadTimeout.part.0.constprop.0+0x134>
 800c5fa:	69a9      	ldr	r1, [r5, #24]
 800c5fc:	6892      	ldr	r2, [r2, #8]
 800c5fe:	6889      	ldr	r1, [r1, #8]
 800c600:	4291      	cmp	r1, r2
 800c602:	d31f      	bcc.n	800c644 <chPipeReadTimeout.part.0.constprop.0+0x174>
 800c604:	2300      	movs	r3, #0
      n  -= done;
 800c606:	ebaa 0a0b 	sub.w	sl, sl, fp
 800c60a:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 800c60e:	f1ba 0f00 	cmp.w	sl, #0
 800c612:	f47f af6d 	bne.w	800c4f0 <chPipeReadTimeout.part.0.constprop.0+0x20>
      /* Resuming the writer, if present.*/
      chThdResume(&pp->wtr, MSG_OK);
    }
  }

  PR_UNLOCK(pp);
 800c616:	480e      	ldr	r0, [pc, #56]	; (800c650 <chPipeReadTimeout.part.0.constprop.0+0x180>)
 800c618:	f7f7 fad2 	bl	8003bc0 <chMtxUnlock>

  return max - n;
}
 800c61c:	4638      	mov	r0, r7
 800c61e:	b003      	add	sp, #12
 800c620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c624:	682b      	ldr	r3, [r5, #0]
  return ch.rlist.current;
 800c626:	69aa      	ldr	r2, [r5, #24]
 800c628:	42ab      	cmp	r3, r5
 800c62a:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
 800c62e:	d003      	beq.n	800c638 <chPipeReadTimeout.part.0.constprop.0+0x168>
 800c630:	6892      	ldr	r2, [r2, #8]
 800c632:	689b      	ldr	r3, [r3, #8]
 800c634:	429a      	cmp	r2, r3
 800c636:	d308      	bcc.n	800c64a <chPipeReadTimeout.part.0.constprop.0+0x17a>
 800c638:	2300      	movs	r3, #0
 800c63a:	f383 8811 	msr	BASEPRI, r3
  return max - n;
 800c63e:	eba7 070a 	sub.w	r7, r7, sl
 800c642:	e7e8      	b.n	800c616 <chPipeReadTimeout.part.0.constprop.0+0x146>
 800c644:	4809      	ldr	r0, [pc, #36]	; (800c66c <chPipeReadTimeout.part.0.constprop.0+0x19c>)
 800c646:	f7f4 f893 	bl	8000770 <chSysHalt>
 800c64a:	4809      	ldr	r0, [pc, #36]	; (800c670 <chPipeReadTimeout.part.0.constprop.0+0x1a0>)
 800c64c:	f7f4 f890 	bl	8000770 <chSysHalt>
 800c650:	20000cd8 	.word	0x20000cd8
 800c654:	20000d70 	.word	0x20000d70
 800c658:	08010ec0 	.word	0x08010ec0
 800c65c:	0800f214 	.word	0x0800f214
 800c660:	08010f48 	.word	0x08010f48
 800c664:	0800f20c 	.word	0x0800f20c
 800c668:	08012194 	.word	0x08012194
 800c66c:	08010de4 	.word	0x08010de4
 800c670:	080121e8 	.word	0x080121e8
	...

0800c680 <chPipeReadTimeout.constprop.0>:
  if (pp->reset) {
 800c680:	4b03      	ldr	r3, [pc, #12]	; (800c690 <chPipeReadTimeout.constprop.0+0x10>)
 800c682:	7d1b      	ldrb	r3, [r3, #20]
 800c684:	b10b      	cbz	r3, 800c68a <chPipeReadTimeout.constprop.0+0xa>
}
 800c686:	2000      	movs	r0, #0
 800c688:	4770      	bx	lr
 800c68a:	f7ff bf21 	b.w	800c4d0 <chPipeReadTimeout.part.0.constprop.0>
 800c68e:	bf00      	nop
 800c690:	20000c98 	.word	0x20000c98
	...

0800c6a0 <chPipeWriteTimeout.part.0.constprop.0>:
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800c6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a4:	4607      	mov	r7, r0
  PW_LOCK(pp);
 800c6a6:	485d      	ldr	r0, [pc, #372]	; (800c81c <chPipeWriteTimeout.part.0.constprop.0+0x17c>)
size_t chPipeWriteTimeout(pipe_t *pp, const uint8_t *bp,
 800c6a8:	b083      	sub	sp, #12
 800c6aa:	f1a0 0810 	sub.w	r8, r0, #16
 800c6ae:	f04f 0a20 	mov.w	sl, #32
  PW_LOCK(pp);
 800c6b2:	f7f7 fa15 	bl	8003ae0 <chMtxLock>
 800c6b6:	46bb      	mov	fp, r7
 800c6b8:	f8df 9164 	ldr.w	r9, [pc, #356]	; 800c820 <chPipeWriteTimeout.part.0.constprop.0+0x180>
 800c6bc:	4e59      	ldr	r6, [pc, #356]	; (800c824 <chPipeWriteTimeout.part.0.constprop.0+0x184>)
  return (size_t)(pp->top - pp->buffer);
 800c6be:	f1a8 0520 	sub.w	r5, r8, #32
 800c6c2:	f38a 8811 	msr	BASEPRI, sl
  _dbg_check_lock();
 800c6c6:	f7f4 f8ab 	bl	8000820 <_dbg_check_lock>
 800c6ca:	4640      	mov	r0, r8
 800c6cc:	f7f7 f988 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800c6d0:	f7f4 f8b6 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c6d4:	6833      	ldr	r3, [r6, #0]
 800c6d6:	42b3      	cmp	r3, r6
 800c6d8:	d004      	beq.n	800c6e4 <chPipeWriteTimeout.part.0.constprop.0+0x44>
 800c6da:	69b2      	ldr	r2, [r6, #24]
 800c6dc:	689b      	ldr	r3, [r3, #8]
 800c6de:	6892      	ldr	r2, [r2, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d357      	bcc.n	800c794 <chPipeWriteTimeout.part.0.constprop.0+0xf4>
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	e9d5 4300 	ldrd	r4, r3, [r5]
  return pp->cnt;
 800c6ee:	692a      	ldr	r2, [r5, #16]
  return (size_t)(pp->top - pp->buffer);
 800c6f0:	1b1c      	subs	r4, r3, r4
 *
 * @api
 */
static inline size_t chPipeGetFreeCount(const pipe_t *pp) {

  return chPipeGetSize(pp) - chPipeGetUsedCount(pp);
 800c6f2:	1aa4      	subs	r4, r4, r2
 800c6f4:	455c      	cmp	r4, fp
 800c6f6:	bf28      	it	cs
 800c6f8:	465c      	movcs	r4, fp
  s1 = (size_t)(pp->top - pp->wrptr);
 800c6fa:	68a8      	ldr	r0, [r5, #8]
  pp->cnt += n;
 800c6fc:	4422      	add	r2, r4
  s1 = (size_t)(pp->top - pp->wrptr);
 800c6fe:	1a1b      	subs	r3, r3, r0
  if (n < s1) {
 800c700:	429c      	cmp	r4, r3
  pp->cnt += n;
 800c702:	612a      	str	r2, [r5, #16]
  if (n < s1) {
 800c704:	d34c      	bcc.n	800c7a0 <chPipeWriteTimeout.part.0.constprop.0+0x100>
  else if (n > s1) {
 800c706:	d818      	bhi.n	800c73a <chPipeWriteTimeout.part.0.constprop.0+0x9a>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800c708:	4622      	mov	r2, r4
 800c70a:	4649      	mov	r1, r9
 800c70c:	f002 fd18 	bl	800f140 <memcpy>
    pp->wrptr = pp->buffer;
 800c710:	682b      	ldr	r3, [r5, #0]
 800c712:	60ab      	str	r3, [r5, #8]
  PC_UNLOCK(pp);
 800c714:	4640      	mov	r0, r8
 800c716:	f7f7 fa53 	bl	8003bc0 <chMtxUnlock>
    if (done == (size_t)0) {
 800c71a:	bb24      	cbnz	r4, 800c766 <chPipeWriteTimeout.part.0.constprop.0+0xc6>
 800c71c:	2320      	movs	r3, #32
 800c71e:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c722:	e9d6 230c 	ldrd	r2, r3, [r6, #48]	; 0x30
 800c726:	4313      	orrs	r3, r2
 800c728:	d137      	bne.n	800c79a <chPipeWriteTimeout.part.0.constprop.0+0xfa>
  _dbg_enter_lock();
 800c72a:	2201      	movs	r2, #1
  chDbgAssert(*trp == NULL, "not NULL");
 800c72c:	69ab      	ldr	r3, [r5, #24]
 800c72e:	6372      	str	r2, [r6, #52]	; 0x34
 800c730:	2b00      	cmp	r3, #0
 800c732:	d05d      	beq.n	800c7f0 <chPipeWriteTimeout.part.0.constprop.0+0x150>
 800c734:	483c      	ldr	r0, [pc, #240]	; (800c828 <chPipeWriteTimeout.part.0.constprop.0+0x188>)
 800c736:	f7f4 f81b 	bl	8000770 <chSysHalt>
    memcpy((void *)pp->wrptr, (const void *)bp, s1);
 800c73a:	461a      	mov	r2, r3
 800c73c:	4649      	mov	r1, r9
 800c73e:	9301      	str	r3, [sp, #4]
 800c740:	f002 fcfe 	bl	800f140 <memcpy>
    s2 = n - s1;
 800c744:	9b01      	ldr	r3, [sp, #4]
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800c746:	6828      	ldr	r0, [r5, #0]
    s2 = n - s1;
 800c748:	1ae2      	subs	r2, r4, r3
    memcpy((void *)pp->buffer, (const void *)bp, s2);
 800c74a:	eb09 0103 	add.w	r1, r9, r3
 800c74e:	9201      	str	r2, [sp, #4]
 800c750:	f002 fcf6 	bl	800f140 <memcpy>
    pp->wrptr = pp->buffer + s2;
 800c754:	682b      	ldr	r3, [r5, #0]
 800c756:	9a01      	ldr	r2, [sp, #4]
  PC_UNLOCK(pp);
 800c758:	4640      	mov	r0, r8
    pp->wrptr = pp->buffer + s2;
 800c75a:	441a      	add	r2, r3
 800c75c:	60aa      	str	r2, [r5, #8]
  PC_UNLOCK(pp);
 800c75e:	f7f7 fa2f 	bl	8003bc0 <chMtxUnlock>
    if (done == (size_t)0) {
 800c762:	2c00      	cmp	r4, #0
 800c764:	d0da      	beq.n	800c71c <chPipeWriteTimeout.part.0.constprop.0+0x7c>
      bp += done;
 800c766:	44a1      	add	r9, r4
 800c768:	f38a 8811 	msr	BASEPRI, sl
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800c76c:	e9d6 130c 	ldrd	r1, r3, [r6, #48]	; 0x30
 800c770:	4319      	orrs	r1, r3
 800c772:	d112      	bne.n	800c79a <chPipeWriteTimeout.part.0.constprop.0+0xfa>
  _dbg_enter_lock();
 800c774:	2301      	movs	r3, #1
  if (*trp != NULL) {
 800c776:	69e8      	ldr	r0, [r5, #28]
 800c778:	6373      	str	r3, [r6, #52]	; 0x34
 800c77a:	b1f8      	cbz	r0, 800c7bc <chPipeWriteTimeout.part.0.constprop.0+0x11c>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c77c:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c780:	2b03      	cmp	r3, #3
 800c782:	d115      	bne.n	800c7b0 <chPipeWriteTimeout.part.0.constprop.0+0x110>
    *trp = NULL;
 800c784:	61e9      	str	r1, [r5, #28]
    chSchWakeupS(tp, msg);
 800c786:	f7f6 f9db 	bl	8002b40 <chSchWakeupS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c78a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800c78c:	b19b      	cbz	r3, 800c7b6 <chPipeWriteTimeout.part.0.constprop.0+0x116>
    chSysHalt("SV#5");
 800c78e:	4827      	ldr	r0, [pc, #156]	; (800c82c <chPipeWriteTimeout.part.0.constprop.0+0x18c>)
 800c790:	f7f3 ffee 	bl	8000770 <chSysHalt>
 800c794:	4826      	ldr	r0, [pc, #152]	; (800c830 <chPipeWriteTimeout.part.0.constprop.0+0x190>)
 800c796:	f7f3 ffeb 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800c79a:	4826      	ldr	r0, [pc, #152]	; (800c834 <chPipeWriteTimeout.part.0.constprop.0+0x194>)
 800c79c:	f7f3 ffe8 	bl	8000770 <chSysHalt>
    memcpy((void *)pp->wrptr, (const void *)bp, n);
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	f002 fccc 	bl	800f140 <memcpy>
    pp->wrptr += n;
 800c7a8:	68ab      	ldr	r3, [r5, #8]
 800c7aa:	4423      	add	r3, r4
 800c7ac:	60ab      	str	r3, [r5, #8]
 800c7ae:	e7b1      	b.n	800c714 <chPipeWriteTimeout.part.0.constprop.0+0x74>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c7b0:	4821      	ldr	r0, [pc, #132]	; (800c838 <chPipeWriteTimeout.part.0.constprop.0+0x198>)
 800c7b2:	f7f3 ffdd 	bl	8000770 <chSysHalt>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800c7b6:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	dde8      	ble.n	800c78e <chPipeWriteTimeout.part.0.constprop.0+0xee>
  _dbg_leave_lock();
 800c7bc:	2300      	movs	r3, #0
 800c7be:	6373      	str	r3, [r6, #52]	; 0x34
 800c7c0:	6833      	ldr	r3, [r6, #0]
 800c7c2:	42b3      	cmp	r3, r6
 800c7c4:	d004      	beq.n	800c7d0 <chPipeWriteTimeout.part.0.constprop.0+0x130>
 800c7c6:	69b2      	ldr	r2, [r6, #24]
 800c7c8:	689b      	ldr	r3, [r3, #8]
 800c7ca:	6892      	ldr	r2, [r2, #8]
 800c7cc:	429a      	cmp	r2, r3
 800c7ce:	d31e      	bcc.n	800c80e <chPipeWriteTimeout.part.0.constprop.0+0x16e>
 800c7d0:	2300      	movs	r3, #0
      n  -= done;
 800c7d2:	ebab 0b04 	sub.w	fp, fp, r4
 800c7d6:	f383 8811 	msr	BASEPRI, r3
  while (n > 0U) {
 800c7da:	f1bb 0f00 	cmp.w	fp, #0
 800c7de:	f47f af70 	bne.w	800c6c2 <chPipeWriteTimeout.part.0.constprop.0+0x22>
  PW_UNLOCK(pp);
 800c7e2:	480e      	ldr	r0, [pc, #56]	; (800c81c <chPipeWriteTimeout.part.0.constprop.0+0x17c>)
 800c7e4:	f7f7 f9ec 	bl	8003bc0 <chMtxUnlock>
}
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	b003      	add	sp, #12
 800c7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f0:	6833      	ldr	r3, [r6, #0]
 800c7f2:	69b2      	ldr	r2, [r6, #24]
 800c7f4:	42b3      	cmp	r3, r6
 800c7f6:	6374      	str	r4, [r6, #52]	; 0x34
 800c7f8:	d003      	beq.n	800c802 <chPipeWriteTimeout.part.0.constprop.0+0x162>
 800c7fa:	6892      	ldr	r2, [r2, #8]
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d308      	bcc.n	800c814 <chPipeWriteTimeout.part.0.constprop.0+0x174>
 800c802:	2300      	movs	r3, #0
 800c804:	f383 8811 	msr	BASEPRI, r3
  return max - n;
 800c808:	eba7 070b 	sub.w	r7, r7, fp
 800c80c:	e7e9      	b.n	800c7e2 <chPipeWriteTimeout.part.0.constprop.0+0x142>
 800c80e:	480b      	ldr	r0, [pc, #44]	; (800c83c <chPipeWriteTimeout.part.0.constprop.0+0x19c>)
 800c810:	f7f3 ffae 	bl	8000770 <chSysHalt>
 800c814:	480a      	ldr	r0, [pc, #40]	; (800c840 <chPipeWriteTimeout.part.0.constprop.0+0x1a0>)
 800c816:	f7f3 ffab 	bl	8000770 <chSysHalt>
 800c81a:	bf00      	nop
 800c81c:	20000cc8 	.word	0x20000cc8
 800c820:	080122e0 	.word	0x080122e0
 800c824:	20000d70 	.word	0x20000d70
 800c828:	08010ec0 	.word	0x08010ec0
 800c82c:	0800f214 	.word	0x0800f214
 800c830:	08010f48 	.word	0x08010f48
 800c834:	0800f20c 	.word	0x0800f20c
 800c838:	08012194 	.word	0x08012194
 800c83c:	08010de4 	.word	0x08010de4
 800c840:	080121e8 	.word	0x080121e8
	...

0800c850 <oslib_test_003_001_execute.lto_priv.0>:
  test_set_step(1);
 800c850:	2201      	movs	r2, #1
static void oslib_test_003_001_execute(void) {
 800c852:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 800c854:	4f33      	ldr	r7, [pc, #204]	; (800c924 <oslib_test_003_001_execute.lto_priv.0+0xd4>)
 800c856:	2320      	movs	r3, #32
static void oslib_test_003_001_execute(void) {
 800c858:	b085      	sub	sp, #20
  test_set_step(1);
 800c85a:	603a      	str	r2, [r7, #0]
 800c85c:	f383 8811 	msr	BASEPRI, r3
 800c860:	4d31      	ldr	r5, [pc, #196]	; (800c928 <oslib_test_003_001_execute.lto_priv.0+0xd8>)
  _dbg_check_lock();
 800c862:	f7f3 ffdd 	bl	8000820 <_dbg_check_lock>
 800c866:	4831      	ldr	r0, [pc, #196]	; (800c92c <oslib_test_003_001_execute.lto_priv.0+0xdc>)
 800c868:	f7f7 f8ba 	bl	80039e0 <chMtxLockS>
  _dbg_check_unlock();
 800c86c:	f7f3 ffe8 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	42ab      	cmp	r3, r5
 800c874:	d004      	beq.n	800c880 <oslib_test_003_001_execute.lto_priv.0+0x30>
 800c876:	69aa      	ldr	r2, [r5, #24]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	6892      	ldr	r2, [r2, #8]
 800c87c:	429a      	cmp	r2, r3
 800c87e:	d34a      	bcc.n	800c916 <oslib_test_003_001_execute.lto_priv.0+0xc6>
 800c880:	2600      	movs	r6, #0
 800c882:	f386 8811 	msr	BASEPRI, r6
  pp->reset = true;
 800c886:	2201      	movs	r2, #1
  pp->wrptr = pp->buffer;
 800c888:	4c29      	ldr	r4, [pc, #164]	; (800c930 <oslib_test_003_001_execute.lto_priv.0+0xe0>)
 800c88a:	6823      	ldr	r3, [r4, #0]
  pp->cnt   = (size_t)0;
 800c88c:	6126      	str	r6, [r4, #16]
  pp->rdptr = pp->buffer;
 800c88e:	e9c4 3302 	strd	r3, r3, [r4, #8]
  pp->reset = true;
 800c892:	7522      	strb	r2, [r4, #20]
 800c894:	2320      	movs	r3, #32
 800c896:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800c89a:	f7f3 ffc1 	bl	8000820 <_dbg_check_lock>
  if (*trp != NULL) {
 800c89e:	69a0      	ldr	r0, [r4, #24]
 800c8a0:	b148      	cbz	r0, 800c8b6 <oslib_test_003_001_execute.lto_priv.0+0x66>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c8a2:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c8a6:	2b03      	cmp	r3, #3
 800c8a8:	d132      	bne.n	800c910 <oslib_test_003_001_execute.lto_priv.0+0xc0>
    tp->u.rdymsg = msg;
 800c8aa:	f06f 0301 	mvn.w	r3, #1
    *trp = NULL;
 800c8ae:	61a6      	str	r6, [r4, #24]
    tp->u.rdymsg = msg;
 800c8b0:	6243      	str	r3, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800c8b2:	f7f5 fc2d 	bl	8002110 <chSchReadyI>
  if (*trp != NULL) {
 800c8b6:	69e0      	ldr	r0, [r4, #28]
 800c8b8:	b150      	cbz	r0, 800c8d0 <oslib_test_003_001_execute.lto_priv.0+0x80>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c8ba:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c8be:	2b03      	cmp	r3, #3
 800c8c0:	d126      	bne.n	800c910 <oslib_test_003_001_execute.lto_priv.0+0xc0>
    *trp = NULL;
 800c8c2:	2300      	movs	r3, #0
    tp->u.rdymsg = msg;
 800c8c4:	f06f 0201 	mvn.w	r2, #1
    *trp = NULL;
 800c8c8:	61e3      	str	r3, [r4, #28]
    tp->u.rdymsg = msg;
 800c8ca:	6242      	str	r2, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 800c8cc:	f7f5 fc20 	bl	8002110 <chSchReadyI>
  chSchRescheduleS();
 800c8d0:	f7f6 f9be 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800c8d4:	f7f3 ffb4 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	42ab      	cmp	r3, r5
 800c8dc:	d004      	beq.n	800c8e8 <oslib_test_003_001_execute.lto_priv.0+0x98>
 800c8de:	69aa      	ldr	r2, [r5, #24]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	6892      	ldr	r2, [r2, #8]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d319      	bcc.n	800c91c <oslib_test_003_001_execute.lto_priv.0+0xcc>
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	f383 8811 	msr	BASEPRI, r3
  PC_UNLOCK(pp);
 800c8ee:	480f      	ldr	r0, [pc, #60]	; (800c92c <oslib_test_003_001_execute.lto_priv.0+0xdc>)
 800c8f0:	f7f7 f966 	bl	8003bc0 <chMtxUnlock>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c8f4:	6822      	ldr	r2, [r4, #0]
 800c8f6:	68e3      	ldr	r3, [r4, #12]
 800c8f8:	4293      	cmp	r3, r2
 800c8fa:	d029      	beq.n	800c950 <oslib_test_003_001_execute.lto_priv.0+0x100>
  test_local_fail      = true;
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	490d      	ldr	r1, [pc, #52]	; (800c934 <oslib_test_003_001_execute.lto_priv.0+0xe4>)
  test_global_fail     = true;
 800c900:	4a0d      	ldr	r2, [pc, #52]	; (800c938 <oslib_test_003_001_execute.lto_priv.0+0xe8>)
  test_failure_message = msg;
 800c902:	480e      	ldr	r0, [pc, #56]	; (800c93c <oslib_test_003_001_execute.lto_priv.0+0xec>)
 800c904:	4c0e      	ldr	r4, [pc, #56]	; (800c940 <oslib_test_003_001_execute.lto_priv.0+0xf0>)
  test_local_fail      = true;
 800c906:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800c908:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800c90a:	7013      	strb	r3, [r2, #0]
}
 800c90c:	b005      	add	sp, #20
 800c90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800c910:	480c      	ldr	r0, [pc, #48]	; (800c944 <oslib_test_003_001_execute.lto_priv.0+0xf4>)
 800c912:	f7f3 ff2d 	bl	8000770 <chSysHalt>
 800c916:	480c      	ldr	r0, [pc, #48]	; (800c948 <oslib_test_003_001_execute.lto_priv.0+0xf8>)
 800c918:	f7f3 ff2a 	bl	8000770 <chSysHalt>
 800c91c:	480b      	ldr	r0, [pc, #44]	; (800c94c <oslib_test_003_001_execute.lto_priv.0+0xfc>)
 800c91e:	f7f3 ff27 	bl	8000770 <chSysHalt>
 800c922:	bf00      	nop
 800c924:	20001d3c 	.word	0x20001d3c
 800c928:	20000d70 	.word	0x20000d70
 800c92c:	20000cb8 	.word	0x20000cb8
 800c930:	20000c98 	.word	0x20000c98
 800c934:	20001d39 	.word	0x20001d39
 800c938:	20001d38 	.word	0x20001d38
 800c93c:	20001d34 	.word	0x20001d34
 800c940:	08011ec0 	.word	0x08011ec0
 800c944:	08010e70 	.word	0x08010e70
 800c948:	08010f48 	.word	0x08010f48
 800c94c:	080121e8 	.word	0x080121e8
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c950:	68a2      	ldr	r2, [r4, #8]
 800c952:	4293      	cmp	r3, r2
 800c954:	d1d2      	bne.n	800c8fc <oslib_test_003_001_execute.lto_priv.0+0xac>
 800c956:	6925      	ldr	r5, [r4, #16]
 800c958:	2d00      	cmp	r5, #0
 800c95a:	d1cf      	bne.n	800c8fc <oslib_test_003_001_execute.lto_priv.0+0xac>
  test_set_step(2);
 800c95c:	2202      	movs	r2, #2
  if (pp->reset) {
 800c95e:	7d23      	ldrb	r3, [r4, #20]
 800c960:	603a      	str	r2, [r7, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	f000 81aa 	beq.w	800ccbc <oslib_test_003_001_execute.lto_priv.0+0x46c>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c968:	6923      	ldr	r3, [r4, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	f040 81a4 	bne.w	800ccb8 <oslib_test_003_001_execute.lto_priv.0+0x468>
 800c970:	2001      	movs	r0, #1
 800c972:	49b5      	ldr	r1, [pc, #724]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800c974:	f7f8 ffa4 	bl	80058c0 <_test_assert>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1c7      	bne.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(3);
 800c97c:	2303      	movs	r3, #3
  if (pp->reset) {
 800c97e:	7d20      	ldrb	r0, [r4, #20]
 800c980:	603b      	str	r3, [r7, #0]
 800c982:	b930      	cbnz	r0, 800c992 <oslib_test_003_001_execute.lto_priv.0+0x142>
 800c984:	2110      	movs	r1, #16
 800c986:	4668      	mov	r0, sp
 800c988:	f7ff fda2 	bl	800c4d0 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == 0, "not reset");
 800c98c:	fab0 f080 	clz	r0, r0
 800c990:	0940      	lsrs	r0, r0, #5
 800c992:	49ae      	ldr	r1, [pc, #696]	; (800cc4c <oslib_test_003_001_execute.lto_priv.0+0x3fc>)
 800c994:	f7f8 ff94 	bl	80058c0 <_test_assert>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d1b7      	bne.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c99c:	6822      	ldr	r2, [r4, #0]
 800c99e:	68e3      	ldr	r3, [r4, #12]
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	f000 8199 	beq.w	800ccd8 <oslib_test_003_001_execute.lto_priv.0+0x488>
 800c9a6:	49a8      	ldr	r1, [pc, #672]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800c9a8:	f7f8 ff8a 	bl	80058c0 <_test_assert>
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1ad      	bne.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(4);
 800c9b0:	2104      	movs	r1, #4
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c9b2:	6822      	ldr	r2, [r4, #0]
 800c9b4:	68e3      	ldr	r3, [r4, #12]
 *
 * @api
 */
static inline void chPipeResume(pipe_t *pp) {

  pp->reset = false;
 800c9b6:	7520      	strb	r0, [r4, #20]
 800c9b8:	4293      	cmp	r3, r2
  test_set_step(4);
 800c9ba:	6039      	str	r1, [r7, #0]
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c9bc:	f000 8195 	beq.w	800ccea <oslib_test_003_001_execute.lto_priv.0+0x49a>
 800c9c0:	49a1      	ldr	r1, [pc, #644]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800c9c2:	f7f8 ff7d 	bl	80058c0 <_test_assert>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d1a0      	bne.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(5);
 800c9ca:	2205      	movs	r2, #5
  if (pp->reset) {
 800c9cc:	7d23      	ldrb	r3, [r4, #20]
 800c9ce:	603a      	str	r2, [r7, #0]
 800c9d0:	b93b      	cbnz	r3, 800c9e2 <oslib_test_003_001_execute.lto_priv.0+0x192>
 800c9d2:	2010      	movs	r0, #16
 800c9d4:	f7ff fe64 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800c9d8:	f1a0 0010 	sub.w	r0, r0, #16
 800c9dc:	fab0 f080 	clz	r0, r0
 800c9e0:	0940      	lsrs	r0, r0, #5
 800c9e2:	499b      	ldr	r1, [pc, #620]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800c9e4:	f7f8 ff6c 	bl	80058c0 <_test_assert>
 800c9e8:	2800      	cmp	r0, #0
 800c9ea:	d18f      	bne.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800c9ec:	6822      	ldr	r2, [r4, #0]
 800c9ee:	68e3      	ldr	r3, [r4, #12]
 800c9f0:	4293      	cmp	r3, r2
 800c9f2:	f000 8183 	beq.w	800ccfc <oslib_test_003_001_execute.lto_priv.0+0x4ac>
 800c9f6:	4994      	ldr	r1, [pc, #592]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800c9f8:	f7f8 ff62 	bl	80058c0 <_test_assert>
 800c9fc:	2800      	cmp	r0, #0
 800c9fe:	d185      	bne.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(6);
 800ca00:	2206      	movs	r2, #6
  if (pp->reset) {
 800ca02:	7d23      	ldrb	r3, [r4, #20]
 800ca04:	603a      	str	r2, [r7, #0]
 800ca06:	b943      	cbnz	r3, 800ca1a <oslib_test_003_001_execute.lto_priv.0+0x1ca>
 800ca08:	2110      	movs	r1, #16
 800ca0a:	4668      	mov	r0, sp
 800ca0c:	f7ff fd60 	bl	800c4d0 <chPipeReadTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800ca10:	f1a0 0010 	sub.w	r0, r0, #16
 800ca14:	fab0 f080 	clz	r0, r0
 800ca18:	0940      	lsrs	r0, r0, #5
 800ca1a:	498d      	ldr	r1, [pc, #564]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800ca1c:	f7f8 ff50 	bl	80058c0 <_test_assert>
 800ca20:	2800      	cmp	r0, #0
 800ca22:	f47f af73 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800ca26:	6822      	ldr	r2, [r4, #0]
 800ca28:	68e3      	ldr	r3, [r4, #12]
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	f000 8170 	beq.w	800cd10 <oslib_test_003_001_execute.lto_priv.0+0x4c0>
 800ca30:	4985      	ldr	r1, [pc, #532]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800ca32:	f7f8 ff45 	bl	80058c0 <_test_assert>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f47f af68 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800ca3c:	4669      	mov	r1, sp
 800ca3e:	2210      	movs	r2, #16
 800ca40:	4884      	ldr	r0, [pc, #528]	; (800cc54 <oslib_test_003_001_execute.lto_priv.0+0x404>)
 800ca42:	f002 fb6d 	bl	800f120 <memcmp>
 800ca46:	fab0 f080 	clz	r0, r0
 800ca4a:	4983      	ldr	r1, [pc, #524]	; (800cc58 <oslib_test_003_001_execute.lto_priv.0+0x408>)
 800ca4c:	0940      	lsrs	r0, r0, #5
 800ca4e:	f7f8 ff37 	bl	80058c0 <_test_assert>
 800ca52:	2800      	cmp	r0, #0
 800ca54:	f47f af5a 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(7);
 800ca58:	2307      	movs	r3, #7
 800ca5a:	603b      	str	r3, [r7, #0]
  if (pp->reset) {
 800ca5c:	7d23      	ldrb	r3, [r4, #20]
 800ca5e:	b913      	cbnz	r3, 800ca66 <oslib_test_003_001_execute.lto_priv.0+0x216>
 800ca60:	2004      	movs	r0, #4
 800ca62:	f7ff fe1d 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == 4, "wrong size");
 800ca66:	1f02      	subs	r2, r0, #4
 800ca68:	4250      	negs	r0, r2
 800ca6a:	4150      	adcs	r0, r2
 800ca6c:	4978      	ldr	r1, [pc, #480]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800ca6e:	f7f8 ff27 	bl	80058c0 <_test_assert>
 800ca72:	2800      	cmp	r0, #0
 800ca74:	f47f af4a 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800ca78:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800ca7c:	4293      	cmp	r3, r2
 800ca7e:	d003      	beq.n	800ca88 <oslib_test_003_001_execute.lto_priv.0+0x238>
 800ca80:	6822      	ldr	r2, [r4, #0]
 800ca82:	4293      	cmp	r3, r2
 800ca84:	f000 814d 	beq.w	800cd22 <oslib_test_003_001_execute.lto_priv.0+0x4d2>
 800ca88:	496f      	ldr	r1, [pc, #444]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800ca8a:	f7f8 ff19 	bl	80058c0 <_test_assert>
 800ca8e:	2800      	cmp	r0, #0
 800ca90:	f47f af3c 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(8);
 800ca94:	2308      	movs	r3, #8
 800ca96:	603b      	str	r3, [r7, #0]
 800ca98:	7d23      	ldrb	r3, [r4, #20]
 800ca9a:	b913      	cbnz	r3, 800caa2 <oslib_test_003_001_execute.lto_priv.0+0x252>
 800ca9c:	200c      	movs	r0, #12
 800ca9e:	f7ff fdff 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800caa2:	f1a0 0e0c 	sub.w	lr, r0, #12
 800caa6:	f1de 0000 	rsbs	r0, lr, #0
 800caaa:	eb40 000e 	adc.w	r0, r0, lr
 800caae:	4968      	ldr	r1, [pc, #416]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800cab0:	f7f8 ff06 	bl	80058c0 <_test_assert>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	f47f af29 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800caba:	6822      	ldr	r2, [r4, #0]
 800cabc:	68e3      	ldr	r3, [r4, #12]
 800cabe:	4293      	cmp	r3, r2
 800cac0:	f000 8166 	beq.w	800cd90 <oslib_test_003_001_execute.lto_priv.0+0x540>
 800cac4:	4960      	ldr	r1, [pc, #384]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800cac6:	f7f8 fefb 	bl	80058c0 <_test_assert>
 800caca:	2800      	cmp	r0, #0
 800cacc:	f47f af1e 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(9);
 800cad0:	2309      	movs	r3, #9
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 800cad2:	2104      	movs	r1, #4
 800cad4:	4668      	mov	r0, sp
  test_set_step(9);
 800cad6:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 4, TIME_IMMEDIATE);
 800cad8:	f7ff fdd2 	bl	800c680 <chPipeReadTimeout.constprop.0>
    test_assert(n == 4, "wrong size");
 800cadc:	1f06      	subs	r6, r0, #4
 800cade:	4270      	negs	r0, r6
 800cae0:	4170      	adcs	r0, r6
 800cae2:	495b      	ldr	r1, [pc, #364]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800cae4:	f7f8 feec 	bl	80058c0 <_test_assert>
 800cae8:	2800      	cmp	r0, #0
 800caea:	f47f af0f 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800caee:	6823      	ldr	r3, [r4, #0]
 800caf0:	68e2      	ldr	r2, [r4, #12]
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d003      	beq.n	800cafe <oslib_test_003_001_execute.lto_priv.0+0x2ae>
 800caf6:	68a2      	ldr	r2, [r4, #8]
 800caf8:	4293      	cmp	r3, r2
 800cafa:	f000 8117 	beq.w	800cd2c <oslib_test_003_001_execute.lto_priv.0+0x4dc>
 800cafe:	4952      	ldr	r1, [pc, #328]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800cb00:	f7f8 fede 	bl	80058c0 <_test_assert>
 800cb04:	2800      	cmp	r0, #0
 800cb06:	f47f af01 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert(memcmp(pipe_pattern, buf, 4) == 0, "content mismatch");
 800cb0a:	4669      	mov	r1, sp
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	4851      	ldr	r0, [pc, #324]	; (800cc54 <oslib_test_003_001_execute.lto_priv.0+0x404>)
 800cb10:	f002 fb06 	bl	800f120 <memcmp>
 800cb14:	fab0 f080 	clz	r0, r0
 800cb18:	494f      	ldr	r1, [pc, #316]	; (800cc58 <oslib_test_003_001_execute.lto_priv.0+0x408>)
 800cb1a:	0940      	lsrs	r0, r0, #5
 800cb1c:	f7f8 fed0 	bl	80058c0 <_test_assert>
 800cb20:	2800      	cmp	r0, #0
 800cb22:	f47f aef3 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(10);
 800cb26:	230a      	movs	r3, #10
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800cb28:	210c      	movs	r1, #12
 800cb2a:	4668      	mov	r0, sp
  test_set_step(10);
 800cb2c:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE - 4, TIME_IMMEDIATE);
 800cb2e:	f7ff fda7 	bl	800c680 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE - 4, "wrong size");
 800cb32:	f1a0 030c 	sub.w	r3, r0, #12
 800cb36:	4258      	negs	r0, r3
 800cb38:	4158      	adcs	r0, r3
 800cb3a:	4945      	ldr	r1, [pc, #276]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800cb3c:	f7f8 fec0 	bl	80058c0 <_test_assert>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f47f aee3 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cb46:	6822      	ldr	r2, [r4, #0]
 800cb48:	68e3      	ldr	r3, [r4, #12]
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	f000 8117 	beq.w	800cd7e <oslib_test_003_001_execute.lto_priv.0+0x52e>
 800cb50:	493d      	ldr	r1, [pc, #244]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800cb52:	f7f8 feb5 	bl	80058c0 <_test_assert>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f47f aed8 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE - 4) == 0, "content mismatch");
 800cb5c:	4669      	mov	r1, sp
 800cb5e:	220c      	movs	r2, #12
 800cb60:	483c      	ldr	r0, [pc, #240]	; (800cc54 <oslib_test_003_001_execute.lto_priv.0+0x404>)
 800cb62:	f002 fadd 	bl	800f120 <memcmp>
 800cb66:	fab0 f080 	clz	r0, r0
 800cb6a:	493b      	ldr	r1, [pc, #236]	; (800cc58 <oslib_test_003_001_execute.lto_priv.0+0x408>)
 800cb6c:	0940      	lsrs	r0, r0, #5
 800cb6e:	f7f8 fea7 	bl	80058c0 <_test_assert>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	f47f aeca 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(11);
 800cb78:	230b      	movs	r3, #11
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	7d23      	ldrb	r3, [r4, #20]
 800cb7e:	b913      	cbnz	r3, 800cb86 <oslib_test_003_001_execute.lto_priv.0+0x336>
 800cb80:	2005      	movs	r0, #5
 800cb82:	f7ff fd8d 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
    test_assert(n == 5, "wrong size");
 800cb86:	f1a0 0e05 	sub.w	lr, r0, #5
 800cb8a:	f1de 0000 	rsbs	r0, lr, #0
 800cb8e:	eb40 000e 	adc.w	r0, r0, lr
 800cb92:	492f      	ldr	r1, [pc, #188]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800cb94:	f7f8 fe94 	bl	80058c0 <_test_assert>
 800cb98:	2800      	cmp	r0, #0
 800cb9a:	f47f aeb7 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800cb9e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d003      	beq.n	800cbae <oslib_test_003_001_execute.lto_priv.0+0x35e>
 800cba6:	6822      	ldr	r2, [r4, #0]
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	f000 80e0 	beq.w	800cd6e <oslib_test_003_001_execute.lto_priv.0+0x51e>
 800cbae:	4926      	ldr	r1, [pc, #152]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800cbb0:	f7f8 fe86 	bl	80058c0 <_test_assert>
 800cbb4:	2800      	cmp	r0, #0
 800cbb6:	f47f aea9 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(12);
 800cbba:	230c      	movs	r3, #12
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 800cbbc:	2105      	movs	r1, #5
 800cbbe:	4668      	mov	r0, sp
  test_set_step(12);
 800cbc0:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, 5, TIME_IMMEDIATE);
 800cbc2:	f7ff fd5d 	bl	800c680 <chPipeReadTimeout.constprop.0>
    test_assert(n == 5, "wrong size");
 800cbc6:	1f46      	subs	r6, r0, #5
 800cbc8:	4270      	negs	r0, r6
 800cbca:	4170      	adcs	r0, r6
 800cbcc:	4920      	ldr	r1, [pc, #128]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800cbce:	f7f8 fe77 	bl	80058c0 <_test_assert>
 800cbd2:	2800      	cmp	r0, #0
 800cbd4:	f47f ae9a 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800cbd8:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800cbdc:	4293      	cmp	r3, r2
 800cbde:	f000 80bd 	beq.w	800cd5c <oslib_test_003_001_execute.lto_priv.0+0x50c>
 800cbe2:	4919      	ldr	r1, [pc, #100]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800cbe4:	f7f8 fe6c 	bl	80058c0 <_test_assert>
 800cbe8:	2800      	cmp	r0, #0
 800cbea:	f47f ae8f 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert(memcmp(pipe_pattern, buf, 5) == 0, "content mismatch");
 800cbee:	4669      	mov	r1, sp
 800cbf0:	2205      	movs	r2, #5
 800cbf2:	4818      	ldr	r0, [pc, #96]	; (800cc54 <oslib_test_003_001_execute.lto_priv.0+0x404>)
 800cbf4:	f002 fa94 	bl	800f120 <memcmp>
 800cbf8:	fab0 f080 	clz	r0, r0
 800cbfc:	4916      	ldr	r1, [pc, #88]	; (800cc58 <oslib_test_003_001_execute.lto_priv.0+0x408>)
 800cbfe:	0940      	lsrs	r0, r0, #5
 800cc00:	f7f8 fe5e 	bl	80058c0 <_test_assert>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	f47f ae81 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
  test_set_step(13);
 800cc0a:	220d      	movs	r2, #13
 800cc0c:	7d23      	ldrb	r3, [r4, #20]
 800cc0e:	603a      	str	r2, [r7, #0]
 800cc10:	b91b      	cbnz	r3, 800cc1a <oslib_test_003_001_execute.lto_priv.0+0x3ca>
 800cc12:	2010      	movs	r0, #16
 800cc14:	f7ff fd44 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
 800cc18:	4605      	mov	r5, r0
    test_assert(n == PIPE_SIZE, "wrong size");
 800cc1a:	f1a5 0110 	sub.w	r1, r5, #16
 800cc1e:	4248      	negs	r0, r1
 800cc20:	4148      	adcs	r0, r1
 800cc22:	490b      	ldr	r1, [pc, #44]	; (800cc50 <oslib_test_003_001_execute.lto_priv.0+0x400>)
 800cc24:	f7f8 fe4c 	bl	80058c0 <_test_assert>
 800cc28:	2800      	cmp	r0, #0
 800cc2a:	f47f ae6f 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800cc2e:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800cc32:	4293      	cmp	r3, r2
 800cc34:	f000 8088 	beq.w	800cd48 <oslib_test_003_001_execute.lto_priv.0+0x4f8>
 800cc38:	4903      	ldr	r1, [pc, #12]	; (800cc48 <oslib_test_003_001_execute.lto_priv.0+0x3f8>)
 800cc3a:	f7f8 fe41 	bl	80058c0 <_test_assert>
 800cc3e:	2800      	cmp	r0, #0
 800cc40:	f47f ae64 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
 800cc44:	e00a      	b.n	800cc5c <oslib_test_003_001_execute.lto_priv.0+0x40c>
 800cc46:	bf00      	nop
 800cc48:	08011ec0 	.word	0x08011ec0
 800cc4c:	08011eb4 	.word	0x08011eb4
 800cc50:	08011ed4 	.word	0x08011ed4
 800cc54:	080122e0 	.word	0x080122e0
 800cc58:	08011ee0 	.word	0x08011ee0
  test_set_step(14);
 800cc5c:	230e      	movs	r3, #14
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800cc5e:	2110      	movs	r1, #16
 800cc60:	4668      	mov	r0, sp
  test_set_step(14);
 800cc62:	603b      	str	r3, [r7, #0]
    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
 800cc64:	f7ff fd0c 	bl	800c680 <chPipeReadTimeout.constprop.0>
    test_assert(n == PIPE_SIZE, "wrong size");
 800cc68:	f1a0 0310 	sub.w	r3, r0, #16
 800cc6c:	4258      	negs	r0, r3
 800cc6e:	4158      	adcs	r0, r3
 800cc70:	494d      	ldr	r1, [pc, #308]	; (800cda8 <oslib_test_003_001_execute.lto_priv.0+0x558>)
 800cc72:	f7f8 fe25 	bl	80058c0 <_test_assert>
 800cc76:	2800      	cmp	r0, #0
 800cc78:	f47f ae48 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800cc7c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800cc80:	4293      	cmp	r3, r2
 800cc82:	d059      	beq.n	800cd38 <oslib_test_003_001_execute.lto_priv.0+0x4e8>
 800cc84:	4949      	ldr	r1, [pc, #292]	; (800cdac <oslib_test_003_001_execute.lto_priv.0+0x55c>)
 800cc86:	f7f8 fe1b 	bl	80058c0 <_test_assert>
 800cc8a:	2800      	cmp	r0, #0
 800cc8c:	f47f ae3e 	bne.w	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert(memcmp(pipe_pattern, buf, PIPE_SIZE) == 0, "content mismatch");
 800cc90:	4669      	mov	r1, sp
 800cc92:	2210      	movs	r2, #16
 800cc94:	4846      	ldr	r0, [pc, #280]	; (800cdb0 <oslib_test_003_001_execute.lto_priv.0+0x560>)
 800cc96:	f002 fa43 	bl	800f120 <memcmp>
 800cc9a:	fab0 f080 	clz	r0, r0
 800cc9e:	4945      	ldr	r1, [pc, #276]	; (800cdb4 <oslib_test_003_001_execute.lto_priv.0+0x564>)
 800cca0:	0940      	lsrs	r0, r0, #5
 800cca2:	f7f8 fe0d 	bl	80058c0 <_test_assert>
  test_end_step(14);
 800cca6:	e631      	b.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cca8:	6822      	ldr	r2, [r4, #0]
 800ccaa:	68e3      	ldr	r3, [r4, #12]
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d103      	bne.n	800ccb8 <oslib_test_003_001_execute.lto_priv.0+0x468>
 800ccb0:	68a2      	ldr	r2, [r4, #8]
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	f43f ae58 	beq.w	800c968 <oslib_test_003_001_execute.lto_priv.0+0x118>
static void oslib_test_003_001_execute(void) {
 800ccb8:	2000      	movs	r0, #0
 800ccba:	e65a      	b.n	800c972 <oslib_test_003_001_execute.lto_priv.0+0x122>
 800ccbc:	2010      	movs	r0, #16
 800ccbe:	f7ff fcef 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition)
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d0f0      	beq.n	800cca8 <oslib_test_003_001_execute.lto_priv.0+0x458>
  test_local_fail      = true;
 800ccc6:	2301      	movs	r3, #1
 800ccc8:	493b      	ldr	r1, [pc, #236]	; (800cdb8 <oslib_test_003_001_execute.lto_priv.0+0x568>)
  test_global_fail     = true;
 800ccca:	4a3c      	ldr	r2, [pc, #240]	; (800cdbc <oslib_test_003_001_execute.lto_priv.0+0x56c>)
  test_failure_message = msg;
 800cccc:	483c      	ldr	r0, [pc, #240]	; (800cdc0 <oslib_test_003_001_execute.lto_priv.0+0x570>)
 800ccce:	4c3d      	ldr	r4, [pc, #244]	; (800cdc4 <oslib_test_003_001_execute.lto_priv.0+0x574>)
  test_local_fail      = true;
 800ccd0:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800ccd2:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800ccd4:	7013      	strb	r3, [r2, #0]
  return true;
 800ccd6:	e619      	b.n	800c90c <oslib_test_003_001_execute.lto_priv.0+0xbc>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800ccd8:	68a2      	ldr	r2, [r4, #8]
 800ccda:	4293      	cmp	r3, r2
 800ccdc:	f47f ae63 	bne.w	800c9a6 <oslib_test_003_001_execute.lto_priv.0+0x156>
 800cce0:	6920      	ldr	r0, [r4, #16]
 800cce2:	fab0 f080 	clz	r0, r0
 800cce6:	0940      	lsrs	r0, r0, #5
 800cce8:	e65d      	b.n	800c9a6 <oslib_test_003_001_execute.lto_priv.0+0x156>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800ccea:	68a2      	ldr	r2, [r4, #8]
 800ccec:	4293      	cmp	r3, r2
 800ccee:	f47f ae67 	bne.w	800c9c0 <oslib_test_003_001_execute.lto_priv.0+0x170>
 800ccf2:	6920      	ldr	r0, [r4, #16]
 800ccf4:	fab0 f080 	clz	r0, r0
 800ccf8:	0940      	lsrs	r0, r0, #5
 800ccfa:	e661      	b.n	800c9c0 <oslib_test_003_001_execute.lto_priv.0+0x170>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800ccfc:	68a2      	ldr	r2, [r4, #8]
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	f47f ae79 	bne.w	800c9f6 <oslib_test_003_001_execute.lto_priv.0+0x1a6>
 800cd04:	6920      	ldr	r0, [r4, #16]
 800cd06:	f1a0 0110 	sub.w	r1, r0, #16
 800cd0a:	4248      	negs	r0, r1
 800cd0c:	4148      	adcs	r0, r1
 800cd0e:	e672      	b.n	800c9f6 <oslib_test_003_001_execute.lto_priv.0+0x1a6>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cd10:	68a2      	ldr	r2, [r4, #8]
 800cd12:	4293      	cmp	r3, r2
 800cd14:	f47f ae8c 	bne.w	800ca30 <oslib_test_003_001_execute.lto_priv.0+0x1e0>
 800cd18:	6920      	ldr	r0, [r4, #16]
 800cd1a:	fab0 f080 	clz	r0, r0
 800cd1e:	0940      	lsrs	r0, r0, #5
 800cd20:	e686      	b.n	800ca30 <oslib_test_003_001_execute.lto_priv.0+0x1e0>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800cd22:	6920      	ldr	r0, [r4, #16]
 800cd24:	1f03      	subs	r3, r0, #4
 800cd26:	4258      	negs	r0, r3
 800cd28:	4158      	adcs	r0, r3
 800cd2a:	e6ad      	b.n	800ca88 <oslib_test_003_001_execute.lto_priv.0+0x238>
    test_assert((pipe1.rdptr != pipe1.buffer) &&
 800cd2c:	6920      	ldr	r0, [r4, #16]
 800cd2e:	f1a0 020c 	sub.w	r2, r0, #12
 800cd32:	4250      	negs	r0, r2
 800cd34:	4150      	adcs	r0, r2
 800cd36:	e6e2      	b.n	800cafe <oslib_test_003_001_execute.lto_priv.0+0x2ae>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800cd38:	6822      	ldr	r2, [r4, #0]
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d0a2      	beq.n	800cc84 <oslib_test_003_001_execute.lto_priv.0+0x434>
 800cd3e:	6920      	ldr	r0, [r4, #16]
 800cd40:	fab0 f080 	clz	r0, r0
 800cd44:	0940      	lsrs	r0, r0, #5
 800cd46:	e79d      	b.n	800cc84 <oslib_test_003_001_execute.lto_priv.0+0x434>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800cd48:	6822      	ldr	r2, [r4, #0]
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	f43f af74 	beq.w	800cc38 <oslib_test_003_001_execute.lto_priv.0+0x3e8>
 800cd50:	6920      	ldr	r0, [r4, #16]
 800cd52:	f1a0 0210 	sub.w	r2, r0, #16
 800cd56:	4250      	negs	r0, r2
 800cd58:	4150      	adcs	r0, r2
 800cd5a:	e76d      	b.n	800cc38 <oslib_test_003_001_execute.lto_priv.0+0x3e8>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800cd5c:	6822      	ldr	r2, [r4, #0]
 800cd5e:	4293      	cmp	r3, r2
 800cd60:	f43f af3f 	beq.w	800cbe2 <oslib_test_003_001_execute.lto_priv.0+0x392>
 800cd64:	6920      	ldr	r0, [r4, #16]
 800cd66:	fab0 f080 	clz	r0, r0
 800cd6a:	0940      	lsrs	r0, r0, #5
 800cd6c:	e739      	b.n	800cbe2 <oslib_test_003_001_execute.lto_priv.0+0x392>
    test_assert((pipe1.rdptr != pipe1.wrptr) &&
 800cd6e:	6920      	ldr	r0, [r4, #16]
 800cd70:	f1a0 0c05 	sub.w	ip, r0, #5
 800cd74:	f1dc 0000 	rsbs	r0, ip, #0
 800cd78:	eb40 000c 	adc.w	r0, r0, ip
 800cd7c:	e717      	b.n	800cbae <oslib_test_003_001_execute.lto_priv.0+0x35e>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cd7e:	68a2      	ldr	r2, [r4, #8]
 800cd80:	4293      	cmp	r3, r2
 800cd82:	f47f aee5 	bne.w	800cb50 <oslib_test_003_001_execute.lto_priv.0+0x300>
 800cd86:	6920      	ldr	r0, [r4, #16]
 800cd88:	fab0 f080 	clz	r0, r0
 800cd8c:	0940      	lsrs	r0, r0, #5
 800cd8e:	e6df      	b.n	800cb50 <oslib_test_003_001_execute.lto_priv.0+0x300>
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cd90:	68a2      	ldr	r2, [r4, #8]
 800cd92:	4293      	cmp	r3, r2
 800cd94:	f47f ae96 	bne.w	800cac4 <oslib_test_003_001_execute.lto_priv.0+0x274>
 800cd98:	6920      	ldr	r0, [r4, #16]
 800cd9a:	f1a0 0c10 	sub.w	ip, r0, #16
 800cd9e:	f1dc 0000 	rsbs	r0, ip, #0
 800cda2:	eb40 000c 	adc.w	r0, r0, ip
 800cda6:	e68d      	b.n	800cac4 <oslib_test_003_001_execute.lto_priv.0+0x274>
 800cda8:	08011ed4 	.word	0x08011ed4
 800cdac:	08011ec0 	.word	0x08011ec0
 800cdb0:	080122e0 	.word	0x080122e0
 800cdb4:	08011ee0 	.word	0x08011ee0
 800cdb8:	20001d39 	.word	0x20001d39
 800cdbc:	20001d38 	.word	0x20001d38
 800cdc0:	20001d34 	.word	0x20001d34
 800cdc4:	08011eb4 	.word	0x08011eb4
	...

0800cdd0 <oslib_test_003_002_execute.lto_priv.0>:

static void oslib_test_003_002_execute(void) {
 800cdd0:	b570      	push	{r4, r5, r6, lr}

  /* [3.2.1] Reading while pipe is empty.*/
  test_set_step(1);
 800cdd2:	2501      	movs	r5, #1
  if (pp->reset) {
 800cdd4:	4c28      	ldr	r4, [pc, #160]	; (800ce78 <oslib_test_003_002_execute.lto_priv.0+0xa8>)
 800cdd6:	4e29      	ldr	r6, [pc, #164]	; (800ce7c <oslib_test_003_002_execute.lto_priv.0+0xac>)
 800cdd8:	7d23      	ldrb	r3, [r4, #20]
static void oslib_test_003_002_execute(void) {
 800cdda:	b084      	sub	sp, #16
  test_set_step(1);
 800cddc:	6035      	str	r5, [r6, #0]
 800cdde:	b16b      	cbz	r3, 800cdfc <oslib_test_003_002_execute.lto_priv.0+0x2c>
    size_t n;
    uint8_t buf[PIPE_SIZE];

    n = chPipeReadTimeout(&pipe1, buf, PIPE_SIZE, TIME_IMMEDIATE);
    test_assert(n == 0, "wrong size");
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800cde0:	6822      	ldr	r2, [r4, #0]
 800cde2:	68e3      	ldr	r3, [r4, #12]
 800cde4:	4293      	cmp	r3, r2
 800cde6:	d018      	beq.n	800ce1a <oslib_test_003_002_execute.lto_priv.0+0x4a>
  test_local_fail      = true;
 800cde8:	2301      	movs	r3, #1
 800cdea:	4925      	ldr	r1, [pc, #148]	; (800ce80 <oslib_test_003_002_execute.lto_priv.0+0xb0>)
  test_global_fail     = true;
 800cdec:	4a25      	ldr	r2, [pc, #148]	; (800ce84 <oslib_test_003_002_execute.lto_priv.0+0xb4>)
  test_failure_message = msg;
 800cdee:	4826      	ldr	r0, [pc, #152]	; (800ce88 <oslib_test_003_002_execute.lto_priv.0+0xb8>)
 800cdf0:	4c26      	ldr	r4, [pc, #152]	; (800ce8c <oslib_test_003_002_execute.lto_priv.0+0xbc>)
  test_local_fail      = true;
 800cdf2:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800cdf4:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800cdf6:	7013      	strb	r3, [r2, #0]
                (pipe1.wrptr == pipe1.buffer) &&
                (pipe1.cnt == PIPE_SIZE / 2),
                "invalid pipe state");
  }
  test_end_step(2);
}
 800cdf8:	b004      	add	sp, #16
 800cdfa:	bd70      	pop	{r4, r5, r6, pc}
 800cdfc:	2110      	movs	r1, #16
 800cdfe:	4668      	mov	r0, sp
 800ce00:	f7ff fb66 	bl	800c4d0 <chPipeReadTimeout.part.0.constprop.0>
  if (!condition)
 800ce04:	2800      	cmp	r0, #0
 800ce06:	d0eb      	beq.n	800cde0 <oslib_test_003_002_execute.lto_priv.0+0x10>
  test_local_fail      = true;
 800ce08:	481d      	ldr	r0, [pc, #116]	; (800ce80 <oslib_test_003_002_execute.lto_priv.0+0xb0>)
  test_global_fail     = true;
 800ce0a:	491e      	ldr	r1, [pc, #120]	; (800ce84 <oslib_test_003_002_execute.lto_priv.0+0xb4>)
  test_failure_message = msg;
 800ce0c:	4b1e      	ldr	r3, [pc, #120]	; (800ce88 <oslib_test_003_002_execute.lto_priv.0+0xb8>)
 800ce0e:	4a20      	ldr	r2, [pc, #128]	; (800ce90 <oslib_test_003_002_execute.lto_priv.0+0xc0>)
  test_local_fail      = true;
 800ce10:	7005      	strb	r5, [r0, #0]
  test_global_fail     = true;
 800ce12:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 800ce14:	601a      	str	r2, [r3, #0]
 800ce16:	b004      	add	sp, #16
 800ce18:	bd70      	pop	{r4, r5, r6, pc}
    test_assert((pipe1.rdptr == pipe1.buffer) &&
 800ce1a:	68a2      	ldr	r2, [r4, #8]
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d1e3      	bne.n	800cde8 <oslib_test_003_002_execute.lto_priv.0+0x18>
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d1e0      	bne.n	800cde8 <oslib_test_003_002_execute.lto_priv.0+0x18>
  test_set_step(2);
 800ce26:	2302      	movs	r3, #2
  if (pp->reset) {
 800ce28:	7d25      	ldrb	r5, [r4, #20]
 800ce2a:	6033      	str	r3, [r6, #0]
 800ce2c:	b97d      	cbnz	r5, 800ce4e <oslib_test_003_002_execute.lto_priv.0+0x7e>
 800ce2e:	2010      	movs	r0, #16
 800ce30:	f7ff fc36 	bl	800c6a0 <chPipeWriteTimeout.part.0.constprop.0>
  if (!condition)
 800ce34:	2808      	cmp	r0, #8
 800ce36:	d10a      	bne.n	800ce4e <oslib_test_003_002_execute.lto_priv.0+0x7e>
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800ce38:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d010      	beq.n	800ce62 <oslib_test_003_002_execute.lto_priv.0+0x92>
 800ce40:	4628      	mov	r0, r5
 800ce42:	4912      	ldr	r1, [pc, #72]	; (800ce8c <oslib_test_003_002_execute.lto_priv.0+0xbc>)
}
 800ce44:	b004      	add	sp, #16
 800ce46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800ce4a:	f7f8 bd39 	b.w	80058c0 <_test_assert>
  test_local_fail      = true;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	490b      	ldr	r1, [pc, #44]	; (800ce80 <oslib_test_003_002_execute.lto_priv.0+0xb0>)
  test_global_fail     = true;
 800ce52:	4a0c      	ldr	r2, [pc, #48]	; (800ce84 <oslib_test_003_002_execute.lto_priv.0+0xb4>)
  test_failure_message = msg;
 800ce54:	480c      	ldr	r0, [pc, #48]	; (800ce88 <oslib_test_003_002_execute.lto_priv.0+0xb8>)
 800ce56:	4c0e      	ldr	r4, [pc, #56]	; (800ce90 <oslib_test_003_002_execute.lto_priv.0+0xc0>)
  test_local_fail      = true;
 800ce58:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800ce5a:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800ce5c:	7013      	strb	r3, [r2, #0]
}
 800ce5e:	b004      	add	sp, #16
 800ce60:	bd70      	pop	{r4, r5, r6, pc}
    test_assert((pipe1.rdptr == pipe1.wrptr) &&
 800ce62:	6822      	ldr	r2, [r4, #0]
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d1eb      	bne.n	800ce40 <oslib_test_003_002_execute.lto_priv.0+0x70>
 800ce68:	6925      	ldr	r5, [r4, #16]
 800ce6a:	f1a5 0508 	sub.w	r5, r5, #8
 800ce6e:	fab5 f585 	clz	r5, r5
 800ce72:	096d      	lsrs	r5, r5, #5
 800ce74:	e7e4      	b.n	800ce40 <oslib_test_003_002_execute.lto_priv.0+0x70>
 800ce76:	bf00      	nop
 800ce78:	20000c98 	.word	0x20000c98
 800ce7c:	20001d3c 	.word	0x20001d3c
 800ce80:	20001d39 	.word	0x20001d39
 800ce84:	20001d38 	.word	0x20001d38
 800ce88:	20001d34 	.word	0x20001d34
 800ce8c:	08011ec0 	.word	0x08011ec0
 800ce90:	08011ed4 	.word	0x08011ed4
	...

0800cea0 <chThdCreateFromMemoryPool.constprop.0>:
 *                      the thread into the working space area.
 * @retval  NULL        if the memory pool is empty.
 *
 * @api
 */
thread_t *chThdCreateFromMemoryPool(memory_pool_t *mp, const char *name,
 800cea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cea4:	2320      	movs	r3, #32
 800cea6:	4606      	mov	r6, r0
 800cea8:	460f      	mov	r7, r1
 800ceaa:	4690      	mov	r8, r2
 800ceac:	b086      	sub	sp, #24
 800ceae:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800ceb2:	f7f3 fcb5 	bl	8000820 <_dbg_check_lock>
 800ceb6:	4825      	ldr	r0, [pc, #148]	; (800cf4c <chThdCreateFromMemoryPool.constprop.0+0xac>)
 800ceb8:	f7f7 fcaa 	bl	8004810 <chPoolAllocI>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800cebc:	4d24      	ldr	r5, [pc, #144]	; (800cf50 <chThdCreateFromMemoryPool.constprop.0+0xb0>)
 800cebe:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800cec0:	f7f3 fcbe 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	42ab      	cmp	r3, r5
 800cec8:	d004      	beq.n	800ced4 <chThdCreateFromMemoryPool.constprop.0+0x34>
 800ceca:	69aa      	ldr	r2, [r5, #24]
 800cecc:	689b      	ldr	r3, [r3, #8]
 800cece:	6892      	ldr	r2, [r2, #8]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d334      	bcc.n	800cf3e <chThdCreateFromMemoryPool.constprop.0+0x9e>
 800ced4:	2300      	movs	r3, #0
 800ced6:	f383 8811 	msr	BASEPRI, r3
  void *wsp;

  chDbgCheck(mp != NULL);

  wsp = chPoolAlloc(mp);
  if (wsp == NULL) {
 800ceda:	b364      	cbz	r4, 800cf36 <chThdCreateFromMemoryPool.constprop.0+0x96>
    return NULL;
  }

  thread_descriptor_t td = {
 800cedc:	9600      	str	r6, [sp, #0]
    name,
    wsp,
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800cede:	4e1b      	ldr	r6, [pc, #108]	; (800cf4c <chThdCreateFromMemoryPool.constprop.0+0xac>)
  thread_descriptor_t td = {
 800cee0:	4b1c      	ldr	r3, [pc, #112]	; (800cf54 <chThdCreateFromMemoryPool.constprop.0+0xb4>)
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800cee2:	6872      	ldr	r2, [r6, #4]
  thread_descriptor_t td = {
 800cee4:	e9cd 3804 	strd	r3, r8, [sp, #16]
    (stkalign_t *)((uint8_t *)wsp + mp->object_size),
 800cee8:	18a3      	adds	r3, r4, r2
  while (startp < endp) {
 800ceea:	42a3      	cmp	r3, r4
  thread_descriptor_t td = {
 800ceec:	9703      	str	r7, [sp, #12]
 800ceee:	9401      	str	r4, [sp, #4]
 800cef0:	9302      	str	r3, [sp, #8]
 800cef2:	d903      	bls.n	800cefc <chThdCreateFromMemoryPool.constprop.0+0x5c>
    *startp++ = v;
 800cef4:	2155      	movs	r1, #85	; 0x55
 800cef6:	4620      	mov	r0, r4
 800cef8:	f002 f92f 	bl	800f15a <memset>
 800cefc:	2320      	movs	r3, #32
 800cefe:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800cf02:	f7f3 fc8d 	bl	8000820 <_dbg_check_lock>
                  (uint8_t *)wsp + mp->object_size,
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(&td);
 800cf06:	4668      	mov	r0, sp
 800cf08:	f7f5 ffda 	bl	8002ec0 <chThdCreateSuspendedI>
  tp->flags = CH_FLAG_MODE_MPOOL;
 800cf0c:	2302      	movs	r3, #2
  tp->mpool = mp;
  chSchWakeupS(tp, MSG_OK);
 800cf0e:	2100      	movs	r1, #0
  tp->flags = CH_FLAG_MODE_MPOOL;
 800cf10:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tp->mpool = mp;
 800cf14:	6406      	str	r6, [r0, #64]	; 0x40
  tp = chThdCreateSuspendedI(&td);
 800cf16:	4604      	mov	r4, r0
  chSchWakeupS(tp, MSG_OK);
 800cf18:	f7f5 fe12 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 800cf1c:	f7f3 fc90 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800cf20:	682b      	ldr	r3, [r5, #0]
 800cf22:	42ab      	cmp	r3, r5
 800cf24:	d004      	beq.n	800cf30 <chThdCreateFromMemoryPool.constprop.0+0x90>
 800cf26:	69aa      	ldr	r2, [r5, #24]
 800cf28:	689b      	ldr	r3, [r3, #8]
 800cf2a:	6892      	ldr	r2, [r2, #8]
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d309      	bcc.n	800cf44 <chThdCreateFromMemoryPool.constprop.0+0xa4>
 800cf30:	2300      	movs	r3, #0
 800cf32:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return tp;
}
 800cf36:	4620      	mov	r0, r4
 800cf38:	b006      	add	sp, #24
 800cf3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf3e:	4806      	ldr	r0, [pc, #24]	; (800cf58 <chThdCreateFromMemoryPool.constprop.0+0xb8>)
 800cf40:	f7f3 fc16 	bl	8000770 <chSysHalt>
 800cf44:	4805      	ldr	r0, [pc, #20]	; (800cf5c <chThdCreateFromMemoryPool.constprop.0+0xbc>)
 800cf46:	f7f3 fc13 	bl	8000770 <chSysHalt>
 800cf4a:	bf00      	nop
 800cf4c:	20001698 	.word	0x20001698
 800cf50:	20000d70 	.word	0x20000d70
 800cf54:	08006a31 	.word	0x08006a31
 800cf58:	08010e40 	.word	0x08010e40
 800cf5c:	08010cc4 	.word	0x08010cc4

0800cf60 <chEvtWaitOne.constprop.0>:
eventmask_t chEvtWaitOne(eventmask_t events) {
 800cf60:	b538      	push	{r3, r4, r5, lr}
  thread_t *ctp = currp;
 800cf62:	4c17      	ldr	r4, [pc, #92]	; (800cfc0 <chEvtWaitOne.constprop.0+0x60>)
 800cf64:	2320      	movs	r3, #32
 800cf66:	69a5      	ldr	r5, [r4, #24]
 800cf68:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800cf6c:	f7f3 fc58 	bl	8000820 <_dbg_check_lock>
  m = ctp->epending & events;
 800cf70:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  if (m == (eventmask_t)0) {
 800cf72:	b1d3      	cbz	r3, 800cfaa <chEvtWaitOne.constprop.0+0x4a>
  m ^= m & (m - (eventmask_t)1);
 800cf74:	425a      	negs	r2, r3
 800cf76:	ea03 0002 	and.w	r0, r3, r2
  ctp->epending &= ~m;
 800cf7a:	ea23 0302 	bic.w	r3, r3, r2
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800cf7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800cf80:	636b      	str	r3, [r5, #52]	; 0x34
 800cf82:	b97a      	cbnz	r2, 800cfa4 <chEvtWaitOne.constprop.0+0x44>
 800cf84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	dd0c      	ble.n	800cfa4 <chEvtWaitOne.constprop.0+0x44>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800cf8a:	6823      	ldr	r3, [r4, #0]
  _dbg_leave_lock();
 800cf8c:	6362      	str	r2, [r4, #52]	; 0x34
 800cf8e:	42a3      	cmp	r3, r4
 800cf90:	d004      	beq.n	800cf9c <chEvtWaitOne.constprop.0+0x3c>
 800cf92:	69a2      	ldr	r2, [r4, #24]
 800cf94:	689b      	ldr	r3, [r3, #8]
 800cf96:	6892      	ldr	r2, [r2, #8]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d30e      	bcc.n	800cfba <chEvtWaitOne.constprop.0+0x5a>
 800cf9c:	2300      	movs	r3, #0
 800cf9e:	f383 8811 	msr	BASEPRI, r3
}
 800cfa2:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#5");
 800cfa4:	4807      	ldr	r0, [pc, #28]	; (800cfc4 <chEvtWaitOne.constprop.0+0x64>)
 800cfa6:	f7f3 fbe3 	bl	8000770 <chSysHalt>
    ctp->u.ewmask = events;
 800cfaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    chSchGoSleepS(CH_STATE_WTOREVT);
 800cfae:	200a      	movs	r0, #10
    ctp->u.ewmask = events;
 800cfb0:	626b      	str	r3, [r5, #36]	; 0x24
    chSchGoSleepS(CH_STATE_WTOREVT);
 800cfb2:	f7f5 f995 	bl	80022e0 <chSchGoSleepS>
    m = ctp->epending & events;
 800cfb6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800cfb8:	e7dc      	b.n	800cf74 <chEvtWaitOne.constprop.0+0x14>
 800cfba:	4803      	ldr	r0, [pc, #12]	; (800cfc8 <chEvtWaitOne.constprop.0+0x68>)
 800cfbc:	f7f3 fbd8 	bl	8000770 <chSysHalt>
 800cfc0:	20000d70 	.word	0x20000d70
 800cfc4:	0800f214 	.word	0x0800f214
 800cfc8:	08010f9c 	.word	0x08010f9c
 800cfcc:	00000000 	.word	0x00000000

0800cfd0 <chEvtGetAndClearEvents.constprop.0>:
 800cfd0:	2320      	movs	r3, #32
eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 800cfd2:	b510      	push	{r4, lr}
 800cfd4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800cfd8:	4a0c      	ldr	r2, [pc, #48]	; (800d00c <chEvtGetAndClearEvents.constprop.0+0x3c>)
 800cfda:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
 800cfde:	430b      	orrs	r3, r1
 800cfe0:	d10e      	bne.n	800d000 <chEvtGetAndClearEvents.constprop.0+0x30>
 800cfe2:	6814      	ldr	r4, [r2, #0]
  m = currp->epending & events;
 800cfe4:	6991      	ldr	r1, [r2, #24]
 800cfe6:	4294      	cmp	r4, r2
 800cfe8:	6b48      	ldr	r0, [r1, #52]	; 0x34
  currp->epending &= ~events;
 800cfea:	634b      	str	r3, [r1, #52]	; 0x34
  _dbg_leave_lock();
 800cfec:	6353      	str	r3, [r2, #52]	; 0x34
 800cfee:	d003      	beq.n	800cff8 <chEvtGetAndClearEvents.constprop.0+0x28>
 800cff0:	688a      	ldr	r2, [r1, #8]
 800cff2:	68a3      	ldr	r3, [r4, #8]
 800cff4:	429a      	cmp	r2, r3
 800cff6:	d306      	bcc.n	800d006 <chEvtGetAndClearEvents.constprop.0+0x36>
 800cff8:	2300      	movs	r3, #0
 800cffa:	f383 8811 	msr	BASEPRI, r3
}
 800cffe:	bd10      	pop	{r4, pc}
    chSysHalt("SV#4");
 800d000:	4803      	ldr	r0, [pc, #12]	; (800d010 <chEvtGetAndClearEvents.constprop.0+0x40>)
 800d002:	f7f3 fbb5 	bl	8000770 <chSysHalt>
 800d006:	4803      	ldr	r0, [pc, #12]	; (800d014 <chEvtGetAndClearEvents.constprop.0+0x44>)
 800d008:	f7f3 fbb2 	bl	8000770 <chSysHalt>
 800d00c:	20000d70 	.word	0x20000d70
 800d010:	0800f20c 	.word	0x0800f20c
 800d014:	08010f9c 	.word	0x08010f9c
	...

0800d020 <chMtxTryLock.constprop.0>:
 800d020:	2320      	movs	r3, #32
bool chMtxTryLock(mutex_t *mp) {
 800d022:	b510      	push	{r4, lr}
 800d024:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800d028:	f7f3 fbfa 	bl	8000820 <_dbg_check_lock>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800d02c:	4b10      	ldr	r3, [pc, #64]	; (800d070 <chMtxTryLock.constprop.0+0x50>)
 800d02e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d030:	b9c0      	cbnz	r0, 800d064 <chMtxTryLock.constprop.0+0x44>
 800d032:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d034:	2a00      	cmp	r2, #0
 800d036:	dd15      	ble.n	800d064 <chMtxTryLock.constprop.0+0x44>
  if (mp->owner != NULL) {
 800d038:	4a0e      	ldr	r2, [pc, #56]	; (800d074 <chMtxTryLock.constprop.0+0x54>)
 800d03a:	6999      	ldr	r1, [r3, #24]
 800d03c:	6894      	ldr	r4, [r2, #8]
 800d03e:	b924      	cbnz	r4, 800d04a <chMtxTryLock.constprop.0+0x2a>
  return true;
 800d040:	2001      	movs	r0, #1
  mp->next = currtp->mtxlist;
 800d042:	6b8c      	ldr	r4, [r1, #56]	; 0x38
  currtp->mtxlist = mp;
 800d044:	638a      	str	r2, [r1, #56]	; 0x38
  mp->next = currtp->mtxlist;
 800d046:	e9c2 1402 	strd	r1, r4, [r2, #8]
  _dbg_leave_lock();
 800d04a:	2400      	movs	r4, #0
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	635c      	str	r4, [r3, #52]	; 0x34
 800d050:	429a      	cmp	r2, r3
 800d052:	d003      	beq.n	800d05c <chMtxTryLock.constprop.0+0x3c>
 800d054:	6889      	ldr	r1, [r1, #8]
 800d056:	6893      	ldr	r3, [r2, #8]
 800d058:	4299      	cmp	r1, r3
 800d05a:	d306      	bcc.n	800d06a <chMtxTryLock.constprop.0+0x4a>
 800d05c:	2300      	movs	r3, #0
 800d05e:	f383 8811 	msr	BASEPRI, r3
}
 800d062:	bd10      	pop	{r4, pc}
    chSysHalt("SV#11");
 800d064:	4804      	ldr	r0, [pc, #16]	; (800d078 <chMtxTryLock.constprop.0+0x58>)
 800d066:	f7f3 fb83 	bl	8000770 <chSysHalt>
 800d06a:	4804      	ldr	r0, [pc, #16]	; (800d07c <chMtxTryLock.constprop.0+0x5c>)
 800d06c:	f7f3 fb80 	bl	8000770 <chSysHalt>
 800d070:	20000d70 	.word	0x20000d70
 800d074:	20000818 	.word	0x20000818
 800d078:	0800f204 	.word	0x0800f204
 800d07c:	08010f48 	.word	0x08010f48

0800d080 <chSemResetWithMessage.constprop.0>:
void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg) {
 800d080:	b570      	push	{r4, r5, r6, lr}
 800d082:	2320      	movs	r3, #32
 800d084:	4604      	mov	r4, r0
 800d086:	460d      	mov	r5, r1
 800d088:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800d08c:	f7f3 fbc8 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800d090:	f7f3 fc56 	bl	8000940 <chDbgCheckClassI>
  chDbgAssert(((sp->cnt >= (cnt_t)0) && ch_queue_isempty(&sp->queue)) ||
 800d094:	68a3      	ldr	r3, [r4, #8]
 800d096:	2b00      	cmp	r3, #0
 800d098:	6823      	ldr	r3, [r4, #0]
 800d09a:	db04      	blt.n	800d0a6 <chSemResetWithMessage.constprop.0+0x26>
 800d09c:	42a3      	cmp	r3, r4
 800d09e:	d025      	beq.n	800d0ec <chSemResetWithMessage.constprop.0+0x6c>
 800d0a0:	4813      	ldr	r0, [pc, #76]	; (800d0f0 <chSemResetWithMessage.constprop.0+0x70>)
 800d0a2:	f7f3 fb65 	bl	8000770 <chSysHalt>
 800d0a6:	42a3      	cmp	r3, r4
 800d0a8:	d0fa      	beq.n	800d0a0 <chSemResetWithMessage.constprop.0+0x20>
    chSchReadyI((thread_t *)ch_queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 800d0aa:	f06f 0601 	mvn.w	r6, #1
  sp->cnt = n;
 800d0ae:	60a5      	str	r5, [r4, #8]
  ch_queue_t *p = qp->prev;
 800d0b0:	6860      	ldr	r0, [r4, #4]
  qp->prev       = p->prev;
 800d0b2:	6843      	ldr	r3, [r0, #4]
 800d0b4:	6063      	str	r3, [r4, #4]
  qp->prev->next = qp;
 800d0b6:	601c      	str	r4, [r3, #0]
    chSchReadyI((thread_t *)ch_queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 800d0b8:	f7f5 f82a 	bl	8002110 <chSchReadyI>
  while (ch_queue_notempty(&sp->queue)) {
 800d0bc:	6823      	ldr	r3, [r4, #0]
    chSchReadyI((thread_t *)ch_queue_lifo_remove(&sp->queue))->u.rdymsg = msg;
 800d0be:	6246      	str	r6, [r0, #36]	; 0x24
  while (ch_queue_notempty(&sp->queue)) {
 800d0c0:	42a3      	cmp	r3, r4
 800d0c2:	d1f5      	bne.n	800d0b0 <chSemResetWithMessage.constprop.0+0x30>
  chSchRescheduleS();
 800d0c4:	f7f5 fdc4 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800d0c8:	f7f3 fbba 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800d0cc:	4b09      	ldr	r3, [pc, #36]	; (800d0f4 <chSemResetWithMessage.constprop.0+0x74>)
 800d0ce:	681a      	ldr	r2, [r3, #0]
 800d0d0:	429a      	cmp	r2, r3
 800d0d2:	d004      	beq.n	800d0de <chSemResetWithMessage.constprop.0+0x5e>
 800d0d4:	6999      	ldr	r1, [r3, #24]
 800d0d6:	6893      	ldr	r3, [r2, #8]
 800d0d8:	688a      	ldr	r2, [r1, #8]
 800d0da:	429a      	cmp	r2, r3
 800d0dc:	d303      	bcc.n	800d0e6 <chSemResetWithMessage.constprop.0+0x66>
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f383 8811 	msr	BASEPRI, r3
}
 800d0e4:	bd70      	pop	{r4, r5, r6, pc}
 800d0e6:	4804      	ldr	r0, [pc, #16]	; (800d0f8 <chSemResetWithMessage.constprop.0+0x78>)
 800d0e8:	f7f3 fb42 	bl	8000770 <chSysHalt>
  sp->cnt = n;
 800d0ec:	609d      	str	r5, [r3, #8]
 800d0ee:	e7e9      	b.n	800d0c4 <chSemResetWithMessage.constprop.0+0x44>
 800d0f0:	08012234 	.word	0x08012234
 800d0f4:	20000d70 	.word	0x20000d70
 800d0f8:	08011028 	.word	0x08011028
 800d0fc:	00000000 	.word	0x00000000

0800d100 <chThdCreateStatic.constprop.0>:
thread_t *chThdCreateStatic(void *wsp, size_t size,
 800d100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  chDbgCheck((wsp != NULL) &&
 800d104:	b110      	cbz	r0, 800d10c <chThdCreateStatic.constprop.0+0xc>
 800d106:	4604      	mov	r4, r0
 800d108:	0760      	lsls	r0, r4, #29
 800d10a:	d002      	beq.n	800d112 <chThdCreateStatic.constprop.0+0x12>
 800d10c:	4842      	ldr	r0, [pc, #264]	; (800d218 <chThdCreateStatic.constprop.0+0x118>)
 800d10e:	f7f3 fb2f 	bl	8000770 <chSysHalt>
 800d112:	29ff      	cmp	r1, #255	; 0xff
 800d114:	460e      	mov	r6, r1
 800d116:	d8f9      	bhi.n	800d10c <chThdCreateStatic.constprop.0+0xc>
 800d118:	461f      	mov	r7, r3
 800d11a:	4690      	mov	r8, r2
 800d11c:	2320      	movs	r3, #32
 800d11e:	f383 8811 	msr	BASEPRI, r3
  tp = ch.rlist.newer;
 800d122:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 800d21c <chThdCreateStatic.constprop.0+0x11c>
  _dbg_check_lock();
 800d126:	f7f3 fb7b 	bl	8000820 <_dbg_check_lock>
 800d12a:	f8d9 5010 	ldr.w	r5, [r9, #16]
  tp->refs++;
 800d12e:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800d132:	3301      	adds	r3, #1
 800d134:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  _dbg_check_unlock();
 800d138:	f7f3 fb82 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800d13c:	f8d9 3000 	ldr.w	r3, [r9]
 800d140:	454b      	cmp	r3, r9
 800d142:	d005      	beq.n	800d150 <chThdCreateStatic.constprop.0+0x50>
 800d144:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800d148:	689b      	ldr	r3, [r3, #8]
 800d14a:	6892      	ldr	r2, [r2, #8]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d30c      	bcc.n	800d16a <chThdCreateStatic.constprop.0+0x6a>
 800d150:	2300      	movs	r3, #0
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	e004      	b.n	800d162 <chThdCreateStatic.constprop.0+0x62>
    ctp = chRegNextThread(ctp);
 800d158:	4628      	mov	r0, r5
 800d15a:	f7f7 fa69 	bl	8004630 <chRegNextThread>
  } while (ctp != NULL);
 800d15e:	4605      	mov	r5, r0
 800d160:	b130      	cbz	r0, 800d170 <chThdCreateStatic.constprop.0+0x70>
    if (chThdGetWorkingAreaX(ctp) == wa) {
 800d162:	69eb      	ldr	r3, [r5, #28]
 800d164:	429c      	cmp	r4, r3
 800d166:	d1f7      	bne.n	800d158 <chThdCreateStatic.constprop.0+0x58>
 800d168:	e7d0      	b.n	800d10c <chThdCreateStatic.constprop.0+0xc>
 800d16a:	482d      	ldr	r0, [pc, #180]	; (800d220 <chThdCreateStatic.constprop.0+0x120>)
 800d16c:	f7f3 fb00 	bl	8000770 <chSysHalt>
    *startp++ = v;
 800d170:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800d174:	2155      	movs	r1, #85	; 0x55
 800d176:	4620      	mov	r0, r4
 800d178:	f001 ffef 	bl	800f15a <memset>
 800d17c:	2320      	movs	r3, #32
 800d17e:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800d182:	f7f3 fb4d 	bl	8000820 <_dbg_check_lock>
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800d186:	4b27      	ldr	r3, [pc, #156]	; (800d224 <chThdCreateStatic.constprop.0+0x124>)
  tp->state           = CH_STATE_WTSTART;
 800d188:	2002      	movs	r0, #2
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800d18a:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc
  tp->refs            = (trefs_t)1;
 800d18e:	2301      	movs	r3, #1
  chSchWakeupS(tp, MSG_OK);
 800d190:	4629      	mov	r1, r5
  tp->mtxlist         = NULL;
 800d192:	e9c4 564e 	strd	r5, r6, [r4, #312]	; 0x138
  tp->epending        = (eventmask_t)0;
 800d196:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
  tp->name            = name;
 800d19a:	4d23      	ldr	r5, [pc, #140]	; (800d228 <chThdCreateStatic.constprop.0+0x128>)
  REG_INSERT(tp);
 800d19c:	f8d9 2014 	ldr.w	r2, [r9, #20]
  tp->name            = name;
 800d1a0:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
  tp->state           = CH_STATE_WTSTART;
 800d1a4:	f8a4 0120 	strh.w	r0, [r4, #288]	; 0x120
  tp->refs            = (trefs_t)1;
 800d1a8:	f884 3122 	strb.w	r3, [r4, #290]	; 0x122
  tp = (thread_t *)((uint8_t *)wsp + size -
 800d1ac:	f504 7580 	add.w	r5, r4, #256	; 0x100
  ch_queue_init(&tp->msgqueue);
 800d1b0:	f504 7396 	add.w	r3, r4, #300	; 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800d1b4:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
  REG_INSERT(tp);
 800d1b8:	f8c4 2114 	str.w	r2, [r4, #276]	; 0x114
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800d1bc:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
 800d1c0:	f8c4 80dc 	str.w	r8, [r4, #220]	; 0xdc
  tp->wabase = (stkalign_t *)wsp;
 800d1c4:	f8c4 411c 	str.w	r4, [r4, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800d1c8:	f8c4 70e0 	str.w	r7, [r4, #224]	; 0xe0
  tp->hdr.pqueue.prio = prio;
 800d1cc:	f8c4 6108 	str.w	r6, [r4, #264]	; 0x108
  REG_INSERT(tp);
 800d1d0:	f8c4 9110 	str.w	r9, [r4, #272]	; 0x110
 800d1d4:	6115      	str	r5, [r2, #16]
  qp->prev = qp;
 800d1d6:	e9c4 334b 	strd	r3, r3, [r4, #300]	; 0x12c
  ch_list_init(&tp->waiting);
 800d1da:	f504 7394 	add.w	r3, r4, #296	; 0x128
  lp->next = lp;
 800d1de:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
  chSchWakeupS(tp, MSG_OK);
 800d1e2:	4628      	mov	r0, r5
  REG_INSERT(tp);
 800d1e4:	f8c9 5014 	str.w	r5, [r9, #20]
  chSchWakeupS(tp, MSG_OK);
 800d1e8:	f7f5 fcaa 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 800d1ec:	f7f3 fb28 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800d1f0:	f8d9 3000 	ldr.w	r3, [r9]
 800d1f4:	454b      	cmp	r3, r9
 800d1f6:	d005      	beq.n	800d204 <chThdCreateStatic.constprop.0+0x104>
 800d1f8:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800d1fc:	689b      	ldr	r3, [r3, #8]
 800d1fe:	6892      	ldr	r2, [r2, #8]
 800d200:	429a      	cmp	r2, r3
 800d202:	d305      	bcc.n	800d210 <chThdCreateStatic.constprop.0+0x110>
 800d204:	2300      	movs	r3, #0
 800d206:	f383 8811 	msr	BASEPRI, r3
}
 800d20a:	4628      	mov	r0, r5
 800d20c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d210:	4806      	ldr	r0, [pc, #24]	; (800d22c <chThdCreateStatic.constprop.0+0x12c>)
 800d212:	f7f3 faad 	bl	8000770 <chSysHalt>
 800d216:	bf00      	nop
 800d218:	080121c8 	.word	0x080121c8
 800d21c:	20000d70 	.word	0x20000d70
 800d220:	08010da0 	.word	0x08010da0
 800d224:	08000251 	.word	0x08000251
 800d228:	08011ef4 	.word	0x08011ef4
 800d22c:	08010de4 	.word	0x08010de4

0800d230 <rt_test_011_001_execute.lto_priv.0>:
 800d230:	4b19      	ldr	r3, [pc, #100]	; (800d298 <rt_test_011_001_execute.lto_priv.0+0x68>)
static void rt_test_011_001_execute(void) {
 800d232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d236:	699a      	ldr	r2, [r3, #24]
  test_set_step(1);
 800d238:	2601      	movs	r6, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800d23a:	2300      	movs	r3, #0
 800d23c:	6891      	ldr	r1, [r2, #8]
  test_set_step(1);
 800d23e:	4f17      	ldr	r7, [pc, #92]	; (800d29c <rt_test_011_001_execute.lto_priv.0+0x6c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800d240:	4a17      	ldr	r2, [pc, #92]	; (800d2a0 <rt_test_011_001_execute.lto_priv.0+0x70>)
 800d242:	3901      	subs	r1, #1
 800d244:	4817      	ldr	r0, [pc, #92]	; (800d2a4 <rt_test_011_001_execute.lto_priv.0+0x74>)
      threads[i] = NULL;
 800d246:	4698      	mov	r8, r3
  test_set_step(1);
 800d248:	603e      	str	r6, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800d24a:	f7ff ff59 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800d24e:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800d250:	4d15      	ldr	r5, [pc, #84]	; (800d2a8 <rt_test_011_001_execute.lto_priv.0+0x78>)
  test_set_step(2);
 800d252:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread1, NULL);
 800d254:	6028      	str	r0, [r5, #0]
    n = msg_loop_test(threads[0]);
 800d256:	f7fb fa4b 	bl	80086f0 <msg_loop_test.lto_priv.0>
 800d25a:	4606      	mov	r6, r0
  for (i = 0; i < MAX_THREADS; i++)
 800d25c:	462c      	mov	r4, r5
 800d25e:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 800d260:	f854 0b04 	ldr.w	r0, [r4], #4
 800d264:	b118      	cbz	r0, 800d26e <rt_test_011_001_execute.lto_priv.0+0x3e>
      chThdWait(threads[i]);
 800d266:	f7f7 f963 	bl	8004530 <chThdWait>
      threads[i] = NULL;
 800d26a:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800d26e:	42ac      	cmp	r4, r5
 800d270:	d1f6      	bne.n	800d260 <rt_test_011_001_execute.lto_priv.0+0x30>
  test_set_step(3);
 800d272:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800d274:	480d      	ldr	r0, [pc, #52]	; (800d2ac <rt_test_011_001_execute.lto_priv.0+0x7c>)
  test_set_step(3);
 800d276:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800d278:	f7f9 f96a 	bl	8006550 <test_print>
    test_printn(n);
 800d27c:	4630      	mov	r0, r6
 800d27e:	f7f9 fc0f 	bl	8006aa0 <test_printn>
    test_print(" msgs/S, ");
 800d282:	480b      	ldr	r0, [pc, #44]	; (800d2b0 <rt_test_011_001_execute.lto_priv.0+0x80>)
 800d284:	f7f9 f964 	bl	8006550 <test_print>
    test_printn(n << 1);
 800d288:	0070      	lsls	r0, r6, #1
 800d28a:	f7f9 fc09 	bl	8006aa0 <test_printn>
}
 800d28e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800d292:	4808      	ldr	r0, [pc, #32]	; (800d2b4 <rt_test_011_001_execute.lto_priv.0+0x84>)
 800d294:	f7f9 b974 	b.w	8006580 <test_println>
 800d298:	20000d70 	.word	0x20000d70
 800d29c:	20001d3c 	.word	0x20001d3c
 800d2a0:	08003f91 	.word	0x08003f91
 800d2a4:	200016c8 	.word	0x200016c8
 800d2a8:	20001d54 	.word	0x20001d54
 800d2ac:	08011890 	.word	0x08011890
 800d2b0:	08011efc 	.word	0x08011efc
 800d2b4:	08011f08 	.word	0x08011f08
	...

0800d2c0 <rt_test_011_002_execute.lto_priv.0>:
  return ch.rlist.current;
 800d2c0:	4b19      	ldr	r3, [pc, #100]	; (800d328 <rt_test_011_002_execute.lto_priv.0+0x68>)
static void rt_test_011_002_execute(void) {
 800d2c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  test_set_step(1);
 800d2c6:	2601      	movs	r6, #1
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d2c8:	699a      	ldr	r2, [r3, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	6891      	ldr	r1, [r2, #8]
  test_set_step(1);
 800d2ce:	4f17      	ldr	r7, [pc, #92]	; (800d32c <rt_test_011_002_execute.lto_priv.0+0x6c>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d2d0:	4431      	add	r1, r6
 800d2d2:	4a17      	ldr	r2, [pc, #92]	; (800d330 <rt_test_011_002_execute.lto_priv.0+0x70>)
 800d2d4:	4817      	ldr	r0, [pc, #92]	; (800d334 <rt_test_011_002_execute.lto_priv.0+0x74>)
      threads[i] = NULL;
 800d2d6:	4698      	mov	r8, r3
  test_set_step(1);
 800d2d8:	603e      	str	r6, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d2da:	f7ff ff11 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800d2de:	2302      	movs	r3, #2
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d2e0:	4d15      	ldr	r5, [pc, #84]	; (800d338 <rt_test_011_002_execute.lto_priv.0+0x78>)
  test_set_step(2);
 800d2e2:	603b      	str	r3, [r7, #0]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d2e4:	6028      	str	r0, [r5, #0]
    n = msg_loop_test(threads[0]);
 800d2e6:	f7fb fa03 	bl	80086f0 <msg_loop_test.lto_priv.0>
 800d2ea:	4606      	mov	r6, r0
  for (i = 0; i < MAX_THREADS; i++)
 800d2ec:	462c      	mov	r4, r5
 800d2ee:	3514      	adds	r5, #20
    if (threads[i] != NULL) {
 800d2f0:	f854 0b04 	ldr.w	r0, [r4], #4
 800d2f4:	b118      	cbz	r0, 800d2fe <rt_test_011_002_execute.lto_priv.0+0x3e>
      chThdWait(threads[i]);
 800d2f6:	f7f7 f91b 	bl	8004530 <chThdWait>
      threads[i] = NULL;
 800d2fa:	f844 8c04 	str.w	r8, [r4, #-4]
  for (i = 0; i < MAX_THREADS; i++)
 800d2fe:	42ac      	cmp	r4, r5
 800d300:	d1f6      	bne.n	800d2f0 <rt_test_011_002_execute.lto_priv.0+0x30>
  test_set_step(3);
 800d302:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800d304:	480d      	ldr	r0, [pc, #52]	; (800d33c <rt_test_011_002_execute.lto_priv.0+0x7c>)
  test_set_step(3);
 800d306:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800d308:	f7f9 f922 	bl	8006550 <test_print>
    test_printn(n);
 800d30c:	4630      	mov	r0, r6
 800d30e:	f7f9 fbc7 	bl	8006aa0 <test_printn>
    test_print(" msgs/S, ");
 800d312:	480b      	ldr	r0, [pc, #44]	; (800d340 <rt_test_011_002_execute.lto_priv.0+0x80>)
 800d314:	f7f9 f91c 	bl	8006550 <test_print>
    test_printn(n << 1);
 800d318:	0070      	lsls	r0, r6, #1
 800d31a:	f7f9 fbc1 	bl	8006aa0 <test_printn>
}
 800d31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800d322:	4808      	ldr	r0, [pc, #32]	; (800d344 <rt_test_011_002_execute.lto_priv.0+0x84>)
 800d324:	f7f9 b92c 	b.w	8006580 <test_println>
 800d328:	20000d70 	.word	0x20000d70
 800d32c:	20001d3c 	.word	0x20001d3c
 800d330:	08003f91 	.word	0x08003f91
 800d334:	200016c8 	.word	0x200016c8
 800d338:	20001d54 	.word	0x20001d54
 800d33c:	08011890 	.word	0x08011890
 800d340:	08011efc 	.word	0x08011efc
 800d344:	08011f08 	.word	0x08011f08
	...

0800d350 <rt_test_011_003_execute.lto_priv.0>:
  test_set_step(1);
 800d350:	f04f 0c01 	mov.w	ip, #1
static void rt_test_011_003_execute(void) {
 800d354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  return ch.rlist.current;
 800d358:	4e2b      	ldr	r6, [pc, #172]	; (800d408 <rt_test_011_003_execute.lto_priv.0+0xb8>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d35a:	4d2c      	ldr	r5, [pc, #176]	; (800d40c <rt_test_011_003_execute.lto_priv.0+0xbc>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d35c:	69b3      	ldr	r3, [r6, #24]
  test_set_step(1);
 800d35e:	4f2c      	ldr	r7, [pc, #176]	; (800d410 <rt_test_011_003_execute.lto_priv.0+0xc0>)
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d360:	6899      	ldr	r1, [r3, #8]
 800d362:	4628      	mov	r0, r5
 800d364:	4461      	add	r1, ip
 800d366:	2300      	movs	r3, #0
 800d368:	4a2a      	ldr	r2, [pc, #168]	; (800d414 <rt_test_011_003_execute.lto_priv.0+0xc4>)
  test_set_step(1);
 800d36a:	f8c7 c000 	str.w	ip, [r7]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d36e:	f7ff fec7 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800d372:	2302      	movs	r3, #2
 800d374:	603b      	str	r3, [r7, #0]
 800d376:	69b3      	ldr	r3, [r6, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d378:	4c27      	ldr	r4, [pc, #156]	; (800d418 <rt_test_011_003_execute.lto_priv.0+0xc8>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800d37a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800d41c <rt_test_011_003_execute.lto_priv.0+0xcc>
 800d37e:	6899      	ldr	r1, [r3, #8]
 800d380:	4642      	mov	r2, r8
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1, bmk_thread1, NULL);
 800d382:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800d384:	2300      	movs	r3, #0
 800d386:	3902      	subs	r1, #2
 800d388:	f505 70a4 	add.w	r0, r5, #328	; 0x148
 800d38c:	f7ff feb8 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d390:	69b3      	ldr	r3, [r6, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800d392:	4642      	mov	r2, r8
 800d394:	6899      	ldr	r1, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-2, bmk_thread3, NULL);
 800d396:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800d398:	2300      	movs	r3, #0
 800d39a:	3903      	subs	r1, #3
 800d39c:	f505 7024 	add.w	r0, r5, #656	; 0x290
 800d3a0:	f7ff feae 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d3a4:	69b3      	ldr	r3, [r6, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800d3a6:	4642      	mov	r2, r8
 800d3a8:	6899      	ldr	r1, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-3, bmk_thread3, NULL);
 800d3aa:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	3904      	subs	r1, #4
 800d3b0:	f505 7076 	add.w	r0, r5, #984	; 0x3d8
 800d3b4:	f7ff fea4 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	69b1      	ldr	r1, [r6, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800d3bc:	4642      	mov	r2, r8
 800d3be:	6889      	ldr	r1, [r1, #8]
 800d3c0:	f505 60a4 	add.w	r0, r5, #1312	; 0x520
 800d3c4:	3905      	subs	r1, #5
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-4, bmk_thread3, NULL);
 800d3c6:	60e3      	str	r3, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	f7ff fe99 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(3);
 800d3ce:	2303      	movs	r3, #3
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800d3d0:	4602      	mov	r2, r0
    n = msg_loop_test(threads[0]);
 800d3d2:	6820      	ldr	r0, [r4, #0]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-5, bmk_thread3, NULL);
 800d3d4:	6122      	str	r2, [r4, #16]
  test_set_step(3);
 800d3d6:	603b      	str	r3, [r7, #0]
    n = msg_loop_test(threads[0]);
 800d3d8:	f7fb f98a 	bl	80086f0 <msg_loop_test.lto_priv.0>
 800d3dc:	4604      	mov	r4, r0
    test_wait_threads();
 800d3de:	f7f9 fd7f 	bl	8006ee0 <test_wait_threads>
  test_set_step(4);
 800d3e2:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800d3e4:	480e      	ldr	r0, [pc, #56]	; (800d420 <rt_test_011_003_execute.lto_priv.0+0xd0>)
  test_set_step(4);
 800d3e6:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800d3e8:	f7f9 f8b2 	bl	8006550 <test_print>
    test_printn(n);
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f7f9 fb57 	bl	8006aa0 <test_printn>
    test_print(" msgs/S, ");
 800d3f2:	480c      	ldr	r0, [pc, #48]	; (800d424 <rt_test_011_003_execute.lto_priv.0+0xd4>)
 800d3f4:	f7f9 f8ac 	bl	8006550 <test_print>
    test_printn(n << 1);
 800d3f8:	0060      	lsls	r0, r4, #1
 800d3fa:	f7f9 fb51 	bl	8006aa0 <test_printn>
}
 800d3fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    test_println(" ctxswc/S");
 800d402:	4809      	ldr	r0, [pc, #36]	; (800d428 <rt_test_011_003_execute.lto_priv.0+0xd8>)
 800d404:	f7f9 b8bc 	b.w	8006580 <test_println>
 800d408:	20000d70 	.word	0x20000d70
 800d40c:	200016c8 	.word	0x200016c8
 800d410:	20001d3c 	.word	0x20001d3c
 800d414:	08003f91 	.word	0x08003f91
 800d418:	20001d54 	.word	0x20001d54
 800d41c:	08002ff1 	.word	0x08002ff1
 800d420:	08011890 	.word	0x08011890
 800d424:	08011efc 	.word	0x08011efc
 800d428:	08011f08 	.word	0x08011f08
 800d42c:	00000000 	.word	0x00000000

0800d430 <rt_test_011_004_execute.lto_priv.0>:
static void rt_test_011_004_execute(void) {
 800d430:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800d434:	f04f 0801 	mov.w	r8, #1
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800d438:	2300      	movs	r3, #0
  return ch.rlist.current;
 800d43a:	4d3f      	ldr	r5, [pc, #252]	; (800d538 <rt_test_011_004_execute.lto_priv.0+0x108>)
  test_set_step(1);
 800d43c:	4f3f      	ldr	r7, [pc, #252]	; (800d53c <rt_test_011_004_execute.lto_priv.0+0x10c>)
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d43e:	69aa      	ldr	r2, [r5, #24]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800d440:	483f      	ldr	r0, [pc, #252]	; (800d540 <rt_test_011_004_execute.lto_priv.0+0x110>)
 800d442:	6891      	ldr	r1, [r2, #8]
 800d444:	4a3f      	ldr	r2, [pc, #252]	; (800d544 <rt_test_011_004_execute.lto_priv.0+0x114>)
 800d446:	4441      	add	r1, r8
    n = 0;
 800d448:	4699      	mov	r9, r3
  test_set_step(1);
 800d44a:	f8c7 8000 	str.w	r8, [r7]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800d44e:	f7ff fe57 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800d452:	2302      	movs	r3, #2
 800d454:	603b      	str	r3, [r7, #0]
    tp = threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+1,
 800d456:	4b3c      	ldr	r3, [pc, #240]	; (800d548 <rt_test_011_004_execute.lto_priv.0+0x118>)
 800d458:	4606      	mov	r6, r0
 800d45a:	6018      	str	r0, [r3, #0]
    start = test_wait_tick();
 800d45c:	f7fa fcb0 	bl	8007dc0 <test_wait_tick>
 800d460:	f04f 0a20 	mov.w	sl, #32
 800d464:	4683      	mov	fp, r0
 800d466:	f38a 8811 	msr	BASEPRI, sl
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800d46a:	e9d5 140c 	ldrd	r1, r4, [r5, #48]	; 0x30
 800d46e:	430c      	orrs	r4, r1
 800d470:	d158      	bne.n	800d524 <rt_test_011_004_execute.lto_priv.0+0xf4>
      chSchWakeupS(tp, MSG_OK);
 800d472:	4621      	mov	r1, r4
 800d474:	4630      	mov	r0, r6
  _dbg_enter_lock();
 800d476:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
 800d47a:	f7f5 fb61 	bl	8002b40 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800d47e:	4621      	mov	r1, r4
 800d480:	4630      	mov	r0, r6
 800d482:	f7f5 fb5d 	bl	8002b40 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800d486:	4621      	mov	r1, r4
 800d488:	4630      	mov	r0, r6
 800d48a:	f7f5 fb59 	bl	8002b40 <chSchWakeupS>
      chSchWakeupS(tp, MSG_OK);
 800d48e:	4621      	mov	r1, r4
 800d490:	4630      	mov	r0, r6
 800d492:	f7f5 fb55 	bl	8002b40 <chSchWakeupS>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800d496:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800d498:	2a00      	cmp	r2, #0
 800d49a:	d146      	bne.n	800d52a <rt_test_011_004_execute.lto_priv.0+0xfa>
 800d49c:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800d49e:	2300      	movs	r3, #0
 800d4a0:	2900      	cmp	r1, #0
 800d4a2:	dd42      	ble.n	800d52a <rt_test_011_004_execute.lto_priv.0+0xfa>
  _dbg_leave_lock();
 800d4a4:	636a      	str	r2, [r5, #52]	; 0x34
 800d4a6:	682a      	ldr	r2, [r5, #0]
 800d4a8:	42aa      	cmp	r2, r5
 800d4aa:	d004      	beq.n	800d4b6 <rt_test_011_004_execute.lto_priv.0+0x86>
 800d4ac:	69a9      	ldr	r1, [r5, #24]
 800d4ae:	6892      	ldr	r2, [r2, #8]
 800d4b0:	6889      	ldr	r1, [r1, #8]
 800d4b2:	4291      	cmp	r1, r2
 800d4b4:	d33c      	bcc.n	800d530 <rt_test_011_004_execute.lto_priv.0+0x100>
 800d4b6:	f383 8811 	msr	BASEPRI, r3
 800d4ba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800d4be:	f242 710f 	movw	r1, #9999	; 0x270f
 800d4c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
      n += 4;
 800d4c4:	f109 0904 	add.w	r9, r9, #4
 800d4c8:	eba2 020b 	sub.w	r2, r2, fp
    } while (chVTIsSystemTimeWithinX(start, end));
 800d4cc:	b292      	uxth	r2, r2
 800d4ce:	428a      	cmp	r2, r1
 800d4d0:	d9c9      	bls.n	800d466 <rt_test_011_004_execute.lto_priv.0+0x36>
  test_set_step(3);
 800d4d2:	2203      	movs	r2, #3
 800d4d4:	2320      	movs	r3, #32
 800d4d6:	603a      	str	r2, [r7, #0]
 800d4d8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800d4dc:	f7f3 f9a0 	bl	8000820 <_dbg_check_lock>
    chSchWakeupS(tp, MSG_TIMEOUT);
 800d4e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800d4e4:	4630      	mov	r0, r6
 800d4e6:	f7f5 fb2b 	bl	8002b40 <chSchWakeupS>
  _dbg_check_unlock();
 800d4ea:	f7f3 f9a9 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800d4ee:	682b      	ldr	r3, [r5, #0]
 800d4f0:	42ab      	cmp	r3, r5
 800d4f2:	d004      	beq.n	800d4fe <rt_test_011_004_execute.lto_priv.0+0xce>
 800d4f4:	69aa      	ldr	r2, [r5, #24]
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	6892      	ldr	r2, [r2, #8]
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d318      	bcc.n	800d530 <rt_test_011_004_execute.lto_priv.0+0x100>
 800d4fe:	2300      	movs	r3, #0
 800d500:	f383 8811 	msr	BASEPRI, r3
    test_wait_threads();
 800d504:	f7f9 fcec 	bl	8006ee0 <test_wait_threads>
  test_set_step(4);
 800d508:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800d50a:	4810      	ldr	r0, [pc, #64]	; (800d54c <rt_test_011_004_execute.lto_priv.0+0x11c>)
  test_set_step(4);
 800d50c:	603b      	str	r3, [r7, #0]
    test_print("--- Score : ");
 800d50e:	f7f9 f81f 	bl	8006550 <test_print>
    test_printn(n * 2);
 800d512:	ea4f 0049 	mov.w	r0, r9, lsl #1
 800d516:	f7f9 fac3 	bl	8006aa0 <test_printn>
}
 800d51a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 800d51e:	480c      	ldr	r0, [pc, #48]	; (800d550 <rt_test_011_004_execute.lto_priv.0+0x120>)
 800d520:	f7f9 b82e 	b.w	8006580 <test_println>
    chSysHalt("SV#4");
 800d524:	480b      	ldr	r0, [pc, #44]	; (800d554 <rt_test_011_004_execute.lto_priv.0+0x124>)
 800d526:	f7f3 f923 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800d52a:	480b      	ldr	r0, [pc, #44]	; (800d558 <rt_test_011_004_execute.lto_priv.0+0x128>)
 800d52c:	f7f3 f920 	bl	8000770 <chSysHalt>
 800d530:	480a      	ldr	r0, [pc, #40]	; (800d55c <rt_test_011_004_execute.lto_priv.0+0x12c>)
 800d532:	f7f3 f91d 	bl	8000770 <chSysHalt>
 800d536:	bf00      	nop
 800d538:	20000d70 	.word	0x20000d70
 800d53c:	20001d3c 	.word	0x20001d3c
 800d540:	200016c8 	.word	0x200016c8
 800d544:	08002421 	.word	0x08002421
 800d548:	20001d54 	.word	0x20001d54
 800d54c:	08011890 	.word	0x08011890
 800d550:	08011f08 	.word	0x08011f08
 800d554:	0800f20c 	.word	0x0800f20c
 800d558:	0800f214 	.word	0x0800f214
 800d55c:	08010d58 	.word	0x08010d58

0800d560 <rt_test_011_005_execute.lto_priv.0>:
static void rt_test_011_005_execute(void) {
 800d560:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800d564:	2301      	movs	r3, #1
  return ch.rlist.current;
 800d566:	4a17      	ldr	r2, [pc, #92]	; (800d5c4 <rt_test_011_005_execute.lto_priv.0+0x64>)
 800d568:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800d5c8 <rt_test_011_005_execute.lto_priv.0+0x68>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d56c:	6992      	ldr	r2, [r2, #24]
 800d56e:	f8c9 3000 	str.w	r3, [r9]
  tprio_t prio = chThdGetPriorityX() - 1;
 800d572:	6896      	ldr	r6, [r2, #8]
    start = test_wait_tick();
 800d574:	f7fa fc24 	bl	8007dc0 <test_wait_tick>
    n = 0;
 800d578:	2400      	movs	r4, #0
    start = test_wait_tick();
 800d57a:	4605      	mov	r5, r0
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800d57c:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800d5cc <rt_test_011_005_execute.lto_priv.0+0x6c>
 800d580:	4f13      	ldr	r7, [pc, #76]	; (800d5d0 <rt_test_011_005_execute.lto_priv.0+0x70>)
  tprio_t prio = chThdGetPriorityX() - 1;
 800d582:	3e01      	subs	r6, #1
      chThdWait(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800d584:	2300      	movs	r3, #0
 800d586:	4642      	mov	r2, r8
 800d588:	4631      	mov	r1, r6
 800d58a:	4638      	mov	r0, r7
 800d58c:	f7ff fdb8 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d590:	f7f6 ffce 	bl	8004530 <chThdWait>
 800d594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800d598:	f242 720f 	movw	r2, #9999	; 0x270f
 800d59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800d59e:	3401      	adds	r4, #1
 800d5a0:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800d5a2:	b29b      	uxth	r3, r3
 800d5a4:	4293      	cmp	r3, r2
 800d5a6:	d9ed      	bls.n	800d584 <rt_test_011_005_execute.lto_priv.0+0x24>
  test_set_step(2);
 800d5a8:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800d5aa:	480a      	ldr	r0, [pc, #40]	; (800d5d4 <rt_test_011_005_execute.lto_priv.0+0x74>)
  test_set_step(2);
 800d5ac:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800d5b0:	f7f8 ffce 	bl	8006550 <test_print>
    test_printn(n);
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	f7f9 fa73 	bl	8006aa0 <test_printn>
}
 800d5ba:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 800d5be:	4806      	ldr	r0, [pc, #24]	; (800d5d8 <rt_test_011_005_execute.lto_priv.0+0x78>)
 800d5c0:	f7f8 bfde 	b.w	8006580 <test_println>
 800d5c4:	20000d70 	.word	0x20000d70
 800d5c8:	20001d3c 	.word	0x20001d3c
 800d5cc:	08002ff1 	.word	0x08002ff1
 800d5d0:	200016c8 	.word	0x200016c8
 800d5d4:	08011890 	.word	0x08011890
 800d5d8:	08011f14 	.word	0x08011f14
 800d5dc:	00000000 	.word	0x00000000

0800d5e0 <rt_test_011_006_execute.lto_priv.0>:
static void rt_test_011_006_execute(void) {
 800d5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800d5e4:	2301      	movs	r3, #1
  return ch.rlist.current;
 800d5e6:	4a17      	ldr	r2, [pc, #92]	; (800d644 <rt_test_011_006_execute.lto_priv.0+0x64>)
 800d5e8:	f8df 905c 	ldr.w	r9, [pc, #92]	; 800d648 <rt_test_011_006_execute.lto_priv.0+0x68>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d5ec:	6992      	ldr	r2, [r2, #24]
 800d5ee:	f8c9 3000 	str.w	r3, [r9]
  tprio_t prio = chThdGetPriorityX() + 1;
 800d5f2:	6896      	ldr	r6, [r2, #8]
    n = 0;
 800d5f4:	2400      	movs	r4, #0
  tprio_t prio = chThdGetPriorityX() + 1;
 800d5f6:	441e      	add	r6, r3
    start = test_wait_tick();
 800d5f8:	f7fa fbe2 	bl	8007dc0 <test_wait_tick>
 800d5fc:	4605      	mov	r5, r0
      chThdRelease(chThdCreateStatic(wa[0], WA_SIZE, prio, bmk_thread3, NULL));
 800d5fe:	f8df 804c 	ldr.w	r8, [pc, #76]	; 800d64c <rt_test_011_006_execute.lto_priv.0+0x6c>
 800d602:	4f13      	ldr	r7, [pc, #76]	; (800d650 <rt_test_011_006_execute.lto_priv.0+0x70>)
 800d604:	2300      	movs	r3, #0
 800d606:	4642      	mov	r2, r8
 800d608:	4631      	mov	r1, r6
 800d60a:	4638      	mov	r0, r7
 800d60c:	f7ff fd78 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d610:	f7f6 ff36 	bl	8004480 <chThdRelease>
 800d614:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    } while (chVTIsSystemTimeWithinX(start, end));
 800d618:	f242 720f 	movw	r2, #9999	; 0x270f
 800d61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      n++;
 800d61e:	3401      	adds	r4, #1
 800d620:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800d622:	b29b      	uxth	r3, r3
 800d624:	4293      	cmp	r3, r2
 800d626:	d9ed      	bls.n	800d604 <rt_test_011_006_execute.lto_priv.0+0x24>
  test_set_step(2);
 800d628:	2302      	movs	r3, #2
    test_print("--- Score : ");
 800d62a:	480a      	ldr	r0, [pc, #40]	; (800d654 <rt_test_011_006_execute.lto_priv.0+0x74>)
  test_set_step(2);
 800d62c:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800d630:	f7f8 ff8e 	bl	8006550 <test_print>
    test_printn(n);
 800d634:	4620      	mov	r0, r4
 800d636:	f7f9 fa33 	bl	8006aa0 <test_printn>
}
 800d63a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    test_println(" threads/S");
 800d63e:	4806      	ldr	r0, [pc, #24]	; (800d658 <rt_test_011_006_execute.lto_priv.0+0x78>)
 800d640:	f7f8 bf9e 	b.w	8006580 <test_println>
 800d644:	20000d70 	.word	0x20000d70
 800d648:	20001d3c 	.word	0x20001d3c
 800d64c:	08002ff1 	.word	0x08002ff1
 800d650:	200016c8 	.word	0x200016c8
 800d654:	08011890 	.word	0x08011890
 800d658:	08011f14 	.word	0x08011f14
 800d65c:	00000000 	.word	0x00000000

0800d660 <rt_test_011_007_execute.lto_priv.0>:
static void rt_test_011_007_execute(void) {
 800d660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  test_set_step(1);
 800d664:	2601      	movs	r6, #1
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800d666:	2300      	movs	r3, #0
  return ch.rlist.current;
 800d668:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800d7a4 <rt_test_011_007_execute.lto_priv.0+0x144>
  test_set_step(1);
 800d66c:	f8df 9138 	ldr.w	r9, [pc, #312]	; 800d7a8 <rt_test_011_007_execute.lto_priv.0+0x148>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d670:	f8d8 2018 	ldr.w	r2, [r8, #24]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800d674:	484d      	ldr	r0, [pc, #308]	; (800d7ac <rt_test_011_007_execute.lto_priv.0+0x14c>)
 800d676:	6891      	ldr	r1, [r2, #8]
 800d678:	4a4d      	ldr	r2, [pc, #308]	; (800d7b0 <rt_test_011_007_execute.lto_priv.0+0x150>)
 800d67a:	3105      	adds	r1, #5
    n = 0;
 800d67c:	461c      	mov	r4, r3
  test_set_step(1);
 800d67e:	f8c9 6000 	str.w	r6, [r9]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800d682:	f7ff fd3d 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d686:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d68a:	4d4a      	ldr	r5, [pc, #296]	; (800d7b4 <rt_test_011_007_execute.lto_priv.0+0x154>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800d68c:	6899      	ldr	r1, [r3, #8]
    threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()+5, bmk_thread7, NULL);
 800d68e:	6028      	str	r0, [r5, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()+4, bmk_thread7, NULL);
 800d690:	4623      	mov	r3, r4
 800d692:	4a47      	ldr	r2, [pc, #284]	; (800d7b0 <rt_test_011_007_execute.lto_priv.0+0x150>)
 800d694:	3104      	adds	r1, #4
 800d696:	4848      	ldr	r0, [pc, #288]	; (800d7b8 <rt_test_011_007_execute.lto_priv.0+0x158>)
 800d698:	f7ff fd32 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d69c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d6a0:	6068      	str	r0, [r5, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()+3, bmk_thread7, NULL);
 800d6a2:	6899      	ldr	r1, [r3, #8]
 800d6a4:	4a42      	ldr	r2, [pc, #264]	; (800d7b0 <rt_test_011_007_execute.lto_priv.0+0x150>)
 800d6a6:	4623      	mov	r3, r4
 800d6a8:	3103      	adds	r1, #3
 800d6aa:	4844      	ldr	r0, [pc, #272]	; (800d7bc <rt_test_011_007_execute.lto_priv.0+0x15c>)
 800d6ac:	f7ff fd28 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d6b0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d6b4:	60a8      	str	r0, [r5, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()+2, bmk_thread7, NULL);
 800d6b6:	6899      	ldr	r1, [r3, #8]
 800d6b8:	4a3d      	ldr	r2, [pc, #244]	; (800d7b0 <rt_test_011_007_execute.lto_priv.0+0x150>)
 800d6ba:	4623      	mov	r3, r4
 800d6bc:	3102      	adds	r1, #2
 800d6be:	4840      	ldr	r0, [pc, #256]	; (800d7c0 <rt_test_011_007_execute.lto_priv.0+0x160>)
 800d6c0:	f7ff fd1e 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d6c4:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d6c8:	60e8      	str	r0, [r5, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800d6ca:	6899      	ldr	r1, [r3, #8]
 800d6cc:	4a38      	ldr	r2, [pc, #224]	; (800d7b0 <rt_test_011_007_execute.lto_priv.0+0x150>)
 800d6ce:	4431      	add	r1, r6
 800d6d0:	4623      	mov	r3, r4
 800d6d2:	483c      	ldr	r0, [pc, #240]	; (800d7c4 <rt_test_011_007_execute.lto_priv.0+0x164>)
 800d6d4:	f7ff fd14 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800d6d8:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()+1, bmk_thread7, NULL);
 800d6da:	6128      	str	r0, [r5, #16]
  test_set_step(2);
 800d6dc:	f8c9 3000 	str.w	r3, [r9]
    start = test_wait_tick();
 800d6e0:	f7fa fb6e 	bl	8007dc0 <test_wait_tick>
 800d6e4:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 800d6e8:	4605      	mov	r5, r0
  chSemResetWithMessage(sp, n, MSG_RESET);
 800d6ea:	4e37      	ldr	r6, [pc, #220]	; (800d7c8 <rt_test_011_007_execute.lto_priv.0+0x168>)
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	4630      	mov	r0, r6
 800d6f0:	f7ff fcc6 	bl	800d080 <chSemResetWithMessage.constprop.0>
    } while (chVTIsSystemTimeWithinX(start, end));
 800d6f4:	f242 720f 	movw	r2, #9999	; 0x270f
 800d6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
      n++;
 800d6fa:	3401      	adds	r4, #1
 800d6fc:	1b5b      	subs	r3, r3, r5
    } while (chVTIsSystemTimeWithinX(start, end));
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	4293      	cmp	r3, r2
 800d702:	d9f3      	bls.n	800d6ec <rt_test_011_007_execute.lto_priv.0+0x8c>
  test_set_step(3);
 800d704:	2303      	movs	r3, #3
 800d706:	f04f 0b20 	mov.w	fp, #32
 800d70a:	2700      	movs	r7, #0
 800d70c:	4d29      	ldr	r5, [pc, #164]	; (800d7b4 <rt_test_011_007_execute.lto_priv.0+0x154>)
 800d70e:	f8c9 3000 	str.w	r3, [r9]
  for (i = 0; i < MAX_THREADS; i++)
 800d712:	f105 0a14 	add.w	sl, r5, #20
    if (threads[i])
 800d716:	f855 6b04 	ldr.w	r6, [r5], #4
 800d71a:	b1f6      	cbz	r6, 800d75a <rt_test_011_007_execute.lto_priv.0+0xfa>
 800d71c:	f38b 8811 	msr	BASEPRI, fp
  _dbg_check_lock();
 800d720:	f7f3 f87e 	bl	8000820 <_dbg_check_lock>
  tp->flags |= CH_FLAG_TERMINATE;
 800d724:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 800d728:	f043 0304 	orr.w	r3, r3, #4
 800d72c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800d730:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
 800d734:	bb7b      	cbnz	r3, 800d796 <rt_test_011_007_execute.lto_priv.0+0x136>
 800d736:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 800d73a:	2a00      	cmp	r2, #0
 800d73c:	dd2b      	ble.n	800d796 <rt_test_011_007_execute.lto_priv.0+0x136>
  _dbg_leave_lock();
 800d73e:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800d742:	f8d8 3000 	ldr.w	r3, [r8]
 800d746:	4543      	cmp	r3, r8
 800d748:	d005      	beq.n	800d756 <rt_test_011_007_execute.lto_priv.0+0xf6>
 800d74a:	689a      	ldr	r2, [r3, #8]
 800d74c:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800d750:	689b      	ldr	r3, [r3, #8]
 800d752:	4293      	cmp	r3, r2
 800d754:	d322      	bcc.n	800d79c <rt_test_011_007_execute.lto_priv.0+0x13c>
 800d756:	f387 8811 	msr	BASEPRI, r7
  for (i = 0; i < MAX_THREADS; i++)
 800d75a:	4555      	cmp	r5, sl
 800d75c:	d1db      	bne.n	800d716 <rt_test_011_007_execute.lto_priv.0+0xb6>
 800d75e:	2100      	movs	r1, #0
 800d760:	4819      	ldr	r0, [pc, #100]	; (800d7c8 <rt_test_011_007_execute.lto_priv.0+0x168>)
 800d762:	f7ff fc8d 	bl	800d080 <chSemResetWithMessage.constprop.0>
    test_wait_threads();
 800d766:	f7f9 fbbb 	bl	8006ee0 <test_wait_threads>
  test_set_step(4);
 800d76a:	2304      	movs	r3, #4
    test_print("--- Score : ");
 800d76c:	4817      	ldr	r0, [pc, #92]	; (800d7cc <rt_test_011_007_execute.lto_priv.0+0x16c>)
  test_set_step(4);
 800d76e:	f8c9 3000 	str.w	r3, [r9]
    test_print("--- Score : ");
 800d772:	f7f8 feed 	bl	8006550 <test_print>
    test_printn(n);
 800d776:	4620      	mov	r0, r4
 800d778:	f7f9 f992 	bl	8006aa0 <test_printn>
    test_printn(n * 6);
 800d77c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    test_print(" reschedules/S, ");
 800d780:	4813      	ldr	r0, [pc, #76]	; (800d7d0 <rt_test_011_007_execute.lto_priv.0+0x170>)
 800d782:	f7f8 fee5 	bl	8006550 <test_print>
    test_printn(n * 6);
 800d786:	0060      	lsls	r0, r4, #1
 800d788:	f7f9 f98a 	bl	8006aa0 <test_printn>
}
 800d78c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println(" ctxswc/S");
 800d790:	4810      	ldr	r0, [pc, #64]	; (800d7d4 <rt_test_011_007_execute.lto_priv.0+0x174>)
 800d792:	f7f8 bef5 	b.w	8006580 <test_println>
    chSysHalt("SV#5");
 800d796:	4810      	ldr	r0, [pc, #64]	; (800d7d8 <rt_test_011_007_execute.lto_priv.0+0x178>)
 800d798:	f7f2 ffea 	bl	8000770 <chSysHalt>
 800d79c:	480f      	ldr	r0, [pc, #60]	; (800d7dc <rt_test_011_007_execute.lto_priv.0+0x17c>)
 800d79e:	f7f2 ffe7 	bl	8000770 <chSysHalt>
 800d7a2:	bf00      	nop
 800d7a4:	20000d70 	.word	0x20000d70
 800d7a8:	20001d3c 	.word	0x20001d3c
 800d7ac:	200016c8 	.word	0x200016c8
 800d7b0:	08003611 	.word	0x08003611
 800d7b4:	20001d54 	.word	0x20001d54
 800d7b8:	20001810 	.word	0x20001810
 800d7bc:	20001958 	.word	0x20001958
 800d7c0:	20001aa0 	.word	0x20001aa0
 800d7c4:	20001be8 	.word	0x20001be8
 800d7c8:	200016b4 	.word	0x200016b4
 800d7cc:	08011890 	.word	0x08011890
 800d7d0:	08011f20 	.word	0x08011f20
 800d7d4:	08011f08 	.word	0x08011f08
 800d7d8:	0800f214 	.word	0x0800f214
 800d7dc:	08010de4 	.word	0x08010de4

0800d7e0 <rt_test_011_008_execute.lto_priv.0>:
static void rt_test_011_008_execute(void) {
 800d7e0:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 800d7e2:	2301      	movs	r3, #1
    n = 0;
 800d7e4:	2700      	movs	r7, #0
  return ch.rlist.current;
 800d7e6:	4d37      	ldr	r5, [pc, #220]	; (800d8c4 <rt_test_011_008_execute.lto_priv.0+0xe4>)
  test_set_step(1);
 800d7e8:	4e37      	ldr	r6, [pc, #220]	; (800d8c8 <rt_test_011_008_execute.lto_priv.0+0xe8>)
static void rt_test_011_008_execute(void) {
 800d7ea:	b083      	sub	sp, #12
  test_set_step(1);
 800d7ec:	6033      	str	r3, [r6, #0]
    n = 0;
 800d7ee:	9701      	str	r7, [sp, #4]
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d7f0:	f7fa fae6 	bl	8007dc0 <test_wait_tick>
  return chThdGetSelfX()->hdr.pqueue.prio;
 800d7f4:	69ab      	ldr	r3, [r5, #24]
 800d7f6:	4a35      	ldr	r2, [pc, #212]	; (800d8cc <rt_test_011_008_execute.lto_priv.0+0xec>)
 800d7f8:	6899      	ldr	r1, [r3, #8]
 800d7fa:	4835      	ldr	r0, [pc, #212]	; (800d8d0 <rt_test_011_008_execute.lto_priv.0+0xf0>)
 800d7fc:	3901      	subs	r1, #1
 800d7fe:	ab01      	add	r3, sp, #4
 800d800:	f7ff fc7e 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d804:	69ab      	ldr	r3, [r5, #24]
 800d806:	4c33      	ldr	r4, [pc, #204]	; (800d8d4 <rt_test_011_008_execute.lto_priv.0+0xf4>)
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d808:	6899      	ldr	r1, [r3, #8]
 800d80a:	4a30      	ldr	r2, [pc, #192]	; (800d8cc <rt_test_011_008_execute.lto_priv.0+0xec>)
    test_wait_tick();threads[0] = chThdCreateStatic(wa[0], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d80c:	6020      	str	r0, [r4, #0]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d80e:	3901      	subs	r1, #1
 800d810:	ab01      	add	r3, sp, #4
 800d812:	4831      	ldr	r0, [pc, #196]	; (800d8d8 <rt_test_011_008_execute.lto_priv.0+0xf8>)
 800d814:	f7ff fc74 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d818:	69ab      	ldr	r3, [r5, #24]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d81a:	4a2c      	ldr	r2, [pc, #176]	; (800d8cc <rt_test_011_008_execute.lto_priv.0+0xec>)
 800d81c:	6899      	ldr	r1, [r3, #8]
    threads[1] = chThdCreateStatic(wa[1], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d81e:	6060      	str	r0, [r4, #4]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d820:	3901      	subs	r1, #1
 800d822:	ab01      	add	r3, sp, #4
 800d824:	482d      	ldr	r0, [pc, #180]	; (800d8dc <rt_test_011_008_execute.lto_priv.0+0xfc>)
 800d826:	f7ff fc6b 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d82a:	69ab      	ldr	r3, [r5, #24]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d82c:	4a27      	ldr	r2, [pc, #156]	; (800d8cc <rt_test_011_008_execute.lto_priv.0+0xec>)
 800d82e:	6899      	ldr	r1, [r3, #8]
    threads[2] = chThdCreateStatic(wa[2], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d830:	60a0      	str	r0, [r4, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d832:	3901      	subs	r1, #1
 800d834:	ab01      	add	r3, sp, #4
 800d836:	482a      	ldr	r0, [pc, #168]	; (800d8e0 <rt_test_011_008_execute.lto_priv.0+0x100>)
 800d838:	f7ff fc62 	bl	800d100 <chThdCreateStatic.constprop.0>
 800d83c:	69aa      	ldr	r2, [r5, #24]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d83e:	ab01      	add	r3, sp, #4
 800d840:	6891      	ldr	r1, [r2, #8]
    threads[3] = chThdCreateStatic(wa[3], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d842:	60e0      	str	r0, [r4, #12]
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d844:	4a21      	ldr	r2, [pc, #132]	; (800d8cc <rt_test_011_008_execute.lto_priv.0+0xec>)
 800d846:	3901      	subs	r1, #1
 800d848:	4826      	ldr	r0, [pc, #152]	; (800d8e4 <rt_test_011_008_execute.lto_priv.0+0x104>)
 800d84a:	f7ff fc59 	bl	800d100 <chThdCreateStatic.constprop.0>
  test_set_step(2);
 800d84e:	2302      	movs	r3, #2
    threads[4] = chThdCreateStatic(wa[4], WA_SIZE, chThdGetPriorityX()-1, bmk_thread8, (void *)&n);
 800d850:	6120      	str	r0, [r4, #16]
    chThdSleepSeconds(1);
 800d852:	f242 7010 	movw	r0, #10000	; 0x2710
  test_set_step(2);
 800d856:	6033      	str	r3, [r6, #0]
    chThdSleepSeconds(1);
 800d858:	f7f5 fbe2 	bl	8003020 <chThdSleep>
 800d85c:	2020      	movs	r0, #32
 800d85e:	f104 0c14 	add.w	ip, r4, #20
    if (threads[i])
 800d862:	f854 3b04 	ldr.w	r3, [r4], #4
 800d866:	b1a3      	cbz	r3, 800d892 <rt_test_011_008_execute.lto_priv.0+0xb2>
 800d868:	f380 8811 	msr	BASEPRI, r0
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800d86c:	e9d5 210c 	ldrd	r2, r1, [r5, #48]	; 0x30
 800d870:	430a      	orrs	r2, r1
 800d872:	d002      	beq.n	800d87a <rt_test_011_008_execute.lto_priv.0+0x9a>
    chSysHalt("SV#4");
 800d874:	481c      	ldr	r0, [pc, #112]	; (800d8e8 <rt_test_011_008_execute.lto_priv.0+0x108>)
 800d876:	f7f2 ff7b 	bl	8000770 <chSysHalt>
 800d87a:	f893 1021 	ldrb.w	r1, [r3, #33]	; 0x21
 800d87e:	f041 0104 	orr.w	r1, r1, #4
 800d882:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 800d886:	682b      	ldr	r3, [r5, #0]
  _dbg_leave_lock();
 800d888:	636a      	str	r2, [r5, #52]	; 0x34
 800d88a:	42ab      	cmp	r3, r5
 800d88c:	d112      	bne.n	800d8b4 <rt_test_011_008_execute.lto_priv.0+0xd4>
 800d88e:	f387 8811 	msr	BASEPRI, r7
  for (i = 0; i < MAX_THREADS; i++)
 800d892:	4564      	cmp	r4, ip
 800d894:	d1e5      	bne.n	800d862 <rt_test_011_008_execute.lto_priv.0+0x82>
    test_wait_threads();
 800d896:	f7f9 fb23 	bl	8006ee0 <test_wait_threads>
  test_set_step(3);
 800d89a:	2303      	movs	r3, #3
    test_print("--- Score : ");
 800d89c:	4813      	ldr	r0, [pc, #76]	; (800d8ec <rt_test_011_008_execute.lto_priv.0+0x10c>)
  test_set_step(3);
 800d89e:	6033      	str	r3, [r6, #0]
    test_print("--- Score : ");
 800d8a0:	f7f8 fe56 	bl	8006550 <test_print>
    test_printn(n);
 800d8a4:	9801      	ldr	r0, [sp, #4]
 800d8a6:	f7f9 f8fb 	bl	8006aa0 <test_printn>
    test_println(" ctxswc/S");
 800d8aa:	4811      	ldr	r0, [pc, #68]	; (800d8f0 <rt_test_011_008_execute.lto_priv.0+0x110>)
 800d8ac:	f7f8 fe68 	bl	8006580 <test_println>
}
 800d8b0:	b003      	add	sp, #12
 800d8b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d8b4:	69aa      	ldr	r2, [r5, #24]
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	6892      	ldr	r2, [r2, #8]
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d2e7      	bcs.n	800d88e <rt_test_011_008_execute.lto_priv.0+0xae>
 800d8be:	480d      	ldr	r0, [pc, #52]	; (800d8f4 <rt_test_011_008_execute.lto_priv.0+0x114>)
 800d8c0:	f7f2 ff56 	bl	8000770 <chSysHalt>
 800d8c4:	20000d70 	.word	0x20000d70
 800d8c8:	20001d3c 	.word	0x20001d3c
 800d8cc:	08008781 	.word	0x08008781
 800d8d0:	200016c8 	.word	0x200016c8
 800d8d4:	20001d54 	.word	0x20001d54
 800d8d8:	20001810 	.word	0x20001810
 800d8dc:	20001958 	.word	0x20001958
 800d8e0:	20001aa0 	.word	0x20001aa0
 800d8e4:	20001be8 	.word	0x20001be8
 800d8e8:	0800f20c 	.word	0x0800f20c
 800d8ec:	08011890 	.word	0x08011890
 800d8f0:	08011f08 	.word	0x08011f08
 800d8f4:	08010de4 	.word	0x08010de4
	...

0800d900 <main>:
}

/*
 * Application entry point.
 */
int main(void) {
 800d900:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  rccResetAPB1(0xFFFFFFFF);
 800d904:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d908:	2600      	movs	r6, #0
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d90a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d90e:	4dbe      	ldr	r5, [pc, #760]	; (800dc08 <main+0x308>)
  PWR->CR |= PWR_CR_DBP;
 800d910:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 800dc0c <main+0x30c>
  rccResetAPB1(0xFFFFFFFF);
 800d914:	692b      	ldr	r3, [r5, #16]
 800d916:	612f      	str	r7, [r5, #16]
 800d918:	692b      	ldr	r3, [r5, #16]
 800d91a:	612e      	str	r6, [r5, #16]
 800d91c:	692b      	ldr	r3, [r5, #16]
  rccResetAPB2(0xFFFFFFFF);
 800d91e:	68eb      	ldr	r3, [r5, #12]
 800d920:	60ef      	str	r7, [r5, #12]
 800d922:	68eb      	ldr	r3, [r5, #12]
 800d924:	60ee      	str	r6, [r5, #12]
 800d926:	68eb      	ldr	r3, [r5, #12]
  rccEnablePWRInterface(true);
 800d928:	69ec      	ldr	r4, [r5, #28]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d92a:	2260      	movs	r2, #96	; 0x60
 800d92c:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800d930:	61ec      	str	r4, [r5, #28]
 800d932:	69ec      	ldr	r4, [r5, #28]
  rccEnableBKPInterface(true);
 800d934:	69ec      	ldr	r4, [r5, #28]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d936:	f04f 0e40 	mov.w	lr, #64	; 0x40
 800d93a:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 800d93e:	61ec      	str	r4, [r5, #28]
 800d940:	69ec      	ldr	r4, [r5, #28]
  PWR->CR |= PWR_CR_DBP;
 800d942:	f8da c000 	ldr.w	ip, [sl]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d946:	4cb2      	ldr	r4, [pc, #712]	; (800dc10 <main+0x310>)
 800d948:	ea4c 0c01 	orr.w	ip, ip, r1
 800d94c:	f8ca c000 	str.w	ip, [sl]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d950:	f04f 0c80 	mov.w	ip, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d954:	f884 2306 	strb.w	r2, [r4, #774]	; 0x306
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d958:	f44f 7b00 	mov.w	fp, #512	; 0x200
 800d95c:	f8c4 e180 	str.w	lr, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d960:	f8c4 e000 	str.w	lr, [r4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d964:	f884 2307 	strb.w	r2, [r4, #775]	; 0x307
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d968:	f8c4 c180 	str.w	ip, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d96c:	f8c4 c000 	str.w	ip, [r4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d970:	f44f 6c80 	mov.w	ip, #1024	; 0x400
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d974:	f884 2308 	strb.w	r2, [r4, #776]	; 0x308
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d978:	f8c4 1180 	str.w	r1, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d97c:	6021      	str	r1, [r4, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d97e:	f884 2309 	strb.w	r2, [r4, #777]	; 0x309
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d982:	f8c4 b180 	str.w	fp, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d986:	f8c4 b000 	str.w	fp, [r4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d98a:	f884 230a 	strb.w	r2, [r4, #778]	; 0x30a
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d98e:	f8c4 c180 	str.w	ip, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d992:	f8c4 c000 	str.w	ip, [r4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d996:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
  GPIOA->ODR = config->PAData.odr;
  GPIOA->CRH = config->PAData.crh;
  GPIOA->CRL = config->PAData.crl;
  GPIOB->ODR = config->PBData.odr;
  GPIOB->CRH = config->PBData.crh;
  GPIOB->CRL = config->PBData.crl;
 800d99a:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
  usbp->state        = USB_STOP;
 800d99e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 800dc14 <main+0x314>
 800d9a2:	f04f 0901 	mov.w	r9, #1
 800d9a6:	4640      	mov	r0, r8
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d9a8:	f884 2317 	strb.w	r2, [r4, #791]	; 0x317
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d9ac:	f8c4 c180 	str.w	ip, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d9b0:	f8c4 c000 	str.w	ip, [r4]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800d9b4:	f884 2328 	strb.w	r2, [r4, #808]	; 0x328
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800d9b8:	f8c4 1184 	str.w	r1, [r4, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800d9bc:	6061      	str	r1, [r4, #4]
  rccEnableAPB2(APB2_EN_MASK, true);
 800d9be:	69aa      	ldr	r2, [r5, #24]
  GPIOA->CRH = config->PAData.crh;
 800d9c0:	f8df b254 	ldr.w	fp, [pc, #596]	; 800dc18 <main+0x318>
  rccEnableAPB2(APB2_EN_MASK, true);
 800d9c4:	f042 027d 	orr.w	r2, r2, #125	; 0x7d
 800d9c8:	61aa      	str	r2, [r5, #24]
  GPIOA->ODR = config->PAData.odr;
 800d9ca:	f50a 4a18 	add.w	sl, sl, #38912	; 0x9800
  rccEnableAPB2(APB2_EN_MASK, true);
 800d9ce:	69aa      	ldr	r2, [r5, #24]
  GPIOA->ODR = config->PAData.odr;
 800d9d0:	f8ca 700c 	str.w	r7, [sl, #12]
  GPIOA->CRH = config->PAData.crh;
 800d9d4:	f8ca b004 	str.w	fp, [sl, #4]
  GPIOA->CRL = config->PAData.crl;
 800d9d8:	f50b 2b80 	add.w	fp, fp, #262144	; 0x40000
 800d9dc:	f50b 7b3f 	add.w	fp, fp, #764	; 0x2fc
 800d9e0:	f8ca b000 	str.w	fp, [sl]
  GPIOB->CRH = config->PBData.crh;
 800d9e4:	f10a 4ae9 	add.w	sl, sl, #1954545664	; 0x74800000
  GPIOB->ODR = config->PBData.odr;
 800d9e8:	f8df e230 	ldr.w	lr, [pc, #560]	; 800dc1c <main+0x31c>
  GPIOB->CRH = config->PBData.crh;
 800d9ec:	f50a 1a5e 	add.w	sl, sl, #3637248	; 0x378000
 800d9f0:	f10a 0a88 	add.w	sl, sl, #136	; 0x88
  GPIOB->ODR = config->PBData.odr;
 800d9f4:	f8ce 700c 	str.w	r7, [lr, #12]
  GPIOB->CRH = config->PBData.crh;
 800d9f8:	f8ce a004 	str.w	sl, [lr, #4]
  GPIOB->CRL = config->PBData.crl;
 800d9fc:	f8ce 3000 	str.w	r3, [lr]
  GPIOC->ODR = config->PCData.odr;
  GPIOC->CRH = config->PCData.crh;
 800da00:	f10e 4e91 	add.w	lr, lr, #1216348160	; 0x48800000
  GPIOC->ODR = config->PCData.odr;
 800da04:	f10c 5c7e 	add.w	ip, ip, #1065353216	; 0x3f800000
  GPIOC->CRH = config->PCData.crh;
 800da08:	f50e 3e09 	add.w	lr, lr, #140288	; 0x22400
  GPIOC->ODR = config->PCData.odr;
 800da0c:	f50c 3c88 	add.w	ip, ip, #69632	; 0x11000
  GPIOC->CRH = config->PCData.crh;
 800da10:	f50e 7e62 	add.w	lr, lr, #904	; 0x388
  GPIOC->ODR = config->PCData.odr;
 800da14:	f8cc 700c 	str.w	r7, [ip, #12]
  GPIOC->CRH = config->PCData.crh;
 800da18:	f8cc e004 	str.w	lr, [ip, #4]
  GPIOC->CRL = config->PCData.crl;
 800da1c:	f8df e200 	ldr.w	lr, [pc, #512]	; 800dc20 <main+0x320>
  GPIOD->ODR = config->PDData.odr;
 800da20:	4980      	ldr	r1, [pc, #512]	; (800dc24 <main+0x324>)
  GPIOC->CRL = config->PCData.crl;
 800da22:	f8cc e000 	str.w	lr, [ip]
  GPIOD->CRH = config->PDData.crh;
  GPIOD->CRL = config->PDData.crl;
#if STM32_HAS_GPIOE || defined(__DOXYGEN__)
  GPIOE->ODR = config->PEData.odr;
 800da26:	4a80      	ldr	r2, [pc, #512]	; (800dc28 <main+0x328>)
  GPIOD->CRL = config->PDData.crl;
 800da28:	f8df c200 	ldr.w	ip, [pc, #512]	; 800dc2c <main+0x32c>
  GPIOD->ODR = config->PDData.odr;
 800da2c:	60cf      	str	r7, [r1, #12]
 800da2e:	b089      	sub	sp, #36	; 0x24
  GPIOD->CRH = config->PDData.crh;
 800da30:	604b      	str	r3, [r1, #4]
  GPIOD->CRL = config->PDData.crl;
 800da32:	f8c1 c000 	str.w	ip, [r1]
  GPIOE->ODR = config->PEData.odr;
 800da36:	60d7      	str	r7, [r2, #12]
    usbp->in_params[i]  = NULL;
 800da38:	4631      	mov	r1, r6
  GPIOE->CRH = config->PEData.crh;
 800da3a:	6053      	str	r3, [r2, #4]
  GPIOE->CRL = config->PEData.crl;
 800da3c:	6013      	str	r3, [r2, #0]
 800da3e:	2238      	movs	r2, #56	; 0x38
  usbp->state        = USB_STOP;
 800da40:	f800 9b2c 	strb.w	r9, [r0], #44
    usbp->in_params[i]  = NULL;
 800da44:	f001 fb89 	bl	800f15a <memset>
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800da48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800da4c:	f641 4e1f 	movw	lr, #7199	; 0x1c1f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800da50:	f64f 7cff 	movw	ip, #65535	; 0xffff
  ST_ENABLE_CLOCK();
 800da54:	69e9      	ldr	r1, [r5, #28]
  usbp->transmitting = 0;
 800da56:	e9c8 6601 	strd	r6, r6, [r8, #4]
 800da5a:	ea41 0109 	orr.w	r1, r1, r9
 800da5e:	61e9      	str	r1, [r5, #28]
 800da60:	69e9      	ldr	r1, [r5, #28]
  pqp->next = pqp;
 800da62:	4d73      	ldr	r5, [pc, #460]	; (800dc30 <main+0x330>)
  ST_ENABLE_STOP();
 800da64:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 800dc34 <main+0x334>
  pqp->prio = (tprio_t)0;
 800da68:	e9c5 5601 	strd	r5, r6, [r5, #4]
  ch.vtlist.dlist.delta = (sysinterval_t)-1;
 800da6c:	626f      	str	r7, [r5, #36]	; 0x24
 800da6e:	f8da 1004 	ldr.w	r1, [sl, #4]
  ch.rlist.older = (thread_t *)&ch.rlist;
 800da72:	e9c5 5504 	strd	r5, r5, [r5, #16]
 800da76:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
  ch.vtlist.lasttime = (systime_t)0;
 800da7a:	852e      	strh	r6, [r5, #40]	; 0x28
 800da7c:	f8ca 1004 	str.w	r1, [sl, #4]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800da80:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 800da84:	f8c3 c02c 	str.w	ip, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 800da88:	619e      	str	r6, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 800da8a:	635e      	str	r6, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 800da8c:	60de      	str	r6, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 800da8e:	605e      	str	r6, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800da90:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800da94:	f8c3 9000 	str.w	r9, [r3]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800da98:	f06f 037f 	mvn.w	r3, #127	; 0x7f
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800da9c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 800daa0:	4632      	mov	r2, r6
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800daa2:	f884 331c 	strb.w	r3, [r4, #796]	; 0x31c
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 800daa6:	4964      	ldr	r1, [pc, #400]	; (800dc38 <main+0x338>)
  ch.vtlist.dlist.next = &ch.vtlist.dlist;
 800daa8:	f105 031c 	add.w	r3, r5, #28
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800daac:	f8c4 0180 	str.w	r0, [r4, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800dab0:	6020      	str	r0, [r4, #0]
  ch.vtlist.dlist.prev = &ch.vtlist.dlist;
 800dab2:	e9c5 3307 	strd	r3, r3, [r5, #28]
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 800dab6:	f105 0340 	add.w	r3, r5, #64	; 0x40
 800daba:	e9c5 130e 	strd	r1, r3, [r5, #56]	; 0x38
  pqp->next = pqp;
 800dabe:	602d      	str	r5, [r5, #0]
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 800dac0:	1c53      	adds	r3, r2, #1
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 800dac2:	461a      	mov	r2, r3
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 800dac4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800dac8:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 800dacc:	2a80      	cmp	r2, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 800dace:	f36f 0102 	bfc	r1, #0, #3
 800dad2:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 800dad6:	d1f3      	bne.n	800dac0 <main+0x1c0>
  tmp->best       = (rtcnt_t)-1;
 800dad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  H_NEXT(&default_heap.header) = NULL;
 800dadc:	2200      	movs	r2, #0
  mp->align = align;
 800dade:	2004      	movs	r0, #4
  mp->object_size = size;
 800dae0:	f04f 0c14 	mov.w	ip, #20
 800dae4:	271c      	movs	r7, #28
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800dae6:	4955      	ldr	r1, [pc, #340]	; (800dc3c <main+0x33c>)
 800dae8:	9302      	str	r3, [sp, #8]
  qp->next = qp;
 800daea:	4b55      	ldr	r3, [pc, #340]	; (800dc40 <main+0x340>)
  H_PAGES(&default_heap.header) = 0;
 800daec:	e9c1 2201 	strd	r2, r2, [r1, #4]
  mp->owner = NULL;
 800daf0:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 800daf2:	615a      	str	r2, [r3, #20]
 800daf4:	62da      	str	r2, [r3, #44]	; 0x2c
  ch.dbg.lock_cnt = (cnt_t)0;
 800daf6:	e9c5 220c 	strd	r2, r2, [r5, #48]	; 0x30
  tmp->last       = (rtcnt_t)0;
 800dafa:	e9cd 2203 	strd	r2, r2, [sp, #12]
 800dafe:	614a      	str	r2, [r1, #20]
  ch.tm.offset = (rtcnt_t)0;
 800db00:	f8c5 2884 	str.w	r2, [r5, #2180]	; 0x884
  tmp->n          = (ucnt_t)0;
 800db04:	9205      	str	r2, [sp, #20]
  mp->provider = provider;
 800db06:	4a4f      	ldr	r2, [pc, #316]	; (800dc44 <main+0x344>)
  ch_memcore.basemem = __heap_base__;
 800db08:	4e4f      	ldr	r6, [pc, #316]	; (800dc48 <main+0x348>)
 800db0a:	621a      	str	r2, [r3, #32]
 800db0c:	639a      	str	r2, [r3, #56]	; 0x38
 800db0e:	4a4f      	ldr	r2, [pc, #316]	; (800dc4c <main+0x34c>)
  qp->prev = qp;
 800db10:	e9c3 3300 	strd	r3, r3, [r3]
 800db14:	6032      	str	r2, [r6, #0]
  ch_memcore.topmem  = __heap_end__;
 800db16:	4a4e      	ldr	r2, [pc, #312]	; (800dc50 <main+0x350>)
  mp->object_size = size;
 800db18:	f8c3 c018 	str.w	ip, [r3, #24]
 800db1c:	6072      	str	r2, [r6, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 800db1e:	4a4d      	ldr	r2, [pc, #308]	; (800dc54 <main+0x354>)
 800db20:	631f      	str	r7, [r3, #48]	; 0x30
 800db22:	600a      	str	r2, [r1, #0]
  qp->next = qp;
 800db24:	f101 020c 	add.w	r2, r1, #12
  qp->prev = qp;
 800db28:	e9c1 2203 	strd	r2, r2, [r1, #12]
  dlp->next = (dyn_element_t *)dlp;
 800db2c:	f103 0210 	add.w	r2, r3, #16
 800db30:	611a      	str	r2, [r3, #16]
 800db32:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800db36:	625a      	str	r2, [r3, #36]	; 0x24
 800db38:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800db3c:	629a      	str	r2, [r3, #40]	; 0x28
 800db3e:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800db42:	63da      	str	r2, [r3, #60]	; 0x3c
 800db44:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800db48:	641a      	str	r2, [r3, #64]	; 0x40
 800db4a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800db4e:	645a      	str	r2, [r3, #68]	; 0x44
  mp->align = align;
 800db50:	61d8      	str	r0, [r3, #28]
 800db52:	6358      	str	r0, [r3, #52]	; 0x34
  tmp->cumulative = (rttime_t)0;
 800db54:	2200      	movs	r2, #0
 800db56:	2300      	movs	r3, #0
 800db58:	4604      	mov	r4, r0
 800db5a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    chTMStartMeasurementX(&tm);
 800db5e:	a802      	add	r0, sp, #8
 800db60:	f7f5 fcbe 	bl	80034e0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 800db64:	a802      	add	r0, sp, #8
 800db66:	f7f5 fcc3 	bl	80034f0 <chTMStopMeasurementX>
  } while (i > 0U);
 800db6a:	3c01      	subs	r4, #1
 800db6c:	d1f7      	bne.n	800db5e <main+0x25e>
  tp->hdr.pqueue.prio = prio;
 800db6e:	2180      	movs	r1, #128	; 0x80
  tp->refs            = (trefs_t)1;
 800db70:	2701      	movs	r7, #1
  ch.tm.offset = tm.best;
 800db72:	9b02      	ldr	r3, [sp, #8]
  tp->name            = name;
 800db74:	4838      	ldr	r0, [pc, #224]	; (800dc58 <main+0x358>)
  REG_INSERT(tp);
 800db76:	696a      	ldr	r2, [r5, #20]
 800db78:	f8c5 3884 	str.w	r3, [r5, #2180]	; 0x884
 800db7c:	4b37      	ldr	r3, [pc, #220]	; (800dc5c <main+0x35c>)
  tp->name            = name;
 800db7e:	f8c5 0858 	str.w	r0, [r5, #2136]	; 0x858
    currp->wabase = &__main_thread_stack_base__;
 800db82:	4837      	ldr	r0, [pc, #220]	; (800dc60 <main+0x360>)
  REG_INSERT(tp);
 800db84:	f8c5 2854 	str.w	r2, [r5, #2132]	; 0x854
  tp->flags           = CH_FLAG_MODE_STATIC;
 800db88:	f885 4861 	strb.w	r4, [r5, #2145]	; 0x861
  tp->mtxlist         = NULL;
 800db8c:	f8c5 4878 	str.w	r4, [r5, #2168]	; 0x878
  tp->epending        = (eventmask_t)0;
 800db90:	f8c5 4874 	str.w	r4, [r5, #2164]	; 0x874
  REG_INSERT(tp);
 800db94:	f8c5 5850 	str.w	r5, [r5, #2128]	; 0x850
  tp->hdr.pqueue.prio = prio;
 800db98:	f8c5 1848 	str.w	r1, [r5, #2120]	; 0x848
  tp->realprio        = prio;
 800db9c:	f8c5 187c 	str.w	r1, [r5, #2172]	; 0x87c
  tp->refs            = (trefs_t)1;
 800dba0:	f885 7862 	strb.w	r7, [r5, #2146]	; 0x862
  REG_INSERT(tp);
 800dba4:	6113      	str	r3, [r2, #16]
  qp->next = qp;
 800dba6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 800dbaa:	e9c5 3305 	strd	r3, r3, [r5, #20]
  lp->next = lp;
 800dbae:	3328      	adds	r3, #40	; 0x28
 800dbb0:	f04f 0920 	mov.w	r9, #32
    currp->wabase = &__main_thread_stack_base__;
 800dbb4:	f8c5 085c 	str.w	r0, [r5, #2140]	; 0x85c
  currp->state = CH_STATE_CURRENT;
 800dbb8:	f885 7860 	strb.w	r7, [r5, #2144]	; 0x860
 800dbbc:	f8c5 3868 	str.w	r3, [r5, #2152]	; 0x868
  qp->next = qp;
 800dbc0:	f8c5 286c 	str.w	r2, [r5, #2156]	; 0x86c
  qp->prev = qp;
 800dbc4:	f8c5 2870 	str.w	r2, [r5, #2160]	; 0x870
 800dbc8:	f389 8811 	msr	BASEPRI, r9
  __ASM volatile ("cpsie i" : : : "memory");
 800dbcc:	b662      	cpsie	i
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dbce:	f64f 06ff 	movw	r6, #63743	; 0xf8ff
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbd2:	2010      	movs	r0, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dbd4:	4b23      	ldr	r3, [pc, #140]	; (800dc64 <main+0x364>)
  reg_value  =  (reg_value                                   |
 800dbd6:	4a24      	ldr	r2, [pc, #144]	; (800dc68 <main+0x368>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dbd8:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dbda:	4031      	ands	r1, r6
  reg_value  =  (reg_value                                   |
 800dbdc:	430a      	orrs	r2, r1
  SCB->AIRCR =  reg_value;
 800dbde:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800dbe0:	f8d3 20fc 	ldr.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800dbe4:	4e21      	ldr	r6, [pc, #132]	; (800dc6c <main+0x36c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800dbe6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800dbea:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 800dbee:	6832      	ldr	r2, [r6, #0]
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800dbf0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800dbf2:	433a      	orrs	r2, r7
 800dbf4:	6032      	str	r2, [r6, #0]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800dbf6:	77d8      	strb	r0, [r3, #31]
 800dbf8:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
 800dbfc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800dbfe:	430b      	orrs	r3, r1
 800dc00:	d038      	beq.n	800dc74 <main+0x374>
    chSysHalt("SV#3");
 800dc02:	481b      	ldr	r0, [pc, #108]	; (800dc70 <main+0x370>)
 800dc04:	f7f2 fdb4 	bl	8000770 <chSysHalt>
 800dc08:	40021000 	.word	0x40021000
 800dc0c:	40007000 	.word	0x40007000
 800dc10:	e000e100 	.word	0xe000e100
 800dc14:	20000ce8 	.word	0x20000ce8
 800dc18:	88844888 	.word	0x88844888
 800dc1c:	40010c00 	.word	0x40010c00
 800dc20:	44848888 	.word	0x44848888
 800dc24:	40011400 	.word	0x40011400
 800dc28:	40011800 	.word	0x40011800
 800dc2c:	88888844 	.word	0x88888844
 800dc30:	20000d70 	.word	0x20000d70
 800dc34:	e0042000 	.word	0xe0042000
 800dc38:	0080fff0 	.word	0x0080fff0
 800dc3c:	20001648 	.word	0x20001648
 800dc40:	200015f8 	.word	0x200015f8
 800dc44:	08001a01 	.word	0x08001a01
 800dc48:	20001640 	.word	0x20001640
 800dc4c:	20002c98 	.word	0x20002c98
 800dc50:	20005000 	.word	0x20005000
 800dc54:	080018f1 	.word	0x080018f1
 800dc58:	08012258 	.word	0x08012258
 800dc5c:	200015b0 	.word	0x200015b0
 800dc60:	20000400 	.word	0x20000400
 800dc64:	e000ed00 	.word	0xe000ed00
 800dc68:	05fa0300 	.word	0x05fa0300
 800dc6c:	e0001000 	.word	0xe0001000
 800dc70:	08011f34 	.word	0x08011f34
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800dc74:	f384 8811 	msr	BASEPRI, r4
  __ASM volatile ("cpsie i" : : : "memory");
 800dc78:	b662      	cpsie	i
  sdup->vmt = &vmt;
 800dc7a:	4e8f      	ldr	r6, [pc, #572]	; (800deb8 <main+0x5b8>)
    (void) chThdCreate(&idle_descriptor);
 800dc7c:	488f      	ldr	r0, [pc, #572]	; (800debc <main+0x5bc>)
 800dc7e:	f7f6 fd17 	bl	80046b0 <chThdCreate>
 800dc82:	4633      	mov	r3, r6
  ibqp->bsize     = size + sizeof (size_t);
 800dc84:	f44f 7282 	mov.w	r2, #260	; 0x104
  ibqp->bcounter  = 0;
 800dc88:	61b4      	str	r4, [r6, #24]
  ibqp->top       = NULL;
 800dc8a:	e9c6 440d 	strd	r4, r4, [r6, #52]	; 0x34
  obqp->top       = NULL;
 800dc8e:	e9c6 441b 	strd	r4, r4, [r6, #108]	; 0x6c
  ibqp->bn        = n;
 800dc92:	2402      	movs	r4, #2
 800dc94:	498a      	ldr	r1, [pc, #552]	; (800dec0 <main+0x5c0>)
  sdup->state = SDU_STOP;
 800dc96:	7237      	strb	r7, [r6, #8]
  sdup->vmt = &vmt;
 800dc98:	f843 1b04 	str.w	r1, [r3], #4
  esp->next = (event_listener_t *)esp;
 800dc9c:	6073      	str	r3, [r6, #4]
  ibqp->notify    = infy;
 800dc9e:	4b89      	ldr	r3, [pc, #548]	; (800dec4 <main+0x5c4>)
  ibqp->suspended = suspended;
 800dca0:	7537      	strb	r7, [r6, #20]
  ibqp->notify    = infy;
 800dca2:	63f3      	str	r3, [r6, #60]	; 0x3c
  obqp->notify    = onfy;
 800dca4:	4b88      	ldr	r3, [pc, #544]	; (800dec8 <main+0x5c8>)
  obqp->suspended = suspended;
 800dca6:	f886 704c 	strb.w	r7, [r6, #76]	; 0x4c
  obqp->notify    = onfy;
 800dcaa:	6773      	str	r3, [r6, #116]	; 0x74
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800dcac:	f506 7321 	add.w	r3, r6, #644	; 0x284
  obqp->bwrptr    = bp;
 800dcb0:	e9c6 3315 	strd	r3, r3, [r6, #84]	; 0x54
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800dcb4:	6273      	str	r3, [r6, #36]	; 0x24
  obqp->buffers   = bp;
 800dcb6:	66b3      	str	r3, [r6, #104]	; 0x68
  ibqp->brdptr    = bp;
 800dcb8:	f106 037c 	add.w	r3, r6, #124	; 0x7c
  ibqp->bwrptr    = bp;
 800dcbc:	e9c6 3307 	strd	r3, r3, [r6, #28]
  ibqp->buffers   = bp;
 800dcc0:	6333      	str	r3, [r6, #48]	; 0x30
  qp->next = qp;
 800dcc2:	f106 030c 	add.w	r3, r6, #12
  qp->prev = qp;
 800dcc6:	e9c6 3303 	strd	r3, r3, [r6, #12]
  qp->next = qp;
 800dcca:	f106 0344 	add.w	r3, r6, #68	; 0x44
  qp->prev = qp;
 800dcce:	e9c6 3311 	strd	r3, r3, [r6, #68]	; 0x44
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800dcd2:	f206 438c 	addw	r3, r6, #1164	; 0x48c
  ibqp->link      = link;
 800dcd6:	6436      	str	r6, [r6, #64]	; 0x40
  obqp->link      = link;
 800dcd8:	67b6      	str	r6, [r6, #120]	; 0x78
  ibqp->bsize     = size + sizeof (size_t);
 800dcda:	62b2      	str	r2, [r6, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 800dcdc:	6632      	str	r2, [r6, #96]	; 0x60
  ibqp->bn        = n;
 800dcde:	62f4      	str	r4, [r6, #44]	; 0x2c
  obqp->bcounter  = n;
 800dce0:	6534      	str	r4, [r6, #80]	; 0x50
  obqp->bn        = n;
 800dce2:	6674      	str	r4, [r6, #100]	; 0x64
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800dce4:	65f3      	str	r3, [r6, #92]	; 0x5c
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800dce6:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800dcea:	f7f2 fd99 	bl	8000820 <_dbg_check_lock>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 800dcee:	7a33      	ldrb	r3, [r6, #8]
 800dcf0:	3b01      	subs	r3, #1
 800dcf2:	2b01      	cmp	r3, #1
 800dcf4:	f200 80c8 	bhi.w	800de88 <main+0x588>
  sdup->config = config;
 800dcf8:	4b74      	ldr	r3, [pc, #464]	; (800decc <main+0x5cc>)
  sdup->state = SDU_READY;
 800dcfa:	7234      	strb	r4, [r6, #8]
  sdup->config = config;
 800dcfc:	f8c6 348c 	str.w	r3, [r6, #1164]	; 0x48c
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 800dd00:	f8c8 602c 	str.w	r6, [r8, #44]	; 0x2c
  usbp->out_params[config->bulk_out - 1U] = sdup;
 800dd04:	f8c8 6048 	str.w	r6, [r8, #72]	; 0x48
    usbp->in_params[config->int_in - 1U]  = sdup;
 800dd08:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
  _dbg_check_unlock();
 800dd0c:	f7f2 fd98 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	42ab      	cmp	r3, r5
 800dd14:	d005      	beq.n	800dd22 <main+0x422>
 800dd16:	69aa      	ldr	r2, [r5, #24]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	6892      	ldr	r2, [r2, #8]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	f0c0 80b6 	bcc.w	800de8e <main+0x58e>
 800dd22:	2400      	movs	r4, #0
 800dd24:	f384 8811 	msr	BASEPRI, r4
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 800dd28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800dd2c:	4b68      	ldr	r3, [pc, #416]	; (800ded0 <main+0x5d0>)
  chThdSleepMilliseconds(1500);
 800dd2e:	f643 2098 	movw	r0, #15000	; 0x3a98
  usbDisconnectBus(serusbcfg.usbp);
 800dd32:	611a      	str	r2, [r3, #16]
  chThdSleepMilliseconds(1500);
 800dd34:	f7f5 f974 	bl	8003020 <chThdSleep>
 800dd38:	f04f 0920 	mov.w	r9, #32
 800dd3c:	f389 8811 	msr	BASEPRI, r9
  _dbg_check_lock();
 800dd40:	f7f2 fd6e 	bl	8000820 <_dbg_check_lock>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 800dd44:	f898 7000 	ldrb.w	r7, [r8]
 800dd48:	1e7b      	subs	r3, r7, #1
 800dd4a:	2b01      	cmp	r3, #1
 800dd4c:	f200 80a2 	bhi.w	800de94 <main+0x594>
  usbp->config = config;
 800dd50:	4b60      	ldr	r3, [pc, #384]	; (800ded4 <main+0x5d4>)
    usbp->epc[i] = NULL;
 800dd52:	464a      	mov	r2, r9
 800dd54:	4621      	mov	r1, r4
 800dd56:	4860      	ldr	r0, [pc, #384]	; (800ded8 <main+0x5d8>)
  usbp->config = config;
 800dd58:	f8c8 3004 	str.w	r3, [r8, #4]
    usbp->epc[i] = NULL;
 800dd5c:	f001 f9fd 	bl	800f15a <memset>
  if (usbp->state == USB_STOP) {
 800dd60:	2f01      	cmp	r7, #1
 800dd62:	d131      	bne.n	800ddc8 <main+0x4c8>
  usbp->pmnext = 64;
 800dd64:	2340      	movs	r3, #64	; 0x40
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800dd66:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800dd6a:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800dd6e:	f04f 0ad0 	mov.w	sl, #208	; 0xd0
 800dd72:	f04f 09e0 	mov.w	r9, #224	; 0xe0
  STM32_USB->DADDR  = DADDR_EF;
 800dd76:	f04f 0e80 	mov.w	lr, #128	; 0x80
  STM32_USB->CNTR = cntr;
 800dd7a:	f44f 4c1e 	mov.w	ip, #40448	; 0x9e00
      rccEnableUSB(true);
 800dd7e:	4a57      	ldr	r2, [pc, #348]	; (800dedc <main+0x5dc>)
  usbp->pmnext = 64;
 800dd80:	f8c8 3084 	str.w	r3, [r8, #132]	; 0x84
      rccEnableUSB(true);
 800dd84:	f8d2 b01c 	ldr.w	fp, [r2, #28]
      STM32_USB->CNTR = CNTR_FRES;
 800dd88:	4b55      	ldr	r3, [pc, #340]	; (800dee0 <main+0x5e0>)
      rccEnableUSB(true);
 800dd8a:	f44b 0b00 	orr.w	fp, fp, #8388608	; 0x800000
 800dd8e:	f8c2 b01c 	str.w	fp, [r2, #28]
 800dd92:	69d2      	ldr	r2, [r2, #28]
 800dd94:	4a53      	ldr	r2, [pc, #332]	; (800dee4 <main+0x5e4>)
      STM32_USB->CNTR = CNTR_FRES;
 800dd96:	641f      	str	r7, [r3, #64]	; 0x40
 800dd98:	f882 a313 	strb.w	sl, [r2, #787]	; 0x313
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800dd9c:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800dda0:	6010      	str	r0, [r2, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800dda2:	f882 9314 	strb.w	r9, [r2, #788]	; 0x314
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800dda6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800ddaa:	6011      	str	r1, [r2, #0]
      STM32_USB->CNTR = 0;
 800ddac:	641c      	str	r4, [r3, #64]	; 0x40
  STM32_USB->BTABLE = BTABLE_ADDR;
 800ddae:	651c      	str	r4, [r3, #80]	; 0x50
  STM32_USB->ISTR   = 0;
 800ddb0:	645c      	str	r4, [r3, #68]	; 0x44
  STM32_USB->DADDR  = DADDR_EF;
 800ddb2:	f8c3 e04c 	str.w	lr, [r3, #76]	; 0x4c
  STM32_USB->CNTR = cntr;
 800ddb6:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
  usbp->epc[0] = &ep0config;
 800ddba:	4b4b      	ldr	r3, [pc, #300]	; (800dee8 <main+0x5e8>)
  usb_lld_init_endpoint(usbp, 0);
 800ddbc:	4621      	mov	r1, r4
 800ddbe:	484b      	ldr	r0, [pc, #300]	; (800deec <main+0x5ec>)
  usbp->epc[0] = &ep0config;
 800ddc0:	f8c8 300c 	str.w	r3, [r8, #12]
  usb_lld_init_endpoint(usbp, 0);
 800ddc4:	f7f3 fa54 	bl	8001270 <usb_lld_init_endpoint>
  usbp->state = USB_READY;
 800ddc8:	2302      	movs	r3, #2
 800ddca:	f888 3000 	strb.w	r3, [r8]
  _dbg_check_unlock();
 800ddce:	f7f2 fd37 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800ddd2:	682b      	ldr	r3, [r5, #0]
 800ddd4:	42ab      	cmp	r3, r5
 800ddd6:	d004      	beq.n	800dde2 <main+0x4e2>
 800ddd8:	69aa      	ldr	r2, [r5, #24]
 800ddda:	689b      	ldr	r3, [r3, #8]
 800dddc:	6892      	ldr	r2, [r2, #8]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d35b      	bcc.n	800de9a <main+0x59a>
 800dde2:	2300      	movs	r3, #0
 800dde4:	f383 8811 	msr	BASEPRI, r3
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800dde8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ddec:	4a38      	ldr	r2, [pc, #224]	; (800ded0 <main+0x5d0>)
  shellInit();

  /*
   * Creates the blinker thread.
   */
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800ddee:	4840      	ldr	r0, [pc, #256]	; (800def0 <main+0x5f0>)
  usbConnectBus(serusbcfg.usbp);
 800ddf0:	6151      	str	r1, [r2, #20]
 800ddf2:	4a40      	ldr	r2, [pc, #256]	; (800def4 <main+0x5f4>)
  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800ddf4:	2180      	movs	r1, #128	; 0x80
 800ddf6:	6012      	str	r2, [r2, #0]
 800ddf8:	4a3f      	ldr	r2, [pc, #252]	; (800def8 <main+0x5f8>)
 800ddfa:	f7ff f981 	bl	800d100 <chThdCreateStatic.constprop.0>
  /*
   * Normal main() thread activity, spawning shells.
   */
  while (true) {
    if (SDU1.config->usbp->state == USB_ACTIVE) {
      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800ddfe:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800defc <main+0x5fc>
 800de02:	4f3f      	ldr	r7, [pc, #252]	; (800df00 <main+0x600>)
 800de04:	4c3f      	ldr	r4, [pc, #252]	; (800df04 <main+0x604>)
    if (SDU1.config->usbp->state == USB_ACTIVE) {
 800de06:	f8d6 348c 	ldr.w	r3, [r6, #1164]	; 0x48c
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b04      	cmp	r3, #4
 800de10:	d10a      	bne.n	800de28 <main+0x528>
      thread_t *shelltp = chThdCreateFromHeap(NULL, SHELL_WA_SIZE,
 800de12:	2381      	movs	r3, #129	; 0x81
 800de14:	4622      	mov	r2, r4
 800de16:	f640 01c8 	movw	r1, #2248	; 0x8c8
 800de1a:	2000      	movs	r0, #0
 800de1c:	e9cd 7800 	strd	r7, r8, [sp]
 800de20:	f7f6 fa7e 	bl	8004320 <chThdCreateFromHeap>
                                              "shell", NORMALPRIO + 1,
                                              shellThread, (void *)&shell_cfg1);
      chThdWait(shelltp);               /* Waiting termination.             */
 800de24:	f7f6 fb84 	bl	8004530 <chThdWait>
 800de28:	2320      	movs	r3, #32
 800de2a:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800de2e:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800de32:	4313      	orrs	r3, r2
 800de34:	d13d      	bne.n	800deb2 <main+0x5b2>
  _dbg_enter_lock();
 800de36:	2301      	movs	r3, #1
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800de38:	f242 7110 	movw	r1, #10000	; 0x2710
 800de3c:	4a32      	ldr	r2, [pc, #200]	; (800df08 <main+0x608>)
 800de3e:	636b      	str	r3, [r5, #52]	; 0x34
 800de40:	a802      	add	r0, sp, #8
 800de42:	69ab      	ldr	r3, [r5, #24]
 800de44:	f7f4 f874 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800de48:	2008      	movs	r0, #8
 800de4a:	f7f4 fa49 	bl	80022e0 <chSchGoSleepS>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800de4e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800de50:	2b00      	cmp	r3, #0
 800de52:	db2b      	blt.n	800deac <main+0x5ac>
 800de54:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800de56:	2b00      	cmp	r3, #0
 800de58:	dd28      	ble.n	800deac <main+0x5ac>
    if (chVTIsArmedI(&vt)) {
 800de5a:	9b05      	ldr	r3, [sp, #20]
 800de5c:	b113      	cbz	r3, 800de64 <main+0x564>
      chVTDoResetI(&vt);
 800de5e:	a802      	add	r0, sp, #8
 800de60:	f7f4 f8fe 	bl	8002060 <chVTDoResetI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800de64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800de66:	b9db      	cbnz	r3, 800dea0 <main+0x5a0>
 800de68:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800de6a:	2a00      	cmp	r2, #0
 800de6c:	dd18      	ble.n	800dea0 <main+0x5a0>
  _dbg_leave_lock();
 800de6e:	636b      	str	r3, [r5, #52]	; 0x34
 800de70:	682b      	ldr	r3, [r5, #0]
  return currp->u.rdymsg;
 800de72:	69aa      	ldr	r2, [r5, #24]
 800de74:	42ab      	cmp	r3, r5
 800de76:	d003      	beq.n	800de80 <main+0x580>
 800de78:	6892      	ldr	r2, [r2, #8]
 800de7a:	689b      	ldr	r3, [r3, #8]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d312      	bcc.n	800dea6 <main+0x5a6>
 800de80:	2300      	movs	r3, #0
 800de82:	f383 8811 	msr	BASEPRI, r3
 800de86:	e7be      	b.n	800de06 <main+0x506>
  osalDbgAssert((sdup->state == SDU_STOP) || (sdup->state == SDU_READY),
 800de88:	4820      	ldr	r0, [pc, #128]	; (800df0c <main+0x60c>)
 800de8a:	f7f2 fc71 	bl	8000770 <chSysHalt>
 800de8e:	4820      	ldr	r0, [pc, #128]	; (800df10 <main+0x610>)
 800de90:	f7f2 fc6e 	bl	8000770 <chSysHalt>
  osalDbgAssert((usbp->state == USB_STOP) || (usbp->state == USB_READY),
 800de94:	481f      	ldr	r0, [pc, #124]	; (800df14 <main+0x614>)
 800de96:	f7f2 fc6b 	bl	8000770 <chSysHalt>
 800de9a:	481f      	ldr	r0, [pc, #124]	; (800df18 <main+0x618>)
 800de9c:	f7f2 fc68 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800dea0:	481e      	ldr	r0, [pc, #120]	; (800df1c <main+0x61c>)
 800dea2:	f7f2 fc65 	bl	8000770 <chSysHalt>
 800dea6:	481e      	ldr	r0, [pc, #120]	; (800df20 <main+0x620>)
 800dea8:	f7f2 fc62 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 800deac:	481d      	ldr	r0, [pc, #116]	; (800df24 <main+0x624>)
 800deae:	f7f2 fc5f 	bl	8000770 <chSysHalt>
    chSysHalt("SV#4");
 800deb2:	481d      	ldr	r0, [pc, #116]	; (800df28 <main+0x628>)
 800deb4:	f7f2 fc5c 	bl	8000770 <chSysHalt>
 800deb8:	20001d6c 	.word	0x20001d6c
 800debc:	080122c8 	.word	0x080122c8
 800dec0:	08012408 	.word	0x08012408
 800dec4:	080004b1 	.word	0x080004b1
 800dec8:	08000aa1 	.word	0x08000aa1
 800decc:	080122f4 	.word	0x080122f4
 800ded0:	40011000 	.word	0x40011000
 800ded4:	08012304 	.word	0x08012304
 800ded8:	20000cf4 	.word	0x20000cf4
 800dedc:	40021000 	.word	0x40021000
 800dee0:	40005c00 	.word	0x40005c00
 800dee4:	e000e100 	.word	0xe000e100
 800dee8:	08011080 	.word	0x08011080
 800deec:	20000ce8 	.word	0x20000ce8
 800def0:	20002b50 	.word	0x20002b50
 800def4:	200016c0 	.word	0x200016c0
 800def8:	08008811 	.word	0x08008811
 800defc:	080122fc 	.word	0x080122fc
 800df00:	080052a1 	.word	0x080052a1
 800df04:	0800f2e4 	.word	0x0800f2e4
 800df08:	08002161 	.word	0x08002161
 800df0c:	08012228 	.word	0x08012228
 800df10:	080121dc 	.word	0x080121dc
 800df14:	080121bc 	.word	0x080121bc
 800df18:	0801224c 	.word	0x0801224c
 800df1c:	0800f214 	.word	0x0800f214
 800df20:	08010de4 	.word	0x08010de4
 800df24:	0800f22c 	.word	0x0800f22c
 800df28:	0800f20c 	.word	0x0800f20c
 800df2c:	00000000 	.word	0x00000000

0800df30 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 800df30:	b508      	push	{r3, lr}
  return (bool)(qp->next != qp);
 800df32:	6803      	ldr	r3, [r0, #0]
  if (ch_queue_notempty(&tqp->queue)) {
 800df34:	4298      	cmp	r0, r3
 800df36:	d010      	beq.n	800df5a <chThdDequeueNextI.constprop.0+0x2a>
  qp->next       = p->next;
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	6002      	str	r2, [r0, #0]
  qp->next->prev = qp;
 800df3c:	6050      	str	r0, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 800df3e:	f893 2020 	ldrb.w	r2, [r3, #32]
 800df42:	2a04      	cmp	r2, #4
 800df44:	d106      	bne.n	800df54 <chThdDequeueNextI.constprop.0+0x24>
  tp->u.rdymsg = msg;
 800df46:	2200      	movs	r2, #0
  (void) chSchReadyI(tp);
 800df48:	4618      	mov	r0, r3
  tp->u.rdymsg = msg;
 800df4a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800df4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  (void) chSchReadyI(tp);
 800df50:	f7f4 b8de 	b.w	8002110 <chSchReadyI>
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 800df54:	4801      	ldr	r0, [pc, #4]	; (800df5c <chThdDequeueNextI.constprop.0+0x2c>)
 800df56:	f7f2 fc0b 	bl	8000770 <chSysHalt>
 800df5a:	bd08      	pop	{r3, pc}
 800df5c:	08012140 	.word	0x08012140

0800df60 <chMBFetchI.constprop.0>:
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800df60:	4b13      	ldr	r3, [pc, #76]	; (800dfb0 <chMBFetchI.constprop.0+0x50>)
 * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 *                      fetched.
 *
 * @iclass
 */
msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 800df62:	b510      	push	{r4, lr}
 800df64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df66:	2a00      	cmp	r2, #0
 800df68:	db19      	blt.n	800df9e <chMBFetchI.constprop.0+0x3e>
 800df6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	dd16      	ble.n	800df9e <chMBFetchI.constprop.0+0x3e>

  chDbgCheckClassI();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  /* If the mailbox is in reset state then returns immediately.*/
  if (mbp->reset) {
 800df70:	4b10      	ldr	r3, [pc, #64]	; (800dfb4 <chMBFetchI.constprop.0+0x54>)
 800df72:	7d1a      	ldrb	r2, [r3, #20]
 800df74:	b9ca      	cbnz	r2, 800dfaa <chMBFetchI.constprop.0+0x4a>
 800df76:	691a      	ldr	r2, [r3, #16]
    return MSG_RESET;
  }

  /* Is there a message in queue? if so then fetch.*/
  if (chMBGetUsedCountI(mbp) > (size_t)0) {
 800df78:	b1a2      	cbz	r2, 800dfa4 <chMBFetchI.constprop.0+0x44>
    *msgp = *mbp->rdptr++;
 800df7a:	68dc      	ldr	r4, [r3, #12]
    if (mbp->rdptr >= mbp->top) {
      mbp->rdptr = mbp->buffer;
    }
    mbp->cnt--;
 800df7c:	3a01      	subs	r2, #1
    *msgp = *mbp->rdptr++;
 800df7e:	1d21      	adds	r1, r4, #4
 800df80:	6824      	ldr	r4, [r4, #0]
 800df82:	60d9      	str	r1, [r3, #12]
 800df84:	6004      	str	r4, [r0, #0]
    if (mbp->rdptr >= mbp->top) {
 800df86:	6858      	ldr	r0, [r3, #4]
    mbp->cnt--;
 800df88:	611a      	str	r2, [r3, #16]
    if (mbp->rdptr >= mbp->top) {
 800df8a:	4281      	cmp	r1, r0
      mbp->rdptr = mbp->buffer;
 800df8c:	bf28      	it	cs
 800df8e:	6819      	ldrcs	r1, [r3, #0]

    /* If there is a writer waiting then makes it ready.*/
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800df90:	4809      	ldr	r0, [pc, #36]	; (800dfb8 <chMBFetchI.constprop.0+0x58>)
      mbp->rdptr = mbp->buffer;
 800df92:	bf28      	it	cs
 800df94:	60d9      	strcs	r1, [r3, #12]
    chThdDequeueNextI(&mbp->qw, MSG_OK);
 800df96:	f7ff ffcb 	bl	800df30 <chThdDequeueNextI.constprop.0>

    return MSG_OK;
 800df9a:	2000      	movs	r0, #0
  }

  /* No message, immediate timeout.*/
  return MSG_TIMEOUT;
}
 800df9c:	bd10      	pop	{r4, pc}
    chSysHalt("SV#10");
 800df9e:	4807      	ldr	r0, [pc, #28]	; (800dfbc <chMBFetchI.constprop.0+0x5c>)
 800dfa0:	f7f2 fbe6 	bl	8000770 <chSysHalt>
  return MSG_TIMEOUT;
 800dfa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800dfa8:	bd10      	pop	{r4, pc}
    return MSG_RESET;
 800dfaa:	f06f 0001 	mvn.w	r0, #1
}
 800dfae:	bd10      	pop	{r4, pc}
 800dfb0:	20000d70 	.word	0x20000d70
 800dfb4:	20000c58 	.word	0x20000c58
 800dfb8:	20000c70 	.word	0x20000c70
 800dfbc:	0800f22c 	.word	0x0800f22c

0800dfc0 <chMBPostAheadI.constprop.0>:
msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 800dfc0:	b538      	push	{r3, r4, r5, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800dfc2:	4b16      	ldr	r3, [pc, #88]	; (800e01c <chMBPostAheadI.constprop.0+0x5c>)
 800dfc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfc6:	2a00      	cmp	r2, #0
 800dfc8:	db1e      	blt.n	800e008 <chMBPostAheadI.constprop.0+0x48>
 800dfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	dd1b      	ble.n	800e008 <chMBPostAheadI.constprop.0+0x48>
  if (mbp->reset) {
 800dfd0:	4d13      	ldr	r5, [pc, #76]	; (800e020 <chMBPostAheadI.constprop.0+0x60>)
 800dfd2:	7d2b      	ldrb	r3, [r5, #20]
 800dfd4:	b9f3      	cbnz	r3, 800e014 <chMBPostAheadI.constprop.0+0x54>
 800dfd6:	4604      	mov	r4, r0
  chDbgCheckClassI();
 800dfd8:	f7f2 fcb2 	bl	8000940 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800dfdc:	e9d5 2100 	ldrd	r2, r1, [r5]
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800dfe0:	692b      	ldr	r3, [r5, #16]
 800dfe2:	1a88      	subs	r0, r1, r2
 800dfe4:	ebb3 0fa0 	cmp.w	r3, r0, asr #2
 800dfe8:	d011      	beq.n	800e00e <chMBPostAheadI.constprop.0+0x4e>
    if (--mbp->rdptr < mbp->buffer) {
 800dfea:	68eb      	ldr	r3, [r5, #12]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800dfec:	480d      	ldr	r0, [pc, #52]	; (800e024 <chMBPostAheadI.constprop.0+0x64>)
    if (--mbp->rdptr < mbp->buffer) {
 800dfee:	3b04      	subs	r3, #4
 800dff0:	4293      	cmp	r3, r2
      mbp->rdptr = mbp->top - 1;
 800dff2:	bf38      	it	cc
 800dff4:	1f0b      	subcc	r3, r1, #4
 800dff6:	60eb      	str	r3, [r5, #12]
    *mbp->rdptr = msg;
 800dff8:	601c      	str	r4, [r3, #0]
    mbp->cnt++;
 800dffa:	692b      	ldr	r3, [r5, #16]
 800dffc:	3301      	adds	r3, #1
 800dffe:	612b      	str	r3, [r5, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800e000:	f7ff ff96 	bl	800df30 <chThdDequeueNextI.constprop.0>
    return MSG_OK;
 800e004:	2000      	movs	r0, #0
}
 800e006:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#10");
 800e008:	4807      	ldr	r0, [pc, #28]	; (800e028 <chMBPostAheadI.constprop.0+0x68>)
 800e00a:	f7f2 fbb1 	bl	8000770 <chSysHalt>
  return MSG_TIMEOUT;
 800e00e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800e012:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 800e014:	f06f 0001 	mvn.w	r0, #1
}
 800e018:	bd38      	pop	{r3, r4, r5, pc}
 800e01a:	bf00      	nop
 800e01c:	20000d70 	.word	0x20000d70
 800e020:	20000c58 	.word	0x20000c58
 800e024:	20000c78 	.word	0x20000c78
 800e028:	0800f22c 	.word	0x0800f22c
 800e02c:	00000000 	.word	0x00000000

0800e030 <chMBPostAheadTimeout.constprop.0>:
msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 800e030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e034:	2320      	movs	r3, #32
 800e036:	4607      	mov	r7, r0
 800e038:	460e      	mov	r6, r1
 800e03a:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e03e:	4c2b      	ldr	r4, [pc, #172]	; (800e0ec <chMBPostAheadTimeout.constprop.0+0xbc>)
  _dbg_check_lock();
 800e040:	f7f2 fbee 	bl	8000820 <_dbg_check_lock>
 800e044:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e046:	bb23      	cbnz	r3, 800e092 <chMBPostAheadTimeout.constprop.0+0x62>
 800e048:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	dd21      	ble.n	800e092 <chMBPostAheadTimeout.constprop.0+0x62>
 800e04e:	4d28      	ldr	r5, [pc, #160]	; (800e0f0 <chMBPostAheadTimeout.constprop.0+0xc0>)
  p->next       = qp;
 800e050:	f105 0818 	add.w	r8, r5, #24
    if (mbp->reset) {
 800e054:	7d2b      	ldrb	r3, [r5, #20]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d142      	bne.n	800e0e0 <chMBPostAheadTimeout.constprop.0+0xb0>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e05a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	db1b      	blt.n	800e098 <chMBPostAheadTimeout.constprop.0+0x68>
 800e060:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e062:	2b00      	cmp	r3, #0
 800e064:	dd18      	ble.n	800e098 <chMBPostAheadTimeout.constprop.0+0x68>
 800e066:	e9d5 3200 	ldrd	r3, r2, [r5]
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800e06a:	6929      	ldr	r1, [r5, #16]
 800e06c:	1ad0      	subs	r0, r2, r3
 800e06e:	ebb1 0fa0 	cmp.w	r1, r0, asr #2
 800e072:	d114      	bne.n	800e09e <chMBPostAheadTimeout.constprop.0+0x6e>
  ch_queue_insert(&currp->hdr.queue, &tqp->queue);
 800e074:	69a3      	ldr	r3, [r4, #24]
  p->prev       = qp->prev;
 800e076:	69ea      	ldr	r2, [r5, #28]
  p->next       = qp;
 800e078:	f8c3 8000 	str.w	r8, [r3]
  p->prev       = qp->prev;
 800e07c:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800e07e:	4631      	mov	r1, r6
  p->prev->next = p;
 800e080:	6013      	str	r3, [r2, #0]
 800e082:	2004      	movs	r0, #4
  qp->prev      = p;
 800e084:	61eb      	str	r3, [r5, #28]
 800e086:	f7f4 fa03 	bl	8002490 <chSchGoSleepTimeoutS>
  } while (rdymsg == MSG_OK);
 800e08a:	4681      	mov	r9, r0
 800e08c:	2800      	cmp	r0, #0
 800e08e:	d0e1      	beq.n	800e054 <chMBPostAheadTimeout.constprop.0+0x24>
 800e090:	e016      	b.n	800e0c0 <chMBPostAheadTimeout.constprop.0+0x90>
    chSysHalt("SV#11");
 800e092:	4818      	ldr	r0, [pc, #96]	; (800e0f4 <chMBPostAheadTimeout.constprop.0+0xc4>)
 800e094:	f7f2 fb6c 	bl	8000770 <chSysHalt>
    chSysHalt("SV#10");
 800e098:	4817      	ldr	r0, [pc, #92]	; (800e0f8 <chMBPostAheadTimeout.constprop.0+0xc8>)
 800e09a:	f7f2 fb69 	bl	8000770 <chSysHalt>
      if (--mbp->rdptr < mbp->buffer) {
 800e09e:	68e9      	ldr	r1, [r5, #12]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800e0a0:	4816      	ldr	r0, [pc, #88]	; (800e0fc <chMBPostAheadTimeout.constprop.0+0xcc>)
      if (--mbp->rdptr < mbp->buffer) {
 800e0a2:	3904      	subs	r1, #4
 800e0a4:	428b      	cmp	r3, r1
        mbp->rdptr = mbp->top - 1;
 800e0a6:	bf88      	it	hi
 800e0a8:	1f11      	subhi	r1, r2, #4
 800e0aa:	60e9      	str	r1, [r5, #12]
      *mbp->rdptr = msg;
 800e0ac:	600f      	str	r7, [r1, #0]
      mbp->cnt++;
 800e0ae:	692b      	ldr	r3, [r5, #16]
      chSchRescheduleS();
 800e0b0:	f04f 0900 	mov.w	r9, #0
      mbp->cnt++;
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	612b      	str	r3, [r5, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 800e0b8:	f7ff ff3a 	bl	800df30 <chThdDequeueNextI.constprop.0>
      chSchRescheduleS();
 800e0bc:	f7f4 fdc8 	bl	8002c50 <chSchRescheduleS>
  _dbg_check_unlock();
 800e0c0:	f7f2 fbbe 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e0c4:	6823      	ldr	r3, [r4, #0]
 800e0c6:	42a3      	cmp	r3, r4
 800e0c8:	d004      	beq.n	800e0d4 <chMBPostAheadTimeout.constprop.0+0xa4>
 800e0ca:	69a2      	ldr	r2, [r4, #24]
 800e0cc:	689b      	ldr	r3, [r3, #8]
 800e0ce:	6892      	ldr	r2, [r2, #8]
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d308      	bcc.n	800e0e6 <chMBPostAheadTimeout.constprop.0+0xb6>
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	f383 8811 	msr	BASEPRI, r3
}
 800e0da:	4648      	mov	r0, r9
 800e0dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return MSG_RESET;
 800e0e0:	f06f 0901 	mvn.w	r9, #1
 800e0e4:	e7ec      	b.n	800e0c0 <chMBPostAheadTimeout.constprop.0+0x90>
 800e0e6:	4806      	ldr	r0, [pc, #24]	; (800e100 <chMBPostAheadTimeout.constprop.0+0xd0>)
 800e0e8:	f7f2 fb42 	bl	8000770 <chSysHalt>
 800e0ec:	20000d70 	.word	0x20000d70
 800e0f0:	20000c58 	.word	0x20000c58
 800e0f4:	0800f204 	.word	0x0800f204
 800e0f8:	0800f22c 	.word	0x0800f22c
 800e0fc:	20000c78 	.word	0x20000c78
 800e100:	08011034 	.word	0x08011034
	...

0800e110 <oslib_test_002_001_execute.lto_priv.0>:
static void oslib_test_002_001_execute(void) {
 800e110:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  test_set_step(1);
 800e114:	2501      	movs	r5, #1
 800e116:	4ec3      	ldr	r6, [pc, #780]	; (800e424 <oslib_test_002_001_execute.lto_priv.0+0x314>)
 800e118:	2320      	movs	r3, #32
static void oslib_test_002_001_execute(void) {
 800e11a:	b083      	sub	sp, #12
  test_set_step(1);
 800e11c:	6035      	str	r5, [r6, #0]
 800e11e:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e122:	4cc1      	ldr	r4, [pc, #772]	; (800e428 <oslib_test_002_001_execute.lto_priv.0+0x318>)
  _dbg_check_lock();
 800e124:	f7f2 fb7c 	bl	8000820 <_dbg_check_lock>
 800e128:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	f2c0 8196 	blt.w	800e45c <oslib_test_002_001_execute.lto_priv.0+0x34c>
 800e130:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e132:	2a00      	cmp	r2, #0
 800e134:	f340 8192 	ble.w	800e45c <oslib_test_002_001_execute.lto_priv.0+0x34c>
 800e138:	4fbc      	ldr	r7, [pc, #752]	; (800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 800e13a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e13e:	1a51      	subs	r1, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800e140:	693a      	ldr	r2, [r7, #16]
 800e142:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  if (!condition)
 800e146:	2a04      	cmp	r2, #4
 800e148:	f040 818e 	bne.w	800e468 <oslib_test_002_001_execute.lto_priv.0+0x358>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	f040 8188 	bne.w	800e462 <oslib_test_002_001_execute.lto_priv.0+0x352>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e152:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 800e154:	6363      	str	r3, [r4, #52]	; 0x34
 800e156:	42a2      	cmp	r2, r4
 800e158:	d005      	beq.n	800e166 <oslib_test_002_001_execute.lto_priv.0+0x56>
 800e15a:	69a1      	ldr	r1, [r4, #24]
 800e15c:	6893      	ldr	r3, [r2, #8]
 800e15e:	688a      	ldr	r2, [r1, #8]
 800e160:	429a      	cmp	r2, r3
 800e162:	f0c0 8192 	bcc.w	800e48a <oslib_test_002_001_execute.lto_priv.0+0x37a>
 800e166:	2300      	movs	r3, #0
 800e168:	f383 8811 	msr	BASEPRI, r3
  test_set_step(2);
 800e16c:	2302      	movs	r3, #2
 800e16e:	2520      	movs	r5, #32
 800e170:	6033      	str	r3, [r6, #0]
    chMBReset(&mb1);
 800e172:	f7fb fe25 	bl	8009dc0 <chMBReset.constprop.0>
 800e176:	f385 8811 	msr	BASEPRI, r5
  _dbg_check_lock();
 800e17a:	f7f2 fb51 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e17e:	f7f2 fbdf 	bl	8000940 <chDbgCheckClassI>
  chDbgCheckClassI();
 800e182:	f7f2 fbdd 	bl	8000940 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800e186:	e9d7 3400 	ldrd	r3, r4, [r7]
 800e18a:	1ae4      	subs	r4, r4, r3
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800e18c:	693b      	ldr	r3, [r7, #16]
 800e18e:	ebc3 04a4 	rsb	r4, r3, r4, asr #2
 800e192:	2c04      	cmp	r4, #4
 800e194:	f040 8182 	bne.w	800e49c <oslib_test_002_001_execute.lto_priv.0+0x38c>
 800e198:	f7fa fb0a 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e19c:	f385 8811 	msr	BASEPRI, r5
 800e1a0:	f7f2 fb3e 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e1a4:	f7f2 fbcc 	bl	8000940 <chDbgCheckClassI>
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	f040 8186 	bne.w	800e4bc <oslib_test_002_001_execute.lto_priv.0+0x3ac>
 800e1b0:	f7fa fafe 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e1b4:	f385 8811 	msr	BASEPRI, r5
 800e1b8:	f7f2 fb32 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800e1bc:	6838      	ldr	r0, [r7, #0]
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	499b      	ldr	r1, [pc, #620]	; (800e430 <oslib_test_002_001_execute.lto_priv.0+0x320>)
 800e1c2:	1ac0      	subs	r0, r0, r3
 800e1c4:	fab0 f080 	clz	r0, r0
 800e1c8:	0940      	lsrs	r0, r0, #5
 800e1ca:	f7f7 fb79 	bl	80058c0 <_test_assert>
 800e1ce:	2800      	cmp	r0, #0
 800e1d0:	f040 8171 	bne.w	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e1d4:	f7fa faec 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e1d8:	f385 8811 	msr	BASEPRI, r5
 800e1dc:	f7f2 fb20 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800e1e0:	6838      	ldr	r0, [r7, #0]
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	4993      	ldr	r1, [pc, #588]	; (800e434 <oslib_test_002_001_execute.lto_priv.0+0x324>)
 800e1e6:	1ac0      	subs	r0, r0, r3
 800e1e8:	fab0 f080 	clz	r0, r0
 800e1ec:	0940      	lsrs	r0, r0, #5
 800e1ee:	f7f7 fb67 	bl	80058c0 <_test_assert>
 800e1f2:	4605      	mov	r5, r0
 800e1f4:	2800      	cmp	r0, #0
 800e1f6:	f040 815e 	bne.w	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e1fa:	f7fa fad9 	bl	80087b0 <chSysUnlock.lto_priv.29>
  test_set_step(3);
 800e1fe:	2303      	movs	r3, #3
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800e200:	4629      	mov	r1, r5
 800e202:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e206:	4889      	ldr	r0, [pc, #548]	; (800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
  test_set_step(3);
 800e208:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800e20a:	f7f5 ff31 	bl	8004070 <chMBPostTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800e20e:	1c85      	adds	r5, r0, #2
 800e210:	bf14      	ite	ne
 800e212:	2000      	movne	r0, #0
 800e214:	2001      	moveq	r0, #1
 800e216:	4988      	ldr	r1, [pc, #544]	; (800e438 <oslib_test_002_001_execute.lto_priv.0+0x328>)
 800e218:	f7f7 fb52 	bl	80058c0 <_test_assert>
 800e21c:	2800      	cmp	r0, #0
 800e21e:	f040 813a 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
    msg1 = chMBPostAheadTimeout(&mb1, (msg_t)0, TIME_INFINITE);
 800e222:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e226:	f7ff ff03 	bl	800e030 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800e22a:	1c82      	adds	r2, r0, #2
 800e22c:	bf14      	ite	ne
 800e22e:	2000      	movne	r0, #0
 800e230:	2001      	moveq	r0, #1
 800e232:	4981      	ldr	r1, [pc, #516]	; (800e438 <oslib_test_002_001_execute.lto_priv.0+0x328>)
 800e234:	f7f7 fb44 	bl	80058c0 <_test_assert>
 800e238:	2800      	cmp	r0, #0
 800e23a:	f040 812c 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800e23e:	a901      	add	r1, sp, #4
 800e240:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e244:	4879      	ldr	r0, [pc, #484]	; (800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 800e246:	f7f5 ff83 	bl	8004150 <chMBFetchTimeout>
    test_assert(msg1 == MSG_RESET, "not in reset state");
 800e24a:	1c83      	adds	r3, r0, #2
 800e24c:	bf14      	ite	ne
 800e24e:	2000      	movne	r0, #0
 800e250:	2001      	moveq	r0, #1
 800e252:	4979      	ldr	r1, [pc, #484]	; (800e438 <oslib_test_002_001_execute.lto_priv.0+0x328>)
 800e254:	f7f7 fb34 	bl	80058c0 <_test_assert>
 800e258:	2800      	cmp	r0, #0
 800e25a:	f040 811c 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
  test_set_step(4);
 800e25e:	2542      	movs	r5, #66	; 0x42
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e260:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e264:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 800e43c <oslib_test_002_001_execute.lto_priv.0+0x32c>
 *
 * @xclass
 */
static inline void chMBResumeX(mailbox_t *mbp) {

  mbp->reset = false;
 800e268:	7538      	strb	r0, [r7, #20]
  test_set_step(4);
 800e26a:	6034      	str	r4, [r6, #0]
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e26c:	4629      	mov	r1, r5
 800e26e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e272:	4648      	mov	r0, r9
 800e274:	f7f5 fefc 	bl	8004070 <chMBPostTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e278:	fab0 f080 	clz	r0, r0
 800e27c:	4641      	mov	r1, r8
 800e27e:	0940      	lsrs	r0, r0, #5
 800e280:	f7f7 fb1e 	bl	80058c0 <_test_assert>
 800e284:	2800      	cmp	r0, #0
 800e286:	f040 8106 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800e28a:	3501      	adds	r5, #1
 800e28c:	2d45      	cmp	r5, #69	; 0x45
 800e28e:	d1ed      	bne.n	800e26c <oslib_test_002_001_execute.lto_priv.0+0x15c>
    msg1 = chMBPostAheadTimeout(&mb1, 'A', TIME_INFINITE);
 800e290:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800e294:	2041      	movs	r0, #65	; 0x41
 800e296:	f7ff fecb 	bl	800e030 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e29a:	fab0 f080 	clz	r0, r0
 800e29e:	4967      	ldr	r1, [pc, #412]	; (800e43c <oslib_test_002_001_execute.lto_priv.0+0x32c>)
 800e2a0:	0940      	lsrs	r0, r0, #5
 800e2a2:	f7f7 fb0d 	bl	80058c0 <_test_assert>
 800e2a6:	2800      	cmp	r0, #0
 800e2a8:	f040 80f5 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
  test_set_step(5);
 800e2ac:	2305      	movs	r3, #5
 800e2ae:	2520      	movs	r5, #32
 800e2b0:	6033      	str	r3, [r6, #0]
 800e2b2:	f385 8811 	msr	BASEPRI, r5
 800e2b6:	f7f2 fab3 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e2ba:	f7f2 fb41 	bl	8000940 <chDbgCheckClassI>
  chDbgCheckClassI();
 800e2be:	f7f2 fb3f 	bl	8000940 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800e2c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e2c6:	1a9b      	subs	r3, r3, r2
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800e2c8:	693a      	ldr	r2, [r7, #16]
 800e2ca:	495d      	ldr	r1, [pc, #372]	; (800e440 <oslib_test_002_001_execute.lto_priv.0+0x330>)
 800e2cc:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800e2d0:	bf0c      	ite	eq
 800e2d2:	2001      	moveq	r0, #1
 800e2d4:	2000      	movne	r0, #0
 800e2d6:	f7f7 faf3 	bl	80058c0 <_test_assert>
 800e2da:	2800      	cmp	r0, #0
 800e2dc:	f040 80eb 	bne.w	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e2e0:	f7fa fa66 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e2e4:	f385 8811 	msr	BASEPRI, r5
 800e2e8:	f7f2 fa9a 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e2ec:	f7f2 fb28 	bl	8000940 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800e2f0:	6938      	ldr	r0, [r7, #16]
 800e2f2:	4954      	ldr	r1, [pc, #336]	; (800e444 <oslib_test_002_001_execute.lto_priv.0+0x334>)
 800e2f4:	f1a0 0e04 	sub.w	lr, r0, #4
 800e2f8:	f1de 0000 	rsbs	r0, lr, #0
 800e2fc:	eb40 000e 	adc.w	r0, r0, lr
 800e300:	f7f7 fade 	bl	80058c0 <_test_assert>
 800e304:	2800      	cmp	r0, #0
 800e306:	f040 80d6 	bne.w	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e30a:	f7fa fa51 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e30e:	f385 8811 	msr	BASEPRI, r5
 800e312:	f7f2 fa85 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800e316:	e9d7 3002 	ldrd	r3, r0, [r7, #8]
 800e31a:	eba0 0c03 	sub.w	ip, r0, r3
 800e31e:	f1dc 0000 	rsbs	r0, ip, #0
 800e322:	eb40 000c 	adc.w	r0, r0, ip
 800e326:	4948      	ldr	r1, [pc, #288]	; (800e448 <oslib_test_002_001_execute.lto_priv.0+0x338>)
 800e328:	f7f7 faca 	bl	80058c0 <_test_assert>
 800e32c:	2800      	cmp	r0, #0
 800e32e:	f040 80c2 	bne.w	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e332:	f7fa fa3d 	bl	80087b0 <chSysUnlock.lto_priv.29>
  test_set_step(6);
 800e336:	2306      	movs	r3, #6
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800e338:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e33c:	4d3f      	ldr	r5, [pc, #252]	; (800e43c <oslib_test_002_001_execute.lto_priv.0+0x32c>)
  test_set_step(6);
 800e33e:	6033      	str	r3, [r6, #0]
      msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800e340:	a901      	add	r1, sp, #4
 800e342:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e346:	4640      	mov	r0, r8
 800e348:	f7f5 ff02 	bl	8004150 <chMBFetchTimeout>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e34c:	fab0 f080 	clz	r0, r0
 800e350:	4629      	mov	r1, r5
 800e352:	0940      	lsrs	r0, r0, #5
 800e354:	f7f7 fab4 	bl	80058c0 <_test_assert>
 800e358:	2800      	cmp	r0, #0
 800e35a:	f040 809c 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
      test_emit_token(msg2);
 800e35e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800e362:	f7f8 f92d 	bl	80065c0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800e366:	3c01      	subs	r4, #1
 800e368:	d1ea      	bne.n	800e340 <oslib_test_002_001_execute.lto_priv.0+0x230>
    test_assert_sequence("ABCD", "wrong get sequence");
 800e36a:	4938      	ldr	r1, [pc, #224]	; (800e44c <oslib_test_002_001_execute.lto_priv.0+0x33c>)
 800e36c:	4838      	ldr	r0, [pc, #224]	; (800e450 <oslib_test_002_001_execute.lto_priv.0+0x340>)
 800e36e:	f7f8 f897 	bl	80064a0 <_test_assert_sequence>
 800e372:	2800      	cmp	r0, #0
 800e374:	f040 808f 	bne.w	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
  test_set_step(7);
 800e378:	2307      	movs	r3, #7
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e37a:	2146      	movs	r1, #70	; 0x46
 800e37c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e380:	482a      	ldr	r0, [pc, #168]	; (800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
  test_set_step(7);
 800e382:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e384:	f7f5 fe74 	bl	8004070 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e388:	fab0 f080 	clz	r0, r0
 800e38c:	492b      	ldr	r1, [pc, #172]	; (800e43c <oslib_test_002_001_execute.lto_priv.0+0x32c>)
 800e38e:	0940      	lsrs	r0, r0, #5
 800e390:	f7f7 fa96 	bl	80058c0 <_test_assert>
 800e394:	2800      	cmp	r0, #0
 800e396:	d17e      	bne.n	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800e398:	a901      	add	r1, sp, #4
 800e39a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e39e:	4823      	ldr	r0, [pc, #140]	; (800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 800e3a0:	f7f5 fed6 	bl	8004150 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e3a4:	fab0 f080 	clz	r0, r0
 800e3a8:	4924      	ldr	r1, [pc, #144]	; (800e43c <oslib_test_002_001_execute.lto_priv.0+0x32c>)
 800e3aa:	0940      	lsrs	r0, r0, #5
 800e3ac:	f7f7 fa88 	bl	80058c0 <_test_assert>
 800e3b0:	2800      	cmp	r0, #0
 800e3b2:	d170      	bne.n	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
  test_set_step(8);
 800e3b4:	2308      	movs	r3, #8
 800e3b6:	2420      	movs	r4, #32
 800e3b8:	6033      	str	r3, [r6, #0]
 800e3ba:	f384 8811 	msr	BASEPRI, r4
 800e3be:	f7f2 fa2f 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800e3c2:	481a      	ldr	r0, [pc, #104]	; (800e42c <oslib_test_002_001_execute.lto_priv.0+0x31c>)
 800e3c4:	f7f5 fe3c 	bl	8004040 <chMBGetFreeCountI.lto_priv.0.lto_priv.0>
 800e3c8:	1f05      	subs	r5, r0, #4
 800e3ca:	4268      	negs	r0, r5
 800e3cc:	4168      	adcs	r0, r5
 800e3ce:	4921      	ldr	r1, [pc, #132]	; (800e454 <oslib_test_002_001_execute.lto_priv.0+0x344>)
 800e3d0:	f7f7 fa76 	bl	80058c0 <_test_assert>
 800e3d4:	2800      	cmp	r0, #0
 800e3d6:	d16e      	bne.n	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e3d8:	f7fa f9ea 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e3dc:	f384 8811 	msr	BASEPRI, r4
 800e3e0:	f7f2 fa1e 	bl	8000820 <_dbg_check_lock>
 800e3e4:	f7f2 faac 	bl	8000940 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800e3e8:	6938      	ldr	r0, [r7, #16]
 800e3ea:	491b      	ldr	r1, [pc, #108]	; (800e458 <oslib_test_002_001_execute.lto_priv.0+0x348>)
 800e3ec:	fab0 f080 	clz	r0, r0
 800e3f0:	0940      	lsrs	r0, r0, #5
 800e3f2:	f7f7 fa65 	bl	80058c0 <_test_assert>
 800e3f6:	2800      	cmp	r0, #0
 800e3f8:	d15d      	bne.n	800e4b6 <oslib_test_002_001_execute.lto_priv.0+0x3a6>
 800e3fa:	f7fa f9d9 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800e3fe:	6838      	ldr	r0, [r7, #0]
 800e400:	68bb      	ldr	r3, [r7, #8]
 800e402:	490b      	ldr	r1, [pc, #44]	; (800e430 <oslib_test_002_001_execute.lto_priv.0+0x320>)
 800e404:	1ac2      	subs	r2, r0, r3
 800e406:	4250      	negs	r0, r2
 800e408:	4150      	adcs	r0, r2
 800e40a:	f7f7 fa59 	bl	80058c0 <_test_assert>
 800e40e:	2800      	cmp	r0, #0
 800e410:	d141      	bne.n	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800e412:	6838      	ldr	r0, [r7, #0]
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	4907      	ldr	r1, [pc, #28]	; (800e434 <oslib_test_002_001_execute.lto_priv.0+0x324>)
 800e418:	1ac3      	subs	r3, r0, r3
 800e41a:	4258      	negs	r0, r3
 800e41c:	4158      	adcs	r0, r3
 800e41e:	f7f7 fa4f 	bl	80058c0 <_test_assert>
 800e422:	e038      	b.n	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
 800e424:	20001d3c 	.word	0x20001d3c
 800e428:	20000d70 	.word	0x20000d70
 800e42c:	20000c58 	.word	0x20000c58
 800e430:	08011f48 	.word	0x08011f48
 800e434:	08011f6c 	.word	0x08011f6c
 800e438:	08011f90 	.word	0x08011f90
 800e43c:	0801007c 	.word	0x0801007c
 800e440:	08011fa4 	.word	0x08011fa4
 800e444:	08011fb0 	.word	0x08011fb0
 800e448:	08011fbc 	.word	0x08011fbc
 800e44c:	08011fd4 	.word	0x08011fd4
 800e450:	0800ff8c 	.word	0x0800ff8c
 800e454:	08011d58 	.word	0x08011d58
 800e458:	08011f3c 	.word	0x08011f3c
    chSysHalt("SV#10");
 800e45c:	481a      	ldr	r0, [pc, #104]	; (800e4c8 <oslib_test_002_001_execute.lto_priv.0+0x3b8>)
 800e45e:	f7f2 f987 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800e462:	481a      	ldr	r0, [pc, #104]	; (800e4cc <oslib_test_002_001_execute.lto_priv.0+0x3bc>)
 800e464:	f7f2 f984 	bl	8000770 <chSysHalt>
  test_global_fail     = true;
 800e468:	4a19      	ldr	r2, [pc, #100]	; (800e4d0 <oslib_test_002_001_execute.lto_priv.0+0x3c0>)
  test_failure_message = msg;
 800e46a:	4b1a      	ldr	r3, [pc, #104]	; (800e4d4 <oslib_test_002_001_execute.lto_priv.0+0x3c4>)
  test_local_fail      = true;
 800e46c:	491a      	ldr	r1, [pc, #104]	; (800e4d8 <oslib_test_002_001_execute.lto_priv.0+0x3c8>)
  test_global_fail     = true;
 800e46e:	7015      	strb	r5, [r2, #0]
  test_failure_message = msg;
 800e470:	4a1a      	ldr	r2, [pc, #104]	; (800e4dc <oslib_test_002_001_execute.lto_priv.0+0x3cc>)
  test_local_fail      = true;
 800e472:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 800e474:	601a      	str	r2, [r3, #0]
  _dbg_check_unlock();
 800e476:	f7f2 f9e3 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e47a:	6823      	ldr	r3, [r4, #0]
 800e47c:	42a3      	cmp	r3, r4
 800e47e:	d007      	beq.n	800e490 <oslib_test_002_001_execute.lto_priv.0+0x380>
 800e480:	69a2      	ldr	r2, [r4, #24]
 800e482:	689b      	ldr	r3, [r3, #8]
 800e484:	6892      	ldr	r2, [r2, #8]
 800e486:	429a      	cmp	r2, r3
 800e488:	d202      	bcs.n	800e490 <oslib_test_002_001_execute.lto_priv.0+0x380>
 800e48a:	4815      	ldr	r0, [pc, #84]	; (800e4e0 <oslib_test_002_001_execute.lto_priv.0+0x3d0>)
 800e48c:	f7f2 f970 	bl	8000770 <chSysHalt>
 800e490:	2300      	movs	r3, #0
 800e492:	f383 8811 	msr	BASEPRI, r3
}
 800e496:	b003      	add	sp, #12
 800e498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  test_local_fail      = true;
 800e49c:	2301      	movs	r3, #1
 800e49e:	490e      	ldr	r1, [pc, #56]	; (800e4d8 <oslib_test_002_001_execute.lto_priv.0+0x3c8>)
  test_global_fail     = true;
 800e4a0:	4a0b      	ldr	r2, [pc, #44]	; (800e4d0 <oslib_test_002_001_execute.lto_priv.0+0x3c0>)
  test_failure_message = msg;
 800e4a2:	480c      	ldr	r0, [pc, #48]	; (800e4d4 <oslib_test_002_001_execute.lto_priv.0+0x3c4>)
 800e4a4:	4c0f      	ldr	r4, [pc, #60]	; (800e4e4 <oslib_test_002_001_execute.lto_priv.0+0x3d4>)
 800e4a6:	6004      	str	r4, [r0, #0]
  test_local_fail      = true;
 800e4a8:	700b      	strb	r3, [r1, #0]
  test_global_fail     = true;
 800e4aa:	7013      	strb	r3, [r2, #0]
 800e4ac:	b003      	add	sp, #12
 800e4ae:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e4b2:	f7fa b97d 	b.w	80087b0 <chSysUnlock.lto_priv.29>
 800e4b6:	f7fa f97b 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800e4ba:	e7ec      	b.n	800e496 <oslib_test_002_001_execute.lto_priv.0+0x386>
  test_local_fail      = true;
 800e4bc:	2301      	movs	r3, #1
 800e4be:	4906      	ldr	r1, [pc, #24]	; (800e4d8 <oslib_test_002_001_execute.lto_priv.0+0x3c8>)
  test_global_fail     = true;
 800e4c0:	4a03      	ldr	r2, [pc, #12]	; (800e4d0 <oslib_test_002_001_execute.lto_priv.0+0x3c0>)
  test_failure_message = msg;
 800e4c2:	4804      	ldr	r0, [pc, #16]	; (800e4d4 <oslib_test_002_001_execute.lto_priv.0+0x3c4>)
 800e4c4:	4c08      	ldr	r4, [pc, #32]	; (800e4e8 <oslib_test_002_001_execute.lto_priv.0+0x3d8>)
 800e4c6:	e7ee      	b.n	800e4a6 <oslib_test_002_001_execute.lto_priv.0+0x396>
 800e4c8:	0800f22c 	.word	0x0800f22c
 800e4cc:	0800f214 	.word	0x0800f214
 800e4d0:	20001d38 	.word	0x20001d38
 800e4d4:	20001d34 	.word	0x20001d34
 800e4d8:	20001d39 	.word	0x20001d39
 800e4dc:	08011ed4 	.word	0x08011ed4
 800e4e0:	08012170 	.word	0x08012170
 800e4e4:	08011d58 	.word	0x08011d58
 800e4e8:	08011f3c 	.word	0x08011f3c
 800e4ec:	00000000 	.word	0x00000000

0800e4f0 <chMBPostI.constprop.0>:
msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 800e4f0:	b538      	push	{r3, r4, r5, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e4f2:	4b15      	ldr	r3, [pc, #84]	; (800e548 <chMBPostI.constprop.0+0x58>)
 800e4f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e4f6:	2a00      	cmp	r2, #0
 800e4f8:	db1d      	blt.n	800e536 <chMBPostI.constprop.0+0x46>
 800e4fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	dd1a      	ble.n	800e536 <chMBPostI.constprop.0+0x46>
  if (mbp->reset) {
 800e500:	4b12      	ldr	r3, [pc, #72]	; (800e54c <chMBPostI.constprop.0+0x5c>)
 800e502:	7d1a      	ldrb	r2, [r3, #20]
 800e504:	b9ea      	cbnz	r2, 800e542 <chMBPostI.constprop.0+0x52>
  return (size_t)(mbp->top - mbp->buffer);
 800e506:	e9d3 1200 	ldrd	r1, r2, [r3]
  if (chMBGetFreeCountI(mbp) > (size_t)0) {
 800e50a:	691c      	ldr	r4, [r3, #16]
 800e50c:	eba2 0c01 	sub.w	ip, r2, r1
 800e510:	ebb4 0fac 	cmp.w	r4, ip, asr #2
 800e514:	d012      	beq.n	800e53c <chMBPostI.constprop.0+0x4c>
    *mbp->wrptr++ = msg;
 800e516:	689d      	ldr	r5, [r3, #8]
 800e518:	1d2c      	adds	r4, r5, #4
 800e51a:	609c      	str	r4, [r3, #8]
 800e51c:	6028      	str	r0, [r5, #0]
    if (mbp->wrptr >= mbp->top) {
 800e51e:	4294      	cmp	r4, r2
    mbp->cnt++;
 800e520:	691a      	ldr	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800e522:	480b      	ldr	r0, [pc, #44]	; (800e550 <chMBPostI.constprop.0+0x60>)
    mbp->cnt++;
 800e524:	f102 0201 	add.w	r2, r2, #1
      mbp->wrptr = mbp->buffer;
 800e528:	bf28      	it	cs
 800e52a:	6099      	strcs	r1, [r3, #8]
    mbp->cnt++;
 800e52c:	611a      	str	r2, [r3, #16]
    chThdDequeueNextI(&mbp->qr, MSG_OK);
 800e52e:	f7ff fcff 	bl	800df30 <chThdDequeueNextI.constprop.0>
    return MSG_OK;
 800e532:	2000      	movs	r0, #0
}
 800e534:	bd38      	pop	{r3, r4, r5, pc}
    chSysHalt("SV#10");
 800e536:	4807      	ldr	r0, [pc, #28]	; (800e554 <chMBPostI.constprop.0+0x64>)
 800e538:	f7f2 f91a 	bl	8000770 <chSysHalt>
  return MSG_TIMEOUT;
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800e540:	bd38      	pop	{r3, r4, r5, pc}
    return MSG_RESET;
 800e542:	f06f 0001 	mvn.w	r0, #1
}
 800e546:	bd38      	pop	{r3, r4, r5, pc}
 800e548:	20000d70 	.word	0x20000d70
 800e54c:	20000c58 	.word	0x20000c58
 800e550:	20000c78 	.word	0x20000c78
 800e554:	0800f22c 	.word	0x0800f22c
	...

0800e560 <oslib_test_002_002_execute.lto_priv.0>:
static void oslib_test_002_002_execute(void) {
 800e560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  test_set_step(1);
 800e564:	2501      	movs	r5, #1
 800e566:	4ec6      	ldr	r6, [pc, #792]	; (800e880 <oslib_test_002_002_execute.lto_priv.0+0x320>)
 800e568:	2320      	movs	r3, #32
static void oslib_test_002_002_execute(void) {
 800e56a:	b082      	sub	sp, #8
  test_set_step(1);
 800e56c:	6035      	str	r5, [r6, #0]
 800e56e:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e572:	4cc4      	ldr	r4, [pc, #784]	; (800e884 <oslib_test_002_002_execute.lto_priv.0+0x324>)
  _dbg_check_lock();
 800e574:	f7f2 f954 	bl	8000820 <_dbg_check_lock>
 800e578:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	f2c0 8179 	blt.w	800e872 <oslib_test_002_002_execute.lto_priv.0+0x312>
 800e580:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e582:	2a00      	cmp	r2, #0
 800e584:	f340 8175 	ble.w	800e872 <oslib_test_002_002_execute.lto_priv.0+0x312>
 800e588:	4fbf      	ldr	r7, [pc, #764]	; (800e888 <oslib_test_002_002_execute.lto_priv.0+0x328>)
 800e58a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e58e:	1a51      	subs	r1, r2, r1
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800e590:	693a      	ldr	r2, [r7, #16]
 800e592:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
  if (!condition)
 800e596:	2a04      	cmp	r2, #4
 800e598:	f040 8194 	bne.w	800e8c4 <oslib_test_002_002_execute.lto_priv.0+0x364>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	f040 816b 	bne.w	800e878 <oslib_test_002_002_execute.lto_priv.0+0x318>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e5a2:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 800e5a4:	6363      	str	r3, [r4, #52]	; 0x34
 800e5a6:	42a2      	cmp	r2, r4
 800e5a8:	d005      	beq.n	800e5b6 <oslib_test_002_002_execute.lto_priv.0+0x56>
 800e5aa:	69a1      	ldr	r1, [r4, #24]
 800e5ac:	6893      	ldr	r3, [r2, #8]
 800e5ae:	688a      	ldr	r2, [r1, #8]
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	f0c0 8198 	bcc.w	800e8e6 <oslib_test_002_002_execute.lto_priv.0+0x386>
 800e5b6:	2500      	movs	r5, #0
 800e5b8:	f385 8811 	msr	BASEPRI, r5
  test_set_step(2);
 800e5bc:	2202      	movs	r2, #2
 800e5be:	2320      	movs	r3, #32
 800e5c0:	6032      	str	r2, [r6, #0]
 800e5c2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800e5c6:	f7f2 f92b 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e5ca:	f7f2 f9b9 	bl	8000940 <chDbgCheckClassI>
  mbp->reset = true;
 800e5ce:	2201      	movs	r2, #1
  mbp->wrptr = mbp->buffer;
 800e5d0:	683b      	ldr	r3, [r7, #0]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800e5d2:	48ae      	ldr	r0, [pc, #696]	; (800e88c <oslib_test_002_002_execute.lto_priv.0+0x32c>)
  mbp->rdptr = mbp->buffer;
 800e5d4:	e9c7 3302 	strd	r3, r3, [r7, #8]
  mbp->reset = true;
 800e5d8:	753a      	strb	r2, [r7, #20]
  mbp->cnt   = (size_t)0;
 800e5da:	613d      	str	r5, [r7, #16]
  chThdDequeueAllI(&mbp->qw, MSG_RESET);
 800e5dc:	f7fa fe88 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  chThdDequeueAllI(&mbp->qr, MSG_RESET);
 800e5e0:	48ab      	ldr	r0, [pc, #684]	; (800e890 <oslib_test_002_002_execute.lto_priv.0+0x330>)
 800e5e2:	f7fa fe85 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e5e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	f040 8145 	bne.w	800e878 <oslib_test_002_002_execute.lto_priv.0+0x318>
 800e5ee:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e5f0:	42aa      	cmp	r2, r5
 800e5f2:	f340 8141 	ble.w	800e878 <oslib_test_002_002_execute.lto_priv.0+0x318>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e5f6:	6822      	ldr	r2, [r4, #0]
  _dbg_leave_lock();
 800e5f8:	6363      	str	r3, [r4, #52]	; 0x34
 800e5fa:	42a2      	cmp	r2, r4
 800e5fc:	d005      	beq.n	800e60a <oslib_test_002_002_execute.lto_priv.0+0xaa>
 800e5fe:	69a1      	ldr	r1, [r4, #24]
 800e600:	6893      	ldr	r3, [r2, #8]
 800e602:	688a      	ldr	r2, [r1, #8]
 800e604:	429a      	cmp	r2, r3
 800e606:	f0c0 816e 	bcc.w	800e8e6 <oslib_test_002_002_execute.lto_priv.0+0x386>
 800e60a:	2300      	movs	r3, #0
 800e60c:	f383 8811 	msr	BASEPRI, r3
 800e610:	f04f 0820 	mov.w	r8, #32
 800e614:	f388 8811 	msr	BASEPRI, r8
  _dbg_check_lock();
 800e618:	f7f2 f902 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e61c:	f7f2 f990 	bl	8000940 <chDbgCheckClassI>
  chDbgCheckClassI();
 800e620:	f7f2 f98e 	bl	8000940 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800e624:	e9d7 4300 	ldrd	r4, r3, [r7]
 800e628:	1b1b      	subs	r3, r3, r4
  return chMBGetSizeI(mbp) - chMBGetUsedCountI(mbp);
 800e62a:	693c      	ldr	r4, [r7, #16]
 800e62c:	ebc4 04a3 	rsb	r4, r4, r3, asr #2
 800e630:	2c04      	cmp	r4, #4
 800e632:	f040 8161 	bne.w	800e8f8 <oslib_test_002_002_execute.lto_priv.0+0x398>
 800e636:	f7fa f8bb 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e63a:	f388 8811 	msr	BASEPRI, r8
 800e63e:	f7f2 f8ef 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e642:	f7f2 f97d 	bl	8000940 <chDbgCheckClassI>
 800e646:	693b      	ldr	r3, [r7, #16]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	f040 8165 	bne.w	800e918 <oslib_test_002_002_execute.lto_priv.0+0x3b8>
 800e64e:	f7fa f8af 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e652:	f388 8811 	msr	BASEPRI, r8
 800e656:	f7f2 f8e3 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800e65a:	6838      	ldr	r0, [r7, #0]
 800e65c:	68bb      	ldr	r3, [r7, #8]
 800e65e:	498d      	ldr	r1, [pc, #564]	; (800e894 <oslib_test_002_002_execute.lto_priv.0+0x334>)
 800e660:	1ac0      	subs	r0, r0, r3
 800e662:	fab0 f080 	clz	r0, r0
 800e666:	0940      	lsrs	r0, r0, #5
 800e668:	f7f7 f92a 	bl	80058c0 <_test_assert>
 800e66c:	2800      	cmp	r0, #0
 800e66e:	f040 8150 	bne.w	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e672:	f7fa f89d 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e676:	f388 8811 	msr	BASEPRI, r8
 800e67a:	f7f2 f8d1 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800e67e:	6838      	ldr	r0, [r7, #0]
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	4985      	ldr	r1, [pc, #532]	; (800e898 <oslib_test_002_002_execute.lto_priv.0+0x338>)
 800e684:	1ac0      	subs	r0, r0, r3
 800e686:	fab0 f080 	clz	r0, r0
 800e68a:	0940      	lsrs	r0, r0, #5
 800e68c:	f7f7 f918 	bl	80058c0 <_test_assert>
 800e690:	4605      	mov	r5, r0
 800e692:	2800      	cmp	r0, #0
 800e694:	f040 813d 	bne.w	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e698:	f7fa f88a 	bl	80087b0 <chSysUnlock.lto_priv.29>
  test_set_step(3);
 800e69c:	2303      	movs	r3, #3
  mbp->reset = false;
 800e69e:	753d      	strb	r5, [r7, #20]
 800e6a0:	2542      	movs	r5, #66	; 0x42
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e6a2:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 800e89c <oslib_test_002_002_execute.lto_priv.0+0x33c>
  test_set_step(3);
 800e6a6:	6033      	str	r3, [r6, #0]
 800e6a8:	f388 8811 	msr	BASEPRI, r8
 800e6ac:	f7f2 f8b8 	bl	8000820 <_dbg_check_lock>
      msg1 = chMBPostI(&mb1, 'B' + i);
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f7ff ff1d 	bl	800e4f0 <chMBPostI.constprop.0>
 800e6b6:	4681      	mov	r9, r0
      chSysUnlock();
 800e6b8:	f7fa f87a 	bl	80087b0 <chSysUnlock.lto_priv.29>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e6bc:	fab9 f089 	clz	r0, r9
 800e6c0:	4651      	mov	r1, sl
 800e6c2:	0940      	lsrs	r0, r0, #5
 800e6c4:	f7f7 f8fc 	bl	80058c0 <_test_assert>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	f040 8112 	bne.w	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
    for (i = 0; i < MB_SIZE - 1; i++) {
 800e6ce:	3501      	adds	r5, #1
 800e6d0:	2d45      	cmp	r5, #69	; 0x45
 800e6d2:	d1e9      	bne.n	800e6a8 <oslib_test_002_002_execute.lto_priv.0+0x148>
 800e6d4:	f388 8811 	msr	BASEPRI, r8
 800e6d8:	f7f2 f8a2 	bl	8000820 <_dbg_check_lock>
    msg1 = chMBPostAheadI(&mb1, 'A');
 800e6dc:	2041      	movs	r0, #65	; 0x41
 800e6de:	f7ff fc6f 	bl	800dfc0 <chMBPostAheadI.constprop.0>
 800e6e2:	4605      	mov	r5, r0
    chSysUnlock();
 800e6e4:	f7fa f864 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e6e8:	fab5 f085 	clz	r0, r5
 800e6ec:	496b      	ldr	r1, [pc, #428]	; (800e89c <oslib_test_002_002_execute.lto_priv.0+0x33c>)
 800e6ee:	0940      	lsrs	r0, r0, #5
 800e6f0:	f7f7 f8e6 	bl	80058c0 <_test_assert>
 800e6f4:	2800      	cmp	r0, #0
 800e6f6:	f040 80fc 	bne.w	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
  test_set_step(4);
 800e6fa:	2304      	movs	r3, #4
 800e6fc:	6033      	str	r3, [r6, #0]
 800e6fe:	f388 8811 	msr	BASEPRI, r8
 800e702:	f7f2 f88d 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e706:	f7f2 f91b 	bl	8000940 <chDbgCheckClassI>
  chDbgCheckClassI();
 800e70a:	f7f2 f919 	bl	8000940 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800e70e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e712:	1a9b      	subs	r3, r3, r2
    test_assert_lock(chMBGetFreeCountI(&mb1) == 0, "still empty");
 800e714:	693a      	ldr	r2, [r7, #16]
 800e716:	4962      	ldr	r1, [pc, #392]	; (800e8a0 <oslib_test_002_002_execute.lto_priv.0+0x340>)
 800e718:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 800e71c:	bf0c      	ite	eq
 800e71e:	2001      	moveq	r0, #1
 800e720:	2000      	movne	r0, #0
 800e722:	f7f7 f8cd 	bl	80058c0 <_test_assert>
 800e726:	2800      	cmp	r0, #0
 800e728:	f040 80f3 	bne.w	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e72c:	f7fa f840 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e730:	f388 8811 	msr	BASEPRI, r8
 800e734:	f7f2 f874 	bl	8000820 <_dbg_check_lock>
  chDbgCheckClassI();
 800e738:	f7f2 f902 	bl	8000940 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == MB_SIZE, "not full");
 800e73c:	6938      	ldr	r0, [r7, #16]
 800e73e:	4959      	ldr	r1, [pc, #356]	; (800e8a4 <oslib_test_002_002_execute.lto_priv.0+0x344>)
 800e740:	f1a0 0c04 	sub.w	ip, r0, #4
 800e744:	f1dc 0000 	rsbs	r0, ip, #0
 800e748:	eb40 000c 	adc.w	r0, r0, ip
 800e74c:	f7f7 f8b8 	bl	80058c0 <_test_assert>
 800e750:	2800      	cmp	r0, #0
 800e752:	f040 80de 	bne.w	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e756:	f7fa f82b 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e75a:	f388 8811 	msr	BASEPRI, r8
 800e75e:	f7f2 f85f 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(mb1.rdptr == mb1.wrptr, "pointers not aligned");
 800e762:	e9d7 3002 	ldrd	r3, r0, [r7, #8]
 800e766:	1ac5      	subs	r5, r0, r3
 800e768:	4268      	negs	r0, r5
 800e76a:	4168      	adcs	r0, r5
 800e76c:	494e      	ldr	r1, [pc, #312]	; (800e8a8 <oslib_test_002_002_execute.lto_priv.0+0x348>)
 800e76e:	f7f7 f8a7 	bl	80058c0 <_test_assert>
 800e772:	2800      	cmp	r0, #0
 800e774:	f040 80cd 	bne.w	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e778:	f7fa f81a 	bl	80087b0 <chSysUnlock.lto_priv.29>
  test_set_step(5);
 800e77c:	2305      	movs	r3, #5
 800e77e:	2520      	movs	r5, #32
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e780:	f8df 9118 	ldr.w	r9, [pc, #280]	; 800e89c <oslib_test_002_002_execute.lto_priv.0+0x33c>
  test_set_step(5);
 800e784:	6033      	str	r3, [r6, #0]
 800e786:	f385 8811 	msr	BASEPRI, r5
 800e78a:	f7f2 f849 	bl	8000820 <_dbg_check_lock>
      msg1 = chMBFetchI(&mb1, &msg2);
 800e78e:	a801      	add	r0, sp, #4
 800e790:	f7ff fbe6 	bl	800df60 <chMBFetchI.constprop.0>
 800e794:	4680      	mov	r8, r0
      chSysUnlock();
 800e796:	f7fa f80b 	bl	80087b0 <chSysUnlock.lto_priv.29>
      test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e79a:	fab8 f088 	clz	r0, r8
 800e79e:	4649      	mov	r1, r9
 800e7a0:	0940      	lsrs	r0, r0, #5
 800e7a2:	f7f7 f88d 	bl	80058c0 <_test_assert>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	f040 80a3 	bne.w	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
      test_emit_token(msg2);
 800e7ac:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800e7b0:	f7f7 ff06 	bl	80065c0 <test_emit_token>
    for (i = 0; i < MB_SIZE; i++) {
 800e7b4:	3c01      	subs	r4, #1
 800e7b6:	d1e6      	bne.n	800e786 <oslib_test_002_002_execute.lto_priv.0+0x226>
    test_assert_sequence("ABCD", "wrong get sequence");
 800e7b8:	493c      	ldr	r1, [pc, #240]	; (800e8ac <oslib_test_002_002_execute.lto_priv.0+0x34c>)
 800e7ba:	483d      	ldr	r0, [pc, #244]	; (800e8b0 <oslib_test_002_002_execute.lto_priv.0+0x350>)
 800e7bc:	f7f7 fe70 	bl	80064a0 <_test_assert_sequence>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	f040 8096 	bne.w	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
  test_set_step(6);
 800e7c6:	2306      	movs	r3, #6
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e7c8:	2146      	movs	r1, #70	; 0x46
 800e7ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7ce:	482e      	ldr	r0, [pc, #184]	; (800e888 <oslib_test_002_002_execute.lto_priv.0+0x328>)
  test_set_step(6);
 800e7d0:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e7d2:	f7f5 fc4d 	bl	8004070 <chMBPostTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e7d6:	fab0 f080 	clz	r0, r0
 800e7da:	4930      	ldr	r1, [pc, #192]	; (800e89c <oslib_test_002_002_execute.lto_priv.0+0x33c>)
 800e7dc:	0940      	lsrs	r0, r0, #5
 800e7de:	f7f7 f86f 	bl	80058c0 <_test_assert>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	f040 8085 	bne.w	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
    msg1 = chMBFetchTimeout(&mb1, &msg2, TIME_INFINITE);
 800e7e8:	a901      	add	r1, sp, #4
 800e7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e7ee:	4826      	ldr	r0, [pc, #152]	; (800e888 <oslib_test_002_002_execute.lto_priv.0+0x328>)
 800e7f0:	f7f5 fcae 	bl	8004150 <chMBFetchTimeout>
    test_assert(msg1 == MSG_OK, "wrong wake-up message");
 800e7f4:	fab0 f080 	clz	r0, r0
 800e7f8:	4928      	ldr	r1, [pc, #160]	; (800e89c <oslib_test_002_002_execute.lto_priv.0+0x33c>)
 800e7fa:	0940      	lsrs	r0, r0, #5
 800e7fc:	f7f7 f860 	bl	80058c0 <_test_assert>
 800e800:	2800      	cmp	r0, #0
 800e802:	d176      	bne.n	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
  test_set_step(7);
 800e804:	2307      	movs	r3, #7
 800e806:	6033      	str	r3, [r6, #0]
 800e808:	f385 8811 	msr	BASEPRI, r5
 800e80c:	f7f2 f808 	bl	8000820 <_dbg_check_lock>
    test_assert_lock(chMBGetFreeCountI(&mb1) == MB_SIZE, "not empty");
 800e810:	481d      	ldr	r0, [pc, #116]	; (800e888 <oslib_test_002_002_execute.lto_priv.0+0x328>)
 800e812:	f7f5 fc15 	bl	8004040 <chMBGetFreeCountI.lto_priv.0.lto_priv.0>
 800e816:	1f04      	subs	r4, r0, #4
 800e818:	4260      	negs	r0, r4
 800e81a:	4160      	adcs	r0, r4
 800e81c:	4925      	ldr	r1, [pc, #148]	; (800e8b4 <oslib_test_002_002_execute.lto_priv.0+0x354>)
 800e81e:	f7f7 f84f 	bl	80058c0 <_test_assert>
 800e822:	2800      	cmp	r0, #0
 800e824:	d175      	bne.n	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e826:	f7f9 ffc3 	bl	80087b0 <chSysUnlock.lto_priv.29>
 800e82a:	f385 8811 	msr	BASEPRI, r5
 800e82e:	f7f1 fff7 	bl	8000820 <_dbg_check_lock>
 800e832:	f7f2 f885 	bl	8000940 <chDbgCheckClassI>
    test_assert_lock(chMBGetUsedCountI(&mb1) == 0, "still full");
 800e836:	6938      	ldr	r0, [r7, #16]
 800e838:	491f      	ldr	r1, [pc, #124]	; (800e8b8 <oslib_test_002_002_execute.lto_priv.0+0x358>)
 800e83a:	fab0 f080 	clz	r0, r0
 800e83e:	0940      	lsrs	r0, r0, #5
 800e840:	f7f7 f83e 	bl	80058c0 <_test_assert>
 800e844:	2800      	cmp	r0, #0
 800e846:	d164      	bne.n	800e912 <oslib_test_002_002_execute.lto_priv.0+0x3b2>
 800e848:	f7f9 ffb2 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800e84c:	6838      	ldr	r0, [r7, #0]
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	4910      	ldr	r1, [pc, #64]	; (800e894 <oslib_test_002_002_execute.lto_priv.0+0x334>)
 800e852:	1ac2      	subs	r2, r0, r3
 800e854:	4250      	negs	r0, r2
 800e856:	4150      	adcs	r0, r2
 800e858:	f7f7 f832 	bl	80058c0 <_test_assert>
 800e85c:	2800      	cmp	r0, #0
 800e85e:	d148      	bne.n	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
    test_assert(mb1.buffer == mb1.rdptr, "read pointer not aligned to base");
 800e860:	6838      	ldr	r0, [r7, #0]
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	490c      	ldr	r1, [pc, #48]	; (800e898 <oslib_test_002_002_execute.lto_priv.0+0x338>)
 800e866:	1ac3      	subs	r3, r0, r3
 800e868:	4258      	negs	r0, r3
 800e86a:	4158      	adcs	r0, r3
 800e86c:	f7f7 f828 	bl	80058c0 <_test_assert>
 800e870:	e03f      	b.n	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
    chSysHalt("SV#10");
 800e872:	4812      	ldr	r0, [pc, #72]	; (800e8bc <oslib_test_002_002_execute.lto_priv.0+0x35c>)
 800e874:	f7f1 ff7c 	bl	8000770 <chSysHalt>
    chSysHalt("SV#5");
 800e878:	4811      	ldr	r0, [pc, #68]	; (800e8c0 <oslib_test_002_002_execute.lto_priv.0+0x360>)
 800e87a:	f7f1 ff79 	bl	8000770 <chSysHalt>
 800e87e:	bf00      	nop
 800e880:	20001d3c 	.word	0x20001d3c
 800e884:	20000d70 	.word	0x20000d70
 800e888:	20000c58 	.word	0x20000c58
 800e88c:	20000c70 	.word	0x20000c70
 800e890:	20000c78 	.word	0x20000c78
 800e894:	08011f48 	.word	0x08011f48
 800e898:	08011f6c 	.word	0x08011f6c
 800e89c:	0801007c 	.word	0x0801007c
 800e8a0:	08011fa4 	.word	0x08011fa4
 800e8a4:	08011fb0 	.word	0x08011fb0
 800e8a8:	08011fbc 	.word	0x08011fbc
 800e8ac:	08011fd4 	.word	0x08011fd4
 800e8b0:	0800ff8c 	.word	0x0800ff8c
 800e8b4:	08011d58 	.word	0x08011d58
 800e8b8:	08011f3c 	.word	0x08011f3c
 800e8bc:	0800f22c 	.word	0x0800f22c
 800e8c0:	0800f214 	.word	0x0800f214
  test_global_fail     = true;
 800e8c4:	4a17      	ldr	r2, [pc, #92]	; (800e924 <oslib_test_002_002_execute.lto_priv.0+0x3c4>)
  test_failure_message = msg;
 800e8c6:	4b18      	ldr	r3, [pc, #96]	; (800e928 <oslib_test_002_002_execute.lto_priv.0+0x3c8>)
  test_local_fail      = true;
 800e8c8:	4918      	ldr	r1, [pc, #96]	; (800e92c <oslib_test_002_002_execute.lto_priv.0+0x3cc>)
  test_global_fail     = true;
 800e8ca:	7015      	strb	r5, [r2, #0]
  test_failure_message = msg;
 800e8cc:	4a18      	ldr	r2, [pc, #96]	; (800e930 <oslib_test_002_002_execute.lto_priv.0+0x3d0>)
  test_local_fail      = true;
 800e8ce:	700d      	strb	r5, [r1, #0]
  test_failure_message = msg;
 800e8d0:	601a      	str	r2, [r3, #0]
  _dbg_check_unlock();
 800e8d2:	f7f1 ffb5 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e8d6:	6823      	ldr	r3, [r4, #0]
 800e8d8:	42a3      	cmp	r3, r4
 800e8da:	d007      	beq.n	800e8ec <oslib_test_002_002_execute.lto_priv.0+0x38c>
 800e8dc:	69a2      	ldr	r2, [r4, #24]
 800e8de:	689b      	ldr	r3, [r3, #8]
 800e8e0:	6892      	ldr	r2, [r2, #8]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d202      	bcs.n	800e8ec <oslib_test_002_002_execute.lto_priv.0+0x38c>
 800e8e6:	4813      	ldr	r0, [pc, #76]	; (800e934 <oslib_test_002_002_execute.lto_priv.0+0x3d4>)
 800e8e8:	f7f1 ff42 	bl	8000770 <chSysHalt>
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f383 8811 	msr	BASEPRI, r3
}
 800e8f2:	b002      	add	sp, #8
 800e8f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  test_local_fail      = true;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	490c      	ldr	r1, [pc, #48]	; (800e92c <oslib_test_002_002_execute.lto_priv.0+0x3cc>)
  test_global_fail     = true;
 800e8fc:	4a09      	ldr	r2, [pc, #36]	; (800e924 <oslib_test_002_002_execute.lto_priv.0+0x3c4>)
  test_failure_message = msg;
 800e8fe:	480a      	ldr	r0, [pc, #40]	; (800e928 <oslib_test_002_002_execute.lto_priv.0+0x3c8>)
 800e900:	4c0d      	ldr	r4, [pc, #52]	; (800e938 <oslib_test_002_002_execute.lto_priv.0+0x3d8>)
 800e902:	6004      	str	r4, [r0, #0]
  test_local_fail      = true;
 800e904:	700b      	strb	r3, [r1, #0]
  test_global_fail     = true;
 800e906:	7013      	strb	r3, [r2, #0]
 800e908:	b002      	add	sp, #8
 800e90a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e90e:	f7f9 bf4f 	b.w	80087b0 <chSysUnlock.lto_priv.29>
 800e912:	f7f9 ff4d 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert_lock(mb1.buffer == mb1.wrptr, "write pointer not aligned to base");
 800e916:	e7ec      	b.n	800e8f2 <oslib_test_002_002_execute.lto_priv.0+0x392>
  test_local_fail      = true;
 800e918:	2301      	movs	r3, #1
 800e91a:	4904      	ldr	r1, [pc, #16]	; (800e92c <oslib_test_002_002_execute.lto_priv.0+0x3cc>)
  test_global_fail     = true;
 800e91c:	4a01      	ldr	r2, [pc, #4]	; (800e924 <oslib_test_002_002_execute.lto_priv.0+0x3c4>)
  test_failure_message = msg;
 800e91e:	4802      	ldr	r0, [pc, #8]	; (800e928 <oslib_test_002_002_execute.lto_priv.0+0x3c8>)
 800e920:	4c06      	ldr	r4, [pc, #24]	; (800e93c <oslib_test_002_002_execute.lto_priv.0+0x3dc>)
 800e922:	e7ee      	b.n	800e902 <oslib_test_002_002_execute.lto_priv.0+0x3a2>
 800e924:	20001d38 	.word	0x20001d38
 800e928:	20001d34 	.word	0x20001d34
 800e92c:	20001d39 	.word	0x20001d39
 800e930:	08011ed4 	.word	0x08011ed4
 800e934:	08012170 	.word	0x08012170
 800e938:	08011d58 	.word	0x08011d58
 800e93c:	08011f3c 	.word	0x08011f3c

0800e940 <oslib_test_002_003_execute.lto_priv.0>:
static void oslib_test_002_003_execute(void) {
  msg_t msg1, msg2;
  unsigned i;

  /* [2.3.1] Filling the mailbox.*/
  test_set_step(1);
 800e940:	2301      	movs	r3, #1
static void oslib_test_002_003_execute(void) {
 800e942:	b5f0      	push	{r4, r5, r6, r7, lr}
  test_set_step(1);
 800e944:	2442      	movs	r4, #66	; 0x42
 800e946:	4e48      	ldr	r6, [pc, #288]	; (800ea68 <oslib_test_002_003_execute.lto_priv.0+0x128>)
 800e948:	4d48      	ldr	r5, [pc, #288]	; (800ea6c <oslib_test_002_003_execute.lto_priv.0+0x12c>)
static void oslib_test_002_003_execute(void) {
 800e94a:	b083      	sub	sp, #12
  test_set_step(1);
 800e94c:	6033      	str	r3, [r6, #0]
  {
    for (i = 0; i < MB_SIZE; i++) {
      msg1 = chMBPostTimeout(&mb1, 'B' + i, TIME_INFINITE);
 800e94e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e952:	4621      	mov	r1, r4
 800e954:	4628      	mov	r0, r5
 800e956:	f7f5 fb8b 	bl	8004070 <chMBPostTimeout>
  if (!condition)
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d174      	bne.n	800ea48 <oslib_test_002_003_execute.lto_priv.0+0x108>
    for (i = 0; i < MB_SIZE; i++) {
 800e95e:	3401      	adds	r4, #1
 800e960:	2c46      	cmp	r4, #70	; 0x46
 800e962:	d1f4      	bne.n	800e94e <oslib_test_002_003_execute.lto_priv.0+0xe>
  }
  test_end_step(1);

  /* [2.3.2] Testing chMBPostTimeout(), chMBPostI(),
     chMBPostAheadTimeout() and chMBPostAheadI() timeout.*/
  test_set_step(2);
 800e964:	2302      	movs	r3, #2
  {
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800e966:	2201      	movs	r2, #1
 800e968:	2158      	movs	r1, #88	; 0x58
 800e96a:	4840      	ldr	r0, [pc, #256]	; (800ea6c <oslib_test_002_003_execute.lto_priv.0+0x12c>)
  test_set_step(2);
 800e96c:	6033      	str	r3, [r6, #0]
    msg1 = chMBPostTimeout(&mb1, 'X', 1);
 800e96e:	f7f5 fb7f 	bl	8004070 <chMBPostTimeout>
 800e972:	3001      	adds	r0, #1
 800e974:	d168      	bne.n	800ea48 <oslib_test_002_003_execute.lto_priv.0+0x108>
 800e976:	2320      	movs	r3, #32
 800e978:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800e97c:	f7f1 ff50 	bl	8000820 <_dbg_check_lock>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
    chSysLock();
    msg1 = chMBPostI(&mb1, 'X');
 800e980:	2058      	movs	r0, #88	; 0x58
 800e982:	f7ff fdb5 	bl	800e4f0 <chMBPostI.constprop.0>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800e986:	4b3a      	ldr	r3, [pc, #232]	; (800ea70 <oslib_test_002_003_execute.lto_priv.0+0x130>)
 800e988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e98a:	2a00      	cmp	r2, #0
 800e98c:	d166      	bne.n	800ea5c <oslib_test_002_003_execute.lto_priv.0+0x11c>
 800e98e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e990:	2900      	cmp	r1, #0
 800e992:	dd63      	ble.n	800ea5c <oslib_test_002_003_execute.lto_priv.0+0x11c>
  _dbg_leave_lock();
 800e994:	635a      	str	r2, [r3, #52]	; 0x34
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d004      	beq.n	800e9a6 <oslib_test_002_003_execute.lto_priv.0+0x66>
 800e99c:	6999      	ldr	r1, [r3, #24]
 800e99e:	6893      	ldr	r3, [r2, #8]
 800e9a0:	688a      	ldr	r2, [r1, #8]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d35d      	bcc.n	800ea62 <oslib_test_002_003_execute.lto_priv.0+0x122>
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	f383 8811 	msr	BASEPRI, r3
 800e9ac:	3001      	adds	r0, #1
 800e9ae:	d14b      	bne.n	800ea48 <oslib_test_002_003_execute.lto_priv.0+0x108>
    chSysUnlock();
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
    msg1 = chMBPostAheadTimeout(&mb1, 'X', 1);
 800e9b0:	2101      	movs	r1, #1
 800e9b2:	2058      	movs	r0, #88	; 0x58
 800e9b4:	f7ff fb3c 	bl	800e030 <chMBPostAheadTimeout.constprop.0>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800e9b8:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800e9bc:	fab0 f080 	clz	r0, r0
 800e9c0:	492c      	ldr	r1, [pc, #176]	; (800ea74 <oslib_test_002_003_execute.lto_priv.0+0x134>)
 800e9c2:	0940      	lsrs	r0, r0, #5
 800e9c4:	f7f6 ff7c 	bl	80058c0 <_test_assert>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d145      	bne.n	800ea58 <oslib_test_002_003_execute.lto_priv.0+0x118>
 800e9cc:	2720      	movs	r7, #32
 800e9ce:	f387 8811 	msr	BASEPRI, r7
  _dbg_check_lock();
 800e9d2:	f7f1 ff25 	bl	8000820 <_dbg_check_lock>
    chSysLock();
    msg1 = chMBPostAheadI(&mb1, 'X');
 800e9d6:	2058      	movs	r0, #88	; 0x58
 800e9d8:	f7ff faf2 	bl	800dfc0 <chMBPostAheadI.constprop.0>
 800e9dc:	4604      	mov	r4, r0
    chSysUnlock();
 800e9de:	f7f9 fee7 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800e9e2:	f1a4 30ff 	sub.w	r0, r4, #4294967295	; 0xffffffff
 800e9e6:	fab0 f080 	clz	r0, r0
 800e9ea:	4922      	ldr	r1, [pc, #136]	; (800ea74 <oslib_test_002_003_execute.lto_priv.0+0x134>)
 800e9ec:	0940      	lsrs	r0, r0, #5
 800e9ee:	f7f6 ff67 	bl	80058c0 <_test_assert>
 800e9f2:	4604      	mov	r4, r0
 800e9f4:	bb80      	cbnz	r0, 800ea58 <oslib_test_002_003_execute.lto_priv.0+0x118>
  }
  test_end_step(2);

  /* [2.3.3] Resetting the mailbox. The mailbox is then returned in
     active state.*/
  test_set_step(3);
 800e9f6:	2303      	movs	r3, #3
 800e9f8:	6033      	str	r3, [r6, #0]
  {
    chMBReset(&mb1);
 800e9fa:	f7fb f9e1 	bl	8009dc0 <chMBReset.constprop.0>
    chMBResumeX(&mb1);
  }
  test_end_step(3);

  /* [2.3.4] Testing chMBFetchTimeout() and chMBFetchI() timeout.*/
  test_set_step(4);
 800e9fe:	2304      	movs	r3, #4
  {
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800ea00:	2201      	movs	r2, #1
 800ea02:	eb0d 0103 	add.w	r1, sp, r3
 800ea06:	4819      	ldr	r0, [pc, #100]	; (800ea6c <oslib_test_002_003_execute.lto_priv.0+0x12c>)
  mbp->reset = false;
 800ea08:	752c      	strb	r4, [r5, #20]
  test_set_step(4);
 800ea0a:	6033      	str	r3, [r6, #0]
    msg1 = chMBFetchTimeout(&mb1, &msg2, 1);
 800ea0c:	f7f5 fba0 	bl	8004150 <chMBFetchTimeout>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800ea10:	f1a0 30ff 	sub.w	r0, r0, #4294967295	; 0xffffffff
 800ea14:	fab0 f080 	clz	r0, r0
 800ea18:	4916      	ldr	r1, [pc, #88]	; (800ea74 <oslib_test_002_003_execute.lto_priv.0+0x134>)
 800ea1a:	0940      	lsrs	r0, r0, #5
 800ea1c:	f7f6 ff50 	bl	80058c0 <_test_assert>
 800ea20:	b9d0      	cbnz	r0, 800ea58 <oslib_test_002_003_execute.lto_priv.0+0x118>
 800ea22:	f387 8811 	msr	BASEPRI, r7
 800ea26:	f7f1 fefb 	bl	8000820 <_dbg_check_lock>
    chSysLock();
    msg1 = chMBFetchI(&mb1, &msg2);
 800ea2a:	a801      	add	r0, sp, #4
 800ea2c:	f7ff fa98 	bl	800df60 <chMBFetchI.constprop.0>
 800ea30:	4604      	mov	r4, r0
    chSysUnlock();
 800ea32:	f7f9 febd 	bl	80087b0 <chSysUnlock.lto_priv.29>
    test_assert(msg1 == MSG_TIMEOUT, "wrong wake-up message");
 800ea36:	f1a4 30ff 	sub.w	r0, r4, #4294967295	; 0xffffffff
 800ea3a:	fab0 f080 	clz	r0, r0
 800ea3e:	490d      	ldr	r1, [pc, #52]	; (800ea74 <oslib_test_002_003_execute.lto_priv.0+0x134>)
 800ea40:	0940      	lsrs	r0, r0, #5
 800ea42:	f7f6 ff3d 	bl	80058c0 <_test_assert>
 800ea46:	e007      	b.n	800ea58 <oslib_test_002_003_execute.lto_priv.0+0x118>
  test_local_fail      = true;
 800ea48:	2301      	movs	r3, #1
 800ea4a:	490b      	ldr	r1, [pc, #44]	; (800ea78 <oslib_test_002_003_execute.lto_priv.0+0x138>)
  test_global_fail     = true;
 800ea4c:	4a0b      	ldr	r2, [pc, #44]	; (800ea7c <oslib_test_002_003_execute.lto_priv.0+0x13c>)
  test_failure_message = msg;
 800ea4e:	480c      	ldr	r0, [pc, #48]	; (800ea80 <oslib_test_002_003_execute.lto_priv.0+0x140>)
 800ea50:	4c08      	ldr	r4, [pc, #32]	; (800ea74 <oslib_test_002_003_execute.lto_priv.0+0x134>)
  test_local_fail      = true;
 800ea52:	700b      	strb	r3, [r1, #0]
  test_failure_message = msg;
 800ea54:	6004      	str	r4, [r0, #0]
  test_global_fail     = true;
 800ea56:	7013      	strb	r3, [r2, #0]
  }
  test_end_step(4);
}
 800ea58:	b003      	add	sp, #12
 800ea5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    chSysHalt("SV#5");
 800ea5c:	4809      	ldr	r0, [pc, #36]	; (800ea84 <oslib_test_002_003_execute.lto_priv.0+0x144>)
 800ea5e:	f7f1 fe87 	bl	8000770 <chSysHalt>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800ea62:	4809      	ldr	r0, [pc, #36]	; (800ea88 <oslib_test_002_003_execute.lto_priv.0+0x148>)
 800ea64:	f7f1 fe84 	bl	8000770 <chSysHalt>
 800ea68:	20001d3c 	.word	0x20001d3c
 800ea6c:	20000c58 	.word	0x20000c58
 800ea70:	20000d70 	.word	0x20000d70
 800ea74:	0801007c 	.word	0x0801007c
 800ea78:	20001d39 	.word	0x20001d39
 800ea7c:	20001d38 	.word	0x20001d38
 800ea80:	20001d34 	.word	0x20001d34
 800ea84:	0800f214 	.word	0x0800f214
 800ea88:	08012170 	.word	0x08012170
 800ea8c:	00000000 	.word	0x00000000

0800ea90 <chSemSignalWait.constprop.0.isra.0>:
 *                      semaphore has been signaled.
 * @retval MSG_RESET    if the semaphore has been reset using @p chSemReset().
 *
 * @api
 */
msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw) {
 800ea90:	b538      	push	{r3, r4, r5, lr}
 800ea92:	2320      	movs	r3, #32
 800ea94:	f383 8811 	msr	BASEPRI, r3
  msg_t msg;

  chDbgCheck((sps != NULL) && (spw != NULL));

  chSysLock();
  chDbgAssert(((sps->cnt >= (cnt_t)0) && ch_queue_isempty(&sps->queue)) ||
 800ea98:	4c1e      	ldr	r4, [pc, #120]	; (800eb14 <chSemSignalWait.constprop.0.isra.0+0x84>)
  _dbg_check_lock();
 800ea9a:	f7f1 fec1 	bl	8000820 <_dbg_check_lock>
 800ea9e:	68a3      	ldr	r3, [r4, #8]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	db05      	blt.n	800eab0 <chSemSignalWait.constprop.0.isra.0+0x20>
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	42a2      	cmp	r2, r4
 800eaa8:	d01f      	beq.n	800eaea <chSemSignalWait.constprop.0.isra.0+0x5a>
 800eaaa:	481b      	ldr	r0, [pc, #108]	; (800eb18 <chSemSignalWait.constprop.0.isra.0+0x88>)
 800eaac:	f7f1 fe60 	bl	8000770 <chSysHalt>
 800eab0:	6820      	ldr	r0, [r4, #0]
 800eab2:	42a0      	cmp	r0, r4
 800eab4:	d0f9      	beq.n	800eaaa <chSemSignalWait.constprop.0.isra.0+0x1a>
  qp->next       = p->next;
 800eab6:	6802      	ldr	r2, [r0, #0]
              ((sps->cnt < (cnt_t)0) && ch_queue_notempty(&sps->queue)),
              "inconsistent semaphore");
  chDbgAssert(((spw->cnt >= (cnt_t)0) && ch_queue_isempty(&spw->queue)) ||
              ((spw->cnt < (cnt_t)0) && ch_queue_notempty(&spw->queue)),
              "inconsistent semaphore");
  if (++sps->cnt <= (cnt_t)0) {
 800eab8:	3301      	adds	r3, #1
 800eaba:	60a3      	str	r3, [r4, #8]
  qp->next->prev = qp;
 800eabc:	6054      	str	r4, [r2, #4]
  qp->next       = p->next;
 800eabe:	6022      	str	r2, [r4, #0]
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 800eac0:	f7f3 fb26 	bl	8002110 <chSchReadyI>
 800eac4:	2200      	movs	r2, #0
  }
  if (--spw->cnt < (cnt_t)0) {
 800eac6:	68a3      	ldr	r3, [r4, #8]
    chSchReadyI((thread_t *)ch_queue_fifo_remove(&sps->queue))->u.rdymsg = MSG_OK;
 800eac8:	6242      	str	r2, [r0, #36]	; 0x24
  if (--spw->cnt < (cnt_t)0) {
 800eaca:	3b01      	subs	r3, #1
 800eacc:	4293      	cmp	r3, r2
 800eace:	60a3      	str	r3, [r4, #8]
 800ead0:	da0c      	bge.n	800eaec <chSemSignalWait.constprop.0.isra.0+0x5c>
    thread_t *ctp = currp;
 800ead2:	4d12      	ldr	r5, [pc, #72]	; (800eb1c <chSemSignalWait.constprop.0.isra.0+0x8c>)
  p->prev       = qp->prev;
 800ead4:	6862      	ldr	r2, [r4, #4]
 800ead6:	69ab      	ldr	r3, [r5, #24]
    sem_insert(ctp, &spw->queue);
    ctp->u.wtsemp = spw;
    chSchGoSleepS(CH_STATE_WTSEM);
 800ead8:	2005      	movs	r0, #5
 800eada:	e9c3 4200 	strd	r4, r2, [r3]
  p->prev->next = p;
 800eade:	6013      	str	r3, [r2, #0]
    ctp->u.wtsemp = spw;
 800eae0:	625c      	str	r4, [r3, #36]	; 0x24
  qp->prev      = p;
 800eae2:	6063      	str	r3, [r4, #4]
    chSchGoSleepS(CH_STATE_WTSEM);
 800eae4:	f7f3 fbfc 	bl	80022e0 <chSchGoSleepS>
 800eae8:	e003      	b.n	800eaf2 <chSemSignalWait.constprop.0.isra.0+0x62>
  if (--spw->cnt < (cnt_t)0) {
 800eaea:	6093      	str	r3, [r2, #8]
    msg = ctp->u.rdymsg;
  }
  else {
    chSchRescheduleS();
 800eaec:	f7f4 f8b0 	bl	8002c50 <chSchRescheduleS>
 800eaf0:	4d0a      	ldr	r5, [pc, #40]	; (800eb1c <chSemSignalWait.constprop.0.isra.0+0x8c>)
  _dbg_check_unlock();
 800eaf2:	f7f1 fea5 	bl	8000840 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.pqueue.next == &ch.rlist.pqueue) ||
 800eaf6:	682b      	ldr	r3, [r5, #0]
 800eaf8:	42ab      	cmp	r3, r5
 800eafa:	d004      	beq.n	800eb06 <chSemSignalWait.constprop.0.isra.0+0x76>
 800eafc:	69aa      	ldr	r2, [r5, #24]
 800eafe:	689b      	ldr	r3, [r3, #8]
 800eb00:	6892      	ldr	r2, [r2, #8]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d303      	bcc.n	800eb0e <chSemSignalWait.constprop.0.isra.0+0x7e>
 800eb06:	2300      	movs	r3, #0
 800eb08:	f383 8811 	msr	BASEPRI, r3
    msg = MSG_OK;
  }
  chSysUnlock();

  return msg;
}
 800eb0c:	bd38      	pop	{r3, r4, r5, pc}
 800eb0e:	4804      	ldr	r0, [pc, #16]	; (800eb20 <chSemSignalWait.constprop.0.isra.0+0x90>)
 800eb10:	f7f1 fe2e 	bl	8000770 <chSysHalt>
 800eb14:	200016a8 	.word	0x200016a8
 800eb18:	08012154 	.word	0x08012154
 800eb1c:	20000d70 	.word	0x20000d70
 800eb20:	08011028 	.word	0x08011028
	...

0800eb30 <test_execute.isra.0>:
 * @retval false        if no errors occurred.
 * @retval true         if one or more tests failed.
 *
 * @api
 */
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800eb30:	4603      	mov	r3, r0
 800eb32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb36:	460f      	mov	r7, r1
  int tseq, tcase;

  test_chp = stream;
 800eb38:	4ca7      	ldr	r4, [pc, #668]	; (800edd8 <test_execute.isra.0+0x2a8>)
  test_println("");
 800eb3a:	48a8      	ldr	r0, [pc, #672]	; (800eddc <test_execute.isra.0+0x2ac>)
msg_t test_execute(BaseSequentialStream *stream, const testsuite_t *tsp) {
 800eb3c:	b089      	sub	sp, #36	; 0x24
  test_chp = stream;
 800eb3e:	6023      	str	r3, [r4, #0]
  test_println("");
 800eb40:	f7f7 fd1e 	bl	8006580 <test_println>
  if (tsp->name != NULL) {
 800eb44:	683b      	ldr	r3, [r7, #0]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	f000 81ff 	beq.w	800ef4a <test_execute.isra.0+0x41a>
    test_print("*** ");
 800eb4c:	48a4      	ldr	r0, [pc, #656]	; (800ede0 <test_execute.isra.0+0x2b0>)
 800eb4e:	f7f7 fcff 	bl	8006550 <test_print>
    test_println(tsp->name);
 800eb52:	6838      	ldr	r0, [r7, #0]
 800eb54:	f7f7 fd14 	bl	8006580 <test_println>
  }
  else {
    test_println("*** Test Suite");
  }
  test_println("***");
 800eb58:	48a2      	ldr	r0, [pc, #648]	; (800ede4 <test_execute.isra.0+0x2b4>)
 800eb5a:	f7f7 fd11 	bl	8006580 <test_println>
  test_print("*** Compiled:     ");
 800eb5e:	48a2      	ldr	r0, [pc, #648]	; (800ede8 <test_execute.isra.0+0x2b8>)
 800eb60:	f7f7 fcf6 	bl	8006550 <test_print>
  test_println(__DATE__ " - " __TIME__);
 800eb64:	48a1      	ldr	r0, [pc, #644]	; (800edec <test_execute.isra.0+0x2bc>)
 800eb66:	f7f7 fd0b 	bl	8006580 <test_println>
#if defined(PLATFORM_NAME)
  test_print("*** Platform:     ");
 800eb6a:	48a1      	ldr	r0, [pc, #644]	; (800edf0 <test_execute.isra.0+0x2c0>)
 800eb6c:	f7f7 fcf0 	bl	8006550 <test_print>
  test_println(PLATFORM_NAME);
 800eb70:	48a0      	ldr	r0, [pc, #640]	; (800edf4 <test_execute.isra.0+0x2c4>)
 800eb72:	f7f7 fd05 	bl	8006580 <test_println>
#endif
#if defined(BOARD_NAME)
  test_print("*** Test Board:   ");
 800eb76:	48a0      	ldr	r0, [pc, #640]	; (800edf8 <test_execute.isra.0+0x2c8>)
 800eb78:	f7f7 fcea 	bl	8006550 <test_print>
  test_println(BOARD_NAME);
 800eb7c:	489f      	ldr	r0, [pc, #636]	; (800edfc <test_execute.isra.0+0x2cc>)
 800eb7e:	f7f7 fcff 	bl	8006580 <test_println>
  {
    extern uint8_t __text_base__,   __text_end__,
                   __rodata_base__, __rodata_end__,
                   __data_base__,   __data_end__,
                   __bss_base__,    __bss_end__;
    test_println("***");
 800eb82:	4898      	ldr	r0, [pc, #608]	; (800ede4 <test_execute.isra.0+0x2b4>)
 800eb84:	f7f7 fcfc 	bl	8006580 <test_println>
    test_print("*** Text size:    ");
 800eb88:	489d      	ldr	r0, [pc, #628]	; (800ee00 <test_execute.isra.0+0x2d0>)
 800eb8a:	f7f7 fce1 	bl	8006550 <test_print>
    test_printn((uint32_t)(&__text_end__ - &__text_base__));
 800eb8e:	4b9d      	ldr	r3, [pc, #628]	; (800ee04 <test_execute.isra.0+0x2d4>)
 800eb90:	489d      	ldr	r0, [pc, #628]	; (800ee08 <test_execute.isra.0+0x2d8>)
 800eb92:	1ac0      	subs	r0, r0, r3
 800eb94:	f7f7 ff84 	bl	8006aa0 <test_printn>
    test_println(" bytes");
 800eb98:	489c      	ldr	r0, [pc, #624]	; (800ee0c <test_execute.isra.0+0x2dc>)
 800eb9a:	f7f7 fcf1 	bl	8006580 <test_println>
    test_print("*** RO data size: ");
 800eb9e:	489c      	ldr	r0, [pc, #624]	; (800ee10 <test_execute.isra.0+0x2e0>)
 800eba0:	f7f7 fcd6 	bl	8006550 <test_print>
    test_printn((uint32_t)(&__rodata_end__ - &__rodata_base__));
 800eba4:	4b9b      	ldr	r3, [pc, #620]	; (800ee14 <test_execute.isra.0+0x2e4>)
 800eba6:	489c      	ldr	r0, [pc, #624]	; (800ee18 <test_execute.isra.0+0x2e8>)
 800eba8:	1ac0      	subs	r0, r0, r3
 800ebaa:	f7f7 ff79 	bl	8006aa0 <test_printn>
    test_println(" bytes");
 800ebae:	4897      	ldr	r0, [pc, #604]	; (800ee0c <test_execute.isra.0+0x2dc>)
 800ebb0:	f7f7 fce6 	bl	8006580 <test_println>
    test_print("*** Data size:    ");
 800ebb4:	4899      	ldr	r0, [pc, #612]	; (800ee1c <test_execute.isra.0+0x2ec>)
 800ebb6:	f7f7 fccb 	bl	8006550 <test_print>
    test_printn((uint32_t)(&__data_end__ - &__data_base__));
 800ebba:	4b99      	ldr	r3, [pc, #612]	; (800ee20 <test_execute.isra.0+0x2f0>)
 800ebbc:	4899      	ldr	r0, [pc, #612]	; (800ee24 <test_execute.isra.0+0x2f4>)
 800ebbe:	1ac0      	subs	r0, r0, r3
 800ebc0:	f7f7 ff6e 	bl	8006aa0 <test_printn>
    test_println(" bytes");
 800ebc4:	4891      	ldr	r0, [pc, #580]	; (800ee0c <test_execute.isra.0+0x2dc>)
 800ebc6:	f7f7 fcdb 	bl	8006580 <test_println>
    test_print("*** BSS size:     ");
 800ebca:	4897      	ldr	r0, [pc, #604]	; (800ee28 <test_execute.isra.0+0x2f8>)
 800ebcc:	f7f7 fcc0 	bl	8006550 <test_print>
    test_printn((uint32_t)(&__bss_end__ - &__bss_base__));
 800ebd0:	4b96      	ldr	r3, [pc, #600]	; (800ee2c <test_execute.isra.0+0x2fc>)
 800ebd2:	4897      	ldr	r0, [pc, #604]	; (800ee30 <test_execute.isra.0+0x300>)
 800ebd4:	1ac0      	subs	r0, r0, r3
 800ebd6:	f7f7 ff63 	bl	8006aa0 <test_printn>
    test_println(" bytes");
 800ebda:	488c      	ldr	r0, [pc, #560]	; (800ee0c <test_execute.isra.0+0x2dc>)
 800ebdc:	f7f7 fcd0 	bl	8006580 <test_println>
  }
#endif
#if defined(TEST_REPORT_HOOK_HEADER)
  TEST_REPORT_HOOK_HEADER
#endif
  test_println("");
 800ebe0:	487e      	ldr	r0, [pc, #504]	; (800eddc <test_execute.isra.0+0x2ac>)
 800ebe2:	f7f7 fccd 	bl	8006580 <test_println>

  test_global_fail = false;
 800ebe6:	2300      	movs	r3, #0
  tseq = 0;
  while (tsp->sequences[tseq] != NULL) {
 800ebe8:	687a      	ldr	r2, [r7, #4]
  test_global_fail = false;
 800ebea:	4992      	ldr	r1, [pc, #584]	; (800ee34 <test_execute.isra.0+0x304>)
  while (tsp->sequences[tseq] != NULL) {
 800ebec:	6812      	ldr	r2, [r2, #0]
  test_global_fail = false;
 800ebee:	700b      	strb	r3, [r1, #0]
  while (tsp->sequences[tseq] != NULL) {
 800ebf0:	2a00      	cmp	r2, #0
 800ebf2:	f000 8196 	beq.w	800ef22 <test_execute.isra.0+0x3f2>
 800ebf6:	4698      	mov	r8, r3
  tseq = 0;
 800ebf8:	4699      	mov	r9, r3
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800ebfa:	f8df b23c 	ldr.w	fp, [pc, #572]	; 800ee38 <test_execute.isra.0+0x308>
  tseq = 0;
 800ebfe:	254c      	movs	r5, #76	; 0x4c
    streamPut(test_chp, '=');
 800ec00:	6820      	ldr	r0, [r4, #0]
 800ec02:	213d      	movs	r1, #61	; 0x3d
 800ec04:	6803      	ldr	r3, [r0, #0]
 800ec06:	68db      	ldr	r3, [r3, #12]
 800ec08:	4798      	blx	r3
  for (i = 0; i < 76; i++)
 800ec0a:	3d01      	subs	r5, #1
 800ec0c:	d1f8      	bne.n	800ec00 <test_execute.isra.0+0xd0>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800ec0e:	6820      	ldr	r0, [r4, #0]
 800ec10:	4659      	mov	r1, fp
 800ec12:	6803      	ldr	r3, [r0, #0]
 800ec14:	2202      	movs	r2, #2
 800ec16:	685b      	ldr	r3, [r3, #4]
 800ec18:	4798      	blx	r3
  while (*msgp)
 800ec1a:	213d      	movs	r1, #61	; 0x3d
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800ec1c:	4d87      	ldr	r5, [pc, #540]	; (800ee3c <test_execute.isra.0+0x30c>)
    streamPut(test_chp, *msgp++);
 800ec1e:	6820      	ldr	r0, [r4, #0]
 800ec20:	6803      	ldr	r3, [r0, #0]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	4798      	blx	r3
  while (*msgp)
 800ec26:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800ec2a:	2900      	cmp	r1, #0
 800ec2c:	d1f7      	bne.n	800ec1e <test_execute.isra.0+0xee>
#if TEST_CFG_SHOW_SEQUENCES == TRUE
    print_fat_line();
    test_print("=== Test Sequence ");
    test_printn(tseq + 1);
 800ec2e:	f109 0901 	add.w	r9, r9, #1
 800ec32:	4648      	mov	r0, r9
 800ec34:	f7f7 ff04 	bl	8006a40 <test_printn.part.0>
  while (*msgp)
 800ec38:	2120      	movs	r1, #32
 800ec3a:	4d81      	ldr	r5, [pc, #516]	; (800ee40 <test_execute.isra.0+0x310>)
    streamPut(test_chp, *msgp++);
 800ec3c:	6820      	ldr	r0, [r4, #0]
 800ec3e:	6803      	ldr	r3, [r0, #0]
 800ec40:	68db      	ldr	r3, [r3, #12]
 800ec42:	4798      	blx	r3
  while (*msgp)
 800ec44:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800ec48:	2900      	cmp	r1, #0
 800ec4a:	d1f7      	bne.n	800ec3c <test_execute.isra.0+0x10c>
    test_print(" (");
    test_print(tsp->sequences[tseq]->name);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f853 3008 	ldr.w	r3, [r3, r8]
 800ec52:	681d      	ldr	r5, [r3, #0]
  while (*msgp)
 800ec54:	7829      	ldrb	r1, [r5, #0]
 800ec56:	b139      	cbz	r1, 800ec68 <test_execute.isra.0+0x138>
    streamPut(test_chp, *msgp++);
 800ec58:	6820      	ldr	r0, [r4, #0]
 800ec5a:	6803      	ldr	r3, [r0, #0]
 800ec5c:	68db      	ldr	r3, [r3, #12]
 800ec5e:	4798      	blx	r3
  while (*msgp)
 800ec60:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800ec64:	2900      	cmp	r1, #0
 800ec66:	d1f7      	bne.n	800ec58 <test_execute.isra.0+0x128>
    test_println(")");
 800ec68:	4876      	ldr	r0, [pc, #472]	; (800ee44 <test_execute.isra.0+0x314>)
 800ec6a:	f7f7 fc89 	bl	8006580 <test_println>
#endif
    tcase = 0;
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	f853 2008 	ldr.w	r2, [r3, r8]
 800ec74:	6852      	ldr	r2, [r2, #4]
 800ec76:	6812      	ldr	r2, [r2, #0]
 800ec78:	2a00      	cmp	r2, #0
 800ec7a:	f000 814b 	beq.w	800ef14 <test_execute.isra.0+0x3e4>
    tcase = 0;
 800ec7e:	2500      	movs	r5, #0
 800ec80:	f8df a1c4 	ldr.w	sl, [pc, #452]	; 800ee48 <test_execute.isra.0+0x318>
      print_line();
 800ec84:	f7f6 fe04 	bl	8005890 <print_line.lto_priv.0>
  while (*msgp)
 800ec88:	212d      	movs	r1, #45	; 0x2d
 800ec8a:	00ab      	lsls	r3, r5, #2
      print_line();
 800ec8c:	4e6f      	ldr	r6, [pc, #444]	; (800ee4c <test_execute.isra.0+0x31c>)
 800ec8e:	9300      	str	r3, [sp, #0]
    streamPut(test_chp, *msgp++);
 800ec90:	6820      	ldr	r0, [r4, #0]
 800ec92:	6803      	ldr	r3, [r0, #0]
 800ec94:	68db      	ldr	r3, [r3, #12]
 800ec96:	4798      	blx	r3
  while (*msgp)
 800ec98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ec9c:	2900      	cmp	r1, #0
 800ec9e:	d1f7      	bne.n	800ec90 <test_execute.isra.0+0x160>
 800eca0:	4648      	mov	r0, r9
 800eca2:	f7f7 fecd 	bl	8006a40 <test_printn.part.0>
    streamPut(test_chp, *msgp++);
 800eca6:	6820      	ldr	r0, [r4, #0]
 800eca8:	212e      	movs	r1, #46	; 0x2e
 800ecaa:	6803      	ldr	r3, [r0, #0]
      test_print("--- Test Case ");
      test_printn(tseq + 1);
      test_print(".");
      test_printn(tcase + 1);
 800ecac:	3501      	adds	r5, #1
    streamPut(test_chp, *msgp++);
 800ecae:	68db      	ldr	r3, [r3, #12]
 800ecb0:	4798      	blx	r3
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f7f7 fec4 	bl	8006a40 <test_printn.part.0>
  while (*msgp)
 800ecb8:	2120      	movs	r1, #32
 800ecba:	4e61      	ldr	r6, [pc, #388]	; (800ee40 <test_execute.isra.0+0x310>)
    streamPut(test_chp, *msgp++);
 800ecbc:	6820      	ldr	r0, [r4, #0]
 800ecbe:	6803      	ldr	r3, [r0, #0]
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	4798      	blx	r3
  while (*msgp)
 800ecc4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ecc8:	2900      	cmp	r1, #0
 800ecca:	d1f7      	bne.n	800ecbc <test_execute.isra.0+0x18c>
      test_print(" (");
      test_print(tsp->sequences[tseq]->cases[tcase]->name);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	9a00      	ldr	r2, [sp, #0]
 800ecd0:	f853 3008 	ldr.w	r3, [r3, r8]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	589b      	ldr	r3, [r3, r2]
 800ecd8:	681e      	ldr	r6, [r3, #0]
  while (*msgp)
 800ecda:	7831      	ldrb	r1, [r6, #0]
 800ecdc:	b139      	cbz	r1, 800ecee <test_execute.isra.0+0x1be>
    streamPut(test_chp, *msgp++);
 800ecde:	6820      	ldr	r0, [r4, #0]
 800ece0:	6803      	ldr	r3, [r0, #0]
 800ece2:	68db      	ldr	r3, [r3, #12]
 800ece4:	4798      	blx	r3
  while (*msgp)
 800ece6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ecea:	2900      	cmp	r1, #0
 800ecec:	d1f7      	bne.n	800ecde <test_execute.isra.0+0x1ae>
    streamPut(test_chp, *msgp++);
 800ecee:	6820      	ldr	r0, [r4, #0]
 800ecf0:	2129      	movs	r1, #41	; 0x29
 800ecf2:	6803      	ldr	r3, [r0, #0]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	4798      	blx	r3
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800ecf8:	6820      	ldr	r0, [r4, #0]
 800ecfa:	2202      	movs	r2, #2
 800ecfc:	6803      	ldr	r3, [r0, #0]
 800ecfe:	4659      	mov	r1, fp
 800ed00:	685b      	ldr	r3, [r3, #4]
 800ed02:	4798      	blx	r3
 800ed04:	2320      	movs	r3, #32
 800ed06:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 800ed0a:	e9da 230c 	ldrd	r2, r3, [sl, #48]	; 0x30
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	f040 8118 	bne.w	800ef44 <test_execute.isra.0+0x414>
  _dbg_enter_lock();
 800ed14:	2301      	movs	r3, #1
    chVTDoSetI(&vt, timeout, wakeup, currp);
 800ed16:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800ed1a:	4a4d      	ldr	r2, [pc, #308]	; (800ee50 <test_execute.isra.0+0x320>)
 800ed1c:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 800ed20:	a803      	add	r0, sp, #12
 800ed22:	f8da 3018 	ldr.w	r3, [sl, #24]
 800ed26:	f7f3 f903 	bl	8001f30 <chVTDoSetI>
    chSchGoSleepS(newstate);
 800ed2a:	2008      	movs	r0, #8
 800ed2c:	f7f3 fad8 	bl	80022e0 <chSchGoSleepS>
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800ed30:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	f2c0 810c 	blt.w	800ef52 <test_execute.isra.0+0x422>
 800ed3a:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 800ed3e:	2a00      	cmp	r2, #0
 800ed40:	f340 8107 	ble.w	800ef52 <test_execute.isra.0+0x422>
    if (chVTIsArmedI(&vt)) {
 800ed44:	9a06      	ldr	r2, [sp, #24]
 800ed46:	b122      	cbz	r2, 800ed52 <test_execute.isra.0+0x222>
      chVTDoResetI(&vt);
 800ed48:	a803      	add	r0, sp, #12
 800ed4a:	f7f3 f989 	bl	8002060 <chVTDoResetI>
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 800ed4e:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	f040 8102 	bne.w	800ef5c <test_execute.isra.0+0x42c>
 800ed58:	f8da 2034 	ldr.w	r2, [sl, #52]	; 0x34
 800ed5c:	2a00      	cmp	r2, #0
 800ed5e:	f340 80fd 	ble.w	800ef5c <test_execute.isra.0+0x42c>
  _dbg_leave_lock();
 800ed62:	f8ca 3034 	str.w	r3, [sl, #52]	; 0x34
 800ed66:	f8da 3000 	ldr.w	r3, [sl]
  return currp->u.rdymsg;
 800ed6a:	f8da 2018 	ldr.w	r2, [sl, #24]
 800ed6e:	4553      	cmp	r3, sl
 800ed70:	d004      	beq.n	800ed7c <test_execute.isra.0+0x24c>
 800ed72:	6892      	ldr	r2, [r2, #8]
 800ed74:	689b      	ldr	r3, [r3, #8]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	f0c0 80f6 	bcc.w	800ef68 <test_execute.isra.0+0x438>
 800ed7c:	2200      	movs	r2, #0
 800ed7e:	f382 8811 	msr	BASEPRI, r2
      test_println(")");
#if TEST_CFG_DELAY_BETWEEN_TESTS > 0
      osalThreadSleepMilliseconds(TEST_CFG_DELAY_BETWEEN_TESTS);
#endif
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	9900      	ldr	r1, [sp, #0]
 800ed86:	f853 3008 	ldr.w	r3, [r3, r8]
  test_tokp = test_tokens_buffer;
 800ed8a:	4832      	ldr	r0, [pc, #200]	; (800ee54 <test_execute.isra.0+0x324>)
      execute_test(tsp->sequences[tseq]->cases[tcase]);
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	585b      	ldr	r3, [r3, r1]
  test_tokp = test_tokens_buffer;
 800ed90:	4931      	ldr	r1, [pc, #196]	; (800ee58 <test_execute.isra.0+0x328>)
 800ed92:	6008      	str	r0, [r1, #0]
  test_local_fail = false;
 800ed94:	4931      	ldr	r1, [pc, #196]	; (800ee5c <test_execute.isra.0+0x32c>)
 800ed96:	700a      	strb	r2, [r1, #0]
  if (tcp->setup != NULL)
 800ed98:	685a      	ldr	r2, [r3, #4]
 800ed9a:	b112      	cbz	r2, 800eda2 <test_execute.isra.0+0x272>
 800ed9c:	9301      	str	r3, [sp, #4]
    tcp->setup();
 800ed9e:	4790      	blx	r2
 800eda0:	9b01      	ldr	r3, [sp, #4]
  tcp->execute();
 800eda2:	68da      	ldr	r2, [r3, #12]
 800eda4:	9301      	str	r3, [sp, #4]
 800eda6:	4790      	blx	r2
  if (tcp->teardown != NULL)
 800eda8:	9b01      	ldr	r3, [sp, #4]
 800edaa:	689b      	ldr	r3, [r3, #8]
 800edac:	b103      	cbz	r3, 800edb0 <test_execute.isra.0+0x280>
    tcp->teardown();
 800edae:	4798      	blx	r3
      if (test_local_fail) {
 800edb0:	4b2a      	ldr	r3, [pc, #168]	; (800ee5c <test_execute.isra.0+0x32c>)
  while (*msgp)
 800edb2:	212d      	movs	r1, #45	; 0x2d
      if (test_local_fail) {
 800edb4:	781b      	ldrb	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f000 80d9 	beq.w	800ef6e <test_execute.isra.0+0x43e>
 800edbc:	4b28      	ldr	r3, [pc, #160]	; (800ee60 <test_execute.isra.0+0x330>)
 800edbe:	461e      	mov	r6, r3
    streamPut(test_chp, *msgp++);
 800edc0:	6820      	ldr	r0, [r4, #0]
 800edc2:	6803      	ldr	r3, [r0, #0]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	4798      	blx	r3
  while (*msgp)
 800edc8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800edcc:	2900      	cmp	r1, #0
 800edce:	d1f7      	bne.n	800edc0 <test_execute.isra.0+0x290>
        test_print("--- Result: FAILURE (#");
        test_printn(test_step);
 800edd0:	4b24      	ldr	r3, [pc, #144]	; (800ee64 <test_execute.isra.0+0x334>)
 800edd2:	6818      	ldr	r0, [r3, #0]
 800edd4:	e048      	b.n	800ee68 <test_execute.isra.0+0x338>
 800edd6:	bf00      	nop
 800edd8:	20001d30 	.word	0x20001d30
 800eddc:	0800f35c 	.word	0x0800f35c
 800ede0:	08012048 	.word	0x08012048
 800ede4:	08012060 	.word	0x08012060
 800ede8:	08012064 	.word	0x08012064
 800edec:	08012078 	.word	0x08012078
 800edf0:	08012090 	.word	0x08012090
 800edf4:	0800f40c 	.word	0x0800f40c
 800edf8:	080120a4 	.word	0x080120a4
 800edfc:	0800f44c 	.word	0x0800f44c
 800ee00:	080120b8 	.word	0x080120b8
 800ee04:	08000160 	.word	0x08000160
 800ee08:	0800f200 	.word	0x0800f200
 800ee0c:	080118dc 	.word	0x080118dc
 800ee10:	080120cc 	.word	0x080120cc
 800ee14:	0800f200 	.word	0x0800f200
 800ee18:	08012430 	.word	0x08012430
 800ee1c:	080120e0 	.word	0x080120e0
 800ee20:	20000800 	.word	0x20000800
 800ee24:	20000ce8 	.word	0x20000ce8
 800ee28:	080120f4 	.word	0x080120f4
 800ee2c:	20000ce8 	.word	0x20000ce8
 800ee30:	20002c98 	.word	0x20002c98
 800ee34:	20001d38 	.word	0x20001d38
 800ee38:	08011d88 	.word	0x08011d88
 800ee3c:	08011fe8 	.word	0x08011fe8
 800ee40:	08011ffc 	.word	0x08011ffc
 800ee44:	08012118 	.word	0x08012118
 800ee48:	20000d70 	.word	0x20000d70
 800ee4c:	08012000 	.word	0x08012000
 800ee50:	08002161 	.word	0x08002161
 800ee54:	20001d40 	.word	0x20001d40
 800ee58:	20001d50 	.word	0x20001d50
 800ee5c:	20001d39 	.word	0x20001d39
 800ee60:	08012010 	.word	0x08012010
 800ee64:	20001d3c 	.word	0x20001d3c
  if (!n)
 800ee68:	2800      	cmp	r0, #0
 800ee6a:	d17a      	bne.n	800ef62 <test_execute.isra.0+0x432>
    streamPut(test_chp, '0');
 800ee6c:	6820      	ldr	r0, [r4, #0]
 800ee6e:	2130      	movs	r1, #48	; 0x30
 800ee70:	6803      	ldr	r3, [r0, #0]
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	4798      	blx	r3
  while (*msgp)
 800ee76:	4b43      	ldr	r3, [pc, #268]	; (800ef84 <test_execute.isra.0+0x454>)
 800ee78:	2120      	movs	r1, #32
 800ee7a:	461e      	mov	r6, r3
    streamPut(test_chp, *msgp++);
 800ee7c:	6820      	ldr	r0, [r4, #0]
 800ee7e:	6803      	ldr	r3, [r0, #0]
 800ee80:	68db      	ldr	r3, [r3, #12]
 800ee82:	4798      	blx	r3
  while (*msgp)
 800ee84:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee88:	2900      	cmp	r1, #0
 800ee8a:	d1f7      	bne.n	800ee7c <test_execute.isra.0+0x34c>
  while (cp < test_tokp)
 800ee8c:	4b3e      	ldr	r3, [pc, #248]	; (800ef88 <test_execute.isra.0+0x458>)
 800ee8e:	4a3f      	ldr	r2, [pc, #252]	; (800ef8c <test_execute.isra.0+0x45c>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	4293      	cmp	r3, r2
 800ee94:	d90b      	bls.n	800eeae <test_execute.isra.0+0x37e>
  char *cp = test_tokens_buffer;
 800ee96:	4b3d      	ldr	r3, [pc, #244]	; (800ef8c <test_execute.isra.0+0x45c>)
 800ee98:	461e      	mov	r6, r3
    streamPut(test_chp, *cp++);
 800ee9a:	6820      	ldr	r0, [r4, #0]
 800ee9c:	f816 1b01 	ldrb.w	r1, [r6], #1
 800eea0:	6803      	ldr	r3, [r0, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	4798      	blx	r3
  while (cp < test_tokp)
 800eea6:	4b38      	ldr	r3, [pc, #224]	; (800ef88 <test_execute.isra.0+0x458>)
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	429e      	cmp	r6, r3
 800eeac:	d3f5      	bcc.n	800ee9a <test_execute.isra.0+0x36a>
  while (*msgp)
 800eeae:	4b38      	ldr	r3, [pc, #224]	; (800ef90 <test_execute.isra.0+0x460>)
 800eeb0:	215d      	movs	r1, #93	; 0x5d
 800eeb2:	461e      	mov	r6, r3
    streamPut(test_chp, *msgp++);
 800eeb4:	6820      	ldr	r0, [r4, #0]
 800eeb6:	6803      	ldr	r3, [r0, #0]
 800eeb8:	68db      	ldr	r3, [r3, #12]
 800eeba:	4798      	blx	r3
  while (*msgp)
 800eebc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eec0:	2900      	cmp	r1, #0
 800eec2:	d1f7      	bne.n	800eeb4 <test_execute.isra.0+0x384>
        test_print(" [");
        print_tokens();
        test_print("] \"");
        test_print(test_failure_message);
 800eec4:	4b33      	ldr	r3, [pc, #204]	; (800ef94 <test_execute.isra.0+0x464>)
 800eec6:	681b      	ldr	r3, [r3, #0]
  while (*msgp)
 800eec8:	7819      	ldrb	r1, [r3, #0]
 800eeca:	461e      	mov	r6, r3
 800eecc:	b139      	cbz	r1, 800eede <test_execute.isra.0+0x3ae>
    streamPut(test_chp, *msgp++);
 800eece:	6820      	ldr	r0, [r4, #0]
 800eed0:	6803      	ldr	r3, [r0, #0]
 800eed2:	68db      	ldr	r3, [r3, #12]
 800eed4:	4798      	blx	r3
  while (*msgp)
 800eed6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eeda:	2900      	cmp	r1, #0
 800eedc:	d1f7      	bne.n	800eece <test_execute.isra.0+0x39e>
 800eede:	4b2e      	ldr	r3, [pc, #184]	; (800ef98 <test_execute.isra.0+0x468>)
 800eee0:	2122      	movs	r1, #34	; 0x22
 800eee2:	461e      	mov	r6, r3
    streamPut(test_chp, *msgp++);
 800eee4:	6820      	ldr	r0, [r4, #0]
 800eee6:	6803      	ldr	r3, [r0, #0]
 800eee8:	68db      	ldr	r3, [r3, #12]
 800eeea:	4798      	blx	r3
  while (*msgp)
 800eeec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eef0:	2900      	cmp	r1, #0
 800eef2:	d1f7      	bne.n	800eee4 <test_execute.isra.0+0x3b4>
  streamWrite(test_chp, (const uint8_t *)"\r\n", 2);
 800eef4:	6820      	ldr	r0, [r4, #0]
 800eef6:	2202      	movs	r2, #2
 800eef8:	6803      	ldr	r3, [r0, #0]
 800eefa:	4659      	mov	r1, fp
 800eefc:	685b      	ldr	r3, [r3, #4]
 800eefe:	4798      	blx	r3
    while (tsp->sequences[tseq]->cases[tcase] != NULL) {
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	9e00      	ldr	r6, [sp, #0]
 800ef04:	f853 2008 	ldr.w	r2, [r3, r8]
 800ef08:	6852      	ldr	r2, [r2, #4]
 800ef0a:	4416      	add	r6, r2
 800ef0c:	6872      	ldr	r2, [r6, #4]
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	f47f aeb8 	bne.w	800ec84 <test_execute.isra.0+0x154>
  while (tsp->sequences[tseq] != NULL) {
 800ef14:	f108 0804 	add.w	r8, r8, #4
 800ef18:	f853 3008 	ldr.w	r3, [r3, r8]
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	f47f ae6e 	bne.w	800ebfe <test_execute.isra.0+0xce>
      }
      tcase++;
    }
    tseq++;
  }
  print_line();
 800ef22:	f7f6 fcb5 	bl	8005890 <print_line.lto_priv.0>
  test_println("");
 800ef26:	481d      	ldr	r0, [pc, #116]	; (800ef9c <test_execute.isra.0+0x46c>)
 800ef28:	f7f7 fb2a 	bl	8006580 <test_println>
  test_print("Final result: ");
 800ef2c:	481c      	ldr	r0, [pc, #112]	; (800efa0 <test_execute.isra.0+0x470>)
 800ef2e:	f7f7 fb0f 	bl	8006550 <test_print>
  if (test_global_fail)
 800ef32:	4b1c      	ldr	r3, [pc, #112]	; (800efa4 <test_execute.isra.0+0x474>)
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	b17b      	cbz	r3, 800ef58 <test_execute.isra.0+0x428>
    test_println("FAILURE");
 800ef38:	481b      	ldr	r0, [pc, #108]	; (800efa8 <test_execute.isra.0+0x478>)
#if defined(TEST_REPORT_HOOK_END)
  TEST_REPORT_HOOK_END
#endif

  return (msg_t)test_global_fail;
}
 800ef3a:	b009      	add	sp, #36	; 0x24
 800ef3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    test_println("SUCCESS");
 800ef40:	f7f7 bb1e 	b.w	8006580 <test_println>
    chSysHalt("SV#4");
 800ef44:	4819      	ldr	r0, [pc, #100]	; (800efac <test_execute.isra.0+0x47c>)
 800ef46:	f7f1 fc13 	bl	8000770 <chSysHalt>
    test_println("*** Test Suite");
 800ef4a:	4819      	ldr	r0, [pc, #100]	; (800efb0 <test_execute.isra.0+0x480>)
 800ef4c:	f7f7 fb18 	bl	8006580 <test_println>
 800ef50:	e602      	b.n	800eb58 <test_execute.isra.0+0x28>
    chSysHalt("SV#10");
 800ef52:	4818      	ldr	r0, [pc, #96]	; (800efb4 <test_execute.isra.0+0x484>)
 800ef54:	f7f1 fc0c 	bl	8000770 <chSysHalt>
    test_println("SUCCESS");
 800ef58:	4817      	ldr	r0, [pc, #92]	; (800efb8 <test_execute.isra.0+0x488>)
 800ef5a:	e7ee      	b.n	800ef3a <test_execute.isra.0+0x40a>
    chSysHalt("SV#5");
 800ef5c:	4817      	ldr	r0, [pc, #92]	; (800efbc <test_execute.isra.0+0x48c>)
 800ef5e:	f7f1 fc07 	bl	8000770 <chSysHalt>
 800ef62:	f7f7 fd6d 	bl	8006a40 <test_printn.part.0>
 800ef66:	e786      	b.n	800ee76 <test_execute.isra.0+0x346>
 800ef68:	4815      	ldr	r0, [pc, #84]	; (800efc0 <test_execute.isra.0+0x490>)
 800ef6a:	f7f1 fc01 	bl	8000770 <chSysHalt>
      if (test_local_fail) {
 800ef6e:	4b15      	ldr	r3, [pc, #84]	; (800efc4 <test_execute.isra.0+0x494>)
 800ef70:	461e      	mov	r6, r3
    streamPut(test_chp, *msgp++);
 800ef72:	6820      	ldr	r0, [r4, #0]
 800ef74:	6803      	ldr	r3, [r0, #0]
 800ef76:	68db      	ldr	r3, [r3, #12]
 800ef78:	4798      	blx	r3
  while (*msgp)
 800ef7a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ef7e:	2900      	cmp	r1, #0
 800ef80:	d1f7      	bne.n	800ef72 <test_execute.isra.0+0x442>
 800ef82:	e7b7      	b.n	800eef4 <test_execute.isra.0+0x3c4>
 800ef84:	08012028 	.word	0x08012028
 800ef88:	20001d50 	.word	0x20001d50
 800ef8c:	20001d40 	.word	0x20001d40
 800ef90:	0801202c 	.word	0x0801202c
 800ef94:	20001d34 	.word	0x20001d34
 800ef98:	08012030 	.word	0x08012030
 800ef9c:	0800f35c 	.word	0x0800f35c
 800efa0:	08012108 	.word	0x08012108
 800efa4:	20001d38 	.word	0x20001d38
 800efa8:	0801211c 	.word	0x0801211c
 800efac:	0800f20c 	.word	0x0800f20c
 800efb0:	08012050 	.word	0x08012050
 800efb4:	0800f22c 	.word	0x0800f22c
 800efb8:	08012040 	.word	0x08012040
 800efbc:	0800f214 	.word	0x0800f214
 800efc0:	08010de4 	.word	0x08010de4
 800efc4:	08012034 	.word	0x08012034
	...

0800efd0 <sdu_start_receive.isra.0>:
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 800efd0:	b570      	push	{r4, r5, r6, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800efd2:	f8d0 548c 	ldr.w	r5, [r0, #1164]	; 0x48c
 800efd6:	682e      	ldr	r6, [r5, #0]
 800efd8:	7833      	ldrb	r3, [r6, #0]
 800efda:	2b04      	cmp	r3, #4
 800efdc:	d103      	bne.n	800efe6 <sdu_start_receive.isra.0+0x16>
 800efde:	7a03      	ldrb	r3, [r0, #8]
 800efe0:	4604      	mov	r4, r0
 800efe2:	2b02      	cmp	r3, #2
 800efe4:	d000      	beq.n	800efe8 <sdu_start_receive.isra.0+0x18>
}
 800efe6:	bd70      	pop	{r4, r5, r6, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800efe8:	2301      	movs	r3, #1
 800efea:	7929      	ldrb	r1, [r5, #4]
 800efec:	8972      	ldrh	r2, [r6, #10]
 800efee:	408b      	lsls	r3, r1
 800eff0:	4213      	tst	r3, r2
 800eff2:	d1f8      	bne.n	800efe6 <sdu_start_receive.isra.0+0x16>
  osalDbgCheckClassI();
 800eff4:	f7f1 fca4 	bl	8000940 <chDbgCheckClassI>
  if (ibqIsFullI(ibqp)) {
 800eff8:	e9d4 2307 	ldrd	r2, r3, [r4, #28]
 800effc:	429a      	cmp	r2, r3
 800effe:	d008      	beq.n	800f012 <sdu_start_receive.isra.0+0x42>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800f000:	4630      	mov	r0, r6
 800f002:	7969      	ldrb	r1, [r5, #5]
 800f004:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800f008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 800f00c:	3204      	adds	r2, #4
 800f00e:	f7f1 bca7 	b.w	8000960 <usbStartReceiveI>
 800f012:	69a3      	ldr	r3, [r4, #24]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d0f3      	beq.n	800f000 <sdu_start_receive.isra.0+0x30>
}
 800f018:	bd70      	pop	{r4, r5, r6, pc}
 800f01a:	bf00      	nop
 800f01c:	0000      	movs	r0, r0
	...

0800f020 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 800f020:	b570      	push	{r4, r5, r6, lr}
 800f022:	2905      	cmp	r1, #5
 800f024:	d822      	bhi.n	800f06c <usb_event+0x4c>
 800f026:	e8df f001 	tbb	[pc, r1]
 800f02a:	2103      	.short	0x2103
 800f02c:	22030335 	.word	0x22030335
 800f030:	2320      	movs	r3, #32
 800f032:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 800f036:	4c34      	ldr	r4, [pc, #208]	; (800f108 <usb_event+0xe8>)
  _dbg_check_lock_from_isr();
 800f038:	f7f1 fc52 	bl	80008e0 <_dbg_check_lock_from_isr>
 800f03c:	7d23      	ldrb	r3, [r4, #20]
 800f03e:	b113      	cbz	r3, 800f046 <usb_event+0x26>
 800f040:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 800f044:	b96b      	cbnz	r3, 800f062 <usb_event+0x42>
  bqSuspendI(&sdup->ibqueue);
 800f046:	2501      	movs	r5, #1
  chEvtBroadcastFlagsI(esp, flags);
 800f048:	2102      	movs	r1, #2
 800f04a:	4830      	ldr	r0, [pc, #192]	; (800f10c <usb_event+0xec>)
 800f04c:	f7f4 fe70 	bl	8003d30 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 800f050:	482f      	ldr	r0, [pc, #188]	; (800f110 <usb_event+0xf0>)
 800f052:	7525      	strb	r5, [r4, #20]
 800f054:	f7fa f94c 	bl	80092f0 <chThdDequeueAllI.constprop.0>
 800f058:	482e      	ldr	r0, [pc, #184]	; (800f114 <usb_event+0xf4>)
  bqSuspendI(&sdup->obqueue);
 800f05a:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800f05e:	f7fa f947 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  _dbg_check_unlock_from_isr();
 800f062:	f7f1 fc55 	bl	8000910 <_dbg_check_unlock_from_isr>
 800f066:	2300      	movs	r3, #0
 800f068:	f383 8811 	msr	BASEPRI, r3
}
 800f06c:	bd70      	pop	{r4, r5, r6, pc}
 800f06e:	2320      	movs	r3, #32
 800f070:	f383 8811 	msr	BASEPRI, r3
  bqResumeX(&sdup->ibqueue);
 800f074:	2400      	movs	r4, #0
  chEvtBroadcastFlagsI(esp, flags);
 800f076:	4d24      	ldr	r5, [pc, #144]	; (800f108 <usb_event+0xe8>)
  _dbg_check_lock_from_isr();
 800f078:	f7f1 fc32 	bl	80008e0 <_dbg_check_lock_from_isr>
 800f07c:	2101      	movs	r1, #1
 800f07e:	1d28      	adds	r0, r5, #4
 800f080:	f7f4 fe56 	bl	8003d30 <chEvtBroadcastFlagsI>
 800f084:	752c      	strb	r4, [r5, #20]
  bqResumeX(&sdup->obqueue);
 800f086:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
  _dbg_check_unlock_from_isr();
 800f08a:	f7f1 fc41 	bl	8000910 <_dbg_check_unlock_from_isr>
 800f08e:	f384 8811 	msr	BASEPRI, r4
 800f092:	bd70      	pop	{r4, r5, r6, pc}
 800f094:	4605      	mov	r5, r0
 800f096:	2320      	movs	r3, #32
 800f098:	f383 8811 	msr	BASEPRI, r3
  ibqp->bcounter  = 0;
 800f09c:	2600      	movs	r6, #0
 800f09e:	4c1a      	ldr	r4, [pc, #104]	; (800f108 <usb_event+0xe8>)
  _dbg_check_lock_from_isr();
 800f0a0:	f7f1 fc1e 	bl	80008e0 <_dbg_check_lock_from_isr>
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800f0a4:	4628      	mov	r0, r5
 800f0a6:	2101      	movs	r1, #1
 800f0a8:	4a1b      	ldr	r2, [pc, #108]	; (800f118 <usb_event+0xf8>)
 800f0aa:	f7f2 f969 	bl	8001380 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 800f0ae:	2102      	movs	r1, #2
 800f0b0:	4a1a      	ldr	r2, [pc, #104]	; (800f11c <usb_event+0xfc>)
 800f0b2:	4628      	mov	r0, r5
 800f0b4:	f7f2 f964 	bl	8001380 <usbInitEndpointI>
  osalDbgCheckClassI();
 800f0b8:	f7f1 fc42 	bl	8000940 <chDbgCheckClassI>
  ibqp->brdptr    = ibqp->buffers;
 800f0bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
  chThdDequeueAllI(tqp, msg);
 800f0be:	f104 000c 	add.w	r0, r4, #12
  ibqp->bwrptr    = ibqp->buffers;
 800f0c2:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->top       = NULL;
 800f0c6:	e9c4 660d 	strd	r6, r6, [r4, #52]	; 0x34
  ibqp->bcounter  = 0;
 800f0ca:	61a6      	str	r6, [r4, #24]
 800f0cc:	f7fa f910 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  bqResumeX(&sdup->ibqueue);
 800f0d0:	7526      	strb	r6, [r4, #20]
  osalDbgCheckClassI();
 800f0d2:	f7f1 fc35 	bl	8000940 <chDbgCheckClassI>
  obqp->bcounter  = bqSizeX(obqp);
 800f0d6:	e9d4 2319 	ldrd	r2, r3, [r4, #100]	; 0x64
 800f0da:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bwrptr    = obqp->buffers;
 800f0de:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->bcounter  = bqSizeX(obqp);
 800f0e2:	6522      	str	r2, [r4, #80]	; 0x50
  obqp->top       = NULL;
 800f0e4:	e9c4 661b 	strd	r6, r6, [r4, #108]	; 0x6c
 800f0e8:	f7fa f902 	bl	80092f0 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 800f0ec:	2101      	movs	r1, #1
 800f0ee:	1d20      	adds	r0, r4, #4
  bqResumeX(&sdup->obqueue);
 800f0f0:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
 800f0f4:	f7f4 fe1c 	bl	8003d30 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f7ff ff69 	bl	800efd0 <sdu_start_receive.isra.0>
  _dbg_check_unlock_from_isr();
 800f0fe:	f7f1 fc07 	bl	8000910 <_dbg_check_unlock_from_isr>
 800f102:	f386 8811 	msr	BASEPRI, r6
}
 800f106:	bd70      	pop	{r4, r5, r6, pc}
 800f108:	20001d6c 	.word	0x20001d6c
 800f10c:	20001d70 	.word	0x20001d70
 800f110:	20001d78 	.word	0x20001d78
 800f114:	20001db0 	.word	0x20001db0
 800f118:	08012280 	.word	0x08012280
 800f11c:	080122a4 	.word	0x080122a4

0800f120 <memcmp>:
{
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  unsigned char *s1 = (unsigned char *) m1;
  unsigned char *s2 = (unsigned char *) m2;

  while (n--)
 800f120:	3901      	subs	r1, #1
 800f122:	4402      	add	r2, r0
{
 800f124:	b510      	push	{r4, lr}
  while (n--)
 800f126:	4290      	cmp	r0, r2
 800f128:	d101      	bne.n	800f12e <memcmp+0xe>
	  return *s1 - *s2;
	}
      s1++;
      s2++;
    }
  return 0;
 800f12a:	2000      	movs	r0, #0
 800f12c:	e005      	b.n	800f13a <memcmp+0x1a>
      if (*s1 != *s2)
 800f12e:	7803      	ldrb	r3, [r0, #0]
 800f130:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f134:	42a3      	cmp	r3, r4
 800f136:	d001      	beq.n	800f13c <memcmp+0x1c>
	  return *s1 - *s2;
 800f138:	1b18      	subs	r0, r3, r4
      s2++;
    }

  return 0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800f13a:	bd10      	pop	{r4, pc}
      s1++;
 800f13c:	3001      	adds	r0, #1
      s2++;
 800f13e:	e7f2      	b.n	800f126 <memcmp+0x6>

0800f140 <memcpy>:
  char *dst = (char *) dst0;
  char *src = (char *) src0;

  void *save = dst0;

  while (len0--)
 800f140:	440a      	add	r2, r1
 800f142:	1e43      	subs	r3, r0, #1
 800f144:	4291      	cmp	r1, r2
 800f146:	d100      	bne.n	800f14a <memcpy+0xa>
 800f148:	4770      	bx	lr
{
 800f14a:	b510      	push	{r4, lr}
    {
      *dst++ = *src++;
 800f14c:	f811 4b01 	ldrb.w	r4, [r1], #1
  while (len0--)
 800f150:	4291      	cmp	r1, r2
      *dst++ = *src++;
 800f152:	f803 4f01 	strb.w	r4, [r3, #1]!
  while (len0--)
 800f156:	d1f9      	bne.n	800f14c <memcpy+0xc>
  while (len0--)
    *dst++ = *src++;

  return dst0;
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800f158:	bd10      	pop	{r4, pc}

0800f15a <memset>:
      s = (char*)aligned_addr;
    }

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (n--)
 800f15a:	4402      	add	r2, r0
  char *s = (char *) m;
 800f15c:	4603      	mov	r3, r0
  while (n--)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d100      	bne.n	800f164 <memset+0xa>
    *s++ = (char) c;

  return m;
}
 800f162:	4770      	bx	lr
    *s++ = (char) c;
 800f164:	f803 1b01 	strb.w	r1, [r3], #1
 800f168:	e7f9      	b.n	800f15e <memset+0x4>

0800f16a <strchr>:
char *
strchr (const char *s1,
	int i)
{
  const unsigned char *s = (const unsigned char *)s1;
  unsigned char c = i;
 800f16a:	b2c9      	uxtb	r1, r1

  s = (unsigned char *) aligned_addr;

#endif /* not PREFER_SIZE_OVER_SPEED */

  while (*s && *s != c)
 800f16c:	4603      	mov	r3, r0
 800f16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f172:	b11a      	cbz	r2, 800f17c <strchr+0x12>
 800f174:	428a      	cmp	r2, r1
 800f176:	d1f9      	bne.n	800f16c <strchr+0x2>
    s++;
  if (*s == c)
    return (char *)s;
  return NULL;
}
 800f178:	4618      	mov	r0, r3
 800f17a:	4770      	bx	lr
  return NULL;
 800f17c:	2900      	cmp	r1, #0
 800f17e:	bf18      	it	ne
 800f180:	2300      	movne	r3, #0
 800f182:	e7f9      	b.n	800f178 <strchr+0xe>

0800f184 <strncmp>:

int 
strncmp (const char *s1,
	const char *s2,
	size_t n)
{
 800f184:	b510      	push	{r4, lr}
#if defined(PREFER_SIZE_OVER_SPEED) || defined(__OPTIMIZE_SIZE__)
  if (n == 0)
 800f186:	b17a      	cbz	r2, 800f1a8 <strncmp+0x24>
 800f188:	4603      	mov	r3, r0
 800f18a:	3901      	subs	r1, #1
 800f18c:	1884      	adds	r4, r0, r2
    return 0;

  while (n-- != 0 && *s1 == *s2)
 800f18e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f192:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f196:	4290      	cmp	r0, r2
 800f198:	d101      	bne.n	800f19e <strncmp+0x1a>
    {
      if (n == 0 || *s1 == '\0')
 800f19a:	42a3      	cmp	r3, r4
 800f19c:	d101      	bne.n	800f1a2 <strncmp+0x1e>
	break;
      s1++;
      s2++;
    }

  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
 800f19e:	1a80      	subs	r0, r0, r2
      s1++;
      s2++;
    }
  return (*(unsigned char *) s1) - (*(unsigned char *) s2);
#endif /* not PREFER_SIZE_OVER_SPEED */
}
 800f1a0:	bd10      	pop	{r4, pc}
      if (n == 0 || *s1 == '\0')
 800f1a2:	2800      	cmp	r0, #0
 800f1a4:	d1f3      	bne.n	800f18e <strncmp+0xa>
 800f1a6:	e7fa      	b.n	800f19e <strncmp+0x1a>
    return 0;
 800f1a8:	4610      	mov	r0, r2
 800f1aa:	e7f9      	b.n	800f1a0 <strncmp+0x1c>

0800f1ac <strpbrk>:
#include <string.h>

char *
strpbrk (const char *s1,
	const char *s2)
{
 800f1ac:	b570      	push	{r4, r5, r6, lr}
  const char *c = s2;
  if (!*s1)
 800f1ae:	7803      	ldrb	r3, [r0, #0]
 800f1b0:	b1a3      	cbz	r3, 800f1dc <strpbrk+0x30>
 800f1b2:	4603      	mov	r3, r0
  const char *c = s2;
 800f1b4:	460c      	mov	r4, r1
 800f1b6:	4618      	mov	r0, r3
    return (char *) NULL;

  while (*s1)
 800f1b8:	f813 5b01 	ldrb.w	r5, [r3], #1
 800f1bc:	b14d      	cbz	r5, 800f1d2 <strpbrk+0x26>
 800f1be:	460a      	mov	r2, r1
 800f1c0:	e001      	b.n	800f1c6 <strpbrk+0x1a>
    {
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
 800f1c2:	42ae      	cmp	r6, r5
 800f1c4:	d009      	beq.n	800f1da <strpbrk+0x2e>
 800f1c6:	4614      	mov	r4, r2
      for (c = s2; *c; c++)
 800f1c8:	f812 6b01 	ldrb.w	r6, [r2], #1
 800f1cc:	2e00      	cmp	r6, #0
 800f1ce:	d1f8      	bne.n	800f1c2 <strpbrk+0x16>
 800f1d0:	e7f1      	b.n	800f1b6 <strpbrk+0xa>
      if (*c)
	break;
      s1++;
    }

  if (*c == '\0')
 800f1d2:	7823      	ldrb	r3, [r4, #0]
    s1 = NULL;
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	bf08      	it	eq
 800f1d8:	2000      	moveq	r0, #0

  return (char *) s1;
}
 800f1da:	bd70      	pop	{r4, r5, r6, pc}
    s1 = NULL;
 800f1dc:	4618      	mov	r0, r3
 800f1de:	e7fc      	b.n	800f1da <strpbrk+0x2e>

0800f1e0 <strspn>:
	const char *s2)
{
  const char *s = s1;
  const char *c;

  while (*s1)
 800f1e0:	4603      	mov	r3, r0
{
 800f1e2:	b570      	push	{r4, r5, r6, lr}
 800f1e4:	461e      	mov	r6, r3
  while (*s1)
 800f1e6:	f813 4b01 	ldrb.w	r4, [r3], #1
 800f1ea:	b13c      	cbz	r4, 800f1fc <strspn+0x1c>
 800f1ec:	1e4a      	subs	r2, r1, #1
 800f1ee:	e001      	b.n	800f1f4 <strspn+0x14>
    {
      for (c = s2; *c; c++)
	{
	  if (*s1 == *c)
 800f1f0:	42a5      	cmp	r5, r4
 800f1f2:	d0f7      	beq.n	800f1e4 <strspn+0x4>
      for (c = s2; *c; c++)
 800f1f4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800f1f8:	2d00      	cmp	r5, #0
 800f1fa:	d1f9      	bne.n	800f1f0 <strspn+0x10>
	break;
      s1++;
    }

  return s1 - s;
}
 800f1fc:	1a30      	subs	r0, r6, r0
 800f1fe:	bd70      	pop	{r4, r5, r6, pc}
